{"ast":null,"code":"\"use strict\";\n\nvar _keys = require(\"babel-runtime/core-js/object/keys\");\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _set = require(\"babel-runtime/core-js/set\");\n\nvar _set2 = _interopRequireDefault(_set);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _isInteger = require(\"babel-runtime/core-js/number/is-integer\");\n\nvar _isInteger2 = _interopRequireDefault(_isInteger);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _metadata = require(\"babel-runtime/core-js/reflect/metadata\");\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _defineProperty = require(\"babel-runtime/core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getOwnPropertyDescriptor = require(\"babel-runtime/core-js/object/get-own-property-descriptor\");\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = (0, _getOwnPropertyDescriptor2.default)(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && (0, _defineProperty2.default)(target, key, r), r;\n};\n\nvar __metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof _metadata2.default === \"function\") return (0, _metadata2.default)(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Channel = void 0;\n\nvar events_1 = require(\"events\");\n\nvar logger_1 = require(\"./logger\");\n\nvar members_1 = require(\"./data/members\");\n\nvar member_1 = require(\"./member\");\n\nvar messages_1 = require(\"./data/messages\");\n\nvar util_1 = require(\"./util\");\n\nvar twilio_sdk_type_validator_1 = require(\"twilio-sdk-type-validator\");\n\nvar log = logger_1.Logger.scope('Channel');\nvar fieldMappings = {\n  lastMessage: 'lastMessage',\n  attributes: 'attributes',\n  createdBy: 'createdBy',\n  dateCreated: 'dateCreated',\n  dateUpdated: 'dateUpdated',\n  friendlyName: 'friendlyName',\n  lastConsumedMessageIndex: 'lastConsumedMessageIndex',\n  notificationLevel: 'notificationLevel',\n  sid: 'sid',\n  status: 'status',\n  type: 'type',\n  uniqueName: 'uniqueName',\n  state: 'state'\n};\n\nfunction parseTime(timeString) {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n/**\n * @classdesc A Channel represents a remote channel of communication between multiple Programmable Chat Clients\n * @property {any} attributes - The Channel's custom attributes\n * @property {String} createdBy - The identity of the User that created this Channel\n * @property {Date} dateCreated - The Date this Channel was created\n * @property {Date} dateUpdated - The Date this Channel was last updated\n * @property {String} friendlyName - The Channel's name\n * @property {Boolean} isPrivate - Whether the channel is private (as opposed to public)\n * @property {Number} lastConsumedMessageIndex - Index of the last Message the User has consumed in this Channel\n * @property {Channel#LastMessage} lastMessage - Last Message sent to this Channel\n * @property {Channel#NotificationLevel} notificationLevel - User Notification level for this Channel\n * @property {String} sid - The Channel's unique system identifier\n * @property {Channel#State} state - The Channel's state\n * @property {Channel#Status} status - The Channel's status\n * @property {Channel#Type} type - The Channel's type\n * @property {String} uniqueName - The Channel's unique name (tag)\n * @fires Channel#memberJoined\n * @fires Channel#memberLeft\n * @fires Channel#memberUpdated\n * @fires Channel#messageAdded\n * @fires Channel#messageRemoved\n * @fires Channel#messageUpdated\n * @fires Channel#typingEnded\n * @fires Channel#typingStarted\n * @fires Channel#updated\n * @fires Channel#removed\n */\n\n\nvar Channel = function (_events_1$EventEmitte) {\n  (0, _inherits3.default)(Channel, _events_1$EventEmitte);\n\n  function Channel(descriptor, sid, links, configuration, services) {\n    (0, _classCallCheck3.default)(this, Channel);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Channel.__proto__ || (0, _getPrototypeOf2.default)(Channel)).call(this));\n\n    _this.sid = sid;\n    _this.links = links;\n    _this.configuration = configuration;\n    _this.services = services;\n    var attributes = descriptor.attributes || {};\n    var createdBy = descriptor.createdBy;\n    var dateCreated = parseTime(descriptor.dateCreated);\n    var dateUpdated = parseTime(descriptor.dateUpdated);\n    var friendlyName = descriptor.friendlyName || null;\n    var lastConsumedMessageIndex = (0, _isInteger2.default)(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;\n    var uniqueName = descriptor.uniqueName || null;\n\n    try {\n      (0, _stringify2.default)(attributes);\n    } catch (e) {\n      throw new Error('Attributes must be a valid JSON object.');\n    }\n\n    _this.entityName = descriptor.channel;\n    _this.channelState = {\n      uniqueName: uniqueName,\n      status: 'notParticipating',\n      type: descriptor.type,\n      attributes: attributes,\n      createdBy: createdBy,\n      dateCreated: dateCreated,\n      dateUpdated: dateUpdated,\n      friendlyName: friendlyName,\n      lastConsumedMessageIndex: lastConsumedMessageIndex\n    };\n\n    if (descriptor.notificationLevel) {\n      _this.channelState.notificationLevel = descriptor.notificationLevel;\n    }\n\n    var membersLinks = {\n      participants: _this.links.participants\n    };\n    _this.members = new _map2.default();\n    _this.membersEntity = new members_1.Members(_this, _this.members, membersLinks, _this.configuration, _this.services);\n\n    _this.membersEntity.on('memberJoined', _this.emit.bind(_this, 'memberJoined'));\n\n    _this.membersEntity.on('memberLeft', _this.emit.bind(_this, 'memberLeft'));\n\n    _this.membersEntity.on('memberUpdated', function (args) {\n      return _this.emit('memberUpdated', args);\n    });\n\n    _this.messagesEntity = new messages_1.Messages(_this, _this.configuration, services);\n\n    _this.messagesEntity.on('messageAdded', function (message) {\n      return _this._onMessageAdded(message);\n    });\n\n    _this.messagesEntity.on('messageUpdated', function (args) {\n      return _this.emit('messageUpdated', args);\n    });\n\n    _this.messagesEntity.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n\n    return _this;\n  }\n  /**\n   * The Channel's state. Set to undefined if the channel is not a conversation.\n   * @typedef {Object | undefined} Channel#State\n   * @property {('active' | 'inactive' | 'closed')} current - the current state\n   * @property {Date} dateUpdated - date at which the latest channel state update happened\n   */\n\n  /**\n   * These options can be passed to {@link Channel#sendMessage}.\n   * @typedef {Object} Channel#SendMediaOptions\n   * @property {String} contentType - content type of media\n   * @property {String | Buffer} media - content to post\n   */\n\n  /**\n   * The update reason for <code>updated</code> event emitted on Channel\n   * @typedef {('attributes' | 'createdBy' | 'dateCreated' | 'dateUpdated' |\n    'friendlyName' | 'lastConsumedMessageIndex' | 'state' | 'status' | 'uniqueName' | 'lastMessage' |\n    'notificationLevel' )} Channel#UpdateReason\n   */\n\n  /**\n   * The status of the Channel, relative to the Client: whether the Channel\n   * is <code>notParticipating</code> to local Client, Client is <code>invited</code> to or\n   * is <code>joined</code> to this Channel\n   * @typedef {('unknown' | 'notParticipating' | 'invited' | 'joined')} Channel#Status\n   */\n\n  /**\n   * The type of Channel (<code>public</code> or <code>private</code>).\n   * @typedef {('public' | 'private')} Channel#Type\n   */\n\n  /**\n   * The User's Notification level for Channel, determines whether the currently logged-in User will receive\n   * pushes for events in this Channel. Can be either <code>muted</code> or <code>default</code>,\n   * where <code>default</code> defers to global Service push configuration.\n   * @typedef {('default' | 'muted')} Channel#NotificationLevel\n   */\n\n\n  (0, _createClass3.default)(Channel, [{\n    key: \"_subscribe\",\n\n    /**\n     * The Channel's last message's information.\n     * @typedef {Object} Channel#LastMessage\n     * @property {Number} index - Message's index\n     * @property {Date} dateCreated - Message's creation date\n     */\n\n    /**\n     * Load and Subscribe to this Channel and do not subscribe to its Members and Messages.\n     * This or _subscribeStreams will need to be called before any events on Channel will fire.\n     * @returns {Promise}\n     * @private\n     */\n    value: function _subscribe() {\n      var _this2 = this;\n\n      if (this.entityPromise) {\n        return this.entityPromise;\n      }\n\n      return this.entityPromise = this.entityPromise || this.services.syncClient.document({\n        id: this.entityName,\n        mode: 'open_existing'\n      }).then(function (entity) {\n        _this2.entity = entity;\n\n        _this2.entity.on('updated', function (args) {\n          _this2._update(args.data);\n        });\n\n        _this2.entity.on('removed', function () {\n          return _this2.emit('removed', _this2);\n        });\n\n        _this2._update(_this2.entity.data);\n\n        return entity;\n      }).catch(function (err) {\n        _this2.entity = null;\n        _this2.entityPromise = null;\n\n        if (_this2.services.syncClient.connectionState != 'disconnected') {\n          log.error('Failed to get channel object', err);\n        }\n\n        log.debug('ERROR: Failed to get channel object', err);\n        throw err;\n      });\n    }\n    /**\n     * Load the attributes of this Channel and instantiate its Members and Messages.\n     * This or _subscribe will need to be called before any events on Channel will fire.\n     * This will need to be called before any events on Members or Messages will fire\n     * @returns {Promise}\n     * @private\n     */\n\n  }, {\n    key: \"_subscribeStreams\",\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n        var messagesObjectName, rosterObjectName;\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this._subscribe();\n\n              case 3:\n                log.trace('_subscribeStreams, this.entity.data=', this.entity.data);\n                messagesObjectName = this.entity.data.messages;\n                rosterObjectName = this.entity.data.roster;\n                _context.next = 8;\n                return _promise2.default.all([this.messagesEntity.subscribe(messagesObjectName), this.membersEntity.subscribe(rosterObjectName)]);\n\n              case 8:\n                _context.next = 15;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (this.services.syncClient.connectionState !== 'disconnected') {\n                  log.error('Failed to subscribe on channel objects', this.sid, _context.t0);\n                }\n\n                log.debug('ERROR: Failed to subscribe on channel objects', this.sid, _context.t0);\n                throw _context.t0;\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 10]]);\n      }));\n\n      function _subscribeStreams() {\n        return _ref.apply(this, arguments);\n      }\n\n      return _subscribeStreams;\n    }()\n    /**\n     * Stop listening for and firing events on this Channel.\n     * @returns {Promise}\n     * @private\n     */\n\n  }, {\n    key: \"_unsubscribe\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.isPrivate && this.entity)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this.entity.close();\n\n              case 3:\n                this.entity = null;\n                this.entityPromise = null;\n\n              case 5:\n                return _context2.abrupt(\"return\", _promise2.default.all([this.membersEntity.unsubscribe(), this.messagesEntity.unsubscribe()]));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _unsubscribe() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return _unsubscribe;\n    }()\n    /**\n     * Set channel status\n     * @private\n     */\n\n  }, {\n    key: \"_setStatus\",\n    value: function _setStatus(status, source) {\n      var _this3 = this;\n\n      this.statusSource = source;\n\n      if (this.channelState.status === status) {\n        return;\n      }\n\n      this.channelState.status = status;\n\n      if (status === 'joined') {\n        this._subscribeStreams().catch(function (err) {\n          log.debug('ERROR while setting channel status ' + status, err);\n\n          if (_this3.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        });\n      } else if (status === 'invited') {\n        this._subscribe().catch(function (err) {\n          log.debug('ERROR while setting channel status ' + status, err);\n\n          if (_this3.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        });\n      } else if (this.entityPromise) {\n        this._unsubscribe().catch(function (err) {\n          log.debug('ERROR while setting channel status ' + status, err);\n\n          if (_this3.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        });\n      }\n    }\n    /**\n     * If channel's status update source\n     * @private\n     * @return {Channels.DataSource}\n     */\n\n  }, {\n    key: \"_statusSource\",\n    value: function _statusSource() {\n      return this.statusSource;\n    }\n  }, {\n    key: \"_update\",\n\n    /**\n     * Updates local channel object with new values\n     * @private\n     */\n    value: function _update(update) {\n      var _a, _b, _c, _d, _e;\n\n      log.trace('_update', update);\n      Channel.preprocessUpdate(update, this.sid);\n      var updateReasons = new _set2.default();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = (0, _getIterator3.default)((0, _keys2.default)(update)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var key = _step.value;\n          var localKey = fieldMappings[key];\n\n          if (!localKey) {\n            continue;\n          }\n\n          switch (localKey) {\n            case fieldMappings.status:\n              if (!update.status || update.status === 'unknown' || this.channelState.status === update.status) {\n                break;\n              }\n\n              this.channelState.status = update.status;\n              updateReasons.add(localKey);\n              break;\n\n            case fieldMappings.attributes:\n              if (util_1.isDeepEqual(this.channelState.attributes, update.attributes)) {\n                break;\n              }\n\n              this.channelState.attributes = update.attributes;\n              updateReasons.add(localKey);\n              break;\n\n            case fieldMappings.lastConsumedMessageIndex:\n              if (update.lastConsumedMessageIndex === undefined || update.lastConsumedMessageIndex === this.channelState.lastConsumedMessageIndex) {\n                break;\n              }\n\n              this.channelState.lastConsumedMessageIndex = update.lastConsumedMessageIndex;\n              updateReasons.add(localKey);\n              break;\n\n            case fieldMappings.lastMessage:\n              if (this.channelState.lastMessage && !update.lastMessage) {\n                delete this.channelState.lastMessage;\n                updateReasons.add(localKey);\n                break;\n              }\n\n              this.channelState.lastMessage = this.channelState.lastMessage || {};\n\n              if (((_a = update.lastMessage) === null || _a === void 0 ? void 0 : _a.index) !== undefined && update.lastMessage.index !== this.channelState.lastMessage.index) {\n                this.channelState.lastMessage.index = update.lastMessage.index;\n                updateReasons.add(localKey);\n              }\n\n              if (((_b = update.lastMessage) === null || _b === void 0 ? void 0 : _b.timestamp) !== undefined && ((_d = (_c = this.channelState.lastMessage) === null || _c === void 0 ? void 0 : _c.dateCreated) === null || _d === void 0 ? void 0 : _d.getTime()) !== update.lastMessage.timestamp.getTime()) {\n                this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;\n                updateReasons.add(localKey);\n              }\n\n              if (util_1.isDeepEqual(this.channelState.lastMessage, {})) {\n                delete this.channelState.lastMessage;\n              }\n\n              break;\n\n            case fieldMappings.state:\n              var state = update.state || undefined;\n\n              if (state !== undefined) {\n                state.dateUpdated = new Date(state.dateUpdated);\n              }\n\n              if (util_1.isDeepEqual(this.channelState.state, state)) {\n                break;\n              }\n\n              this.channelState.state = state;\n              updateReasons.add(localKey);\n              break;\n\n            default:\n              var isDate = update[key] instanceof Date;\n              var keysMatchAsDates = isDate && ((_e = this.channelState[localKey]) === null || _e === void 0 ? void 0 : _e.getTime()) === update[key].getTime();\n              var keysMatchAsNonDates = !isDate && this[localKey] === update[key];\n\n              if (keysMatchAsDates || keysMatchAsNonDates) {\n                break;\n              }\n\n              this.channelState[localKey] = update[key];\n              updateReasons.add(localKey);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (updateReasons.size > 0) {\n        this.emit('updated', {\n          channel: this,\n          updateReasons: [].concat((0, _toConsumableArray3.default)(updateReasons))\n        });\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_onMessageAdded\",\n    value: function _onMessageAdded(message) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = (0, _getIterator3.default)(this.members.values()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var member = _step2.value;\n\n          if (member.identity === message.author) {\n            member._endTyping();\n\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this.emit('messageAdded', message);\n    }\n  }, {\n    key: \"_setLastConsumedMessageIndex\",\n    value: function () {\n      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(index) {\n        var result;\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.services.commandExecutor.mutateResource('post', this.configuration.links.myConversations + \"/\" + this.sid, {\n                  last_consumed_message_index: index\n                });\n\n              case 2:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", result.unread_messages_count);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _setLastConsumedMessageIndex(_x) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return _setLastConsumedMessageIndex;\n    }()\n    /**\n     * Add a participant to the Channel by its Identity.\n     * @param {String} identity - Identity of the Client to add\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"add\",\n    value: function () {\n      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(identity) {\n        return _regenerator2.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.membersEntity.add(identity);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function add(_x2) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return add;\n    }()\n    /**\n     * Advance last consumed Channel's Message index to current consumption horizon.\n     * Rejects if User is not Member of Channel.\n     * Last consumed Message index is updated only if new index value is higher than previous.\n     * @param {Number} index - Message index to advance to as last read\n     * @returns {Promise<number>} resulting unread messages count in the channel\n     */\n\n  }, {\n    key: \"advanceLastConsumedMessageIndex\",\n    value: function () {\n      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(index) {\n        return _regenerator2.default.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                if (!(index < this.lastConsumedMessageIndex)) {\n                  _context5.next = 6;\n                  break;\n                }\n\n                _context5.next = 5;\n                return this._setLastConsumedMessageIndex(this.lastConsumedMessageIndex);\n\n              case 5:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 6:\n                _context5.next = 8;\n                return this._setLastConsumedMessageIndex(index);\n\n              case 8:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function advanceLastConsumedMessageIndex(_x3) {\n        return _ref5.apply(this, arguments);\n      }\n\n      return advanceLastConsumedMessageIndex;\n    }()\n    /**\n     * Decline an invitation to the Channel and unsubscribe from its events.\n     * @returns {Promise<Channel>}\n     */\n\n  }, {\n    key: \"decline\",\n    value: function () {\n      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {\n        return _regenerator2.default.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.services.commandExecutor.mutateResource('delete', this.links.invites + \"/\" + this.configuration.userIdentity);\n\n              case 2:\n                return _context6.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function decline() {\n        return _ref6.apply(this, arguments);\n      }\n\n      return decline;\n    }()\n    /**\n     * Delete the Channel and unsubscribe from its events.\n     * @returns {Promise<Channel>}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {\n        return _regenerator2.default.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.services.commandExecutor.mutateResource('delete', this.links.self);\n\n              case 2:\n                return _context7.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _delete() {\n        return _ref7.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n    /**\n     * Get the custom attributes of this Channel.<br/>\n     *\n     * <i>NOTE: {@link Channel}'s <code>attributes</code> property will be empty for public channels until this function is called.</i>\n     * @returns {Promise<any>} attributes of this Channel\n     */\n\n  }, {\n    key: \"getAttributes\",\n    value: function () {\n      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8() {\n        return _regenerator2.default.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this._subscribe();\n\n              case 2:\n                return _context8.abrupt(\"return\", this.attributes);\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getAttributes() {\n        return _ref8.apply(this, arguments);\n      }\n\n      return getAttributes;\n    }()\n    /**\n     * Returns messages from channel using paginator interface.\n     * @param {Number} [pageSize=30] Number of messages to return in single chunk\n     * @param {Number} [anchor] - Index of newest Message to fetch. From the end by default\n     * @param {('backwards'|'forward')} [direction=backwards] - Query direction. By default it query backwards\n     *                                                          from newer to older. 'forward' will query in opposite direction\n     * @returns {Promise<Paginator<Message>>} page of messages\n     */\n\n  }, {\n    key: \"getMessages\",\n    value: function () {\n      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(pageSize, anchor, direction) {\n        return _regenerator2.default.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context9.abrupt(\"return\", this.messagesEntity.getMessages(pageSize, anchor, direction));\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getMessages(_x4, _x5, _x6) {\n        return _ref9.apply(this, arguments);\n      }\n\n      return getMessages;\n    }()\n    /**\n     * Get a list of all Members joined to this Channel.\n     * @returns {Promise<Member[]>}\n     */\n\n  }, {\n    key: \"getMembers\",\n    value: function () {\n      var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {\n        return _regenerator2.default.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context10.abrupt(\"return\", this.membersEntity.getMembers());\n\n              case 3:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getMembers() {\n        return _ref10.apply(this, arguments);\n      }\n\n      return getMembers;\n    }()\n    /**\n     * Get channel members count.\n     * <br/>\n     * This method is semi-realtime. This means that this data will be eventually correct,\n     * but will also possibly be incorrect for a few seconds. The Chat system does not\n     * provide real time events for counter values changes.\n     * <br/>\n     * So this is quite useful for any UI badges, but is not recommended\n     * to build any core application logic based on these counters being accurate in real time.\n     * @returns {Promise<number>}\n     */\n\n  }, {\n    key: \"getMembersCount\",\n    value: function () {\n      var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11() {\n        var url, response;\n        return _regenerator2.default.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                url = new util_1.UriBuilder(this.configuration.links.conversations).path(this.sid).build();\n                _context11.next = 3;\n                return this.services.network.get(url);\n\n              case 3:\n                response = _context11.sent;\n                return _context11.abrupt(\"return\", response.body.participants_count);\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getMembersCount() {\n        return _ref11.apply(this, arguments);\n      }\n\n      return getMembersCount;\n    }()\n    /**\n     * Get a Member by its SID.\n     * @param {String} memberSid - Member sid\n     * @returns {Promise<Member>}\n     */\n\n  }, {\n    key: \"getMemberBySid\",\n    value: function () {\n      var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(memberSid) {\n        return _regenerator2.default.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                return _context12.abrupt(\"return\", this.membersEntity.getMemberBySid(memberSid));\n\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getMemberBySid(_x7) {\n        return _ref12.apply(this, arguments);\n      }\n\n      return getMemberBySid;\n    }()\n    /**\n     * Get a Member by its identity.\n     * @param {String} identity - Member identity\n     * @returns {Promise<Member>}\n     */\n\n  }, {\n    key: \"getMemberByIdentity\",\n    value: function () {\n      var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13(identity) {\n        return _regenerator2.default.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                return _context13.abrupt(\"return\", this.membersEntity.getMemberByIdentity(identity));\n\n              case 1:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getMemberByIdentity(_x8) {\n        return _ref13.apply(this, arguments);\n      }\n\n      return getMemberByIdentity;\n    }()\n    /**\n     * Get total message count in a channel.\n     * <br/>\n     * This method is semi-realtime. This means that this data will be eventually correct,\n     * but will also possibly be incorrect for a few seconds. The Chat system does not\n     * provide real time events for counter values changes.\n     * <br/>\n     * So this is quite useful for any UI badges, but is not recommended\n     * to build any core application logic based on these counters being accurate in real time.\n     * @returns {Promise<number>}\n     */\n\n  }, {\n    key: \"getMessagesCount\",\n    value: function () {\n      var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14() {\n        var url, response;\n        return _regenerator2.default.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                url = new util_1.UriBuilder(this.configuration.links.conversations).path(this.sid).build();\n                _context14.next = 3;\n                return this.services.network.get(url);\n\n              case 3:\n                response = _context14.sent;\n                return _context14.abrupt(\"return\", response.body.messages_count);\n\n              case 5:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getMessagesCount() {\n        return _ref14.apply(this, arguments);\n      }\n\n      return getMessagesCount;\n    }()\n    /**\n     * Get unconsumed messages count for a User if they are a Member of this Channel.\n     * Rejects if the User is not a Member of the Channel.\n     * <br/>\n     * This method is semi-realtime. This means that this data will be eventually correct,\n     * but will also possibly be incorrect for a few seconds. The Chat system does not\n     * provide real time events for counter values changes.\n     * <br/>\n     * So this is quite useful for any “unread messages count” badges, but is not recommended\n     * to build any core application logic based on these counters being accurate in real time.\n     * @returns {Promise<number|null>}\n     */\n\n  }, {\n    key: \"getUnconsumedMessagesCount\",\n    value: function () {\n      var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15() {\n        var url, response, unreadMessageCount;\n        return _regenerator2.default.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                url = new util_1.UriBuilder(this.configuration.links.myConversations).path(this.sid).build();\n                _context15.next = 3;\n                return this.services.network.get(url);\n\n              case 3:\n                response = _context15.sent;\n\n                if (!(response.body.conversation_sid !== this.sid)) {\n                  _context15.next = 6;\n                  break;\n                }\n\n                throw new Error('Channel was not found in the user channels list');\n\n              case 6:\n                unreadMessageCount = response.body.unread_messages_count;\n\n                if (!(typeof unreadMessageCount === 'number')) {\n                  _context15.next = 9;\n                  break;\n                }\n\n                return _context15.abrupt(\"return\", unreadMessageCount);\n\n              case 9:\n                return _context15.abrupt(\"return\", null);\n\n              case 10:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function getUnconsumedMessagesCount() {\n        return _ref15.apply(this, arguments);\n      }\n\n      return getUnconsumedMessagesCount;\n    }()\n    /**\n     * Invite a user to the Channel by their Identity.\n     * @param {String} identity - Identity of the user to invite\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"invite\",\n    value: function () {\n      var _ref16 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16(identity) {\n        return _regenerator2.default.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.membersEntity.invite(identity);\n\n              case 2:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function invite(_x9) {\n        return _ref16.apply(this, arguments);\n      }\n\n      return invite;\n    }()\n    /**\n     * Join the Channel and subscribe to its events.\n     * @returns {Promise<Channel>}\n     */\n\n  }, {\n    key: \"join\",\n    value: function () {\n      var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17() {\n        return _regenerator2.default.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.services.commandExecutor.mutateResource('post', this.links.participants, {\n                  identity: this.configuration.userIdentity\n                });\n\n              case 2:\n                return _context17.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function join() {\n        return _ref17.apply(this, arguments);\n      }\n\n      return join;\n    }()\n    /**\n     * Leave the Channel.\n     * @returns {Promise<Channel>}\n     */\n\n  }, {\n    key: \"leave\",\n    value: function () {\n      var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18() {\n        return _regenerator2.default.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                if (!(this.channelState.status === 'joined')) {\n                  _context18.next = 3;\n                  break;\n                }\n\n                _context18.next = 3;\n                return this.services.commandExecutor.mutateResource('delete', this.links.participants + \"/\" + this.configuration.userIdentity);\n\n              case 3:\n                return _context18.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function leave() {\n        return _ref18.apply(this, arguments);\n      }\n\n      return leave;\n    }()\n    /**\n     * Remove a Member from the Channel.\n     * @param {String|Member} member - Member to remove. Could either be an identity string or a Member instance.\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"removeMember\",\n    value: function () {\n      var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19(member) {\n        return _regenerator2.default.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this.membersEntity.remove(typeof member === 'string' ? member : member.sid);\n\n              case 2:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function removeMember(_x10) {\n        return _ref19.apply(this, arguments);\n      }\n\n      return removeMember;\n    }()\n    /**\n     * Send a Message in the Channel.\n     * @param {String|FormData|Channel#SendMediaOptions|null} message - The message body for text message,\n     * FormData or MediaOptions for media content. Sending FormData supported only with browser engine\n     * @param {any} [messageAttributes] - attributes for the message\n     * @returns {Promise<number>} new Message's index in the Channel's messages list\n     */\n\n  }, {\n    key: \"sendMessage\",\n    value: function () {\n      var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20(message, messageAttributes) {\n        var _response, response;\n\n        return _regenerator2.default.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                if (!(typeof message === 'string' || message === null)) {\n                  _context20.next = 5;\n                  break;\n                }\n\n                _context20.next = 3;\n                return this.messagesEntity.send(message, messageAttributes);\n\n              case 3:\n                _response = _context20.sent;\n                return _context20.abrupt(\"return\", util_1.parseToNumber(_response.index));\n\n              case 5:\n                _context20.next = 7;\n                return this.messagesEntity.sendMedia(message, messageAttributes);\n\n              case 7:\n                response = _context20.sent;\n                return _context20.abrupt(\"return\", util_1.parseToNumber(response.index));\n\n              case 9:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function sendMessage(_x11, _x12) {\n        return _ref20.apply(this, arguments);\n      }\n\n      return sendMessage;\n    }()\n    /**\n     * Set last consumed Channel's Message index to last known Message's index in this Channel.\n     * @returns {Promise<number>} resulting unread messages count in the channel\n     */\n\n  }, {\n    key: \"setAllMessagesConsumed\",\n    value: function () {\n      var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21() {\n        var messagesPage;\n        return _regenerator2.default.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                _context21.next = 4;\n                return this.getMessages(1);\n\n              case 4:\n                messagesPage = _context21.sent;\n\n                if (!(messagesPage.items.length > 0)) {\n                  _context21.next = 7;\n                  break;\n                }\n\n                return _context21.abrupt(\"return\", this.advanceLastConsumedMessageIndex(messagesPage.items[0].index));\n\n              case 7:\n                return _context21.abrupt(\"return\", _promise2.default.resolve(0));\n\n              case 8:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function setAllMessagesConsumed() {\n        return _ref21.apply(this, arguments);\n      }\n\n      return setAllMessagesConsumed;\n    }()\n    /**\n     * Set all messages in the channel unread.\n     * @returns {Promise<number>} resulting unread messages count in the channel\n     */\n\n  }, {\n    key: \"setNoMessagesConsumed\",\n    value: function () {\n      var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22() {\n        return _regenerator2.default.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                _context22.next = 4;\n                return this._setLastConsumedMessageIndex(null);\n\n              case 4:\n                return _context22.abrupt(\"return\", _context22.sent);\n\n              case 5:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function setNoMessagesConsumed() {\n        return _ref22.apply(this, arguments);\n      }\n\n      return setNoMessagesConsumed;\n    }()\n    /**\n     * Set User Notification level for this channel.\n     * @param {Channel#NotificationLevel} notificationLevel - The new user notification level\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"setUserNotificationLevel\",\n    value: function () {\n      var _ref23 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee23(notificationLevel) {\n        return _regenerator2.default.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.next = 2;\n                return this.services.commandExecutor.mutateResource('post', this.configuration.links.myConversations + \"/\" + this.sid, {\n                  notification_level: notificationLevel\n                });\n\n              case 2:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function setUserNotificationLevel(_x13) {\n        return _ref23.apply(this, arguments);\n      }\n\n      return setUserNotificationLevel;\n    }()\n    /**\n     * Send a notification to the server indicating that this Client is currently typing in this Channel.\n     * Typing ended notification is sent after a while automatically, but by calling again this method you ensure typing ended is not received.\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"typing\",\n    value: function typing() {\n      return this.services.typingIndicator.send(this.sid);\n    }\n    /**\n     * Update the Channel's attributes.\n     * @param {any} attributes new attributes for Channel.\n     * @returns {Promise<Channel>}\n     */\n\n  }, {\n    key: \"updateAttributes\",\n    value: function () {\n      var _ref24 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee24(attributes) {\n        return _regenerator2.default.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this.services.commandExecutor.mutateResource('post', this.links.self, {\n                  attributes: attributes !== undefined ? (0, _stringify2.default)(attributes) : undefined\n                });\n\n              case 2:\n                return _context24.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function updateAttributes(_x14) {\n        return _ref24.apply(this, arguments);\n      }\n\n      return updateAttributes;\n    }()\n    /**\n     * Update the Channel's friendlyName.\n     * @param {String} friendlyName - The new Channel friendlyName\n     * @returns {Promise<Channel>}\n     */\n\n  }, {\n    key: \"updateFriendlyName\",\n    value: function () {\n      var _ref25 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee25(friendlyName) {\n        return _regenerator2.default.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                if (!(this.channelState.friendlyName !== friendlyName)) {\n                  _context25.next = 3;\n                  break;\n                }\n\n                _context25.next = 3;\n                return this.services.commandExecutor.mutateResource('post', this.links.self, {\n                  friendly_name: friendlyName\n                });\n\n              case 3:\n                return _context25.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function updateFriendlyName(_x15) {\n        return _ref25.apply(this, arguments);\n      }\n\n      return updateFriendlyName;\n    }()\n    /**\n     * Set last consumed Channel's Message index to current consumption horizon.\n     * @param {Number|null} index - Message index to set as last read.\n     * If null provided, then the behavior is identical to {@link Channel#setNoMessagesConsumed}\n     * @returns {Promise<number>} resulting unread messages count in the channel\n     */\n\n  }, {\n    key: \"updateLastConsumedMessageIndex\",\n    value: function () {\n      var _ref26 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee26(index) {\n        return _regenerator2.default.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context26.abrupt(\"return\", this._setLastConsumedMessageIndex(index));\n\n              case 3:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function updateLastConsumedMessageIndex(_x16) {\n        return _ref26.apply(this, arguments);\n      }\n\n      return updateLastConsumedMessageIndex;\n    }()\n    /**\n     * Update the Channel's unique name.\n     * @param {String|null} uniqueName - New unique name for the Channel. Setting unique name to null removes it.\n     * @returns {Promise<Channel>}\n     */\n\n  }, {\n    key: \"updateUniqueName\",\n    value: function () {\n      var _ref27 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee27(uniqueName) {\n        return _regenerator2.default.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                if (!(this.channelState.uniqueName !== uniqueName)) {\n                  _context27.next = 4;\n                  break;\n                }\n\n                if (!uniqueName) {\n                  uniqueName = '';\n                }\n\n                _context27.next = 4;\n                return this.services.commandExecutor.mutateResource('post', this.links.self, {\n                  unique_name: uniqueName\n                });\n\n              case 4:\n                return _context27.abrupt(\"return\", this);\n\n              case 5:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function updateUniqueName(_x17) {\n        return _ref27.apply(this, arguments);\n      }\n\n      return updateUniqueName;\n    }()\n    /**\n     * Gets User Descriptors for this channel.\n     * @returns {Promise<Paginator<UserDescriptor>>}\n     */\n\n  }, {\n    key: \"getUserDescriptors\",\n    value: function () {\n      var _ref28 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee28() {\n        return _regenerator2.default.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                return _context28.abrupt(\"return\", this.services.users.getChannelUserDescriptors(this.sid));\n\n              case 1:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n\n      function getUserDescriptors() {\n        return _ref28.apply(this, arguments);\n      }\n\n      return getUserDescriptors;\n    }()\n  }, {\n    key: \"status\",\n    get: function get() {\n      return this.channelState.status;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.channelState.type;\n    }\n  }, {\n    key: \"uniqueName\",\n    get: function get() {\n      return this.channelState.uniqueName;\n    }\n  }, {\n    key: \"isPrivate\",\n    get: function get() {\n      return this.channelState.type === 'private';\n    }\n  }, {\n    key: \"friendlyName\",\n    get: function get() {\n      return this.channelState.friendlyName;\n    }\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.channelState.dateUpdated;\n    }\n  }, {\n    key: \"dateCreated\",\n    get: function get() {\n      return this.channelState.dateCreated;\n    }\n  }, {\n    key: \"createdBy\",\n    get: function get() {\n      return this.channelState.createdBy;\n    }\n  }, {\n    key: \"attributes\",\n    get: function get() {\n      return this.channelState.attributes;\n    }\n  }, {\n    key: \"lastConsumedMessageIndex\",\n    get: function get() {\n      return this.channelState.lastConsumedMessageIndex;\n    }\n  }, {\n    key: \"lastMessage\",\n    get: function get() {\n      return this.channelState.lastMessage;\n    }\n  }, {\n    key: \"notificationLevel\",\n    get: function get() {\n      return this.channelState.notificationLevel;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.channelState.state;\n    }\n  }], [{\n    key: \"preprocessUpdate\",\n    value: function preprocessUpdate(update, channelSid) {\n      try {\n        if (typeof update.attributes === 'string') {\n          update.attributes = JSON.parse(update.attributes);\n        } else if (update.attributes) {\n          (0, _stringify2.default)(update.attributes);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed attributes from the server for channel: ' + channelSid);\n        update.attributes = {};\n      }\n\n      try {\n        if (update.dateCreated) {\n          update.dateCreated = new Date(update.dateCreated);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed dateCreated from the server for channel: ' + channelSid);\n        delete update.dateCreated;\n      }\n\n      try {\n        if (update.dateUpdated) {\n          update.dateUpdated = new Date(update.dateUpdated);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed dateUpdated from the server for channel: ' + channelSid);\n        delete update.dateUpdated;\n      }\n\n      try {\n        if (update.lastMessage && update.lastMessage.timestamp) {\n          update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed lastMessage.timestamp from the server for channel: ' + channelSid);\n        delete update.lastMessage.timestamp;\n      }\n    }\n  }]);\n  return Channel;\n}(events_1.EventEmitter);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"add\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonNegativeInteger), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"advanceLastConsumedMessageIndex\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['undefined', twilio_sdk_type_validator_1.nonNegativeInteger], ['undefined', twilio_sdk_type_validator_1.nonNegativeInteger], ['undefined', twilio_sdk_type_validator_1.literal('backwards', 'forward')]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, Number, String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"getMessages\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"getMemberBySid\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"getMemberByIdentity\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"invite\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync([twilio_sdk_type_validator_1.nonEmptyString, member_1.Member]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"removeMember\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['string', twilio_sdk_type_validator_1.literal(null), // Wrapping it into a custom rule is necessary because the FormData class is not available on initialization.\ntwilio_sdk_type_validator_1.custom(function (value) {\n  return [value instanceof FormData, 'an instance of FormData'];\n}), twilio_sdk_type_validator_1.objectSchema('media options', {\n  contentType: [twilio_sdk_type_validator_1.nonEmptyString, 'undefined'],\n  media: twilio_sdk_type_validator_1.custom(function (value) {\n    var isValid = typeof value === 'string' && value.length > 0 || value instanceof Uint8Array || value instanceof ArrayBuffer;\n\n    if (typeof Blob === 'function') {\n      isValid = isValid || value instanceof Blob;\n    }\n\n    return [isValid, 'a non-empty string, an instance of Buffer or an instance of Blob'];\n  })\n})], ['undefined', 'string', 'number', 'boolean', 'object', twilio_sdk_type_validator_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"sendMessage\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.literal('default', 'muted')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"setUserNotificationLevel\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['string', 'number', 'boolean', 'object', twilio_sdk_type_validator_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"updateAttributes\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync('string'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"updateFriendlyName\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync([twilio_sdk_type_validator_1.literal(null), twilio_sdk_type_validator_1.nonNegativeInteger]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"updateLastConsumedMessageIndex\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['string', twilio_sdk_type_validator_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"updateUniqueName\", null);\n\nexports.Channel = Channel;\n/**\n * Fired when a Member has joined the Channel.\n * @event Channel#memberJoined\n * @type {Member}\n */\n\n/**\n * Fired when a Member has left the Channel.\n * @event Channel#memberLeft\n * @type {Member}\n */\n\n/**\n * Fired when a Member's fields has been updated.\n * @event Channel#memberUpdated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */\n\n/**\n * Fired when a new Message has been added to the Channel.\n * @event Channel#messageAdded\n * @type {Message}\n */\n\n/**\n * Fired when Message is removed from Channel's message list.\n * @event Channel#messageRemoved\n * @type {Message}\n */\n\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Channel#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n\n/**\n * Fired when a Member has stopped typing.\n * @event Channel#typingEnded\n * @type {Member}\n */\n\n/**\n * Fired when a Member has started typing.\n * @event Channel#typingStarted\n * @type {Member}\n */\n\n/**\n * Fired when a Channel's attributes or metadata have been updated.\n * During Channel's {@link Client.create | creation and initialization} this event might be fired multiple times\n * for same joined or created Channel as new data is arriving from different sources.\n * @event Channel#updated\n * @type {Object}\n * @property {Channel} channel - Updated Channel\n * @property {Channel#UpdateReason[]} updateReasons - Array of Channel's updated event reasons\n */\n\n/**\n * Fired when the Channel was destroyed or currently logged in User has left private Channel\n * @event Channel#removed\n * @type {Channel}\n */","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio-chat/browser/channel.js"],"names":["_keys","require","_keys2","_interopRequireDefault","_getIterator2","_getIterator3","_toConsumableArray2","_toConsumableArray3","_set","_set2","_regenerator","_regenerator2","_promise","_promise2","_asyncToGenerator2","_asyncToGenerator3","_map","_map2","_stringify","_stringify2","_isInteger","_isInteger2","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_metadata","_metadata2","_defineProperty","_defineProperty2","_typeof2","_typeof3","_getOwnPropertyDescriptor","_getOwnPropertyDescriptor2","obj","__esModule","default","__decorate","undefined","decorators","target","key","desc","c","arguments","length","r","d","Reflect","decorate","i","__metadata","k","v","Object","defineProperty","exports","value","Channel","events_1","logger_1","members_1","member_1","messages_1","util_1","twilio_sdk_type_validator_1","log","Logger","scope","fieldMappings","lastMessage","attributes","createdBy","dateCreated","dateUpdated","friendlyName","lastConsumedMessageIndex","notificationLevel","sid","status","type","uniqueName","state","parseTime","timeString","Date","e","_events_1$EventEmitte","descriptor","links","configuration","services","_this","__proto__","call","Error","entityName","channel","channelState","membersLinks","participants","members","membersEntity","Members","on","emit","bind","args","messagesEntity","Messages","message","_onMessageAdded","_subscribe","_this2","entityPromise","syncClient","document","id","mode","then","entity","_update","data","catch","err","connectionState","error","debug","_ref","mark","_callee","messagesObjectName","rosterObjectName","wrap","_callee$","_context","prev","next","trace","messages","roster","all","subscribe","t0","stop","_subscribeStreams","apply","_ref2","_callee2","_callee2$","_context2","isPrivate","close","abrupt","unsubscribe","_unsubscribe","_setStatus","source","_this3","statusSource","_statusSource","update","_a","_b","_c","_d","_e","preprocessUpdate","updateReasons","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","done","localKey","add","isDeepEqual","index","timestamp","getTime","isDate","keysMatchAsDates","keysMatchAsNonDates","return","size","concat","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","values","_step2","member","identity","author","_endTyping","_ref3","_callee3","result","_callee3$","_context3","commandExecutor","mutateResource","myConversations","last_consumed_message_index","sent","unread_messages_count","_setLastConsumedMessageIndex","_x","_ref4","_callee4","_callee4$","_context4","_x2","_ref5","_callee5","_callee5$","_context5","advanceLastConsumedMessageIndex","_x3","_ref6","_callee6","_callee6$","_context6","invites","userIdentity","decline","_ref7","_callee7","_callee7$","_context7","self","_delete","_ref8","_callee8","_callee8$","_context8","getAttributes","_ref9","_callee9","pageSize","anchor","direction","_callee9$","_context9","getMessages","_x4","_x5","_x6","_ref10","_callee10","_callee10$","_context10","getMembers","_ref11","_callee11","url","response","_callee11$","_context11","UriBuilder","conversations","path","build","network","get","body","participants_count","getMembersCount","_ref12","_callee12","memberSid","_callee12$","_context12","getMemberBySid","_x7","_ref13","_callee13","_callee13$","_context13","getMemberByIdentity","_x8","_ref14","_callee14","_callee14$","_context14","messages_count","getMessagesCount","_ref15","_callee15","unreadMessageCount","_callee15$","_context15","conversation_sid","getUnconsumedMessagesCount","_ref16","_callee16","_callee16$","_context16","invite","_x9","_ref17","_callee17","_callee17$","_context17","join","_ref18","_callee18","_callee18$","_context18","leave","_ref19","_callee19","_callee19$","_context19","remove","removeMember","_x10","_ref20","_callee20","messageAttributes","_response","_callee20$","_context20","send","parseToNumber","sendMedia","sendMessage","_x11","_x12","_ref21","_callee21","messagesPage","_callee21$","_context21","items","resolve","setAllMessagesConsumed","_ref22","_callee22","_callee22$","_context22","setNoMessagesConsumed","_ref23","_callee23","_callee23$","_context23","notification_level","setUserNotificationLevel","_x13","typing","typingIndicator","_ref24","_callee24","_callee24$","_context24","updateAttributes","_x14","_ref25","_callee25","_callee25$","_context25","friendly_name","updateFriendlyName","_x15","_ref26","_callee26","_callee26$","_context26","updateLastConsumedMessageIndex","_x16","_ref27","_callee27","_callee27$","_context27","unique_name","updateUniqueName","_x17","_ref28","_callee28","_callee28$","_context28","users","getChannelUserDescriptors","getUserDescriptors","channelSid","JSON","parse","warn","EventEmitter","validateTypesAsync","nonEmptyString","Function","String","prototype","nonNegativeInteger","Number","literal","Member","custom","FormData","objectSchema","contentType","media","isValid","Uint8Array","ArrayBuffer","Blob"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _keys = require(\"babel-runtime/core-js/object/keys\");\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _set = require(\"babel-runtime/core-js/set\");\n\nvar _set2 = _interopRequireDefault(_set);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _isInteger = require(\"babel-runtime/core-js/number/is-integer\");\n\nvar _isInteger2 = _interopRequireDefault(_isInteger);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _metadata = require(\"babel-runtime/core-js/reflect/metadata\");\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _defineProperty = require(\"babel-runtime/core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getOwnPropertyDescriptor = require(\"babel-runtime/core-js/object/get-own-property-descriptor\");\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = (0, _getOwnPropertyDescriptor2.default)(target, key) : desc,\n        d;\n    if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    }return c > 3 && r && (0, _defineProperty2.default)(target, key, r), r;\n};\nvar __metadata = undefined && undefined.__metadata || function (k, v) {\n    if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof _metadata2.default === \"function\") return (0, _metadata2.default)(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Channel = void 0;\nvar events_1 = require(\"events\");\nvar logger_1 = require(\"./logger\");\nvar members_1 = require(\"./data/members\");\nvar member_1 = require(\"./member\");\nvar messages_1 = require(\"./data/messages\");\nvar util_1 = require(\"./util\");\nvar twilio_sdk_type_validator_1 = require(\"twilio-sdk-type-validator\");\nvar log = logger_1.Logger.scope('Channel');\nvar fieldMappings = {\n    lastMessage: 'lastMessage',\n    attributes: 'attributes',\n    createdBy: 'createdBy',\n    dateCreated: 'dateCreated',\n    dateUpdated: 'dateUpdated',\n    friendlyName: 'friendlyName',\n    lastConsumedMessageIndex: 'lastConsumedMessageIndex',\n    notificationLevel: 'notificationLevel',\n    sid: 'sid',\n    status: 'status',\n    type: 'type',\n    uniqueName: 'uniqueName',\n    state: 'state'\n};\nfunction parseTime(timeString) {\n    try {\n        return new Date(timeString);\n    } catch (e) {\n        return null;\n    }\n}\n/**\n * @classdesc A Channel represents a remote channel of communication between multiple Programmable Chat Clients\n * @property {any} attributes - The Channel's custom attributes\n * @property {String} createdBy - The identity of the User that created this Channel\n * @property {Date} dateCreated - The Date this Channel was created\n * @property {Date} dateUpdated - The Date this Channel was last updated\n * @property {String} friendlyName - The Channel's name\n * @property {Boolean} isPrivate - Whether the channel is private (as opposed to public)\n * @property {Number} lastConsumedMessageIndex - Index of the last Message the User has consumed in this Channel\n * @property {Channel#LastMessage} lastMessage - Last Message sent to this Channel\n * @property {Channel#NotificationLevel} notificationLevel - User Notification level for this Channel\n * @property {String} sid - The Channel's unique system identifier\n * @property {Channel#State} state - The Channel's state\n * @property {Channel#Status} status - The Channel's status\n * @property {Channel#Type} type - The Channel's type\n * @property {String} uniqueName - The Channel's unique name (tag)\n * @fires Channel#memberJoined\n * @fires Channel#memberLeft\n * @fires Channel#memberUpdated\n * @fires Channel#messageAdded\n * @fires Channel#messageRemoved\n * @fires Channel#messageUpdated\n * @fires Channel#typingEnded\n * @fires Channel#typingStarted\n * @fires Channel#updated\n * @fires Channel#removed\n */\n\nvar Channel = function (_events_1$EventEmitte) {\n    (0, _inherits3.default)(Channel, _events_1$EventEmitte);\n\n    function Channel(descriptor, sid, links, configuration, services) {\n        (0, _classCallCheck3.default)(this, Channel);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (Channel.__proto__ || (0, _getPrototypeOf2.default)(Channel)).call(this));\n\n        _this.sid = sid;\n        _this.links = links;\n        _this.configuration = configuration;\n        _this.services = services;\n        var attributes = descriptor.attributes || {};\n        var createdBy = descriptor.createdBy;\n        var dateCreated = parseTime(descriptor.dateCreated);\n        var dateUpdated = parseTime(descriptor.dateUpdated);\n        var friendlyName = descriptor.friendlyName || null;\n        var lastConsumedMessageIndex = (0, _isInteger2.default)(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;\n        var uniqueName = descriptor.uniqueName || null;\n        try {\n            (0, _stringify2.default)(attributes);\n        } catch (e) {\n            throw new Error('Attributes must be a valid JSON object.');\n        }\n        _this.entityName = descriptor.channel;\n        _this.channelState = {\n            uniqueName: uniqueName,\n            status: 'notParticipating',\n            type: descriptor.type,\n            attributes: attributes,\n            createdBy: createdBy,\n            dateCreated: dateCreated,\n            dateUpdated: dateUpdated,\n            friendlyName: friendlyName,\n            lastConsumedMessageIndex: lastConsumedMessageIndex\n        };\n        if (descriptor.notificationLevel) {\n            _this.channelState.notificationLevel = descriptor.notificationLevel;\n        }\n        var membersLinks = {\n            participants: _this.links.participants\n        };\n        _this.members = new _map2.default();\n        _this.membersEntity = new members_1.Members(_this, _this.members, membersLinks, _this.configuration, _this.services);\n        _this.membersEntity.on('memberJoined', _this.emit.bind(_this, 'memberJoined'));\n        _this.membersEntity.on('memberLeft', _this.emit.bind(_this, 'memberLeft'));\n        _this.membersEntity.on('memberUpdated', function (args) {\n            return _this.emit('memberUpdated', args);\n        });\n        _this.messagesEntity = new messages_1.Messages(_this, _this.configuration, services);\n        _this.messagesEntity.on('messageAdded', function (message) {\n            return _this._onMessageAdded(message);\n        });\n        _this.messagesEntity.on('messageUpdated', function (args) {\n            return _this.emit('messageUpdated', args);\n        });\n        _this.messagesEntity.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n        return _this;\n    }\n    /**\n     * The Channel's state. Set to undefined if the channel is not a conversation.\n     * @typedef {Object | undefined} Channel#State\n     * @property {('active' | 'inactive' | 'closed')} current - the current state\n     * @property {Date} dateUpdated - date at which the latest channel state update happened\n     */\n    /**\n     * These options can be passed to {@link Channel#sendMessage}.\n     * @typedef {Object} Channel#SendMediaOptions\n     * @property {String} contentType - content type of media\n     * @property {String | Buffer} media - content to post\n     */\n    /**\n     * The update reason for <code>updated</code> event emitted on Channel\n     * @typedef {('attributes' | 'createdBy' | 'dateCreated' | 'dateUpdated' |\n      'friendlyName' | 'lastConsumedMessageIndex' | 'state' | 'status' | 'uniqueName' | 'lastMessage' |\n      'notificationLevel' )} Channel#UpdateReason\n     */\n    /**\n     * The status of the Channel, relative to the Client: whether the Channel\n     * is <code>notParticipating</code> to local Client, Client is <code>invited</code> to or\n     * is <code>joined</code> to this Channel\n     * @typedef {('unknown' | 'notParticipating' | 'invited' | 'joined')} Channel#Status\n     */\n    /**\n     * The type of Channel (<code>public</code> or <code>private</code>).\n     * @typedef {('public' | 'private')} Channel#Type\n     */\n    /**\n     * The User's Notification level for Channel, determines whether the currently logged-in User will receive\n     * pushes for events in this Channel. Can be either <code>muted</code> or <code>default</code>,\n     * where <code>default</code> defers to global Service push configuration.\n     * @typedef {('default' | 'muted')} Channel#NotificationLevel\n     */\n\n\n    (0, _createClass3.default)(Channel, [{\n        key: \"_subscribe\",\n\n        /**\n         * The Channel's last message's information.\n         * @typedef {Object} Channel#LastMessage\n         * @property {Number} index - Message's index\n         * @property {Date} dateCreated - Message's creation date\n         */\n        /**\n         * Load and Subscribe to this Channel and do not subscribe to its Members and Messages.\n         * This or _subscribeStreams will need to be called before any events on Channel will fire.\n         * @returns {Promise}\n         * @private\n         */\n        value: function _subscribe() {\n            var _this2 = this;\n\n            if (this.entityPromise) {\n                return this.entityPromise;\n            }\n            return this.entityPromise = this.entityPromise || this.services.syncClient.document({ id: this.entityName, mode: 'open_existing' }).then(function (entity) {\n                _this2.entity = entity;\n                _this2.entity.on('updated', function (args) {\n                    _this2._update(args.data);\n                });\n                _this2.entity.on('removed', function () {\n                    return _this2.emit('removed', _this2);\n                });\n                _this2._update(_this2.entity.data);\n                return entity;\n            }).catch(function (err) {\n                _this2.entity = null;\n                _this2.entityPromise = null;\n                if (_this2.services.syncClient.connectionState != 'disconnected') {\n                    log.error('Failed to get channel object', err);\n                }\n                log.debug('ERROR: Failed to get channel object', err);\n                throw err;\n            });\n        }\n        /**\n         * Load the attributes of this Channel and instantiate its Members and Messages.\n         * This or _subscribe will need to be called before any events on Channel will fire.\n         * This will need to be called before any events on Members or Messages will fire\n         * @returns {Promise}\n         * @private\n         */\n\n    }, {\n        key: \"_subscribeStreams\",\n        value: function () {\n            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n                var messagesObjectName, rosterObjectName;\n                return _regenerator2.default.wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                _context.prev = 0;\n                                _context.next = 3;\n                                return this._subscribe();\n\n                            case 3:\n                                log.trace('_subscribeStreams, this.entity.data=', this.entity.data);\n                                messagesObjectName = this.entity.data.messages;\n                                rosterObjectName = this.entity.data.roster;\n                                _context.next = 8;\n                                return _promise2.default.all([this.messagesEntity.subscribe(messagesObjectName), this.membersEntity.subscribe(rosterObjectName)]);\n\n                            case 8:\n                                _context.next = 15;\n                                break;\n\n                            case 10:\n                                _context.prev = 10;\n                                _context.t0 = _context[\"catch\"](0);\n\n                                if (this.services.syncClient.connectionState !== 'disconnected') {\n                                    log.error('Failed to subscribe on channel objects', this.sid, _context.t0);\n                                }\n                                log.debug('ERROR: Failed to subscribe on channel objects', this.sid, _context.t0);\n                                throw _context.t0;\n\n                            case 15:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, this, [[0, 10]]);\n            }));\n\n            function _subscribeStreams() {\n                return _ref.apply(this, arguments);\n            }\n\n            return _subscribeStreams;\n        }()\n        /**\n         * Stop listening for and firing events on this Channel.\n         * @returns {Promise}\n         * @private\n         */\n\n    }, {\n        key: \"_unsubscribe\",\n        value: function () {\n            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n                return _regenerator2.default.wrap(function _callee2$(_context2) {\n                    while (1) {\n                        switch (_context2.prev = _context2.next) {\n                            case 0:\n                                if (!(this.isPrivate && this.entity)) {\n                                    _context2.next = 5;\n                                    break;\n                                }\n\n                                _context2.next = 3;\n                                return this.entity.close();\n\n                            case 3:\n                                this.entity = null;\n                                this.entityPromise = null;\n\n                            case 5:\n                                return _context2.abrupt(\"return\", _promise2.default.all([this.membersEntity.unsubscribe(), this.messagesEntity.unsubscribe()]));\n\n                            case 6:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2, this);\n            }));\n\n            function _unsubscribe() {\n                return _ref2.apply(this, arguments);\n            }\n\n            return _unsubscribe;\n        }()\n        /**\n         * Set channel status\n         * @private\n         */\n\n    }, {\n        key: \"_setStatus\",\n        value: function _setStatus(status, source) {\n            var _this3 = this;\n\n            this.statusSource = source;\n            if (this.channelState.status === status) {\n                return;\n            }\n            this.channelState.status = status;\n            if (status === 'joined') {\n                this._subscribeStreams().catch(function (err) {\n                    log.debug('ERROR while setting channel status ' + status, err);\n                    if (_this3.services.syncClient.connectionState !== 'disconnected') {\n                        throw err;\n                    }\n                });\n            } else if (status === 'invited') {\n                this._subscribe().catch(function (err) {\n                    log.debug('ERROR while setting channel status ' + status, err);\n                    if (_this3.services.syncClient.connectionState !== 'disconnected') {\n                        throw err;\n                    }\n                });\n            } else if (this.entityPromise) {\n                this._unsubscribe().catch(function (err) {\n                    log.debug('ERROR while setting channel status ' + status, err);\n                    if (_this3.services.syncClient.connectionState !== 'disconnected') {\n                        throw err;\n                    }\n                });\n            }\n        }\n        /**\n         * If channel's status update source\n         * @private\n         * @return {Channels.DataSource}\n         */\n\n    }, {\n        key: \"_statusSource\",\n        value: function _statusSource() {\n            return this.statusSource;\n        }\n    }, {\n        key: \"_update\",\n\n        /**\n         * Updates local channel object with new values\n         * @private\n         */\n        value: function _update(update) {\n            var _a, _b, _c, _d, _e;\n            log.trace('_update', update);\n            Channel.preprocessUpdate(update, this.sid);\n            var updateReasons = new _set2.default();\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)((0, _keys2.default)(update)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var key = _step.value;\n\n                    var localKey = fieldMappings[key];\n                    if (!localKey) {\n                        continue;\n                    }\n                    switch (localKey) {\n                        case fieldMappings.status:\n                            if (!update.status || update.status === 'unknown' || this.channelState.status === update.status) {\n                                break;\n                            }\n                            this.channelState.status = update.status;\n                            updateReasons.add(localKey);\n                            break;\n                        case fieldMappings.attributes:\n                            if (util_1.isDeepEqual(this.channelState.attributes, update.attributes)) {\n                                break;\n                            }\n                            this.channelState.attributes = update.attributes;\n                            updateReasons.add(localKey);\n                            break;\n                        case fieldMappings.lastConsumedMessageIndex:\n                            if (update.lastConsumedMessageIndex === undefined || update.lastConsumedMessageIndex === this.channelState.lastConsumedMessageIndex) {\n                                break;\n                            }\n                            this.channelState.lastConsumedMessageIndex = update.lastConsumedMessageIndex;\n                            updateReasons.add(localKey);\n                            break;\n                        case fieldMappings.lastMessage:\n                            if (this.channelState.lastMessage && !update.lastMessage) {\n                                delete this.channelState.lastMessage;\n                                updateReasons.add(localKey);\n                                break;\n                            }\n                            this.channelState.lastMessage = this.channelState.lastMessage || {};\n                            if (((_a = update.lastMessage) === null || _a === void 0 ? void 0 : _a.index) !== undefined && update.lastMessage.index !== this.channelState.lastMessage.index) {\n                                this.channelState.lastMessage.index = update.lastMessage.index;\n                                updateReasons.add(localKey);\n                            }\n                            if (((_b = update.lastMessage) === null || _b === void 0 ? void 0 : _b.timestamp) !== undefined && ((_d = (_c = this.channelState.lastMessage) === null || _c === void 0 ? void 0 : _c.dateCreated) === null || _d === void 0 ? void 0 : _d.getTime()) !== update.lastMessage.timestamp.getTime()) {\n                                this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;\n                                updateReasons.add(localKey);\n                            }\n                            if (util_1.isDeepEqual(this.channelState.lastMessage, {})) {\n                                delete this.channelState.lastMessage;\n                            }\n                            break;\n                        case fieldMappings.state:\n                            var state = update.state || undefined;\n                            if (state !== undefined) {\n                                state.dateUpdated = new Date(state.dateUpdated);\n                            }\n                            if (util_1.isDeepEqual(this.channelState.state, state)) {\n                                break;\n                            }\n                            this.channelState.state = state;\n                            updateReasons.add(localKey);\n                            break;\n                        default:\n                            var isDate = update[key] instanceof Date;\n                            var keysMatchAsDates = isDate && ((_e = this.channelState[localKey]) === null || _e === void 0 ? void 0 : _e.getTime()) === update[key].getTime();\n                            var keysMatchAsNonDates = !isDate && this[localKey] === update[key];\n                            if (keysMatchAsDates || keysMatchAsNonDates) {\n                                break;\n                            }\n                            this.channelState[localKey] = update[key];\n                            updateReasons.add(localKey);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            if (updateReasons.size > 0) {\n                this.emit('updated', { channel: this, updateReasons: [].concat((0, _toConsumableArray3.default)(updateReasons)) });\n            }\n        }\n        /**\n         * @private\n         */\n\n    }, {\n        key: \"_onMessageAdded\",\n        value: function _onMessageAdded(message) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = (0, _getIterator3.default)(this.members.values()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var member = _step2.value;\n\n                    if (member.identity === message.author) {\n                        member._endTyping();\n                        break;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            this.emit('messageAdded', message);\n        }\n    }, {\n        key: \"_setLastConsumedMessageIndex\",\n        value: function () {\n            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(index) {\n                var result;\n                return _regenerator2.default.wrap(function _callee3$(_context3) {\n                    while (1) {\n                        switch (_context3.prev = _context3.next) {\n                            case 0:\n                                _context3.next = 2;\n                                return this.services.commandExecutor.mutateResource('post', this.configuration.links.myConversations + \"/\" + this.sid, {\n                                    last_consumed_message_index: index\n                                });\n\n                            case 2:\n                                result = _context3.sent;\n                                return _context3.abrupt(\"return\", result.unread_messages_count);\n\n                            case 4:\n                            case \"end\":\n                                return _context3.stop();\n                        }\n                    }\n                }, _callee3, this);\n            }));\n\n            function _setLastConsumedMessageIndex(_x) {\n                return _ref3.apply(this, arguments);\n            }\n\n            return _setLastConsumedMessageIndex;\n        }()\n        /**\n         * Add a participant to the Channel by its Identity.\n         * @param {String} identity - Identity of the Client to add\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"add\",\n        value: function () {\n            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(identity) {\n                return _regenerator2.default.wrap(function _callee4$(_context4) {\n                    while (1) {\n                        switch (_context4.prev = _context4.next) {\n                            case 0:\n                                _context4.next = 2;\n                                return this.membersEntity.add(identity);\n\n                            case 2:\n                            case \"end\":\n                                return _context4.stop();\n                        }\n                    }\n                }, _callee4, this);\n            }));\n\n            function add(_x2) {\n                return _ref4.apply(this, arguments);\n            }\n\n            return add;\n        }()\n        /**\n         * Advance last consumed Channel's Message index to current consumption horizon.\n         * Rejects if User is not Member of Channel.\n         * Last consumed Message index is updated only if new index value is higher than previous.\n         * @param {Number} index - Message index to advance to as last read\n         * @returns {Promise<number>} resulting unread messages count in the channel\n         */\n\n    }, {\n        key: \"advanceLastConsumedMessageIndex\",\n        value: function () {\n            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(index) {\n                return _regenerator2.default.wrap(function _callee5$(_context5) {\n                    while (1) {\n                        switch (_context5.prev = _context5.next) {\n                            case 0:\n                                _context5.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                if (!(index < this.lastConsumedMessageIndex)) {\n                                    _context5.next = 6;\n                                    break;\n                                }\n\n                                _context5.next = 5;\n                                return this._setLastConsumedMessageIndex(this.lastConsumedMessageIndex);\n\n                            case 5:\n                                return _context5.abrupt(\"return\", _context5.sent);\n\n                            case 6:\n                                _context5.next = 8;\n                                return this._setLastConsumedMessageIndex(index);\n\n                            case 8:\n                                return _context5.abrupt(\"return\", _context5.sent);\n\n                            case 9:\n                            case \"end\":\n                                return _context5.stop();\n                        }\n                    }\n                }, _callee5, this);\n            }));\n\n            function advanceLastConsumedMessageIndex(_x3) {\n                return _ref5.apply(this, arguments);\n            }\n\n            return advanceLastConsumedMessageIndex;\n        }()\n        /**\n         * Decline an invitation to the Channel and unsubscribe from its events.\n         * @returns {Promise<Channel>}\n         */\n\n    }, {\n        key: \"decline\",\n        value: function () {\n            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {\n                return _regenerator2.default.wrap(function _callee6$(_context6) {\n                    while (1) {\n                        switch (_context6.prev = _context6.next) {\n                            case 0:\n                                _context6.next = 2;\n                                return this.services.commandExecutor.mutateResource('delete', this.links.invites + \"/\" + this.configuration.userIdentity);\n\n                            case 2:\n                                return _context6.abrupt(\"return\", this);\n\n                            case 3:\n                            case \"end\":\n                                return _context6.stop();\n                        }\n                    }\n                }, _callee6, this);\n            }));\n\n            function decline() {\n                return _ref6.apply(this, arguments);\n            }\n\n            return decline;\n        }()\n        /**\n         * Delete the Channel and unsubscribe from its events.\n         * @returns {Promise<Channel>}\n         */\n\n    }, {\n        key: \"delete\",\n        value: function () {\n            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {\n                return _regenerator2.default.wrap(function _callee7$(_context7) {\n                    while (1) {\n                        switch (_context7.prev = _context7.next) {\n                            case 0:\n                                _context7.next = 2;\n                                return this.services.commandExecutor.mutateResource('delete', this.links.self);\n\n                            case 2:\n                                return _context7.abrupt(\"return\", this);\n\n                            case 3:\n                            case \"end\":\n                                return _context7.stop();\n                        }\n                    }\n                }, _callee7, this);\n            }));\n\n            function _delete() {\n                return _ref7.apply(this, arguments);\n            }\n\n            return _delete;\n        }()\n        /**\n         * Get the custom attributes of this Channel.<br/>\n         *\n         * <i>NOTE: {@link Channel}'s <code>attributes</code> property will be empty for public channels until this function is called.</i>\n         * @returns {Promise<any>} attributes of this Channel\n         */\n\n    }, {\n        key: \"getAttributes\",\n        value: function () {\n            var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8() {\n                return _regenerator2.default.wrap(function _callee8$(_context8) {\n                    while (1) {\n                        switch (_context8.prev = _context8.next) {\n                            case 0:\n                                _context8.next = 2;\n                                return this._subscribe();\n\n                            case 2:\n                                return _context8.abrupt(\"return\", this.attributes);\n\n                            case 3:\n                            case \"end\":\n                                return _context8.stop();\n                        }\n                    }\n                }, _callee8, this);\n            }));\n\n            function getAttributes() {\n                return _ref8.apply(this, arguments);\n            }\n\n            return getAttributes;\n        }()\n        /**\n         * Returns messages from channel using paginator interface.\n         * @param {Number} [pageSize=30] Number of messages to return in single chunk\n         * @param {Number} [anchor] - Index of newest Message to fetch. From the end by default\n         * @param {('backwards'|'forward')} [direction=backwards] - Query direction. By default it query backwards\n         *                                                          from newer to older. 'forward' will query in opposite direction\n         * @returns {Promise<Paginator<Message>>} page of messages\n         */\n\n    }, {\n        key: \"getMessages\",\n        value: function () {\n            var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(pageSize, anchor, direction) {\n                return _regenerator2.default.wrap(function _callee9$(_context9) {\n                    while (1) {\n                        switch (_context9.prev = _context9.next) {\n                            case 0:\n                                _context9.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                return _context9.abrupt(\"return\", this.messagesEntity.getMessages(pageSize, anchor, direction));\n\n                            case 3:\n                            case \"end\":\n                                return _context9.stop();\n                        }\n                    }\n                }, _callee9, this);\n            }));\n\n            function getMessages(_x4, _x5, _x6) {\n                return _ref9.apply(this, arguments);\n            }\n\n            return getMessages;\n        }()\n        /**\n         * Get a list of all Members joined to this Channel.\n         * @returns {Promise<Member[]>}\n         */\n\n    }, {\n        key: \"getMembers\",\n        value: function () {\n            var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {\n                return _regenerator2.default.wrap(function _callee10$(_context10) {\n                    while (1) {\n                        switch (_context10.prev = _context10.next) {\n                            case 0:\n                                _context10.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                return _context10.abrupt(\"return\", this.membersEntity.getMembers());\n\n                            case 3:\n                            case \"end\":\n                                return _context10.stop();\n                        }\n                    }\n                }, _callee10, this);\n            }));\n\n            function getMembers() {\n                return _ref10.apply(this, arguments);\n            }\n\n            return getMembers;\n        }()\n        /**\n         * Get channel members count.\n         * <br/>\n         * This method is semi-realtime. This means that this data will be eventually correct,\n         * but will also possibly be incorrect for a few seconds. The Chat system does not\n         * provide real time events for counter values changes.\n         * <br/>\n         * So this is quite useful for any UI badges, but is not recommended\n         * to build any core application logic based on these counters being accurate in real time.\n         * @returns {Promise<number>}\n         */\n\n    }, {\n        key: \"getMembersCount\",\n        value: function () {\n            var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11() {\n                var url, response;\n                return _regenerator2.default.wrap(function _callee11$(_context11) {\n                    while (1) {\n                        switch (_context11.prev = _context11.next) {\n                            case 0:\n                                url = new util_1.UriBuilder(this.configuration.links.conversations).path(this.sid).build();\n                                _context11.next = 3;\n                                return this.services.network.get(url);\n\n                            case 3:\n                                response = _context11.sent;\n                                return _context11.abrupt(\"return\", response.body.participants_count);\n\n                            case 5:\n                            case \"end\":\n                                return _context11.stop();\n                        }\n                    }\n                }, _callee11, this);\n            }));\n\n            function getMembersCount() {\n                return _ref11.apply(this, arguments);\n            }\n\n            return getMembersCount;\n        }()\n        /**\n         * Get a Member by its SID.\n         * @param {String} memberSid - Member sid\n         * @returns {Promise<Member>}\n         */\n\n    }, {\n        key: \"getMemberBySid\",\n        value: function () {\n            var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(memberSid) {\n                return _regenerator2.default.wrap(function _callee12$(_context12) {\n                    while (1) {\n                        switch (_context12.prev = _context12.next) {\n                            case 0:\n                                return _context12.abrupt(\"return\", this.membersEntity.getMemberBySid(memberSid));\n\n                            case 1:\n                            case \"end\":\n                                return _context12.stop();\n                        }\n                    }\n                }, _callee12, this);\n            }));\n\n            function getMemberBySid(_x7) {\n                return _ref12.apply(this, arguments);\n            }\n\n            return getMemberBySid;\n        }()\n        /**\n         * Get a Member by its identity.\n         * @param {String} identity - Member identity\n         * @returns {Promise<Member>}\n         */\n\n    }, {\n        key: \"getMemberByIdentity\",\n        value: function () {\n            var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13(identity) {\n                return _regenerator2.default.wrap(function _callee13$(_context13) {\n                    while (1) {\n                        switch (_context13.prev = _context13.next) {\n                            case 0:\n                                return _context13.abrupt(\"return\", this.membersEntity.getMemberByIdentity(identity));\n\n                            case 1:\n                            case \"end\":\n                                return _context13.stop();\n                        }\n                    }\n                }, _callee13, this);\n            }));\n\n            function getMemberByIdentity(_x8) {\n                return _ref13.apply(this, arguments);\n            }\n\n            return getMemberByIdentity;\n        }()\n        /**\n         * Get total message count in a channel.\n         * <br/>\n         * This method is semi-realtime. This means that this data will be eventually correct,\n         * but will also possibly be incorrect for a few seconds. The Chat system does not\n         * provide real time events for counter values changes.\n         * <br/>\n         * So this is quite useful for any UI badges, but is not recommended\n         * to build any core application logic based on these counters being accurate in real time.\n         * @returns {Promise<number>}\n         */\n\n    }, {\n        key: \"getMessagesCount\",\n        value: function () {\n            var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14() {\n                var url, response;\n                return _regenerator2.default.wrap(function _callee14$(_context14) {\n                    while (1) {\n                        switch (_context14.prev = _context14.next) {\n                            case 0:\n                                url = new util_1.UriBuilder(this.configuration.links.conversations).path(this.sid).build();\n                                _context14.next = 3;\n                                return this.services.network.get(url);\n\n                            case 3:\n                                response = _context14.sent;\n                                return _context14.abrupt(\"return\", response.body.messages_count);\n\n                            case 5:\n                            case \"end\":\n                                return _context14.stop();\n                        }\n                    }\n                }, _callee14, this);\n            }));\n\n            function getMessagesCount() {\n                return _ref14.apply(this, arguments);\n            }\n\n            return getMessagesCount;\n        }()\n        /**\n         * Get unconsumed messages count for a User if they are a Member of this Channel.\n         * Rejects if the User is not a Member of the Channel.\n         * <br/>\n         * This method is semi-realtime. This means that this data will be eventually correct,\n         * but will also possibly be incorrect for a few seconds. The Chat system does not\n         * provide real time events for counter values changes.\n         * <br/>\n         * So this is quite useful for any “unread messages count” badges, but is not recommended\n         * to build any core application logic based on these counters being accurate in real time.\n         * @returns {Promise<number|null>}\n         */\n\n    }, {\n        key: \"getUnconsumedMessagesCount\",\n        value: function () {\n            var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15() {\n                var url, response, unreadMessageCount;\n                return _regenerator2.default.wrap(function _callee15$(_context15) {\n                    while (1) {\n                        switch (_context15.prev = _context15.next) {\n                            case 0:\n                                url = new util_1.UriBuilder(this.configuration.links.myConversations).path(this.sid).build();\n                                _context15.next = 3;\n                                return this.services.network.get(url);\n\n                            case 3:\n                                response = _context15.sent;\n\n                                if (!(response.body.conversation_sid !== this.sid)) {\n                                    _context15.next = 6;\n                                    break;\n                                }\n\n                                throw new Error('Channel was not found in the user channels list');\n\n                            case 6:\n                                unreadMessageCount = response.body.unread_messages_count;\n\n                                if (!(typeof unreadMessageCount === 'number')) {\n                                    _context15.next = 9;\n                                    break;\n                                }\n\n                                return _context15.abrupt(\"return\", unreadMessageCount);\n\n                            case 9:\n                                return _context15.abrupt(\"return\", null);\n\n                            case 10:\n                            case \"end\":\n                                return _context15.stop();\n                        }\n                    }\n                }, _callee15, this);\n            }));\n\n            function getUnconsumedMessagesCount() {\n                return _ref15.apply(this, arguments);\n            }\n\n            return getUnconsumedMessagesCount;\n        }()\n        /**\n         * Invite a user to the Channel by their Identity.\n         * @param {String} identity - Identity of the user to invite\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"invite\",\n        value: function () {\n            var _ref16 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16(identity) {\n                return _regenerator2.default.wrap(function _callee16$(_context16) {\n                    while (1) {\n                        switch (_context16.prev = _context16.next) {\n                            case 0:\n                                _context16.next = 2;\n                                return this.membersEntity.invite(identity);\n\n                            case 2:\n                            case \"end\":\n                                return _context16.stop();\n                        }\n                    }\n                }, _callee16, this);\n            }));\n\n            function invite(_x9) {\n                return _ref16.apply(this, arguments);\n            }\n\n            return invite;\n        }()\n        /**\n         * Join the Channel and subscribe to its events.\n         * @returns {Promise<Channel>}\n         */\n\n    }, {\n        key: \"join\",\n        value: function () {\n            var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17() {\n                return _regenerator2.default.wrap(function _callee17$(_context17) {\n                    while (1) {\n                        switch (_context17.prev = _context17.next) {\n                            case 0:\n                                _context17.next = 2;\n                                return this.services.commandExecutor.mutateResource('post', this.links.participants, {\n                                    identity: this.configuration.userIdentity\n                                });\n\n                            case 2:\n                                return _context17.abrupt(\"return\", this);\n\n                            case 3:\n                            case \"end\":\n                                return _context17.stop();\n                        }\n                    }\n                }, _callee17, this);\n            }));\n\n            function join() {\n                return _ref17.apply(this, arguments);\n            }\n\n            return join;\n        }()\n        /**\n         * Leave the Channel.\n         * @returns {Promise<Channel>}\n         */\n\n    }, {\n        key: \"leave\",\n        value: function () {\n            var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18() {\n                return _regenerator2.default.wrap(function _callee18$(_context18) {\n                    while (1) {\n                        switch (_context18.prev = _context18.next) {\n                            case 0:\n                                if (!(this.channelState.status === 'joined')) {\n                                    _context18.next = 3;\n                                    break;\n                                }\n\n                                _context18.next = 3;\n                                return this.services.commandExecutor.mutateResource('delete', this.links.participants + \"/\" + this.configuration.userIdentity);\n\n                            case 3:\n                                return _context18.abrupt(\"return\", this);\n\n                            case 4:\n                            case \"end\":\n                                return _context18.stop();\n                        }\n                    }\n                }, _callee18, this);\n            }));\n\n            function leave() {\n                return _ref18.apply(this, arguments);\n            }\n\n            return leave;\n        }()\n        /**\n         * Remove a Member from the Channel.\n         * @param {String|Member} member - Member to remove. Could either be an identity string or a Member instance.\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"removeMember\",\n        value: function () {\n            var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19(member) {\n                return _regenerator2.default.wrap(function _callee19$(_context19) {\n                    while (1) {\n                        switch (_context19.prev = _context19.next) {\n                            case 0:\n                                _context19.next = 2;\n                                return this.membersEntity.remove(typeof member === 'string' ? member : member.sid);\n\n                            case 2:\n                            case \"end\":\n                                return _context19.stop();\n                        }\n                    }\n                }, _callee19, this);\n            }));\n\n            function removeMember(_x10) {\n                return _ref19.apply(this, arguments);\n            }\n\n            return removeMember;\n        }()\n        /**\n         * Send a Message in the Channel.\n         * @param {String|FormData|Channel#SendMediaOptions|null} message - The message body for text message,\n         * FormData or MediaOptions for media content. Sending FormData supported only with browser engine\n         * @param {any} [messageAttributes] - attributes for the message\n         * @returns {Promise<number>} new Message's index in the Channel's messages list\n         */\n\n    }, {\n        key: \"sendMessage\",\n        value: function () {\n            var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20(message, messageAttributes) {\n                var _response, response;\n\n                return _regenerator2.default.wrap(function _callee20$(_context20) {\n                    while (1) {\n                        switch (_context20.prev = _context20.next) {\n                            case 0:\n                                if (!(typeof message === 'string' || message === null)) {\n                                    _context20.next = 5;\n                                    break;\n                                }\n\n                                _context20.next = 3;\n                                return this.messagesEntity.send(message, messageAttributes);\n\n                            case 3:\n                                _response = _context20.sent;\n                                return _context20.abrupt(\"return\", util_1.parseToNumber(_response.index));\n\n                            case 5:\n                                _context20.next = 7;\n                                return this.messagesEntity.sendMedia(message, messageAttributes);\n\n                            case 7:\n                                response = _context20.sent;\n                                return _context20.abrupt(\"return\", util_1.parseToNumber(response.index));\n\n                            case 9:\n                            case \"end\":\n                                return _context20.stop();\n                        }\n                    }\n                }, _callee20, this);\n            }));\n\n            function sendMessage(_x11, _x12) {\n                return _ref20.apply(this, arguments);\n            }\n\n            return sendMessage;\n        }()\n        /**\n         * Set last consumed Channel's Message index to last known Message's index in this Channel.\n         * @returns {Promise<number>} resulting unread messages count in the channel\n         */\n\n    }, {\n        key: \"setAllMessagesConsumed\",\n        value: function () {\n            var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21() {\n                var messagesPage;\n                return _regenerator2.default.wrap(function _callee21$(_context21) {\n                    while (1) {\n                        switch (_context21.prev = _context21.next) {\n                            case 0:\n                                _context21.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                _context21.next = 4;\n                                return this.getMessages(1);\n\n                            case 4:\n                                messagesPage = _context21.sent;\n\n                                if (!(messagesPage.items.length > 0)) {\n                                    _context21.next = 7;\n                                    break;\n                                }\n\n                                return _context21.abrupt(\"return\", this.advanceLastConsumedMessageIndex(messagesPage.items[0].index));\n\n                            case 7:\n                                return _context21.abrupt(\"return\", _promise2.default.resolve(0));\n\n                            case 8:\n                            case \"end\":\n                                return _context21.stop();\n                        }\n                    }\n                }, _callee21, this);\n            }));\n\n            function setAllMessagesConsumed() {\n                return _ref21.apply(this, arguments);\n            }\n\n            return setAllMessagesConsumed;\n        }()\n        /**\n         * Set all messages in the channel unread.\n         * @returns {Promise<number>} resulting unread messages count in the channel\n         */\n\n    }, {\n        key: \"setNoMessagesConsumed\",\n        value: function () {\n            var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22() {\n                return _regenerator2.default.wrap(function _callee22$(_context22) {\n                    while (1) {\n                        switch (_context22.prev = _context22.next) {\n                            case 0:\n                                _context22.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                _context22.next = 4;\n                                return this._setLastConsumedMessageIndex(null);\n\n                            case 4:\n                                return _context22.abrupt(\"return\", _context22.sent);\n\n                            case 5:\n                            case \"end\":\n                                return _context22.stop();\n                        }\n                    }\n                }, _callee22, this);\n            }));\n\n            function setNoMessagesConsumed() {\n                return _ref22.apply(this, arguments);\n            }\n\n            return setNoMessagesConsumed;\n        }()\n        /**\n         * Set User Notification level for this channel.\n         * @param {Channel#NotificationLevel} notificationLevel - The new user notification level\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"setUserNotificationLevel\",\n        value: function () {\n            var _ref23 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee23(notificationLevel) {\n                return _regenerator2.default.wrap(function _callee23$(_context23) {\n                    while (1) {\n                        switch (_context23.prev = _context23.next) {\n                            case 0:\n                                _context23.next = 2;\n                                return this.services.commandExecutor.mutateResource('post', this.configuration.links.myConversations + \"/\" + this.sid, {\n                                    notification_level: notificationLevel\n                                });\n\n                            case 2:\n                            case \"end\":\n                                return _context23.stop();\n                        }\n                    }\n                }, _callee23, this);\n            }));\n\n            function setUserNotificationLevel(_x13) {\n                return _ref23.apply(this, arguments);\n            }\n\n            return setUserNotificationLevel;\n        }()\n        /**\n         * Send a notification to the server indicating that this Client is currently typing in this Channel.\n         * Typing ended notification is sent after a while automatically, but by calling again this method you ensure typing ended is not received.\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"typing\",\n        value: function typing() {\n            return this.services.typingIndicator.send(this.sid);\n        }\n        /**\n         * Update the Channel's attributes.\n         * @param {any} attributes new attributes for Channel.\n         * @returns {Promise<Channel>}\n         */\n\n    }, {\n        key: \"updateAttributes\",\n        value: function () {\n            var _ref24 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee24(attributes) {\n                return _regenerator2.default.wrap(function _callee24$(_context24) {\n                    while (1) {\n                        switch (_context24.prev = _context24.next) {\n                            case 0:\n                                _context24.next = 2;\n                                return this.services.commandExecutor.mutateResource('post', this.links.self, { attributes: attributes !== undefined ? (0, _stringify2.default)(attributes) : undefined });\n\n                            case 2:\n                                return _context24.abrupt(\"return\", this);\n\n                            case 3:\n                            case \"end\":\n                                return _context24.stop();\n                        }\n                    }\n                }, _callee24, this);\n            }));\n\n            function updateAttributes(_x14) {\n                return _ref24.apply(this, arguments);\n            }\n\n            return updateAttributes;\n        }()\n        /**\n         * Update the Channel's friendlyName.\n         * @param {String} friendlyName - The new Channel friendlyName\n         * @returns {Promise<Channel>}\n         */\n\n    }, {\n        key: \"updateFriendlyName\",\n        value: function () {\n            var _ref25 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee25(friendlyName) {\n                return _regenerator2.default.wrap(function _callee25$(_context25) {\n                    while (1) {\n                        switch (_context25.prev = _context25.next) {\n                            case 0:\n                                if (!(this.channelState.friendlyName !== friendlyName)) {\n                                    _context25.next = 3;\n                                    break;\n                                }\n\n                                _context25.next = 3;\n                                return this.services.commandExecutor.mutateResource('post', this.links.self, { friendly_name: friendlyName });\n\n                            case 3:\n                                return _context25.abrupt(\"return\", this);\n\n                            case 4:\n                            case \"end\":\n                                return _context25.stop();\n                        }\n                    }\n                }, _callee25, this);\n            }));\n\n            function updateFriendlyName(_x15) {\n                return _ref25.apply(this, arguments);\n            }\n\n            return updateFriendlyName;\n        }()\n        /**\n         * Set last consumed Channel's Message index to current consumption horizon.\n         * @param {Number|null} index - Message index to set as last read.\n         * If null provided, then the behavior is identical to {@link Channel#setNoMessagesConsumed}\n         * @returns {Promise<number>} resulting unread messages count in the channel\n         */\n\n    }, {\n        key: \"updateLastConsumedMessageIndex\",\n        value: function () {\n            var _ref26 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee26(index) {\n                return _regenerator2.default.wrap(function _callee26$(_context26) {\n                    while (1) {\n                        switch (_context26.prev = _context26.next) {\n                            case 0:\n                                _context26.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                return _context26.abrupt(\"return\", this._setLastConsumedMessageIndex(index));\n\n                            case 3:\n                            case \"end\":\n                                return _context26.stop();\n                        }\n                    }\n                }, _callee26, this);\n            }));\n\n            function updateLastConsumedMessageIndex(_x16) {\n                return _ref26.apply(this, arguments);\n            }\n\n            return updateLastConsumedMessageIndex;\n        }()\n        /**\n         * Update the Channel's unique name.\n         * @param {String|null} uniqueName - New unique name for the Channel. Setting unique name to null removes it.\n         * @returns {Promise<Channel>}\n         */\n\n    }, {\n        key: \"updateUniqueName\",\n        value: function () {\n            var _ref27 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee27(uniqueName) {\n                return _regenerator2.default.wrap(function _callee27$(_context27) {\n                    while (1) {\n                        switch (_context27.prev = _context27.next) {\n                            case 0:\n                                if (!(this.channelState.uniqueName !== uniqueName)) {\n                                    _context27.next = 4;\n                                    break;\n                                }\n\n                                if (!uniqueName) {\n                                    uniqueName = '';\n                                }\n                                _context27.next = 4;\n                                return this.services.commandExecutor.mutateResource('post', this.links.self, { unique_name: uniqueName });\n\n                            case 4:\n                                return _context27.abrupt(\"return\", this);\n\n                            case 5:\n                            case \"end\":\n                                return _context27.stop();\n                        }\n                    }\n                }, _callee27, this);\n            }));\n\n            function updateUniqueName(_x17) {\n                return _ref27.apply(this, arguments);\n            }\n\n            return updateUniqueName;\n        }()\n        /**\n         * Gets User Descriptors for this channel.\n         * @returns {Promise<Paginator<UserDescriptor>>}\n         */\n\n    }, {\n        key: \"getUserDescriptors\",\n        value: function () {\n            var _ref28 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee28() {\n                return _regenerator2.default.wrap(function _callee28$(_context28) {\n                    while (1) {\n                        switch (_context28.prev = _context28.next) {\n                            case 0:\n                                return _context28.abrupt(\"return\", this.services.users.getChannelUserDescriptors(this.sid));\n\n                            case 1:\n                            case \"end\":\n                                return _context28.stop();\n                        }\n                    }\n                }, _callee28, this);\n            }));\n\n            function getUserDescriptors() {\n                return _ref28.apply(this, arguments);\n            }\n\n            return getUserDescriptors;\n        }()\n    }, {\n        key: \"status\",\n        get: function get() {\n            return this.channelState.status;\n        }\n    }, {\n        key: \"type\",\n        get: function get() {\n            return this.channelState.type;\n        }\n    }, {\n        key: \"uniqueName\",\n        get: function get() {\n            return this.channelState.uniqueName;\n        }\n    }, {\n        key: \"isPrivate\",\n        get: function get() {\n            return this.channelState.type === 'private';\n        }\n    }, {\n        key: \"friendlyName\",\n        get: function get() {\n            return this.channelState.friendlyName;\n        }\n    }, {\n        key: \"dateUpdated\",\n        get: function get() {\n            return this.channelState.dateUpdated;\n        }\n    }, {\n        key: \"dateCreated\",\n        get: function get() {\n            return this.channelState.dateCreated;\n        }\n    }, {\n        key: \"createdBy\",\n        get: function get() {\n            return this.channelState.createdBy;\n        }\n    }, {\n        key: \"attributes\",\n        get: function get() {\n            return this.channelState.attributes;\n        }\n    }, {\n        key: \"lastConsumedMessageIndex\",\n        get: function get() {\n            return this.channelState.lastConsumedMessageIndex;\n        }\n    }, {\n        key: \"lastMessage\",\n        get: function get() {\n            return this.channelState.lastMessage;\n        }\n    }, {\n        key: \"notificationLevel\",\n        get: function get() {\n            return this.channelState.notificationLevel;\n        }\n    }, {\n        key: \"state\",\n        get: function get() {\n            return this.channelState.state;\n        }\n    }], [{\n        key: \"preprocessUpdate\",\n        value: function preprocessUpdate(update, channelSid) {\n            try {\n                if (typeof update.attributes === 'string') {\n                    update.attributes = JSON.parse(update.attributes);\n                } else if (update.attributes) {\n                    (0, _stringify2.default)(update.attributes);\n                }\n            } catch (e) {\n                log.warn('Retrieved malformed attributes from the server for channel: ' + channelSid);\n                update.attributes = {};\n            }\n            try {\n                if (update.dateCreated) {\n                    update.dateCreated = new Date(update.dateCreated);\n                }\n            } catch (e) {\n                log.warn('Retrieved malformed dateCreated from the server for channel: ' + channelSid);\n                delete update.dateCreated;\n            }\n            try {\n                if (update.dateUpdated) {\n                    update.dateUpdated = new Date(update.dateUpdated);\n                }\n            } catch (e) {\n                log.warn('Retrieved malformed dateUpdated from the server for channel: ' + channelSid);\n                delete update.dateUpdated;\n            }\n            try {\n                if (update.lastMessage && update.lastMessage.timestamp) {\n                    update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n                }\n            } catch (e) {\n                log.warn('Retrieved malformed lastMessage.timestamp from the server for channel: ' + channelSid);\n                delete update.lastMessage.timestamp;\n            }\n        }\n    }]);\n    return Channel;\n}(events_1.EventEmitter);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"add\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonNegativeInteger), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"advanceLastConsumedMessageIndex\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['undefined', twilio_sdk_type_validator_1.nonNegativeInteger], ['undefined', twilio_sdk_type_validator_1.nonNegativeInteger], ['undefined', twilio_sdk_type_validator_1.literal('backwards', 'forward')]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, Number, String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"getMessages\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"getMemberBySid\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"getMemberByIdentity\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"invite\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync([twilio_sdk_type_validator_1.nonEmptyString, member_1.Member]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"removeMember\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['string', twilio_sdk_type_validator_1.literal(null),\n// Wrapping it into a custom rule is necessary because the FormData class is not available on initialization.\ntwilio_sdk_type_validator_1.custom(function (value) {\n    return [value instanceof FormData, 'an instance of FormData'];\n}), twilio_sdk_type_validator_1.objectSchema('media options', {\n    contentType: [twilio_sdk_type_validator_1.nonEmptyString, 'undefined'],\n    media: twilio_sdk_type_validator_1.custom(function (value) {\n        var isValid = typeof value === 'string' && value.length > 0 || value instanceof Uint8Array || value instanceof ArrayBuffer;\n        if (typeof Blob === 'function') {\n            isValid = isValid || value instanceof Blob;\n        }\n        return [isValid, 'a non-empty string, an instance of Buffer or an instance of Blob'];\n    })\n})], ['undefined', 'string', 'number', 'boolean', 'object', twilio_sdk_type_validator_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"sendMessage\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.literal('default', 'muted')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"setUserNotificationLevel\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['string', 'number', 'boolean', 'object', twilio_sdk_type_validator_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"updateAttributes\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync('string'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"updateFriendlyName\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync([twilio_sdk_type_validator_1.literal(null), twilio_sdk_type_validator_1.nonNegativeInteger]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"updateLastConsumedMessageIndex\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['string', twilio_sdk_type_validator_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Channel.prototype, \"updateUniqueName\", null);\nexports.Channel = Channel;\n/**\n * Fired when a Member has joined the Channel.\n * @event Channel#memberJoined\n * @type {Member}\n */\n/**\n * Fired when a Member has left the Channel.\n * @event Channel#memberLeft\n * @type {Member}\n */\n/**\n * Fired when a Member's fields has been updated.\n * @event Channel#memberUpdated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */\n/**\n * Fired when a new Message has been added to the Channel.\n * @event Channel#messageAdded\n * @type {Message}\n */\n/**\n * Fired when Message is removed from Channel's message list.\n * @event Channel#messageRemoved\n * @type {Message}\n */\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Channel#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n/**\n * Fired when a Member has stopped typing.\n * @event Channel#typingEnded\n * @type {Member}\n */\n/**\n * Fired when a Member has started typing.\n * @event Channel#typingStarted\n * @type {Member}\n */\n/**\n * Fired when a Channel's attributes or metadata have been updated.\n * During Channel's {@link Client.create | creation and initialization} this event might be fired multiple times\n * for same joined or created Channel as new data is arriving from different sources.\n * @event Channel#updated\n * @type {Object}\n * @property {Channel} channel - Updated Channel\n * @property {Channel#UpdateReason[]} updateReasons - Array of Channel's updated event reasons\n */\n/**\n * Fired when the Channel was destroyed or currently logged in User has left private Channel\n * @event Channel#removed\n * @type {Channel}\n */"]},"metadata":{},"sourceType":"script"}
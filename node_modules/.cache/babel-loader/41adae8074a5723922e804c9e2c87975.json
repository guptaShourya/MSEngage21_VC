{"ast":null,"code":"import _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transform } from '@tensorflow/tfjs-core';\nimport { TransformProgram } from '../transform_gpu';\nexport function transform(args) {\n  const inputs = args.inputs,\n        backend = args.backend,\n        attrs = args.attrs;\n  const image = inputs.image,\n        transforms = inputs.transforms;\n  const interpolation = attrs.interpolation,\n        fillMode = attrs.fillMode,\n        fillValue = attrs.fillValue,\n        outputShape = attrs.outputShape;\n\n  const _image$shape = _slicedToArray(image.shape, 4),\n        batch = _image$shape[0],\n        imageHeight = _image$shape[1],\n        imageWidth = _image$shape[2],\n        numChannels = _image$shape[3];\n\n  const _ref = outputShape != null ? outputShape : [imageHeight, imageWidth],\n        _ref2 = _slicedToArray(_ref, 2),\n        outHeight = _ref2[0],\n        outWidth = _ref2[1];\n\n  const outShape = [batch, outHeight, outWidth, numChannels];\n  const program = new TransformProgram(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\nexport const transformConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform\n};","map":{"version":3,"sources":["../../src/kernels/Transform.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAA8C,SAA9C,QAA+F,uBAA/F;AAGA,SAAQ,gBAAR,QAA+B,kBAA/B;AAEA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAIL;AAAA,QACQ,MADR,GACkC,IADlC,CACQ,MADR;AAAA,QACgB,OADhB,GACkC,IADlC,CACgB,OADhB;AAAA,QACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,QAEQ,KAFR,GAE6B,MAF7B,CAEQ,KAFR;AAAA,QAEe,UAFf,GAE6B,MAF7B,CAEe,UAFf;AAAA,QAGQ,aAHR,GAG2D,KAH3D,CAGQ,aAHR;AAAA,QAGuB,QAHvB,GAG2D,KAH3D,CAGuB,QAHvB;AAAA,QAGiC,SAHjC,GAG2D,KAH3D,CAGiC,SAHjC;AAAA,QAG4C,WAH5C,GAG2D,KAH3D,CAG4C,WAH5C;;AAAA,sCAKuD,KAAK,CAAC,KAL7D;AAAA,QAKQ,KALR;AAAA,QAKe,WALf;AAAA,QAK4B,UAL5B;AAAA,QAKwC,WALxC;;AAAA,eAOK,WAAW,IAAI,IAAf,GAAsB,WAAtB,GAAoC,CAAC,WAAD,EAAc,UAAd,CAPzC;AAAA;AAAA,QAMQ,SANR;AAAA,QAMmB,QANnB;;AAQC,QAAM,QAAQ,GACV,CAAC,KAAD,EAAQ,SAAR,EAAmB,QAAnB,EACC,WADD,CADJ;AAIA,QAAM,OAAO,GAAG,IAAI,gBAAJ,CACZ,WADY,EACC,UADD,EACa,aADb,EAC4B,QAD5B,EACsC,SADtC,EACiD,QADjD,CAAhB;AAEA,SAAO,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,KAAD,EAAQ,UAAR,CAAjC,EAAsD,SAAtD,CAAP;AACD;AAED,OAAO,MAAM,eAAe,GAAiB;AAC3C,EAAA,UAAU,EAAE,SAD+B;AAE3C,EAAA,WAAW,EAAE,OAF8B;AAG3C,EAAA,UAAU,EAAE;AAH+B,CAAtC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TransformProgram} from '../transform_gpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: MathBackendWebGL,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(\n      imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
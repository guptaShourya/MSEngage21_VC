{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _assign = require(\"babel-runtime/core-js/object/assign\");\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _set = require(\"babel-runtime/core-js/set\");\n\nvar _set2 = _interopRequireDefault(_set);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Channels = exports.Channel = void 0;\n\nvar events_1 = require(\"events\");\n\nvar logger_1 = require(\"../logger\");\n\nvar channel_1 = require(\"../channel\");\n\nObject.defineProperty(exports, \"Channel\", {\n  enumerable: true,\n  get: function get() {\n    return channel_1.Channel;\n  }\n});\n\nvar deferred_1 = require(\"../util/deferred\");\n\nvar util_1 = require(\"../util\");\n\nvar log = logger_1.Logger.scope('Channels');\n/**\n * Represents channels collection\n * {@see Channel}\n */\n\nvar Channels = function (_events_1$EventEmitte) {\n  (0, _inherits3.default)(Channels, _events_1$EventEmitte);\n\n  function Channels(configuration, services) {\n    (0, _classCallCheck3.default)(this, Channels);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Channels.__proto__ || (0, _getPrototypeOf2.default)(Channels)).call(this));\n\n    _this.configuration = configuration;\n    _this.services = services;\n    _this.channels = new _map2.default();\n    _this.tombstones = new _set2.default();\n    _this.myChannelsFetched = false;\n    _this.myChannelsRead = new deferred_1.Deferred();\n    return _this;\n  }\n\n  (0, _createClass3.default)(Channels, [{\n    key: \"getMap\",\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.services.syncClient.map({\n                  id: this.configuration.myConversations,\n                  mode: 'open_existing'\n                });\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getMap() {\n        return _ref.apply(this, arguments);\n      }\n\n      return getMap;\n    }()\n    /**\n     * Add channel to server\n     * @private\n     * @returns {Promise<Channel>} Channel\n     */\n\n  }, {\n    key: \"addChannel\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(options) {\n        var attributes, response, channelSid, channelDocument, links, existingChannel, channel;\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                attributes = void 0;\n\n                if (typeof options.attributes === 'undefined') {\n                  attributes = {};\n                } else {\n                  attributes = options.attributes;\n                }\n\n                _context2.next = 4;\n                return this.services.commandExecutor.mutateResource('post', this.configuration.links.conversations, {\n                  type: options.isPrivate ? 'private' : 'public',\n                  unique_name: options.uniqueName,\n                  friendly_name: options.friendlyName,\n                  attributes: attributes !== undefined ? (0, _stringify2.default)(attributes) : undefined\n                });\n\n              case 4:\n                response = _context2.sent;\n                channelSid = response.sid || null;\n                channelDocument = response.sync_objects.conversation || null;\n                links = (0, _assign2.default)({\n                  self: response.url\n                }, response.links);\n                existingChannel = this.channels.get(channelSid);\n\n                if (!existingChannel) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                _context2.next = 12;\n                return existingChannel._subscribe();\n\n              case 12:\n                return _context2.abrupt(\"return\", existingChannel);\n\n              case 13:\n                channel = new channel_1.Channel({\n                  channel: channelDocument,\n                  entityName: null,\n                  uniqueName: null,\n                  attributes: null,\n                  createdBy: null,\n                  friendlyName: null,\n                  lastConsumedMessageIndex: null,\n                  type: options.isPrivate ? 'private' : 'public',\n                  dateCreated: null,\n                  dateUpdated: null\n                }, channelSid, links, this.configuration, this.services);\n                this.channels.set(channel.sid, channel);\n                this.registerForEvents(channel);\n                _context2.next = 18;\n                return channel._subscribe();\n\n              case 18:\n                this.emit('channelAdded', channel);\n                return _context2.abrupt(\"return\", channel);\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function addChannel(_x) {\n        return _ref2.apply(this, arguments);\n      }\n\n      return addChannel;\n    }()\n    /**\n     * Fetch channels list and instantiate all necessary objects\n     */\n\n  }, {\n    key: \"fetchChannels\",\n    value: function () {\n      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {\n        var _this2 = this;\n\n        var map, myChannels, upserts, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, channel, errorMessage;\n\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return this.getMap();\n\n              case 3:\n                map = _context3.sent;\n                map.on('itemAdded', function (args) {\n                  log.debug(\"itemAdded: \" + args.item.key);\n\n                  _this2.upsertChannel('sync', args.item.key, args.item.data);\n                });\n                map.on('itemRemoved', function (args) {\n                  log.debug(\"itemRemoved: \" + args.key);\n                  var sid = args.key;\n\n                  if (!_this2.myChannelsFetched) {\n                    _this2.tombstones.add(sid);\n                  }\n\n                  var channel = _this2.channels.get(sid);\n\n                  if (!channel) {\n                    return;\n                  }\n\n                  if (channel.status === 'joined' || channel.status === 'invited') {\n                    channel._setStatus('notParticipating', 'sync');\n\n                    _this2.emit('channelLeft', channel);\n                  }\n\n                  if (channel.isPrivate) {\n                    _this2.channels.delete(sid);\n\n                    _this2.emit('channelRemoved', channel);\n\n                    channel.emit('removed', channel);\n                  }\n                });\n                map.on('itemUpdated', function (args) {\n                  log.debug(\"itemUpdated: \" + args.item.key);\n\n                  _this2.upsertChannel('sync', args.item.key, args.item.data);\n                });\n                _context3.next = 9;\n                return this._fetchMyChannels();\n\n              case 9:\n                myChannels = _context3.sent;\n                upserts = [];\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context3.prev = 14;\n\n                for (_iterator = (0, _getIterator3.default)(myChannels); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  channel = _step.value;\n                  upserts.push(this.upsertChannel('rest', channel.channel_sid, channel));\n                }\n\n                _context3.next = 22;\n                break;\n\n              case 18:\n                _context3.prev = 18;\n                _context3.t0 = _context3[\"catch\"](14);\n                _didIteratorError = true;\n                _iteratorError = _context3.t0;\n\n              case 22:\n                _context3.prev = 22;\n                _context3.prev = 23;\n\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                  _iterator.return();\n                }\n\n              case 25:\n                _context3.prev = 25;\n\n                if (!_didIteratorError) {\n                  _context3.next = 28;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 28:\n                return _context3.finish(25);\n\n              case 29:\n                return _context3.finish(22);\n\n              case 30:\n                this.myChannelsRead.set(true);\n                _context3.next = 33;\n                return _promise2.default.all(upserts);\n\n              case 33:\n                this.myChannelsFetched = true;\n                this.tombstones.clear();\n                log.debug('The channels list has been successfully fetched');\n                return _context3.abrupt(\"return\", this);\n\n              case 39:\n                _context3.prev = 39;\n                _context3.t1 = _context3[\"catch\"](0);\n                errorMessage = 'Failed to fetch the channels list';\n\n                if (this.services.syncClient.connectionState !== 'disconnected') {\n                  log.error(errorMessage, _context3.t1);\n                }\n\n                log.debug(\"ERROR: \" + errorMessage, _context3.t1);\n                throw _context3.t1;\n\n              case 45:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 39], [14, 18, 22, 30], [23,, 25, 29]]);\n      }));\n\n      function fetchChannels() {\n        return _ref3.apply(this, arguments);\n      }\n\n      return fetchChannels;\n    }()\n  }, {\n    key: \"_wrapPaginator\",\n    value: function _wrapPaginator(page, op) {\n      var _this3 = this;\n\n      return op(page.items).then(function (items) {\n        return {\n          items: items,\n          hasNextPage: page.hasNextPage,\n          hasPrevPage: page.hasPrevPage,\n          nextPage: function nextPage() {\n            return page.nextPage().then(function (x) {\n              return _this3._wrapPaginator(x, op);\n            });\n          },\n          prevPage: function prevPage() {\n            return page.prevPage().then(function (x) {\n              return _this3._wrapPaginator(x, op);\n            });\n          }\n        };\n      });\n    }\n  }, {\n    key: \"getChannels\",\n    value: function getChannels(args) {\n      var _this4 = this;\n\n      return this.getMap().then(function (channelsMap) {\n        return channelsMap.getItems(args);\n      }).then(function (page) {\n        return _this4._wrapPaginator(page, function (items) {\n          return _promise2.default.all(items.map(function (item) {\n            return _this4.upsertChannel('sync', item.key, item.data);\n          }));\n        });\n      });\n    }\n  }, {\n    key: \"getChannel\",\n    value: function getChannel(sid) {\n      var _this5 = this;\n\n      return this.getMap().then(function (channelsMap) {\n        return channelsMap.getItems({\n          key: sid\n        });\n      }).then(function (page) {\n        return page.items.map(function (item) {\n          return _this5.upsertChannel('sync', item.key, item.data);\n        });\n      }).then(function (items) {\n        return items.length > 0 ? items[0] : null;\n      });\n    }\n  }, {\n    key: \"pushChannel\",\n    value: function pushChannel(descriptor) {\n      var sid = descriptor.sid;\n      var data = {\n        entityName: null,\n        lastConsumedMessageIndex: descriptor.lastConsumedMessageIndex,\n        type: descriptor.type,\n        status: descriptor.status,\n        friendlyName: descriptor.friendlyName,\n        dateUpdated: descriptor.dateUpdated,\n        dateCreated: descriptor.dateCreated,\n        uniqueName: descriptor.uniqueName,\n        createdBy: descriptor.createdBy,\n        attributes: descriptor.attributes,\n        channel: descriptor.channel,\n        notificationLevel: descriptor.notificationLevel,\n        sid: sid\n      };\n      return this.upsertChannel('chat', sid, data);\n    }\n  }, {\n    key: \"_updateChannel\",\n    value: function _updateChannel(source, channel, data) {\n      var _this6 = this;\n\n      var areSourcesDifferent = channel._statusSource() !== undefined && source !== channel._statusSource();\n\n      var isChannelSourceSync = source !== 'rest' || channel._statusSource() === 'sync';\n\n      if (areSourcesDifferent && isChannelSourceSync && source !== 'sync') {\n        log.trace('upsertChannel: the channel is known from sync and it came from chat, ignoring', {\n          sid: channel.sid,\n          data: data.status,\n          channel: channel.status\n        });\n        return;\n      }\n\n      if (['joined', 'invited'].includes(data.status) && channel.status !== data.status) {\n        channel._setStatus(data.status, source);\n\n        var updateData = {};\n\n        if (data.notificationLevel !== undefined) {\n          updateData.notificationLevel = data.notificationLevel;\n        }\n\n        if (data.lastConsumedMessageIndex !== undefined) {\n          updateData.lastConsumedMessageIndex = data.lastConsumedMessageIndex;\n        }\n\n        if (!util_1.isDeepEqual(updateData, {})) {\n          channel._update(updateData);\n        }\n\n        channel._subscribe().then(function () {\n          _this6.emit(data.status === 'joined' ? 'channelJoined' : 'channelInvited', channel);\n        });\n\n        return;\n      }\n\n      if (['joined', 'invited'].includes(channel.status) && data.status === 'notParticipating') {\n        channel._setStatus('notParticipating', source);\n\n        channel._update(data);\n\n        channel._subscribe().then(function () {\n          _this6.emit('channelLeft', channel);\n        });\n\n        return;\n      }\n\n      if (data.type === 'private' && data.status === 'notParticipating') {\n        channel._subscribe();\n\n        return;\n      }\n\n      channel._update(data);\n    }\n  }, {\n    key: \"upsertChannel\",\n    value: function upsertChannel(source, sid, data) {\n      var _this7 = this;\n\n      log.trace(\"upsertChannel called for \" + sid, data);\n      var channel = this.channels.get(sid); // If the channel is known, update it\n\n      if (channel) {\n        log.trace(\"upsertChannel: the channel \" + channel.sid + \" is known;\" + (\"its status is known from source \" + channel._statusSource() + \" \") + (\"and the update came from source \" + source), channel);\n\n        this._updateChannel(source, channel, data);\n\n        return channel._subscribe().then(function () {\n          return channel;\n        });\n      } // If the channel is deleted, ignore it\n\n\n      if (['chat', 'rest'].includes(source) && this.tombstones.has(sid)) {\n        log.trace('upsertChannel: the channel is deleted but reappeared again from chat, ignoring', sid);\n        return;\n      } // If the channel is unknown, fetch it\n\n\n      log.trace(\"upsertChannel: creating a local channel object with sid \" + sid, data);\n      var baseLink = this.configuration.links.conversations + \"/\" + sid;\n      var links = {\n        self: baseLink,\n        messages: baseLink + \"/Messages\",\n        participants: baseLink + \"/Participants\",\n        invites: baseLink + \"/Invites\"\n      };\n      var newChannel = new channel_1.Channel(data, sid, links, this.configuration, this.services);\n      this.channels.set(sid, newChannel);\n      return newChannel._subscribe().then(function () {\n        _this7.registerForEvents(newChannel);\n\n        _this7.emit('channelAdded', newChannel);\n\n        if (['joined', 'invited'].includes(data.status)) {\n          newChannel._setStatus(data.status, source);\n\n          _this7.emit(data.status === 'joined' ? 'channelJoined' : 'channelInvited', newChannel);\n        }\n\n        return newChannel;\n      });\n    }\n  }, {\n    key: \"onChannelRemoved\",\n    value: function onChannelRemoved(sid) {\n      var channel = this.channels.get(sid);\n\n      if (channel) {\n        this.channels.delete(sid);\n        this.emit('channelRemoved', channel);\n      }\n    }\n  }, {\n    key: \"registerForEvents\",\n    value: function registerForEvents(channel) {\n      var _this8 = this;\n\n      channel.on('removed', function () {\n        return _this8.onChannelRemoved(channel.sid);\n      });\n      channel.on('updated', function (args) {\n        return _this8.emit('channelUpdated', args);\n      });\n      channel.on('memberJoined', this.emit.bind(this, 'memberJoined'));\n      channel.on('memberLeft', this.emit.bind(this, 'memberLeft'));\n      channel.on('memberUpdated', function (args) {\n        return _this8.emit('memberUpdated', args);\n      });\n      channel.on('messageAdded', this.emit.bind(this, 'messageAdded'));\n      channel.on('messageUpdated', function (args) {\n        return _this8.emit('messageUpdated', args);\n      });\n      channel.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n      channel.on('typingStarted', this.emit.bind(this, 'typingStarted'));\n      channel.on('typingEnded', this.emit.bind(this, 'typingEnded'));\n    }\n  }, {\n    key: \"_fetchMyChannels\",\n    value: function () {\n      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {\n        var channels, pageToken, url, response, preProcessedChannels;\n        return _regenerator2.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                channels = [];\n                pageToken = null;\n\n              case 2:\n                url = new util_1.UriBuilder(this.configuration.links.myConversations);\n\n                if (pageToken) {\n                  url.arg('PageToken', pageToken);\n                }\n\n                _context4.next = 6;\n                return this.services.network.get(url.build());\n\n              case 6:\n                response = _context4.sent;\n                preProcessedChannels = response.body.conversations.map(function (channelDescriptor) {\n                  return {\n                    descriptor: channelDescriptor,\n                    channel_sid: channelDescriptor.conversation_sid,\n                    status: channelDescriptor.status,\n                    channel: channelDescriptor.sync_objects.conversation,\n                    messages: channelDescriptor.sync_objects.messages,\n                    roster: channelDescriptor.conversation_sid + \".roster\",\n                    lastConsumedMessageIndex: channelDescriptor.last_consumed_message_index,\n                    notificationLevel: channelDescriptor.notification_level\n                  };\n                });\n                pageToken = response.body.meta.next_token;\n                channels = [].concat((0, _toConsumableArray3.default)(channels), (0, _toConsumableArray3.default)(preProcessedChannels));\n\n              case 10:\n                if (pageToken) {\n                  _context4.next = 2;\n                  break;\n                }\n\n              case 11:\n                return _context4.abrupt(\"return\", channels);\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _fetchMyChannels() {\n        return _ref4.apply(this, arguments);\n      }\n\n      return _fetchMyChannels;\n    }()\n  }]);\n  return Channels;\n}(events_1.EventEmitter);\n\nexports.Channels = Channels;","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio-chat/browser/data/channels.js"],"names":["_toConsumableArray2","require","_toConsumableArray3","_interopRequireDefault","_getIterator2","_getIterator3","_promise","_promise2","_assign","_assign2","_stringify","_stringify2","_regenerator","_regenerator2","_asyncToGenerator2","_asyncToGenerator3","_set","_set2","_map","_map2","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","obj","__esModule","default","Object","defineProperty","exports","value","Channels","Channel","events_1","logger_1","channel_1","enumerable","get","deferred_1","util_1","log","Logger","scope","_events_1$EventEmitte","configuration","services","_this","__proto__","call","channels","tombstones","myChannelsFetched","myChannelsRead","Deferred","key","_ref","mark","_callee","wrap","_callee$","_context","prev","next","syncClient","map","id","myConversations","mode","abrupt","sent","stop","getMap","apply","arguments","_ref2","_callee2","options","attributes","response","channelSid","channelDocument","links","existingChannel","channel","_callee2$","_context2","commandExecutor","mutateResource","conversations","type","isPrivate","unique_name","uniqueName","friendly_name","friendlyName","undefined","sid","sync_objects","conversation","self","url","_subscribe","entityName","createdBy","lastConsumedMessageIndex","dateCreated","dateUpdated","set","registerForEvents","emit","addChannel","_x","_ref3","_callee3","_this2","myChannels","upserts","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","errorMessage","_callee3$","_context3","on","args","debug","item","upsertChannel","data","add","status","_setStatus","delete","_fetchMyChannels","done","push","channel_sid","t0","return","finish","all","clear","t1","connectionState","error","fetchChannels","_wrapPaginator","page","op","_this3","items","then","hasNextPage","hasPrevPage","nextPage","x","prevPage","getChannels","_this4","channelsMap","getItems","getChannel","_this5","length","pushChannel","descriptor","notificationLevel","_updateChannel","source","_this6","areSourcesDifferent","_statusSource","isChannelSourceSync","trace","includes","updateData","isDeepEqual","_update","_this7","has","baseLink","messages","participants","invites","newChannel","onChannelRemoved","_this8","bind","_ref4","_callee4","pageToken","preProcessedChannels","_callee4$","_context4","UriBuilder","arg","network","build","body","channelDescriptor","conversation_sid","roster","last_consumed_message_index","notification_level","meta","next_token","concat","EventEmitter"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _assign = require(\"babel-runtime/core-js/object/assign\");\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _set = require(\"babel-runtime/core-js/set\");\n\nvar _set2 = _interopRequireDefault(_set);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Channels = exports.Channel = void 0;\nvar events_1 = require(\"events\");\nvar logger_1 = require(\"../logger\");\nvar channel_1 = require(\"../channel\");\nObject.defineProperty(exports, \"Channel\", { enumerable: true, get: function get() {\n        return channel_1.Channel;\n    } });\nvar deferred_1 = require(\"../util/deferred\");\nvar util_1 = require(\"../util\");\nvar log = logger_1.Logger.scope('Channels');\n/**\n * Represents channels collection\n * {@see Channel}\n */\n\nvar Channels = function (_events_1$EventEmitte) {\n    (0, _inherits3.default)(Channels, _events_1$EventEmitte);\n\n    function Channels(configuration, services) {\n        (0, _classCallCheck3.default)(this, Channels);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (Channels.__proto__ || (0, _getPrototypeOf2.default)(Channels)).call(this));\n\n        _this.configuration = configuration;\n        _this.services = services;\n        _this.channels = new _map2.default();\n        _this.tombstones = new _set2.default();\n        _this.myChannelsFetched = false;\n        _this.myChannelsRead = new deferred_1.Deferred();\n        return _this;\n    }\n\n    (0, _createClass3.default)(Channels, [{\n        key: \"getMap\",\n        value: function () {\n            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n                return _regenerator2.default.wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                _context.next = 2;\n                                return this.services.syncClient.map({\n                                    id: this.configuration.myConversations,\n                                    mode: 'open_existing'\n                                });\n\n                            case 2:\n                                return _context.abrupt(\"return\", _context.sent);\n\n                            case 3:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, this);\n            }));\n\n            function getMap() {\n                return _ref.apply(this, arguments);\n            }\n\n            return getMap;\n        }()\n        /**\n         * Add channel to server\n         * @private\n         * @returns {Promise<Channel>} Channel\n         */\n\n    }, {\n        key: \"addChannel\",\n        value: function () {\n            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(options) {\n                var attributes, response, channelSid, channelDocument, links, existingChannel, channel;\n                return _regenerator2.default.wrap(function _callee2$(_context2) {\n                    while (1) {\n                        switch (_context2.prev = _context2.next) {\n                            case 0:\n                                attributes = void 0;\n\n                                if (typeof options.attributes === 'undefined') {\n                                    attributes = {};\n                                } else {\n                                    attributes = options.attributes;\n                                }\n                                _context2.next = 4;\n                                return this.services.commandExecutor.mutateResource('post', this.configuration.links.conversations, {\n                                    type: options.isPrivate ? 'private' : 'public',\n                                    unique_name: options.uniqueName,\n                                    friendly_name: options.friendlyName,\n                                    attributes: attributes !== undefined ? (0, _stringify2.default)(attributes) : undefined\n                                });\n\n                            case 4:\n                                response = _context2.sent;\n                                channelSid = response.sid || null;\n                                channelDocument = response.sync_objects.conversation || null;\n                                links = (0, _assign2.default)({ self: response.url }, response.links);\n                                existingChannel = this.channels.get(channelSid);\n\n                                if (!existingChannel) {\n                                    _context2.next = 13;\n                                    break;\n                                }\n\n                                _context2.next = 12;\n                                return existingChannel._subscribe();\n\n                            case 12:\n                                return _context2.abrupt(\"return\", existingChannel);\n\n                            case 13:\n                                channel = new channel_1.Channel({\n                                    channel: channelDocument,\n                                    entityName: null,\n                                    uniqueName: null,\n                                    attributes: null,\n                                    createdBy: null,\n                                    friendlyName: null,\n                                    lastConsumedMessageIndex: null,\n                                    type: options.isPrivate ? 'private' : 'public',\n                                    dateCreated: null,\n                                    dateUpdated: null\n                                }, channelSid, links, this.configuration, this.services);\n\n                                this.channels.set(channel.sid, channel);\n                                this.registerForEvents(channel);\n                                _context2.next = 18;\n                                return channel._subscribe();\n\n                            case 18:\n                                this.emit('channelAdded', channel);\n                                return _context2.abrupt(\"return\", channel);\n\n                            case 20:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2, this);\n            }));\n\n            function addChannel(_x) {\n                return _ref2.apply(this, arguments);\n            }\n\n            return addChannel;\n        }()\n        /**\n         * Fetch channels list and instantiate all necessary objects\n         */\n\n    }, {\n        key: \"fetchChannels\",\n        value: function () {\n            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {\n                var _this2 = this;\n\n                var map, myChannels, upserts, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, channel, errorMessage;\n\n                return _regenerator2.default.wrap(function _callee3$(_context3) {\n                    while (1) {\n                        switch (_context3.prev = _context3.next) {\n                            case 0:\n                                _context3.prev = 0;\n                                _context3.next = 3;\n                                return this.getMap();\n\n                            case 3:\n                                map = _context3.sent;\n\n                                map.on('itemAdded', function (args) {\n                                    log.debug(\"itemAdded: \" + args.item.key);\n                                    _this2.upsertChannel('sync', args.item.key, args.item.data);\n                                });\n                                map.on('itemRemoved', function (args) {\n                                    log.debug(\"itemRemoved: \" + args.key);\n                                    var sid = args.key;\n                                    if (!_this2.myChannelsFetched) {\n                                        _this2.tombstones.add(sid);\n                                    }\n                                    var channel = _this2.channels.get(sid);\n                                    if (!channel) {\n                                        return;\n                                    }\n                                    if (channel.status === 'joined' || channel.status === 'invited') {\n                                        channel._setStatus('notParticipating', 'sync');\n                                        _this2.emit('channelLeft', channel);\n                                    }\n                                    if (channel.isPrivate) {\n                                        _this2.channels.delete(sid);\n                                        _this2.emit('channelRemoved', channel);\n                                        channel.emit('removed', channel);\n                                    }\n                                });\n                                map.on('itemUpdated', function (args) {\n                                    log.debug(\"itemUpdated: \" + args.item.key);\n                                    _this2.upsertChannel('sync', args.item.key, args.item.data);\n                                });\n                                _context3.next = 9;\n                                return this._fetchMyChannels();\n\n                            case 9:\n                                myChannels = _context3.sent;\n                                upserts = [];\n                                _iteratorNormalCompletion = true;\n                                _didIteratorError = false;\n                                _iteratorError = undefined;\n                                _context3.prev = 14;\n\n                                for (_iterator = (0, _getIterator3.default)(myChannels); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                                    channel = _step.value;\n\n                                    upserts.push(this.upsertChannel('rest', channel.channel_sid, channel));\n                                }\n                                _context3.next = 22;\n                                break;\n\n                            case 18:\n                                _context3.prev = 18;\n                                _context3.t0 = _context3[\"catch\"](14);\n                                _didIteratorError = true;\n                                _iteratorError = _context3.t0;\n\n                            case 22:\n                                _context3.prev = 22;\n                                _context3.prev = 23;\n\n                                if (!_iteratorNormalCompletion && _iterator.return) {\n                                    _iterator.return();\n                                }\n\n                            case 25:\n                                _context3.prev = 25;\n\n                                if (!_didIteratorError) {\n                                    _context3.next = 28;\n                                    break;\n                                }\n\n                                throw _iteratorError;\n\n                            case 28:\n                                return _context3.finish(25);\n\n                            case 29:\n                                return _context3.finish(22);\n\n                            case 30:\n                                this.myChannelsRead.set(true);\n                                _context3.next = 33;\n                                return _promise2.default.all(upserts);\n\n                            case 33:\n                                this.myChannelsFetched = true;\n                                this.tombstones.clear();\n                                log.debug('The channels list has been successfully fetched');\n                                return _context3.abrupt(\"return\", this);\n\n                            case 39:\n                                _context3.prev = 39;\n                                _context3.t1 = _context3[\"catch\"](0);\n                                errorMessage = 'Failed to fetch the channels list';\n\n                                if (this.services.syncClient.connectionState !== 'disconnected') {\n                                    log.error(errorMessage, _context3.t1);\n                                }\n                                log.debug(\"ERROR: \" + errorMessage, _context3.t1);\n                                throw _context3.t1;\n\n                            case 45:\n                            case \"end\":\n                                return _context3.stop();\n                        }\n                    }\n                }, _callee3, this, [[0, 39], [14, 18, 22, 30], [23,, 25, 29]]);\n            }));\n\n            function fetchChannels() {\n                return _ref3.apply(this, arguments);\n            }\n\n            return fetchChannels;\n        }()\n    }, {\n        key: \"_wrapPaginator\",\n        value: function _wrapPaginator(page, op) {\n            var _this3 = this;\n\n            return op(page.items).then(function (items) {\n                return {\n                    items: items,\n                    hasNextPage: page.hasNextPage,\n                    hasPrevPage: page.hasPrevPage,\n                    nextPage: function nextPage() {\n                        return page.nextPage().then(function (x) {\n                            return _this3._wrapPaginator(x, op);\n                        });\n                    },\n                    prevPage: function prevPage() {\n                        return page.prevPage().then(function (x) {\n                            return _this3._wrapPaginator(x, op);\n                        });\n                    }\n                };\n            });\n        }\n    }, {\n        key: \"getChannels\",\n        value: function getChannels(args) {\n            var _this4 = this;\n\n            return this.getMap().then(function (channelsMap) {\n                return channelsMap.getItems(args);\n            }).then(function (page) {\n                return _this4._wrapPaginator(page, function (items) {\n                    return _promise2.default.all(items.map(function (item) {\n                        return _this4.upsertChannel('sync', item.key, item.data);\n                    }));\n                });\n            });\n        }\n    }, {\n        key: \"getChannel\",\n        value: function getChannel(sid) {\n            var _this5 = this;\n\n            return this.getMap().then(function (channelsMap) {\n                return channelsMap.getItems({ key: sid });\n            }).then(function (page) {\n                return page.items.map(function (item) {\n                    return _this5.upsertChannel('sync', item.key, item.data);\n                });\n            }).then(function (items) {\n                return items.length > 0 ? items[0] : null;\n            });\n        }\n    }, {\n        key: \"pushChannel\",\n        value: function pushChannel(descriptor) {\n            var sid = descriptor.sid;\n            var data = {\n                entityName: null,\n                lastConsumedMessageIndex: descriptor.lastConsumedMessageIndex,\n                type: descriptor.type,\n                status: descriptor.status,\n                friendlyName: descriptor.friendlyName,\n                dateUpdated: descriptor.dateUpdated,\n                dateCreated: descriptor.dateCreated,\n                uniqueName: descriptor.uniqueName,\n                createdBy: descriptor.createdBy,\n                attributes: descriptor.attributes,\n                channel: descriptor.channel,\n                notificationLevel: descriptor.notificationLevel,\n                sid: sid\n            };\n            return this.upsertChannel('chat', sid, data);\n        }\n    }, {\n        key: \"_updateChannel\",\n        value: function _updateChannel(source, channel, data) {\n            var _this6 = this;\n\n            var areSourcesDifferent = channel._statusSource() !== undefined && source !== channel._statusSource();\n            var isChannelSourceSync = source !== 'rest' || channel._statusSource() === 'sync';\n            if (areSourcesDifferent && isChannelSourceSync && source !== 'sync') {\n                log.trace('upsertChannel: the channel is known from sync and it came from chat, ignoring', {\n                    sid: channel.sid,\n                    data: data.status,\n                    channel: channel.status\n                });\n                return;\n            }\n            if (['joined', 'invited'].includes(data.status) && channel.status !== data.status) {\n                channel._setStatus(data.status, source);\n                var updateData = {};\n                if (data.notificationLevel !== undefined) {\n                    updateData.notificationLevel = data.notificationLevel;\n                }\n                if (data.lastConsumedMessageIndex !== undefined) {\n                    updateData.lastConsumedMessageIndex = data.lastConsumedMessageIndex;\n                }\n                if (!util_1.isDeepEqual(updateData, {})) {\n                    channel._update(updateData);\n                }\n                channel._subscribe().then(function () {\n                    _this6.emit(data.status === 'joined' ? 'channelJoined' : 'channelInvited', channel);\n                });\n                return;\n            }\n            if (['joined', 'invited'].includes(channel.status) && data.status === 'notParticipating') {\n                channel._setStatus('notParticipating', source);\n                channel._update(data);\n                channel._subscribe().then(function () {\n                    _this6.emit('channelLeft', channel);\n                });\n                return;\n            }\n            if (data.type === 'private' && data.status === 'notParticipating') {\n                channel._subscribe();\n                return;\n            }\n            channel._update(data);\n        }\n    }, {\n        key: \"upsertChannel\",\n        value: function upsertChannel(source, sid, data) {\n            var _this7 = this;\n\n            log.trace(\"upsertChannel called for \" + sid, data);\n            var channel = this.channels.get(sid);\n            // If the channel is known, update it\n            if (channel) {\n                log.trace(\"upsertChannel: the channel \" + channel.sid + \" is known;\" + (\"its status is known from source \" + channel._statusSource() + \" \") + (\"and the update came from source \" + source), channel);\n                this._updateChannel(source, channel, data);\n                return channel._subscribe().then(function () {\n                    return channel;\n                });\n            }\n            // If the channel is deleted, ignore it\n            if (['chat', 'rest'].includes(source) && this.tombstones.has(sid)) {\n                log.trace('upsertChannel: the channel is deleted but reappeared again from chat, ignoring', sid);\n                return;\n            }\n            // If the channel is unknown, fetch it\n            log.trace(\"upsertChannel: creating a local channel object with sid \" + sid, data);\n            var baseLink = this.configuration.links.conversations + \"/\" + sid;\n            var links = {\n                self: baseLink,\n                messages: baseLink + \"/Messages\",\n                participants: baseLink + \"/Participants\",\n                invites: baseLink + \"/Invites\"\n            };\n            var newChannel = new channel_1.Channel(data, sid, links, this.configuration, this.services);\n            this.channels.set(sid, newChannel);\n            return newChannel._subscribe().then(function () {\n                _this7.registerForEvents(newChannel);\n                _this7.emit('channelAdded', newChannel);\n                if (['joined', 'invited'].includes(data.status)) {\n                    newChannel._setStatus(data.status, source);\n                    _this7.emit(data.status === 'joined' ? 'channelJoined' : 'channelInvited', newChannel);\n                }\n                return newChannel;\n            });\n        }\n    }, {\n        key: \"onChannelRemoved\",\n        value: function onChannelRemoved(sid) {\n            var channel = this.channels.get(sid);\n            if (channel) {\n                this.channels.delete(sid);\n                this.emit('channelRemoved', channel);\n            }\n        }\n    }, {\n        key: \"registerForEvents\",\n        value: function registerForEvents(channel) {\n            var _this8 = this;\n\n            channel.on('removed', function () {\n                return _this8.onChannelRemoved(channel.sid);\n            });\n            channel.on('updated', function (args) {\n                return _this8.emit('channelUpdated', args);\n            });\n            channel.on('memberJoined', this.emit.bind(this, 'memberJoined'));\n            channel.on('memberLeft', this.emit.bind(this, 'memberLeft'));\n            channel.on('memberUpdated', function (args) {\n                return _this8.emit('memberUpdated', args);\n            });\n            channel.on('messageAdded', this.emit.bind(this, 'messageAdded'));\n            channel.on('messageUpdated', function (args) {\n                return _this8.emit('messageUpdated', args);\n            });\n            channel.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n            channel.on('typingStarted', this.emit.bind(this, 'typingStarted'));\n            channel.on('typingEnded', this.emit.bind(this, 'typingEnded'));\n        }\n    }, {\n        key: \"_fetchMyChannels\",\n        value: function () {\n            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {\n                var channels, pageToken, url, response, preProcessedChannels;\n                return _regenerator2.default.wrap(function _callee4$(_context4) {\n                    while (1) {\n                        switch (_context4.prev = _context4.next) {\n                            case 0:\n                                channels = [];\n                                pageToken = null;\n\n                            case 2:\n                                url = new util_1.UriBuilder(this.configuration.links.myConversations);\n\n                                if (pageToken) {\n                                    url.arg('PageToken', pageToken);\n                                }\n                                _context4.next = 6;\n                                return this.services.network.get(url.build());\n\n                            case 6:\n                                response = _context4.sent;\n                                preProcessedChannels = response.body.conversations.map(function (channelDescriptor) {\n                                    return {\n                                        descriptor: channelDescriptor,\n                                        channel_sid: channelDescriptor.conversation_sid,\n                                        status: channelDescriptor.status,\n                                        channel: channelDescriptor.sync_objects.conversation,\n                                        messages: channelDescriptor.sync_objects.messages,\n                                        roster: channelDescriptor.conversation_sid + \".roster\",\n                                        lastConsumedMessageIndex: channelDescriptor.last_consumed_message_index,\n                                        notificationLevel: channelDescriptor.notification_level\n                                    };\n                                });\n\n                                pageToken = response.body.meta.next_token;\n                                channels = [].concat((0, _toConsumableArray3.default)(channels), (0, _toConsumableArray3.default)(preProcessedChannels));\n\n                            case 10:\n                                if (pageToken) {\n                                    _context4.next = 2;\n                                    break;\n                                }\n\n                            case 11:\n                                return _context4.abrupt(\"return\", channels);\n\n                            case 12:\n                            case \"end\":\n                                return _context4.stop();\n                        }\n                    }\n                }, _callee4, this);\n            }));\n\n            function _fetchMyChannels() {\n                return _ref4.apply(this, arguments);\n            }\n\n            return _fetchMyChannels;\n        }()\n    }]);\n    return Channels;\n}(events_1.EventEmitter);\n\nexports.Channels = Channels;"]},"metadata":{},"sourceType":"script"}
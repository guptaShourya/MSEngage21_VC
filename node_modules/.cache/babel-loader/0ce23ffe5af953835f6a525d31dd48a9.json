{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core'; // tslint:disable-next-line: no-imports-from-dist\n\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\n\nexport class HashTable {\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(keyDType, valueDType) {\n    this.keyDType = keyDType;\n    this.valueDType = valueDType;\n    this.handle = scalar(0); // tslint:disable-next-line: no-any\n\n    this.tensorMap = new Map();\n    keep(this.handle);\n  }\n\n  get id() {\n    return this.handle.id;\n  }\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n\n\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n  /**\n   * The number of items in the hash table.\n   */\n\n\n  size() {\n    return this.tensorMap.size;\n  }\n  /**\n   * The number of items in the hash table as a rank-0 tensor.\n   */\n\n\n  tensorSize() {\n    return tfOps.scalar(this.size(), 'int32');\n  }\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n\n\n  import(keys, values) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var $keys;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.checkKeyAndValueTensor(keys, values); // We only store the primitive values of the keys, this allows lookup\n            // to be O(1).\n\n\n            _context.next = 3;\n            return keys.data();\n\n          case 3:\n            $keys = _context.sent;\n\n            // Clear the hashTable before inserting new values.\n            _this.tensorMap.forEach(value => value.dispose());\n\n            _this.tensorMap.clear();\n\n            return _context.abrupt(\"return\", tidy(() => {\n              const $values = unstack(values);\n              const keysLength = $keys.length;\n              const valuesLength = $values.length;\n              util.assert(keysLength === valuesLength, () => \"The number of elements doesn't match, keys has \" + \"\".concat(keysLength, \" elements, the values has \").concat(valuesLength, \" \") + \"elements.\");\n\n              for (let i = 0; i < keysLength; i++) {\n                const key = $keys[i];\n                const value = $values[i];\n                keep(value);\n\n                _this.tensorMap.set(key, value);\n              }\n\n              return _this.handle;\n            }));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n\n\n  find(keys, defaultValue) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var $keys;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _this2.checkKeyAndValueTensor(keys, defaultValue);\n\n            _context2.next = 3;\n            return keys.data();\n\n          case 3:\n            $keys = _context2.sent;\n            return _context2.abrupt(\"return\", tidy(() => {\n              const result = [];\n\n              for (let i = 0; i < $keys.length; i++) {\n                const key = $keys[i];\n\n                const value = _this2.findWithDefault(key, defaultValue);\n\n                result.push(value);\n              }\n\n              return stack(result);\n            }));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  } // tslint:disable-next-line: no-any\n\n\n  findWithDefault(key, defaultValue) {\n    const result = this.tensorMap.get(key);\n    return result != null ? result : defaultValue;\n  }\n\n  checkKeyAndValueTensor(key, value) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(\"Expect key dtype \".concat(this.keyDType, \", but got \") + \"\".concat(key.dtype));\n    }\n\n    if (value.dtype !== this.valueDType) {\n      throw new Error(\"Expect value dtype \".concat(this.valueDType, \", but got \") + \"\".concat(value.dtype));\n    }\n  }\n\n}","map":{"version":3,"sources":["../../src/executor/hash_table.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType, keep, scalar, stack, Tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n  readonly handle: Tensor;\n\n  // tslint:disable-next-line: no-any\n  private tensorMap: Map<any, Tensor>;\n\n  get id() {\n    return this.handle.id;\n  }\n\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(readonly keyDType: DataType, readonly valueDType: DataType) {\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map<any, Tensor>();\n\n    keep(this.handle);\n  }\n\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n\n  /**\n   * The number of items in the hash table.\n   */\n  size(): number {\n    return this.tensorMap.size;\n  }\n\n  /**\n   * The number of items in the hash table as a rank-0 tensor.\n   */\n  tensorSize(): Tensor {\n    return tfOps.scalar(this.size(), 'int32');\n  }\n\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n  async import(keys: Tensor, values: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, values);\n\n    // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n    const $keys = await keys.data();\n\n    // Clear the hashTable before inserting new values.\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n\n    return tidy(() => {\n      const $values = unstack(values);\n\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n\n      util.assert(\n          keysLength === valuesLength,\n          () => `The number of elements doesn't match, keys has ` +\n              `${keysLength} elements, the values has ${valuesLength} ` +\n              `elements.`);\n\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n\n      return this.handle;\n    });\n  }\n\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n  async find(keys: Tensor, defaultValue: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n\n    const $keys = await keys.data();\n\n    return tidy(() => {\n      const result: Tensor[] = [];\n\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n\n      return stack(result);\n    });\n  }\n\n  // tslint:disable-next-line: no-any\n  private findWithDefault(key: any, defaultValue: Tensor): Tensor {\n    const result = this.tensorMap.get(key);\n\n    return result != null ? result : defaultValue;\n  }\n\n  private checkKeyAndValueTensor(key: Tensor, value: Tensor) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(\n          `Expect key dtype ${this.keyDType}, but got ` +\n          `${key.dtype}`);\n    }\n\n    if (value.dtype !== this.valueDType) {\n      throw new Error(\n          `Expect value dtype ${this.valueDType}, but got ` +\n          `${value.dtype}`);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
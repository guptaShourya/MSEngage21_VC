{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringToHashBucketFast } from '@tensorflow/tfjs-core';\nimport { stringToHashBucketFastImpl } from './StringToHashBucketFast_impl';\nexport function stringToHashBucketFast(args) {\n  const inputs = args.inputs,\n        backend = args.backend,\n        attrs = args.attrs;\n  const numBuckets = attrs.numBuckets;\n  const input = inputs.input;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n\n  if (numBuckets <= 0) {\n    throw new Error(\"Number of buckets must be at least 1\");\n  }\n\n  const $input = backend.data.get(input.dataId).values;\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\nexport const stringToHashBucketFastConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast\n};","map":{"version":3,"sources":["../../src/kernels/StringToHashBucketFast.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,sBAAlC,QAAsI,uBAAtI;AAIA,SAAQ,0BAAR,QAAyC,+BAAzC;AAEA,OAAM,SAAU,sBAAV,CAAiC,IAAjC,EAIL;AAAA,QACQ,MADR,GACkC,IADlC,CACQ,MADR;AAAA,QACgB,OADhB,GACkC,IADlC,CACgB,OADhB;AAAA,QACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,QAEQ,UAFR,GAEsB,KAFtB,CAEQ,UAFR;AAAA,QAGQ,KAHR,GAGiB,MAHjB,CAGQ,KAHR;;AAKC,MAAI,KAAK,CAAC,KAAN,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACD;;AACD,MAAI,UAAU,IAAI,CAAlB,EAAqB;AACnB,UAAM,IAAI,KAAJ,wCAAN;AACD;;AAED,QAAM,MAAM,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,KAAK,CAAC,MAAvB,EAA+B,MAA9C;AAEA,QAAM,MAAM,GAAG,0BAA0B,CAAC,MAAD,EAAS,UAAT,CAAzC;AACA,SAAO,OAAO,CAAC,cAAR,CAAuB,KAAK,CAAC,KAA7B,EAAoC,OAApC,EAA6C,MAA7C,CAAP;AACD;AAED,OAAO,MAAM,4BAA4B,GAAiB;AACxD,EAAA,UAAU,EAAE,sBAD4C;AAExD,EAAA,WAAW,EAAE,KAF2C;AAGxD,EAAA,UAAU,EAAE;AAH4C,CAAnD","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringToHashBucketFastImpl} from './StringToHashBucketFast_impl';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendCPU,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n/**\n * Calculates the moving average delta for the given pair ofsamples. A sample (S)\n * consists of a numerator (Sn) and a denominator (Sd).The moving average delta is\n * calculated as follows:\n *\n * MovingAvgDelta = (Sn[1] - Sn[0]) / (Sd[1] - Sd[0])\n */\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar MovingAverageDelta = function () {\n  /**\n   * Constructor.\n   */\n  function MovingAverageDelta() {\n    _classCallCheck(this, MovingAverageDelta);\n\n    Object.defineProperties(this, {\n      _samples: {\n        value: [{\n          denominator: 0,\n          numerator: 0\n        }, {\n          denominator: 0,\n          numerator: 0\n        }]\n      }\n    });\n  }\n  /**\n   * Get the moving average delta.\n   * @returns {number}\n   */\n\n\n  _createClass(MovingAverageDelta, [{\n    key: 'get',\n    value: function get() {\n      var samples = this._samples;\n      var denominatorDelta = samples[1].denominator - samples[0].denominator || Infinity;\n      var numeratorDelta = samples[1].numerator - samples[0].numerator;\n      return Math.round(numeratorDelta / denominatorDelta);\n    }\n    /**\n     * Put a sample and get rid of the older sample to maintain sample size of 2.\n     * @param numerator\n     * @param denominator\n     */\n\n  }, {\n    key: 'putSample',\n    value: function putSample(numerator, denominator) {\n      var samples = this._samples;\n      samples.shift();\n      samples.push({\n        denominator: denominator,\n        numerator: numerator\n      });\n    }\n  }]);\n\n  return MovingAverageDelta;\n}();\n\nmodule.exports = MovingAverageDelta;","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio-video/es5/util/movingaveragedelta.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","MovingAverageDelta","_samples","value","denominator","numerator","get","samples","denominatorDelta","Infinity","numeratorDelta","Math","round","putSample","shift","push","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Calculates the moving average delta for the given pair ofsamples. A sample (S)\n * consists of a numerator (Sn) and a denominator (Sd).The moving average delta is\n * calculated as follows:\n *\n * MovingAvgDelta = (Sn[1] - Sn[0]) / (Sd[1] - Sd[0])\n */\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MovingAverageDelta = function () {\n  /**\n   * Constructor.\n   */\n  function MovingAverageDelta() {\n    _classCallCheck(this, MovingAverageDelta);\n\n    Object.defineProperties(this, {\n      _samples: {\n        value: [{ denominator: 0, numerator: 0 }, { denominator: 0, numerator: 0 }]\n      }\n    });\n  }\n\n  /**\n   * Get the moving average delta.\n   * @returns {number}\n   */\n\n\n  _createClass(MovingAverageDelta, [{\n    key: 'get',\n    value: function get() {\n      var samples = this._samples;\n\n      var denominatorDelta = samples[1].denominator - samples[0].denominator || Infinity;\n      var numeratorDelta = samples[1].numerator - samples[0].numerator;\n      return Math.round(numeratorDelta / denominatorDelta);\n    }\n\n    /**\n     * Put a sample and get rid of the older sample to maintain sample size of 2.\n     * @param numerator\n     * @param denominator\n     */\n\n  }, {\n    key: 'putSample',\n    value: function putSample(numerator, denominator) {\n      var samples = this._samples;\n\n      samples.shift();\n      samples.push({ denominator: denominator, numerator: numerator });\n    }\n  }]);\n\n  return MovingAverageDelta;\n}();\n\nmodule.exports = MovingAverageDelta;"]},"metadata":{},"sourceType":"script"}
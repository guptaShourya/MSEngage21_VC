{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Processor = void 0;\n/**\n * @private\n * The [[Processor]] is an abstract class for building your own custom processors.\n */\n\nvar Processor =\n/** @class */\nfunction () {\n  function Processor() {}\n\n  return Processor;\n}();\n\nexports.Processor = Processor;","map":{"version":3,"sources":["../../lib/processors/Processor.ts"],"names":[],"mappings":";;;;;;AAAA;;;AAGG;;AACH,IAAA,SAAA;AAAA;AAAA,YAAA;AAAA,WAAA,SAAA,GAAA,CASC;;AAAD,SAAA,SAAA;AAAC,CATD,EAAA;;AAAsB,OAAA,CAAA,SAAA,GAAA,SAAA","sourcesContent":["/**\n * @private\n * The [[Processor]] is an abstract class for building your own custom processors.\n */\nexport abstract class Processor {\n\n  /**\n   * Applies a transform to an input frame and draw the results to an output frame buffer.\n   * The frame will be dropped if this method raises an exception.\n   * @param inputFrameBuffer - The source of the input frame to process.\n   * @param outputFrameBuffer - The output frame buffer to use to draw the processed frame.\n   */\n  abstract processFrame(inputFrameBuffer: OffscreenCanvas, outputFrameBuffer: HTMLCanvasElement): Promise<void> | void;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/toolbar/icons/ScreenShare.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ScreenShareTwoToneIcon from '@material-ui/icons/ScreenShareTwoTone';\nimport CancelPresentationTwoToneIcon from '@material-ui/icons/CancelPresentationTwoTone';\nimport FindNewWidth from '../../utils/GridLayout';\n\nvar ScreenShare = function ScreenShare(_ref) {\n  _s();\n\n  var room = _ref.room;\n\n  // to toggle screen share\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isScreenShared = _useState2[0],\n      setIsScreenShared = _useState2[1];\n\n  var screenTrack; // removes any existing screen share\n\n  var removeAllChildren = function removeAllChildren() {\n    var screen_tag = document.getElementById('screen');\n\n    while (screen_tag.lastElementChild) {\n      screen_tag.removeChild(screen_tag.lastElementChild);\n    }\n  }; // publish screen to all participants\n\n\n  room.on(\"trackSubscribed\", function (track) {\n    if (track.name === 'screen_5139') {\n      removeAllChildren();\n      var screen_tag = document.getElementById('screen');\n      screen_tag.appendChild(track.attach());\n    }\n  }); // unpublishes screen from all participants\n\n  room.on(\"trackUnsubscribed\", function (track) {\n    if (track.name === 'screen_5139') {\n      removeAllChildren();\n      FindNewWidth();\n    }\n  }); // enables/disables screen sharing\n\n  var handleShareScreen = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _require, LocalVideoTrack, stream;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (isScreenShared) {\n                _context.next = 9;\n                break;\n              }\n\n              _require = require('twilio-video'), LocalVideoTrack = _require.LocalVideoTrack; // open prompt to select the screen to share\n\n              _context.next = 4;\n              return navigator.mediaDevices.getDisplayMedia();\n\n            case 4:\n              stream = _context.sent;\n              screenTrack = new LocalVideoTrack(stream.getTracks()[0], {\n                name: \"screen_5139\"\n              }); // publish the stream to room\n\n              room.localParticipant.publishTrack(screenTrack).then(function (track) {\n                document.getElementById('screen').appendChild(track.track.attach());\n              });\n              _context.next = 12;\n              break;\n\n            case 9:\n              //to unpresent\n              // select the video track on which screen is present\n              Array.from(room.localParticipant.videoTracks.values()).map(function (publication) {\n                return publication.track;\n              })[1].stop(); // unpublish track\n\n              room.localParticipant.unpublishTrack(Array.from(room.localParticipant.videoTracks.values()).map(function (publication) {\n                return publication.track;\n              })[1]);\n              removeAllChildren();\n\n            case 12:\n              setIsScreenShared(!isScreenShared);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleShareScreen() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"toolbarDiv\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleShareScreen,\n      children: isScreenShared ? /*#__PURE__*/_jsxDEV(CancelPresentationTwoToneIcon, {\n        style: {\n          color: 'black',\n          margin: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 35\n      }, _this) : /*#__PURE__*/_jsxDEV(ScreenShareTwoToneIcon, {\n        style: {\n          color: 'black',\n          margin: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 115\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(ScreenShare, \"DRHZvuAIRI6EFmXld17att0kEf0=\");\n\n_c = ScreenShare;\nexport default ScreenShare;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScreenShare\");","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/toolbar/icons/ScreenShare.js"],"names":["React","useState","ScreenShareTwoToneIcon","CancelPresentationTwoToneIcon","FindNewWidth","ScreenShare","room","isScreenShared","setIsScreenShared","screenTrack","removeAllChildren","screen_tag","document","getElementById","lastElementChild","removeChild","on","track","name","appendChild","attach","handleShareScreen","require","LocalVideoTrack","navigator","mediaDevices","getDisplayMedia","stream","getTracks","localParticipant","publishTrack","then","Array","from","videoTracks","values","map","publication","stop","unpublishTrack","color","margin"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ScreenShareTwoToneIcon from '@material-ui/icons/ScreenShareTwoTone';\nimport CancelPresentationTwoToneIcon from '@material-ui/icons/CancelPresentationTwoTone';\nimport FindNewWidth from '../../utils/GridLayout';\n\nconst ScreenShare = ({ room }) => {\n\n    // to toggle screen share\n    const [isScreenShared, setIsScreenShared] = useState(false);\n    var screenTrack;\n\n    // removes any existing screen share\n    const removeAllChildren = () => {\n        let screen_tag = document.getElementById('screen');\n        while (screen_tag.lastElementChild) {\n            screen_tag.removeChild(screen_tag.lastElementChild);\n        }\n    }\n\n    // publish screen to all participants\n    room.on(\"trackSubscribed\", (track) => {\n        if (track.name === 'screen_5139') {\n            removeAllChildren();\n            let screen_tag = document.getElementById('screen');\n            screen_tag.appendChild(track.attach());\n        }\n    });\n    // unpublishes screen from all participants\n    room.on(\"trackUnsubscribed\", (track) => {\n        if (track.name === 'screen_5139') {\n            removeAllChildren();\n            FindNewWidth();\n        }\n    });\n\n\n    // enables/disables screen sharing\n    const handleShareScreen = async () => {\n        // to present\n        if (!isScreenShared) {\n\n            const { LocalVideoTrack } = require('twilio-video');\n            // open prompt to select the screen to share\n            const stream = await navigator.mediaDevices.getDisplayMedia();\n            screenTrack = new LocalVideoTrack(stream.getTracks()[0], { name: \"screen_5139\" });\n            // publish the stream to room\n            room.localParticipant.publishTrack(screenTrack).then((track) => {\n                document.getElementById('screen').appendChild(track.track.attach());\n            });\n\n        } else { //to unpresent\n\n            // select the video track on which screen is present\n            Array.from(room.localParticipant.videoTracks.values()).map(publication => publication.track)[1].stop();\n            // unpublish track\n            room.localParticipant.unpublishTrack(Array.from(room.localParticipant.videoTracks.values())\n                .map(publication => publication.track)[1]);\n\n            removeAllChildren();\n        }\n        setIsScreenShared(!isScreenShared);\n    }\n\n    return (\n        <div className='toolbarDiv'>\n            <button onClick={handleShareScreen}>\n                {isScreenShared ? <CancelPresentationTwoToneIcon  style = {{color : 'black', margin: \"10px\"}}/> : <ScreenShareTwoToneIcon  style = {{color : 'black', margin: \"10px\"}}/>}\n            </button>\n        </div>\n    );\n}\nexport default ScreenShare;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar FieldList = require('./task/field').FieldList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar SampleList = require('./task/sample').SampleList;\n\nvar TaskActionsList = require('./task/taskActions').TaskActionsList;\n\nvar TaskStatisticsList = require('./task/taskStatistics').TaskStatisticsList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar TaskList;\nvar TaskPage;\nvar TaskInstance;\nvar TaskContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskList\n *\n * @param {Twilio.Autopilot.V1} version - Version of the resource\n * @param {string} assistantSid -\n *          The SID of the Assistant that is the parent of the resource\n */\n\n/* jshint ignore:end */\n\nTaskList = function TaskList(version, assistantSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function tasks\n   * @memberof Twilio.Autopilot.V1.AssistantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext}\n   */\n\n  /* jshint ignore:end */\n  function TaskListInstance(sid) {\n    return TaskListInstance.get(sid);\n  }\n\n  TaskListInstance._version = version; // Path Solution\n\n  TaskListInstance._solution = {\n    assistantSid: assistantSid\n  };\n  TaskListInstance._uri = \"/Assistants/\".concat(assistantSid, \"/Tasks\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams TaskInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  TaskListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists TaskInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a TaskInstance\n   *\n   * @function create\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.uniqueName -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string} [opts.friendlyName] -\n   *         descriptive string that you create to describe the new resource\n   * @param {object} [opts.actions] -\n   *          The JSON string that specifies the actions that instruct the Assistant on how to perform the task\n   * @param {string} [opts.actionsUrl] -\n   *          The URL from which the Assistant can fetch actions\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TaskInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.uniqueName)) {\n      throw new Error('Required parameter \"opts.uniqueName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Actions': serialize.object(_.get(opts, 'actions')),\n      'ActionsUrl': _.get(opts, 'actionsUrl')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskInstance(this._version, payload, this._solution.assistantSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a task\n   *\n   * @function get\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {string} sid - The unique string that identifies the resource to fetch\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.get = function get(sid) {\n    return new TaskContext(this._version, this._solution.assistantSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TaskListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TaskListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskSolution} solution - Path solution\n *\n * @returns TaskPage\n */\n\n/* jshint ignore:end */\n\n\nTaskPage = function TaskPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TaskPage.prototype, Page.prototype);\n\nTaskPage.prototype.constructor = TaskPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of TaskInstance\n *\n * @function getInstance\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskPage#\n *\n * @param {TaskPayload} payload - Payload response from the API\n *\n * @returns TaskInstance\n */\n\n/* jshint ignore:end */\n\nTaskPage.prototype.getInstance = function getInstance(payload) {\n  return new TaskInstance(this._version, payload, this._solution.assistantSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTaskPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTaskPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} links - A list of the URLs of related resources\n * @property {string} assistantSid -\n *          The SID of the Assistant that is the parent of the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} actionsUrl -\n *          The URL from which the Assistant can fetch actions\n * @property {string} url - The absolute URL of the Task resource\n *\n * @param {V1} version - Version of the resource\n * @param {TaskPayload} payload - The instance payload\n * @param {sid} assistantSid -\n *          The SID of the Assistant that is the parent of the resource\n * @param {sid_like} sid - The unique string that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance = function TaskInstance(version, payload, assistantSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n\n  this.assistantSid = payload.assistant_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.actionsUrl = payload.actions_url; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    assistantSid: assistantSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(TaskInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new TaskContext(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\nTaskInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {object} [opts.actions] -\n *          The JSON string that specifies the actions that instruct the Assistant on how to perform the task\n * @param {string} [opts.actionsUrl] -\n *          The URL from which the Assistant can fetch actions\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the fields\n *\n * @function fields\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.FieldList}\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.fields = function fields() {\n  return this._proxy.fields;\n};\n/* jshint ignore:start */\n\n/**\n * Access the samples\n *\n * @function samples\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList}\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.samples = function samples() {\n  return this._proxy.samples;\n};\n/* jshint ignore:start */\n\n/**\n * Access the taskActions\n *\n * @function taskActions\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.TaskActionsList}\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.taskActions = function taskActions() {\n  return this._proxy.taskActions;\n};\n/* jshint ignore:start */\n\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.TaskStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTaskInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskContext\n *\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskContext.FieldList} fields -\n *          fields resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList} samples -\n *          samples resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskContext.TaskActionsList} taskActions -\n *          taskActions resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskContext.TaskStatisticsList} statistics -\n *          statistics resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} assistantSid -\n *          The SID of the Assistant that is the parent of the resource to fetch\n * @param {sid_like} sid - The unique string that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nTaskContext = function TaskContext(version, assistantSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    assistantSid: assistantSid,\n    sid: sid\n  };\n  this._uri = \"/Assistants/\".concat(assistantSid, \"/Tasks/\").concat(sid); // Dependents\n\n  this._fields = undefined;\n  this._samples = undefined;\n  this._taskActions = undefined;\n  this._statistics = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskInstance(this._version, payload, this._solution.assistantSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {object} [opts.actions] -\n *          The JSON string that specifies the actions that instruct the Assistant on how to perform the task\n * @param {string} [opts.actionsUrl] -\n *          The URL from which the Assistant can fetch actions\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'Actions': serialize.object(_.get(opts, 'actions')),\n    'ActionsUrl': _.get(opts, 'actionsUrl')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskInstance(this._version, payload, this._solution.assistantSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TaskContext.prototype, 'fields', {\n  get: function get() {\n    if (!this._fields) {\n      this._fields = new FieldList(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n\n    return this._fields;\n  }\n});\nObject.defineProperty(TaskContext.prototype, 'samples', {\n  get: function get() {\n    if (!this._samples) {\n      this._samples = new SampleList(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n\n    return this._samples;\n  }\n});\nObject.defineProperty(TaskContext.prototype, 'taskActions', {\n  get: function get() {\n    if (!this._taskActions) {\n      this._taskActions = new TaskActionsList(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n\n    return this._taskActions;\n  }\n});\nObject.defineProperty(TaskContext.prototype, 'statistics', {\n  get: function get() {\n    if (!this._statistics) {\n      this._statistics = new TaskStatisticsList(this._version, this._solution.assistantSid, this._solution.sid);\n    }\n\n    return this._statistics;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nTaskContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTaskContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TaskList: TaskList,\n  TaskPage: TaskPage,\n  TaskInstance: TaskInstance,\n  TaskContext: TaskContext\n};","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio/lib/rest/autopilot/v1/assistant/task.js"],"names":["Q","require","_","util","FieldList","Page","SampleList","TaskActionsList","TaskStatisticsList","deserialize","serialize","values","TaskList","TaskPage","TaskInstance","TaskContext","version","assistantSid","TaskListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","uniqueName","object","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","friendlyName","friendly_name","links","assistant_sid","unique_name","actionsUrl","actions_url","url","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","fields","samples","taskActions","statistics","_fields","_samples","_taskActions","_statistics","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar FieldList = require('./task/field').FieldList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar SampleList = require('./task/sample').SampleList;\nvar TaskActionsList = require('./task/taskActions').TaskActionsList;\nvar TaskStatisticsList = require('./task/taskStatistics').TaskStatisticsList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar TaskList;\nvar TaskPage;\nvar TaskInstance;\nvar TaskContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskList\n *\n * @param {Twilio.Autopilot.V1} version - Version of the resource\n * @param {string} assistantSid -\n *          The SID of the Assistant that is the parent of the resource\n */\n/* jshint ignore:end */\nTaskList = function TaskList(version, assistantSid) {\n  /* jshint ignore:start */\n  /**\n   * @function tasks\n   * @memberof Twilio.Autopilot.V1.AssistantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext}\n   */\n  /* jshint ignore:end */\n  function TaskListInstance(sid) {\n    return TaskListInstance.get(sid);\n  }\n\n  TaskListInstance._version = version;\n  // Path Solution\n  TaskListInstance._solution = {assistantSid: assistantSid};\n  TaskListInstance._uri = `/Assistants/${assistantSid}/Tasks`;\n  /* jshint ignore:start */\n  /**\n   * Streams TaskInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TaskListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TaskInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a TaskInstance\n   *\n   * @function create\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.uniqueName -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string} [opts.friendlyName] -\n   *         descriptive string that you create to describe the new resource\n   * @param {object} [opts.actions] -\n   *          The JSON string that specifies the actions that instruct the Assistant on how to perform the task\n   * @param {string} [opts.actionsUrl] -\n   *          The URL from which the Assistant can fetch actions\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TaskInstance\n   */\n  /* jshint ignore:end */\n  TaskListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.uniqueName)) {\n      throw new Error('Required parameter \"opts.uniqueName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Actions': serialize.object(_.get(opts, 'actions')),\n      'ActionsUrl': _.get(opts, 'actionsUrl')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskInstance(\n        this._version,\n        payload,\n        this._solution.assistantSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a task\n   *\n   * @function get\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @param {string} sid - The unique string that identifies the resource to fetch\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext}\n   */\n  /* jshint ignore:end */\n  TaskListInstance.get = function get(sid) {\n    return new TaskContext(this._version, this._solution.assistantSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TaskListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TaskListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TaskListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskSolution} solution - Path solution\n *\n * @returns TaskPage\n */\n/* jshint ignore:end */\nTaskPage = function TaskPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TaskPage.prototype, Page.prototype);\nTaskPage.prototype.constructor = TaskPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TaskInstance\n *\n * @function getInstance\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskPage#\n *\n * @param {TaskPayload} payload - Payload response from the API\n *\n * @returns TaskInstance\n */\n/* jshint ignore:end */\nTaskPage.prototype.getInstance = function getInstance(payload) {\n  return new TaskInstance(this._version, payload, this._solution.assistantSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTaskPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} links - A list of the URLs of related resources\n * @property {string} assistantSid -\n *          The SID of the Assistant that is the parent of the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} actionsUrl -\n *          The URL from which the Assistant can fetch actions\n * @property {string} url - The absolute URL of the Task resource\n *\n * @param {V1} version - Version of the resource\n * @param {TaskPayload} payload - The instance payload\n * @param {sid} assistantSid -\n *          The SID of the Assistant that is the parent of the resource\n * @param {sid_like} sid - The unique string that identifies the resource to fetch\n */\n/* jshint ignore:end */\nTaskInstance = function TaskInstance(version, payload, assistantSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.assistantSid = payload.assistant_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.actionsUrl = payload.actions_url; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {assistantSid: assistantSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(TaskInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new TaskContext(this._version, this._solution.assistantSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {object} [opts.actions] -\n *          The JSON string that specifies the actions that instruct the Assistant on how to perform the task\n * @param {string} [opts.actionsUrl] -\n *          The URL from which the Assistant can fetch actions\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the fields\n *\n * @function fields\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.FieldList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.fields = function fields() {\n  return this._proxy.fields;\n};\n\n/* jshint ignore:start */\n/**\n * Access the samples\n *\n * @function samples\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.samples = function samples() {\n  return this._proxy.samples;\n};\n\n/* jshint ignore:start */\n/**\n * Access the taskActions\n *\n * @function taskActions\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.TaskActionsList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.taskActions = function taskActions() {\n  return this._proxy.taskActions;\n};\n\n/* jshint ignore:start */\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.TaskStatisticsList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTaskInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskContext\n *\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskContext.FieldList} fields -\n *          fields resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList} samples -\n *          samples resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskContext.TaskActionsList} taskActions -\n *          taskActions resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskContext.TaskStatisticsList} statistics -\n *          statistics resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} assistantSid -\n *          The SID of the Assistant that is the parent of the resource to fetch\n * @param {sid_like} sid - The unique string that identifies the resource to fetch\n */\n/* jshint ignore:end */\nTaskContext = function TaskContext(version, assistantSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {assistantSid: assistantSid, sid: sid, };\n  this._uri = `/Assistants/${assistantSid}/Tasks/${sid}`;\n\n  // Dependents\n  this._fields = undefined;\n  this._samples = undefined;\n  this._taskActions = undefined;\n  this._statistics = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TaskInstance(\n      this._version,\n      payload,\n      this._solution.assistantSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {object} [opts.actions] -\n *          The JSON string that specifies the actions that instruct the Assistant on how to perform the task\n * @param {string} [opts.actionsUrl] -\n *          The URL from which the Assistant can fetch actions\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'Actions': serialize.object(_.get(opts, 'actions')),\n    'ActionsUrl': _.get(opts, 'actionsUrl')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TaskInstance(\n      this._version,\n      payload,\n      this._solution.assistantSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TaskContext.prototype,\n  'fields', {\n    get: function() {\n      if (!this._fields) {\n        this._fields = new FieldList(this._version, this._solution.assistantSid, this._solution.sid);\n      }\n      return this._fields;\n    }\n});\n\nObject.defineProperty(TaskContext.prototype,\n  'samples', {\n    get: function() {\n      if (!this._samples) {\n        this._samples = new SampleList(this._version, this._solution.assistantSid, this._solution.sid);\n      }\n      return this._samples;\n    }\n});\n\nObject.defineProperty(TaskContext.prototype,\n  'taskActions', {\n    get: function() {\n      if (!this._taskActions) {\n        this._taskActions = new TaskActionsList(\n          this._version,\n          this._solution.assistantSid,\n          this._solution.sid\n        );\n      }\n      return this._taskActions;\n    }\n});\n\nObject.defineProperty(TaskContext.prototype,\n  'statistics', {\n    get: function() {\n      if (!this._statistics) {\n        this._statistics = new TaskStatisticsList(\n          this._version,\n          this._solution.assistantSid,\n          this._solution.sid\n        );\n      }\n      return this._statistics;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTaskContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TaskList: TaskList,\n  TaskPage: TaskPage,\n  TaskInstance: TaskInstance,\n  TaskContext: TaskContext\n};\n"]},"metadata":{},"sourceType":"script"}
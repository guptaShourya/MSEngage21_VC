{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar NotificationList;\nvar NotificationPage;\nvar NotificationInstance;\nvar NotificationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the NotificationList\n *\n * @constructor Twilio.Api.V2010.AccountContext.NotificationList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n\n/* jshint ignore:end */\n\nNotificationList = function NotificationList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function notifications\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.NotificationContext}\n   */\n\n  /* jshint ignore:end */\n  function NotificationListInstance(sid) {\n    return NotificationListInstance.get(sid);\n  }\n\n  NotificationListInstance._version = version; // Path Solution\n\n  NotificationListInstance._solution = {\n    accountSid: accountSid\n  };\n  NotificationListInstance._uri = \"/Accounts/\".concat(accountSid, \"/Notifications.json\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams NotificationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.NotificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.log] - Filter by log level\n   * @param {Date} [opts.messageDateBefore] - Filter by date\n   * @param {Date} [opts.messageDate] - Filter by date\n   * @param {Date} [opts.messageDateAfter] - Filter by date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  NotificationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists NotificationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.NotificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.log] - Filter by log level\n   * @param {Date} [opts.messageDateBefore] - Filter by date\n   * @param {Date} [opts.messageDate] - Filter by date\n   * @param {Date} [opts.messageDateAfter] - Filter by date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  NotificationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of NotificationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.NotificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.log] - Filter by log level\n   * @param {Date} [opts.messageDateBefore] - Filter by date\n   * @param {Date} [opts.messageDate] - Filter by date\n   * @param {Date} [opts.messageDateAfter] - Filter by date\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  NotificationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Log': _.get(opts, 'log'),\n      'MessageDate<': serialize.iso8601Date(_.get(opts, 'messageDateBefore')),\n      'MessageDate': serialize.iso8601Date(_.get(opts, 'messageDate')),\n      'MessageDate>': serialize.iso8601Date(_.get(opts, 'messageDateAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new NotificationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of NotificationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.NotificationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  NotificationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new NotificationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a notification\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.NotificationList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.NotificationContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  NotificationListInstance.get = function get(sid) {\n    return new NotificationContext(this._version, this._solution.accountSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.NotificationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  NotificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  NotificationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return NotificationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the NotificationPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.NotificationPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NotificationSolution} solution - Path solution\n *\n * @returns NotificationPage\n */\n\n/* jshint ignore:end */\n\n\nNotificationPage = function NotificationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(NotificationPage.prototype, Page.prototype);\n\nNotificationPage.prototype.constructor = NotificationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of NotificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.NotificationPage#\n *\n * @param {NotificationPayload} payload - Payload response from the API\n *\n * @returns NotificationInstance\n */\n\n/* jshint ignore:end */\n\nNotificationPage.prototype.getInstance = function getInstance(payload) {\n  return new NotificationInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.NotificationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nNotificationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nNotificationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the NotificationContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.NotificationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} apiVersion -\n *          The API version used to generate the notification\n * @property {string} callSid - The SID of the Call the resource is associated with\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} errorCode -\n *          A unique error code corresponding to the notification\n * @property {string} log - An integer log level\n * @property {Date} messageDate - The date the notification was generated\n * @property {string} messageText - The text of the notification\n * @property {string} moreInfo - A URL for more information about the error code\n * @property {string} requestMethod - HTTP method used with the request url\n * @property {string} requestUrl -\n *          URL of the resource that generated the notification\n * @property {string} requestVariables -\n *          Twilio-generated HTTP variables sent to the server\n * @property {string} responseBody - The HTTP body returned by your server\n * @property {string} responseHeaders - The HTTP headers returned by your server\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n *\n * @param {V2010} version - Version of the resource\n * @param {NotificationPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nNotificationInstance = function NotificationInstance(version, payload, accountSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.callSid = payload.call_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.errorCode = payload.error_code; // jshint ignore:line\n\n  this.log = payload.log; // jshint ignore:line\n\n  this.messageDate = deserialize.rfc2822DateTime(payload.message_date); // jshint ignore:line\n\n  this.messageText = payload.message_text; // jshint ignore:line\n\n  this.moreInfo = payload.more_info; // jshint ignore:line\n\n  this.requestMethod = payload.request_method; // jshint ignore:line\n\n  this.requestUrl = payload.request_url; // jshint ignore:line\n\n  this.requestVariables = payload.request_variables; // jshint ignore:line\n\n  this.responseBody = payload.response_body; // jshint ignore:line\n\n  this.responseHeaders = payload.response_headers; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(NotificationInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new NotificationContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a NotificationInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.NotificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n\n/* jshint ignore:end */\n\nNotificationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.NotificationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nNotificationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nNotificationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the NotificationContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.NotificationContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nNotificationContext = function NotificationContext(version, accountSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = \"/Accounts/\".concat(accountSid, \"/Notifications/\").concat(sid, \".json\");\n};\n/* jshint ignore:start */\n\n/**\n * fetch a NotificationInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.NotificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n\n/* jshint ignore:end */\n\n\nNotificationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new NotificationInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.NotificationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nNotificationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nNotificationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  NotificationList: NotificationList,\n  NotificationPage: NotificationPage,\n  NotificationInstance: NotificationInstance,\n  NotificationContext: NotificationContext\n};","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio/lib/rest/api/v2010/account/notification.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","NotificationList","NotificationPage","NotificationInstance","NotificationContext","version","accountSid","NotificationListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601Date","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","apiVersion","api_version","callSid","call_sid","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","errorCode","error_code","log","messageDate","message_date","messageText","message_text","moreInfo","more_info","requestMethod","request_method","requestUrl","request_url","requestVariables","request_variables","responseBody","response_body","responseHeaders","response_headers","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar NotificationList;\nvar NotificationPage;\nvar NotificationInstance;\nvar NotificationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationList\n *\n * @constructor Twilio.Api.V2010.AccountContext.NotificationList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n/* jshint ignore:end */\nNotificationList = function NotificationList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function notifications\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.NotificationContext}\n   */\n  /* jshint ignore:end */\n  function NotificationListInstance(sid) {\n    return NotificationListInstance.get(sid);\n  }\n\n  NotificationListInstance._version = version;\n  // Path Solution\n  NotificationListInstance._solution = {accountSid: accountSid};\n  NotificationListInstance._uri = `/Accounts/${accountSid}/Notifications.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams NotificationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.NotificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.log] - Filter by log level\n   * @param {Date} [opts.messageDateBefore] - Filter by date\n   * @param {Date} [opts.messageDate] - Filter by date\n   * @param {Date} [opts.messageDateAfter] - Filter by date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists NotificationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.NotificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.log] - Filter by log level\n   * @param {Date} [opts.messageDateBefore] - Filter by date\n   * @param {Date} [opts.messageDate] - Filter by date\n   * @param {Date} [opts.messageDateAfter] - Filter by date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of NotificationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.NotificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.log] - Filter by log level\n   * @param {Date} [opts.messageDateBefore] - Filter by date\n   * @param {Date} [opts.messageDate] - Filter by date\n   * @param {Date} [opts.messageDateAfter] - Filter by date\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Log': _.get(opts, 'log'),\n      'MessageDate<': serialize.iso8601Date(_.get(opts, 'messageDateBefore')),\n      'MessageDate': serialize.iso8601Date(_.get(opts, 'messageDate')),\n      'MessageDate>': serialize.iso8601Date(_.get(opts, 'messageDateAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new NotificationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of NotificationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.NotificationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new NotificationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a notification\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.NotificationList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.NotificationContext}\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.get = function get(sid) {\n    return new NotificationContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.NotificationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  NotificationListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return NotificationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.NotificationPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NotificationSolution} solution - Path solution\n *\n * @returns NotificationPage\n */\n/* jshint ignore:end */\nNotificationPage = function NotificationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(NotificationPage.prototype, Page.prototype);\nNotificationPage.prototype.constructor = NotificationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of NotificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.NotificationPage#\n *\n * @param {NotificationPayload} payload - Payload response from the API\n *\n * @returns NotificationInstance\n */\n/* jshint ignore:end */\nNotificationPage.prototype.getInstance = function getInstance(payload) {\n  return new NotificationInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.NotificationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNotificationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.NotificationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} apiVersion -\n *          The API version used to generate the notification\n * @property {string} callSid - The SID of the Call the resource is associated with\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} errorCode -\n *          A unique error code corresponding to the notification\n * @property {string} log - An integer log level\n * @property {Date} messageDate - The date the notification was generated\n * @property {string} messageText - The text of the notification\n * @property {string} moreInfo - A URL for more information about the error code\n * @property {string} requestMethod - HTTP method used with the request url\n * @property {string} requestUrl -\n *          URL of the resource that generated the notification\n * @property {string} requestVariables -\n *          Twilio-generated HTTP variables sent to the server\n * @property {string} responseBody - The HTTP body returned by your server\n * @property {string} responseHeaders - The HTTP headers returned by your server\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n *\n * @param {V2010} version - Version of the resource\n * @param {NotificationPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nNotificationInstance = function NotificationInstance(version, payload,\n                                                      accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.callSid = payload.call_sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.errorCode = payload.error_code; // jshint ignore:line\n  this.log = payload.log; // jshint ignore:line\n  this.messageDate = deserialize.rfc2822DateTime(payload.message_date); // jshint ignore:line\n  this.messageText = payload.message_text; // jshint ignore:line\n  this.moreInfo = payload.more_info; // jshint ignore:line\n  this.requestMethod = payload.request_method; // jshint ignore:line\n  this.requestUrl = payload.request_url; // jshint ignore:line\n  this.requestVariables = payload.request_variables; // jshint ignore:line\n  this.responseBody = payload.response_body; // jshint ignore:line\n  this.responseHeaders = payload.response_headers; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(NotificationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new NotificationContext(\n          this._version,\n          this._solution.accountSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a NotificationInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.NotificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.NotificationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNotificationInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.NotificationContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nNotificationContext = function NotificationContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/Notifications/${sid}.json`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a NotificationInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.NotificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new NotificationInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.NotificationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nNotificationContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  NotificationList: NotificationList,\n  NotificationPage: NotificationPage,\n  NotificationInstance: NotificationInstance,\n  NotificationContext: NotificationContext\n};\n"]},"metadata":{},"sourceType":"script"}
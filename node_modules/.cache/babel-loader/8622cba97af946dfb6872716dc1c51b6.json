{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { HashTable } from '../../executor/hash_table';\nimport { getParamValue } from './utils';\nexport const executeOp = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(node, tensorMap, context, resourceManager) {\n    var keyDType, valueDType, hashTable, handle, keys, values, defaultValue;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.t0 = node.op;\n          _context.next = _context.t0 === 'HashTable' ? 3 : _context.t0 === 'HashTableV2' ? 3 : _context.t0 === 'LookupTableImport' ? 8 : _context.t0 === 'LookupTableImportV2' ? 8 : _context.t0 === 'LookupTableFind' ? 16 : _context.t0 === 'LookupTableFindV2' ? 16 : _context.t0 === 'LookupTableSize' ? 24 : _context.t0 === 'LookupTableSizeV2' ? 24 : 27;\n          break;\n\n        case 3:\n          keyDType = getParamValue('keyDType', node, tensorMap, context);\n          valueDType = getParamValue('valueDType', node, tensorMap, context);\n          hashTable = new HashTable(keyDType, valueDType);\n          resourceManager.addHashTable(node.name, hashTable);\n          return _context.abrupt(\"return\", [hashTable.handle]);\n\n        case 8:\n          handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n          keys = getParamValue('keys', node, tensorMap, context);\n          values = getParamValue('values', node, tensorMap, context);\n          hashTable = resourceManager.getHashTableById(handle.id);\n          _context.next = 14;\n          return hashTable.import(keys, values);\n\n        case 14:\n          _context.t1 = _context.sent;\n          return _context.abrupt(\"return\", [_context.t1]);\n\n        case 16:\n          handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n          keys = getParamValue('keys', node, tensorMap, context);\n          defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n          hashTable = resourceManager.getHashTableById(handle.id);\n          _context.next = 22;\n          return hashTable.find(keys, defaultValue);\n\n        case 22:\n          _context.t2 = _context.sent;\n          return _context.abrupt(\"return\", [_context.t2]);\n\n        case 24:\n          handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n          hashTable = resourceManager.getHashTableById(handle.id);\n          return _context.abrupt(\"return\", [hashTable.tensorSize()]);\n\n        case 27:\n          throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n\n        case 28:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function executeOp(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport const CATEGORY = 'hash_table';","map":{"version":3,"sources":["../../../src/operations/executors/hash_table_executor.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAMH,SAAQ,SAAR,QAAwB,2BAAxB;AAIA,SAAQ,aAAR,QAA4B,SAA5B;AAEA,OAAO,MAAM,SAAS;AAAA,sEAA4B,iBAC9C,IAD8C,EAClC,SADkC,EACN,OADM,EAE9C,eAF8C;AAAA;AAAA;AAAA;AAAA;AAAA,wBAGxC,IAAI,CAAC,EAHmC;AAAA,0CAIzC,WAJyC,uBAKzC,aALyC,uBAezC,mBAfyC,uBAgBzC,qBAhByC,uBA4BzC,iBA5ByC,wBA6BzC,mBA7ByC,wBAwCzC,iBAxCyC,wBAyCzC,mBAzCyC;AAAA;;AAAA;AAMtC,UAAA,QANsC,GAOxC,aAAa,CAAC,UAAD,EAAa,IAAb,EAAmB,SAAnB,EAA8B,OAA9B,CAP2B;AAQtC,UAAA,UARsC,GASxC,aAAa,CAAC,YAAD,EAAe,IAAf,EAAqB,SAArB,EAAgC,OAAhC,CAT2B;AAWtC,UAAA,SAXsC,GAW1B,IAAI,SAAJ,CAAc,QAAd,EAAwB,UAAxB,CAX0B;AAY5C,UAAA,eAAe,CAAC,YAAhB,CAA6B,IAAI,CAAC,IAAlC,EAAwC,SAAxC;AAZ4C,2CAarC,CAAC,SAAS,CAAC,MAAX,CAbqC;;AAAA;AAiBtC,UAAA,MAjBsC,GAiB7B,aAAa,CACT,aADS,EACM,IADN,EACY,SADZ,EACuB,OADvB,EAET,eAFS,CAjBgB;AAoBtC,UAAA,IApBsC,GAoB/B,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CApBkB;AAqBtC,UAAA,MArBsC,GAsBxC,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CAtB2B;AAwBtC,UAAA,SAxBsC,GAwB1B,eAAe,CAAC,gBAAhB,CAAiC,MAAM,CAAC,EAAxC,CAxB0B;AAAA;AAAA,iBA0B9B,SAAS,CAAC,MAAV,CAAiB,IAAjB,EAAuB,MAAvB,CA1B8B;;AAAA;AAAA;AAAA;;AAAA;AA8BtC,UAAA,MA9BsC,GA8B7B,aAAa,CACT,aADS,EACM,IADN,EACY,SADZ,EACuB,OADvB,EAET,eAFS,CA9BgB;AAiCtC,UAAA,IAjCsC,GAiC/B,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CAjCkB;AAkCtC,UAAA,YAlCsC,GAmCxC,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CAnC2B;AAqCtC,UAAA,SArCsC,GAqC1B,eAAe,CAAC,gBAAhB,CAAiC,MAAM,CAAC,EAAxC,CArC0B;AAAA;AAAA,iBAsC9B,SAAS,CAAC,IAAV,CAAe,IAAf,EAAqB,YAArB,CAtC8B;;AAAA;AAAA;AAAA;;AAAA;AA0CtC,UAAA,MA1CsC,GA0C7B,aAAa,CACT,aADS,EACM,IADN,EACY,SADZ,EACuB,OADvB,EAET,eAFS,CA1CgB;AA8CtC,UAAA,SA9CsC,GA8C1B,eAAe,CAAC,gBAAhB,CAAiC,MAAM,CAAC,EAAxC,CA9C0B;AAAA,2CA+CrC,CAAC,SAAS,CAAC,UAAV,EAAD,CA/CqC;;AAAA;AAAA,gBAkDtC,SAAS,qBAAc,IAAI,CAAC,EAAnB,yBAlD6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA,kBAAT,SAAS;AAAA;AAAA;AAAA,GAAf;AAsDP,OAAO,MAAM,QAAQ,GAAG,YAAjB","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {HashTable} from '../../executor/hash_table';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager: ResourceManager): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'HashTable':\n    case 'HashTableV2': {\n      const keyDType =\n          getParamValue('keyDType', node, tensorMap, context) as DataType;\n      const valueDType =\n          getParamValue('valueDType', node, tensorMap, context) as DataType;\n\n      const hashTable = new HashTable(keyDType, valueDType);\n      resourceManager.addHashTable(node.name, hashTable);\n      return [hashTable.handle];\n    }\n    case 'LookupTableImport':\n    case 'LookupTableImportV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n\n      return [await hashTable.import(keys, values)];\n    }\n    case 'LookupTableFind':\n    case 'LookupTableFindV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [await hashTable.find(keys, defaultValue)];\n    }\n    case 'LookupTableSize':\n    case 'LookupTableSizeV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [hashTable.tensorSize()];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'hash_table';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { CropAndResize } from '@tensorflow/tfjs-core';\nimport { CropAndResizeProgram } from '../crop_and_resize_gpu';\nexport const cropAndResize = args => {\n  const inputs = args.inputs,\n        backend = args.backend,\n        attrs = args.attrs;\n  const image = inputs.image,\n        boxes = inputs.boxes,\n        boxInd = inputs.boxInd;\n  const cropSize = attrs.cropSize,\n        method = attrs.method,\n        extrapolationValue = attrs.extrapolationValue;\n  const program = new CropAndResizeProgram(image.shape, boxes.shape, cropSize, method, extrapolationValue);\n  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\nexport const cropAndResizeConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgl',\n  kernelFunc: cropAndResize\n};","map":{"version":3,"sources":["../../src/kernels/CropAndResize.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,aAAR,QAA2G,uBAA3G;AAGA,SAAQ,oBAAR,QAAmC,wBAAnC;AAEA,OAAO,MAAM,aAAa,GAAI,IAAD,IAIZ;AAAA,QACR,MADQ,GACkB,IADlB,CACR,MADQ;AAAA,QACA,OADA,GACkB,IADlB,CACA,OADA;AAAA,QACS,KADT,GACkB,IADlB,CACS,KADT;AAAA,QAER,KAFQ,GAEgB,MAFhB,CAER,KAFQ;AAAA,QAED,KAFC,GAEgB,MAFhB,CAED,KAFC;AAAA,QAEM,MAFN,GAEgB,MAFhB,CAEM,MAFN;AAAA,QAGR,QAHQ,GAGgC,KAHhC,CAGR,QAHQ;AAAA,QAGE,MAHF,GAGgC,KAHhC,CAGE,MAHF;AAAA,QAGU,kBAHV,GAGgC,KAHhC,CAGU,kBAHV;AAKf,QAAM,OAAO,GAAG,IAAI,oBAAJ,CACZ,KAAK,CAAC,KADM,EAEZ,KAAK,CAAC,KAFM,EAEqB,QAFrB,EAE+B,MAF/B,EAEuC,kBAFvC,CAAhB;AAGA,SAAO,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,CAAjC,EAAyD,SAAzD,CAAP;AACD,CAbM;AAeP,OAAO,MAAM,mBAAmB,GAAiB;AAC/C,EAAA,UAAU,EAAE,aADmC;AAE/C,EAAA,WAAW,EAAE,OAFkC;AAG/C,EAAA,UAAU,EAAE;AAHmC,CAA1C","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CropAndResizeProgram} from '../crop_and_resize_gpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendWebGL,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape as [number, number, number, number],\n      boxes.shape as [number, number], cropSize, method, extrapolationValue);\n  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgl',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape, util } from '@tensorflow/tfjs-core';\nexport function reshape(args) {\n  const inputs = args.inputs,\n        backend = args.backend,\n        attrs = args.attrs;\n  const x = inputs.x;\n  const shape = attrs.shape;\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n  util.assert(xSize === $xSize, () => \"The new shape (\".concat($shape, \") has \").concat($xSize, \" elements and the old \") + \"shape (\".concat(x.shape, \") has \").concat(xSize, \" elements. The new shape and old \") + \"shape must have the same number of elements.\");\n  backend.incRef(x.dataId);\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {\n    dataId: x.dataId,\n    shape: $shape,\n    dtype: x.dtype\n  };\n}\nexport const reshapeConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape\n};","map":{"version":3,"sources":["../../src/kernels/Reshape.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,OAAlC,EAAoF,IAApF,QAA+F,uBAA/F;AAIA,OAAM,SAAU,OAAV,CACF,IADE,EAEuE;AAAA,QAEpE,MAFoE,GAE1C,IAF0C,CAEpE,MAFoE;AAAA,QAE5D,OAF4D,GAE1C,IAF0C,CAE5D,OAF4D;AAAA,QAEnD,KAFmD,GAE1C,IAF0C,CAEnD,KAFmD;AAAA,QAGpE,CAHoE,GAG/D,MAH+D,CAGpE,CAHoE;AAAA,QAIpE,KAJoE,GAI3D,KAJ2D,CAIpE,KAJoE;AAM3E,QAAM,KAAK,GAAG,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,CAAd;AACA,QAAM,MAAM,GAAG,IAAI,CAAC,sBAAL,CAA4B,KAA5B,EAAmC,KAAnC,CAAf;AACA,QAAM,MAAM,GAAG,IAAI,CAAC,aAAL,CAAmB,MAAnB,CAAf;AAEA,EAAA,IAAI,CAAC,MAAL,CACI,KAAK,KAAK,MADd,EAEI,MAAM,yBAAkB,MAAlB,mBAAiC,MAAjC,+CACQ,CAAC,CAAC,KADV,mBACwB,KADxB,uFAFV;AAMA,EAAA,OAAO,CAAC,MAAR,CAAe,CAAC,CAAC,MAAjB;AAEA,QAAM,KAAK,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,CAAd;;AAEA,MAAI,KAAK,CAAC,kBAAN,IAA4B,IAAhC,EAAsC;AACpC,UAAM,IAAI,GAAG,KAAK,CAAC,kBAAN,CAAyB,IAAtC;AACA,UAAM,IAAI,GAAG,KAAK,CAAC,kBAAN,CAAyB,IAAtC;AAEA,IAAA,IAAI,CAAC,KAAL,GAAa,MAAb;AACA,IAAA,IAAI,CAAC,KAAL,GAAa,MAAb;AACD;;AAED,SAAO;AAAC,IAAA,MAAM,EAAE,CAAC,CAAC,MAAX;AAAmB,IAAA,KAAK,EAAE,MAA1B;AAAkC,IAAA,KAAK,EAAE,CAAC,CAAC;AAA3C,GAAP;AACD;AAED,OAAO,MAAM,aAAa,GAAiB;AACzC,EAAA,UAAU,EAAE,OAD6B;AAEzC,EAAA,WAAW,EAAE,KAF4B;AAGzC,EAAA,UAAU,EAAE;AAH6B,CAApC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar FlowRevisionList;\nvar FlowRevisionPage;\nvar FlowRevisionInstance;\nvar FlowRevisionContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the FlowRevisionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Studio.V2.FlowContext.FlowRevisionList\n *\n * @param {Twilio.Studio.V2} version - Version of the resource\n * @param {string} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\nFlowRevisionList = function FlowRevisionList(version, sid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function revisions\n   * @memberof Twilio.Studio.V2.FlowContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V2.FlowContext.FlowRevisionContext}\n   */\n\n  /* jshint ignore:end */\n  function FlowRevisionListInstance(sid) {\n    return FlowRevisionListInstance.get(sid);\n  }\n\n  FlowRevisionListInstance._version = version; // Path Solution\n\n  FlowRevisionListInstance._solution = {\n    sid: sid\n  };\n  FlowRevisionListInstance._uri = \"/Flows/\".concat(sid, \"/Revisions\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams FlowRevisionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  FlowRevisionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists FlowRevisionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowRevisionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of FlowRevisionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowRevisionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FlowRevisionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of FlowRevisionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowRevisionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FlowRevisionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a flow_revision\n   *\n   * @function get\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {string} revision -\n   *          Specific Revision number or can be `LatestPublished` and `LatestRevision`\n   *\n   * @returns {Twilio.Studio.V2.FlowContext.FlowRevisionContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowRevisionListInstance.get = function get(revision) {\n    return new FlowRevisionContext(this._version, this._solution.sid, revision);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowRevisionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FlowRevisionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FlowRevisionListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FlowRevisionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Studio.V2.FlowContext.FlowRevisionPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FlowRevisionSolution} solution - Path solution\n *\n * @returns FlowRevisionPage\n */\n\n/* jshint ignore:end */\n\n\nFlowRevisionPage = function FlowRevisionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FlowRevisionPage.prototype, Page.prototype);\n\nFlowRevisionPage.prototype.constructor = FlowRevisionPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FlowRevisionInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionPage#\n *\n * @param {FlowRevisionPayload} payload - Payload response from the API\n *\n * @returns FlowRevisionInstance\n */\n\n/* jshint ignore:end */\n\nFlowRevisionPage.prototype.getInstance = function getInstance(payload) {\n  return new FlowRevisionInstance(this._version, payload, this._solution.sid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFlowRevisionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFlowRevisionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FlowRevisionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Studio.V2.FlowContext.FlowRevisionInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the Flow\n * @property {object} definition - JSON representation of flow definition\n * @property {flow_revision.status} status - The status of the Flow\n * @property {number} revision -\n *          The latest revision number of the Flow's definition\n * @property {string} commitMessage - Description on change made in the revision\n * @property {boolean} valid - Boolean if the flow definition is valid\n * @property {object} errors - List of error in the flow definition\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V2} version - Version of the resource\n * @param {FlowRevisionPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n * @param {string} revision -\n *          Specific Revision number or can be `LatestPublished` and `LatestRevision`\n */\n\n/* jshint ignore:end */\n\n\nFlowRevisionInstance = function FlowRevisionInstance(version, payload, sid, revision) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.definition = payload.definition; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.revision = deserialize.integer(payload.revision); // jshint ignore:line\n\n  this.commitMessage = payload.commit_message; // jshint ignore:line\n\n  this.valid = payload.valid; // jshint ignore:line\n\n  this.errors = payload.errors; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid,\n    revision: revision || this.revision\n  };\n};\n\nObject.defineProperty(FlowRevisionInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new FlowRevisionContext(this._version, this._solution.sid, this._solution.revision);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a FlowRevisionInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowRevisionInstance\n */\n\n/* jshint ignore:end */\n\nFlowRevisionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFlowRevisionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFlowRevisionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FlowRevisionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Studio.V2.FlowContext.FlowRevisionContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n * @param {string} revision -\n *          Specific Revision number or can be `LatestPublished` and `LatestRevision`\n */\n\n/* jshint ignore:end */\n\n\nFlowRevisionContext = function FlowRevisionContext(version, sid, revision) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid,\n    revision: revision\n  };\n  this._uri = \"/Flows/\".concat(sid, \"/Revisions/\").concat(revision);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FlowRevisionInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowRevisionInstance\n */\n\n/* jshint ignore:end */\n\n\nFlowRevisionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FlowRevisionInstance(this._version, payload, this._solution.sid, this._solution.revision));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFlowRevisionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFlowRevisionContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FlowRevisionList: FlowRevisionList,\n  FlowRevisionPage: FlowRevisionPage,\n  FlowRevisionInstance: FlowRevisionInstance,\n  FlowRevisionContext: FlowRevisionContext\n};","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio/lib/rest/studio/v2/flow/flowRevision.js"],"names":["Q","require","_","util","Page","deserialize","values","FlowRevisionList","FlowRevisionPage","FlowRevisionInstance","FlowRevisionContext","version","sid","FlowRevisionListInstance","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","revision","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendlyName","friendly_name","definition","status","integer","commitMessage","commit_message","valid","errors","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"mappings":"AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAf;AAAuB;;;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;AAA4B;;;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;AAA6B;;;AAC7B,IAAIG,IAAI,GAAGH,OAAO,CAAC,uBAAD,CAAlB;AAA8C;;;AAC9C,IAAII,WAAW,GAAGJ,OAAO,CACrB,8BADqB,CAAzB;AACsC;;;AACtC,IAAIK,MAAM,GAAGL,OAAO,CAAC,yBAAD,CAApB;AAAkD;;;AAElD,IAAIM,gBAAJ;AACA,IAAIC,gBAAJ;AACA,IAAIC,oBAAJ;AACA,IAAIC,mBAAJ;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAH,gBAAgB,GAAG,SAASA,gBAAT,CAA0BI,OAA1B,EAAmCC,GAAnC,EAAwC;AACzD;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;AACA,WAASC,wBAAT,CAAkCD,GAAlC,EAAuC;AACrC,WAAOC,wBAAwB,CAACC,GAAzB,CAA6BF,GAA7B,CAAP;AACD;;AAEDC,EAAAA,wBAAwB,CAACE,QAAzB,GAAoCJ,OAApC,CAfyD,CAgBzD;;AACAE,EAAAA,wBAAwB,CAACG,SAAzB,GAAqC;AAACJ,IAAAA,GAAG,EAAEA;AAAN,GAArC;AACAC,EAAAA,wBAAwB,CAACI,IAAzB,oBAA0CL,GAA1C;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;AACAC,EAAAA,wBAAwB,CAACK,IAAzB,GAAgC,SAASA,IAAT,CAAcC,IAAd,EAAoBC,QAApB,EAA8B;AAC5D,QAAIlB,CAAC,CAACmB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AACA,QAAIA,IAAI,CAACC,QAAT,EAAmB;AACjBA,MAAAA,QAAQ,GAAGD,IAAI,CAACC,QAAhB;AACD;;AACD,QAAIlB,CAAC,CAACoB,WAAF,CAAcF,QAAd,CAAJ,EAA6B;AAC3B,YAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAED,QAAIC,IAAI,GAAG,KAAX;AACA,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,eAAe,GAAG,CAAtB;;AACA,QAAIC,MAAM,GAAG,KAAKZ,QAAL,CAAca,UAAd,CAAyB;AACpCC,MAAAA,KAAK,EAAEV,IAAI,CAACU,KADwB;AAEpCC,MAAAA,QAAQ,EAAEX,IAAI,CAACW;AAFqB,KAAzB,CAAb;;AAKA,aAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzBR,MAAAA,IAAI,GAAG,IAAP;;AACA,UAAItB,CAAC,CAACmB,UAAF,CAAaF,IAAI,CAACK,IAAlB,CAAJ,EAA6B;AAC3BL,QAAAA,IAAI,CAACK,IAAL,CAAUQ,KAAV;AACD;AACF;;AAED,aAASC,aAAT,CAAuBC,EAAvB,EAA2B;AACzB,UAAIC,OAAO,GAAGD,EAAE,EAAhB;;AACA,UAAIhC,CAAC,CAACoB,WAAF,CAAca,OAAd,CAAJ,EAA4B;AAC1BJ,QAAAA,UAAU;AACV;AACD;;AAEDI,MAAAA,OAAO,CAACC,IAAR,CAAa,UAASC,IAAT,EAAe;AAC1BnC,QAAAA,CAAC,CAACgB,IAAF,CAAOmB,IAAI,CAACC,SAAZ,EAAuB,UAASC,QAAT,EAAmB;AACxC,cAAIf,IAAI,IAAK,CAACtB,CAAC,CAACoB,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BH,eAAe,IAAIP,IAAI,CAACU,KAAnE,EAA2E;AACzEL,YAAAA,IAAI,GAAG,IAAP;AACA,mBAAO,KAAP;AACD;;AAEDE,UAAAA,eAAe;AACfN,UAAAA,QAAQ,CAACmB,QAAD,EAAWR,UAAX,CAAR;AACD,SARD;;AAUA,YAAKJ,MAAM,CAACa,SAAP,IAAoBb,MAAM,CAACa,SAAP,IAAoBf,WAA7C,EAA2D;AACzDM,UAAAA,UAAU;AACX,SAFD,MAEO,IAAI,CAACP,IAAL,EAAW;AAChBC,UAAAA,WAAW;AACXQ,UAAAA,aAAa,CAAC/B,CAAC,CAACuC,IAAF,CAAOJ,IAAI,CAACK,QAAZ,EAAsBL,IAAtB,CAAD,CAAb;AACD;AACF,OAjBD;AAmBAF,MAAAA,OAAO,CAACQ,KAAR,CAAcZ,UAAd;AACD;;AAEDE,IAAAA,aAAa,CAAC/B,CAAC,CAACuC,IAAF,CAAO,KAAKJ,IAAZ,EAAkB,IAAlB,EAAwBnC,CAAC,CAAC0C,KAAF,CAAQzB,IAAR,EAAcQ,MAAd,CAAxB,CAAD,CAAb;AACD,GA1DD;AA4DA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAd,EAAAA,wBAAwB,CAACgC,IAAzB,GAAgC,SAASA,IAAT,CAAc1B,IAAd,EAAoBC,QAApB,EAA8B;AAC5D,QAAIlB,CAAC,CAACmB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,QAAI2B,QAAQ,GAAG9C,CAAC,CAAC+C,KAAF,EAAf;AACA,QAAIC,YAAY,GAAG,EAAnB;;AACA7B,IAAAA,IAAI,CAACC,QAAL,GAAgB,UAAS6B,QAAT,EAAmBzB,IAAnB,EAAyB;AACvCwB,MAAAA,YAAY,CAACE,IAAb,CAAkBD,QAAlB;;AAEA,UAAI,CAAC/C,CAAC,CAACoB,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BmB,YAAY,CAACG,MAAb,KAAwBhC,IAAI,CAACU,KAA/D,EAAsE;AACpEL,QAAAA,IAAI;AACL;AACF,KAND;;AAQAL,IAAAA,IAAI,CAACK,IAAL,GAAY,UAASQ,KAAT,EAAgB;AAC1B,UAAI9B,CAAC,CAACoB,WAAF,CAAcU,KAAd,CAAJ,EAA0B;AACxBc,QAAAA,QAAQ,CAACM,OAAT,CAAiBJ,YAAjB;AACD,OAFD,MAEO;AACLF,QAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD;AACF,KAND;;AAQA,QAAI9B,CAAC,CAACmB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,MAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,SAAKF,IAAL,CAAUC,IAAV;AACA,WAAO2B,QAAQ,CAACX,OAAhB;AACD,GA9BD;AAgCA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAtB,EAAAA,wBAAwB,CAACwB,IAAzB,GAAgC,SAASA,IAAT,CAAclB,IAAd,EAAoBC,QAApB,EAA8B;AAC5D,QAAIlB,CAAC,CAACmB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,QAAI2B,QAAQ,GAAG9C,CAAC,CAAC+C,KAAF,EAAf;AACA,QAAIQ,IAAI,GAAGjD,MAAM,CAACkD,EAAP,CAAU;AACnB,mBAAarC,IAAI,CAACsC,SADC;AAEnB,cAAQtC,IAAI,CAACuC,UAFM;AAGnB,kBAAYvC,IAAI,CAACW;AAHE,KAAV,CAAX;;AAMA,QAAIK,OAAO,GAAG,KAAKpB,QAAL,CAAcsB,IAAd,CAAmB;AAACsB,MAAAA,GAAG,EAAE,KAAK1C,IAAX;AAAiB2C,MAAAA,MAAM,EAAE,KAAzB;AAAgCC,MAAAA,MAAM,EAAEN;AAAxC,KAAnB,CAAd;;AAEApB,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS0B,OAAT,EAAkB;AACvChB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,gBAAJ,CAAqB,KAAKO,QAA1B,EAAoC+C,OAApC,EAA6C,KAAK9C,SAAlD,CAAjB;AACD,KAFsB,CAErByB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAN,IAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,MAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,KAFD;;AAIA,QAAI9B,CAAC,CAACmB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,MAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,WAAO0B,QAAQ,CAACX,OAAhB;AACD,GA7BD;AA+BA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAtB,EAAAA,wBAAwB,CAACkD,OAAzB,GAAmC,SAASA,OAAT,CAAiBC,SAAjB,EAA4B5C,QAA5B,EAAsC;AACvE,QAAI0B,QAAQ,GAAG9C,CAAC,CAAC+C,KAAF,EAAf;;AAEA,QAAIZ,OAAO,GAAG,KAAKpB,QAAL,CAAckD,OAAd,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqC;AAACP,MAAAA,MAAM,EAAE,KAAT;AAAgBD,MAAAA,GAAG,EAAEK;AAArB,KAArC,CAAd;;AAEA7B,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS0B,OAAT,EAAkB;AACvChB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,gBAAJ,CAAqB,KAAKO,QAA1B,EAAoC+C,OAApC,EAA6C,KAAK9C,SAAlD,CAAjB;AACD,KAFsB,CAErByB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAN,IAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,MAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,KAFD;;AAIA,QAAI9B,CAAC,CAACmB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,MAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,WAAO0B,QAAQ,CAACX,OAAhB;AACD,GAlBD;AAoBA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAtB,EAAAA,wBAAwB,CAACC,GAAzB,GAA+B,SAASA,GAAT,CAAasD,QAAb,EAAuB;AACpD,WAAO,IAAI1D,mBAAJ,CAAwB,KAAKK,QAA7B,EAAuC,KAAKC,SAAL,CAAeJ,GAAtD,EAA2DwD,QAA3D,CAAP;AACD,GAFD;AAIA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvD,EAAAA,wBAAwB,CAACwD,MAAzB,GAAkC,SAASA,MAAT,GAAkB;AAClD,WAAO,KAAKrD,SAAZ;AACD,GAFD;;AAIAH,EAAAA,wBAAwB,CAACV,IAAI,CAACmE,OAAL,CAAaC,MAAd,CAAxB,GAAgD,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAC5C;AACF,WAAOtE,IAAI,CAACmE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,GAHD;;AAKA,SAAO5D,wBAAP;AACD,CA5SD;AA+SA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAL,gBAAgB,GAAG,SAASA,gBAAT,CAA0BG,OAA1B,EAAmC+D,QAAnC,EAA6CC,QAA7C,EAAuD;AACxE;AACA,OAAK3D,SAAL,GAAiB2D,QAAjB;AAEAvE,EAAAA,IAAI,CAACwE,SAAL,CAAeC,WAAf,CAA2BC,IAA3B,CAAgC,IAAhC,EAAsCnE,OAAtC,EAA+C+D,QAA/C,EAAyD,KAAK1D,SAA9D;AACD,CALD;;AAOAd,CAAC,CAAC6E,MAAF,CAASvE,gBAAgB,CAACoE,SAA1B,EAAqCxE,IAAI,CAACwE,SAA1C;;AACApE,gBAAgB,CAACoE,SAAjB,CAA2BC,WAA3B,GAAyCrE,gBAAzC;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,gBAAgB,CAACoE,SAAjB,CAA2BI,WAA3B,GAAyC,SAASA,WAAT,CAAqBlB,OAArB,EAA8B;AACrE,SAAO,IAAIrD,oBAAJ,CAAyB,KAAKM,QAA9B,EAAwC+C,OAAxC,EAAiD,KAAK9C,SAAL,CAAeJ,GAAhE,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,gBAAgB,CAACoE,SAAjB,CAA2BP,MAA3B,GAAoC,SAASA,MAAT,GAAkB;AACpD,MAAIY,KAAK,GAAG,EAAZ;;AACA/E,EAAAA,CAAC,CAACgF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAAClF,CAAC,CAACmF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAElF,CAAC,CAACmB,UAAF,CAAa8D,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUAzE,gBAAgB,CAACoE,SAAjB,CAA2BzE,IAAI,CAACmE,OAAL,CAAaC,MAAxC,IAAkD,SAASD,OAAT,CAAiBE,KAAjB,EAC9CC,OAD8C,EACrC;AACX,SAAOtE,IAAI,CAACmE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAhE,oBAAoB,GAAG,SAASA,oBAAT,CAA8BE,OAA9B,EAAuCmD,OAAvC,EAAgDlD,GAAhD,EAC+BwD,QAD/B,EACyC;AAC9D,OAAKrD,QAAL,GAAgBJ,OAAhB,CAD8D,CAG9D;;AACA,OAAKC,GAAL,GAAWkD,OAAO,CAAClD,GAAnB,CAJ8D,CAItC;;AACxB,OAAK0E,UAAL,GAAkBxB,OAAO,CAACyB,WAA1B,CAL8D,CAKvB;;AACvC,OAAKC,YAAL,GAAoB1B,OAAO,CAAC2B,aAA5B,CAN8D,CAMnB;;AAC3C,OAAKC,UAAL,GAAkB5B,OAAO,CAAC4B,UAA1B,CAP8D,CAOxB;;AACtC,OAAKC,MAAL,GAAc7B,OAAO,CAAC6B,MAAtB,CAR8D,CAQhC;;AAC9B,OAAKvB,QAAL,GAAgB/D,WAAW,CAACuF,OAAZ,CAAoB9B,OAAO,CAACM,QAA5B,CAAhB,CAT8D,CASP;;AACvD,OAAKyB,aAAL,GAAqB/B,OAAO,CAACgC,cAA7B,CAV8D,CAUjB;;AAC7C,OAAKC,KAAL,GAAajC,OAAO,CAACiC,KAArB,CAX8D,CAWlC;;AAC5B,OAAKC,MAAL,GAAclC,OAAO,CAACkC,MAAtB,CAZ8D,CAYhC;;AAC9B,OAAKC,WAAL,GAAmB5F,WAAW,CAAC6F,eAAZ,CAA4BpC,OAAO,CAACqC,YAApC,CAAnB,CAb8D,CAaQ;;AACtE,OAAKC,WAAL,GAAmB/F,WAAW,CAAC6F,eAAZ,CAA4BpC,OAAO,CAACuC,YAApC,CAAnB,CAd8D,CAcQ;;AACtE,OAAKC,GAAL,GAAWxC,OAAO,CAACwC,GAAnB,CAf8D,CAetC;AAExB;;AACA,OAAKC,QAAL,GAAgBC,SAAhB;AACA,OAAKxF,SAAL,GAAiB;AAACJ,IAAAA,GAAG,EAAEA,GAAN;AAAWwD,IAAAA,QAAQ,EAAEA,QAAQ,IAAI,KAAKA;AAAtC,GAAjB;AACD,CArBD;;AAuBAqC,MAAM,CAACC,cAAP,CAAsBjG,oBAAoB,CAACmE,SAA3C,EACE,QADF,EACY;AACR9D,EAAAA,GAAG,EAAE,eAAW;AACd,QAAI,CAAC,KAAKyF,QAAV,EAAoB;AAClB,WAAKA,QAAL,GAAgB,IAAI7F,mBAAJ,CAAwB,KAAKK,QAA7B,EAAuC,KAAKC,SAAL,CAAeJ,GAAtD,EAA2D,KAAKI,SAAL,CAAeoD,QAA1E,CAAhB;AACD;;AAED,WAAO,KAAKmC,QAAZ;AACD;AAPO,CADZ;AAWA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA9F,oBAAoB,CAACmE,SAArB,CAA+B+B,KAA/B,GAAuC,SAASA,KAAT,CAAevF,QAAf,EAAyB;AAC9D,SAAO,KAAKwF,MAAL,CAAYD,KAAZ,CAAkBvF,QAAlB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAX,oBAAoB,CAACmE,SAArB,CAA+BP,MAA/B,GAAwC,SAASA,MAAT,GAAkB;AACxD,MAAIY,KAAK,GAAG,EAAZ;;AACA/E,EAAAA,CAAC,CAACgF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAAClF,CAAC,CAACmF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAElF,CAAC,CAACmB,UAAF,CAAa8D,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUAxE,oBAAoB,CAACmE,SAArB,CAA+BzE,IAAI,CAACmE,OAAL,CAAaC,MAA5C,IAAsD,SAASD,OAAT,CAAiBE,KAAjB,EAClDC,OADkD,EACzC;AACX,SAAOtE,IAAI,CAACmE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA/D,mBAAmB,GAAG,SAASA,mBAAT,CAA6BC,OAA7B,EAAsCC,GAAtC,EAA2CwD,QAA3C,EAAqD;AACzE,OAAKrD,QAAL,GAAgBJ,OAAhB,CADyE,CAGzE;;AACA,OAAKK,SAAL,GAAiB;AAACJ,IAAAA,GAAG,EAAEA,GAAN;AAAWwD,IAAAA,QAAQ,EAAEA;AAArB,GAAjB;AACA,OAAKnD,IAAL,oBAAsBL,GAAtB,wBAAuCwD,QAAvC;AACD,CAND;AAQA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA1D,mBAAmB,CAACkE,SAApB,CAA8B+B,KAA9B,GAAsC,SAASA,KAAT,CAAevF,QAAf,EAAyB;AAC7D,MAAI0B,QAAQ,GAAG9C,CAAC,CAAC+C,KAAF,EAAf;;AACA,MAAIZ,OAAO,GAAG,KAAKpB,QAAL,CAAc4F,KAAd,CAAoB;AAAChD,IAAAA,GAAG,EAAE,KAAK1C,IAAX;AAAiB2C,IAAAA,MAAM,EAAE;AAAzB,GAApB,CAAd;;AAEAzB,EAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS0B,OAAT,EAAkB;AACvChB,IAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI3C,oBAAJ,CACf,KAAKM,QADU,EAEf+C,OAFe,EAGf,KAAK9C,SAAL,CAAeJ,GAHA,EAIf,KAAKI,SAAL,CAAeoD,QAJA,CAAjB;AAMD,GAPsB,CAOrB3B,IAPqB,CAOhB,IAPgB,CAAb,CAAV;AASAN,EAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,IAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,GAFD;;AAIA,MAAI9B,CAAC,CAACmB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,IAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,SAAO0B,QAAQ,CAACX,OAAhB;AACD,CAtBD;AAwBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAzB,mBAAmB,CAACkE,SAApB,CAA8BP,MAA9B,GAAuC,SAASA,MAAT,GAAkB;AACvD,SAAO,KAAKrD,SAAZ;AACD,CAFD;;AAIAN,mBAAmB,CAACkE,SAApB,CAA8BzE,IAAI,CAACmE,OAAL,CAAaC,MAA3C,IAAqD,SAASD,OAAT,CAAiBE,KAAjB,EACjDC,OADiD,EACxC;AACX,SAAOtE,IAAI,CAACmE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;;AAKAoC,MAAM,CAACC,OAAP,GAAiB;AACfvG,EAAAA,gBAAgB,EAAEA,gBADH;AAEfC,EAAAA,gBAAgB,EAAEA,gBAFH;AAGfC,EAAAA,oBAAoB,EAAEA,oBAHP;AAIfC,EAAAA,mBAAmB,EAAEA;AAJN,CAAjB","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar FlowRevisionList;\nvar FlowRevisionPage;\nvar FlowRevisionInstance;\nvar FlowRevisionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the FlowRevisionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Studio.V2.FlowContext.FlowRevisionList\n *\n * @param {Twilio.Studio.V2} version - Version of the resource\n * @param {string} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nFlowRevisionList = function FlowRevisionList(version, sid) {\n  /* jshint ignore:start */\n  /**\n   * @function revisions\n   * @memberof Twilio.Studio.V2.FlowContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V2.FlowContext.FlowRevisionContext}\n   */\n  /* jshint ignore:end */\n  function FlowRevisionListInstance(sid) {\n    return FlowRevisionListInstance.get(sid);\n  }\n\n  FlowRevisionListInstance._version = version;\n  // Path Solution\n  FlowRevisionListInstance._solution = {sid: sid};\n  FlowRevisionListInstance._uri = `/Flows/${sid}/Revisions`;\n  /* jshint ignore:start */\n  /**\n   * Streams FlowRevisionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  FlowRevisionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists FlowRevisionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlowRevisionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of FlowRevisionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlowRevisionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FlowRevisionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of FlowRevisionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlowRevisionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FlowRevisionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a flow_revision\n   *\n   * @function get\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @param {string} revision -\n   *          Specific Revision number or can be `LatestPublished` and `LatestRevision`\n   *\n   * @returns {Twilio.Studio.V2.FlowContext.FlowRevisionContext}\n   */\n  /* jshint ignore:end */\n  FlowRevisionListInstance.get = function get(revision) {\n    return new FlowRevisionContext(this._version, this._solution.sid, revision);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  FlowRevisionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FlowRevisionListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FlowRevisionListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlowRevisionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Studio.V2.FlowContext.FlowRevisionPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FlowRevisionSolution} solution - Path solution\n *\n * @returns FlowRevisionPage\n */\n/* jshint ignore:end */\nFlowRevisionPage = function FlowRevisionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FlowRevisionPage.prototype, Page.prototype);\nFlowRevisionPage.prototype.constructor = FlowRevisionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of FlowRevisionInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionPage#\n *\n * @param {FlowRevisionPayload} payload - Payload response from the API\n *\n * @returns FlowRevisionInstance\n */\n/* jshint ignore:end */\nFlowRevisionPage.prototype.getInstance = function getInstance(payload) {\n  return new FlowRevisionInstance(this._version, payload, this._solution.sid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlowRevisionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFlowRevisionPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlowRevisionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Studio.V2.FlowContext.FlowRevisionInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the Flow\n * @property {object} definition - JSON representation of flow definition\n * @property {flow_revision.status} status - The status of the Flow\n * @property {number} revision -\n *          The latest revision number of the Flow's definition\n * @property {string} commitMessage - Description on change made in the revision\n * @property {boolean} valid - Boolean if the flow definition is valid\n * @property {object} errors - List of error in the flow definition\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V2} version - Version of the resource\n * @param {FlowRevisionPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n * @param {string} revision -\n *          Specific Revision number or can be `LatestPublished` and `LatestRevision`\n */\n/* jshint ignore:end */\nFlowRevisionInstance = function FlowRevisionInstance(version, payload, sid,\n                                                      revision) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.definition = payload.definition; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.revision = deserialize.integer(payload.revision); // jshint ignore:line\n  this.commitMessage = payload.commit_message; // jshint ignore:line\n  this.valid = payload.valid; // jshint ignore:line\n  this.errors = payload.errors; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid, revision: revision || this.revision, };\n};\n\nObject.defineProperty(FlowRevisionInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new FlowRevisionContext(this._version, this._solution.sid, this._solution.revision);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a FlowRevisionInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowRevisionInstance\n */\n/* jshint ignore:end */\nFlowRevisionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlowRevisionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFlowRevisionInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlowRevisionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Studio.V2.FlowContext.FlowRevisionContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n * @param {string} revision -\n *          Specific Revision number or can be `LatestPublished` and `LatestRevision`\n */\n/* jshint ignore:end */\nFlowRevisionContext = function FlowRevisionContext(version, sid, revision) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, revision: revision, };\n  this._uri = `/Flows/${sid}/Revisions/${revision}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FlowRevisionInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowRevisionInstance\n */\n/* jshint ignore:end */\nFlowRevisionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FlowRevisionInstance(\n      this._version,\n      payload,\n      this._solution.sid,\n      this._solution.revision\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V2.FlowContext.FlowRevisionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlowRevisionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFlowRevisionContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FlowRevisionList: FlowRevisionList,\n  FlowRevisionPage: FlowRevisionPage,\n  FlowRevisionInstance: FlowRevisionInstance,\n  FlowRevisionContext: FlowRevisionContext\n};\n"]},"metadata":{},"sourceType":"script"}
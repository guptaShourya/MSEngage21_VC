{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar telemetry_1 = require(\"../protocol/messages/telemetry\");\n\nvar logger_1 = require(\"../logger\");\n\nvar TelemetryEventDescription = /*#__PURE__*/function () {\n  function TelemetryEventDescription(title, details, start, end, type, id) {\n    _classCallCheck(this, TelemetryEventDescription);\n\n    this.title = title;\n    this.details = details;\n    this.start = start;\n    this.type = type;\n    this.id = id;\n    this.end = end;\n  } // Prepare telemetry event right before sending it.\n  // Convert times to relative.\n\n\n  _createClass(TelemetryEventDescription, [{\n    key: \"toTelemetryEvent\",\n    value: function toTelemetryEvent() {\n      // Fix dates\n      var now = new Date();\n      var actualStart = this.start;\n      var actualEnd = this.end ? this.end : now;\n\n      if (actualEnd < actualStart) {\n        var tmp = actualEnd;\n        actualEnd = actualStart;\n        actualStart = tmp;\n      } // Converting dates to relative offset from current moment in ms\n\n\n      var startOffset = actualStart.getTime() - now.getTime();\n      var endOffset = actualEnd.getTime() - now.getTime();\n      var result = new telemetry_1.TelemetryEvent(startOffset, endOffset, this.title, this.details, this.id, this.type);\n      return result;\n    }\n  }]);\n\n  return TelemetryEventDescription;\n}();\n\nexports.TelemetryEventDescription = TelemetryEventDescription;\nvar TelemetryPoint;\n\n(function (TelemetryPoint) {\n  TelemetryPoint[TelemetryPoint[\"Start\"] = 0] = \"Start\";\n  TelemetryPoint[TelemetryPoint[\"End\"] = 1] = \"End\";\n})(TelemetryPoint || (TelemetryPoint = {}));\n\nexports.TelemetryPoint = TelemetryPoint;\nvar EventSendingLimitation;\n\n(function (EventSendingLimitation) {\n  EventSendingLimitation[EventSendingLimitation[\"MinEventsPortion\"] = 0] = \"MinEventsPortion\";\n  EventSendingLimitation[EventSendingLimitation[\"AnyEvents\"] = 1] = \"AnyEvents\";\n  EventSendingLimitation[EventSendingLimitation[\"AnyEventsIncludingUnfinished\"] = 2] = \"AnyEventsIncludingUnfinished\";\n})(EventSendingLimitation || (EventSendingLimitation = {}));\n\nexports.EventSendingLimitation = EventSendingLimitation;\n\nvar TelemetryTracker = /*#__PURE__*/function () {\n  function TelemetryTracker(config, packetInterface) {\n    _classCallCheck(this, TelemetryTracker);\n\n    // accumulated events count that is big enough to be sent out of schedule (not on timer but on new event registration)\n    this.minEventsPortionToSend = 50; // max events batch size to be sent in a single Telemetry message\n\n    this.maxEventsPortionToSend = 100;\n    this.pendingEvents = new Map(); // started events: have TelemetryEvent::startTime only\n\n    this.readyEvents = []; // events ready to send\n\n    this.hasInitializationFinished = false;\n    this._canSendTelemetry = false;\n    this.config = config;\n    this.packetInterface = packetInterface;\n  } // Keeping this private prevents the type declaration from being generated properly.\n  // Ideally, this should be private.\n\n\n  _createClass(TelemetryTracker, [{\n    key: \"addTelemetryEvent\",\n    // Add complete event\n    value: function addTelemetryEvent(event) {\n      // Allow adding events before initialization.\n      if (!this.canSendTelemetry && this.hasInitializationFinished) {\n        return;\n      }\n\n      this.readyEvents.push(event);\n    } // Add incomplete event (with either starting or ending time point)\n\n  }, {\n    key: \"addPartialEvent\",\n    value: function addPartialEvent(incompleteEvent, eventKey, point) {\n      logger_1.log.debug(\"Adding \".concat(point === TelemetryPoint.Start ? 'starting' : 'ending', \" timepoint for '\").concat(eventKey, \"' event\"));\n      var exists = this.pendingEvents.has(eventKey);\n\n      if (point === TelemetryPoint.Start) {\n        if (exists) {\n          logger_1.log.debug(\"Overwriting starting point for '\".concat(eventKey, \"' event\"));\n        }\n\n        this.pendingEvents.set(eventKey, incompleteEvent);\n      } else {\n        if (!exists) {\n          logger_1.log.info(\"Could not find started event for '\".concat(eventKey, \"' event\"));\n          return;\n        }\n\n        this.addTelemetryEvent(this.merge(this.pendingEvents.get(eventKey), incompleteEvent));\n        this.pendingEvents.delete(eventKey);\n      }\n    }\n  }, {\n    key: \"getTelemetryToSend\",\n    value: function getTelemetryToSend(sendingLimit) {\n      if (!this.canSendTelemetry || this.readyEvents.length == 0) {\n        return []; // Events are collected but not sent until telemetry is enabled\n      }\n\n      if (sendingLimit == EventSendingLimitation.MinEventsPortion && this.readyEvents.length < this.minEventsPortionToSend) {\n        return [];\n      }\n\n      return this.getTelemetryPortion(sendingLimit == EventSendingLimitation.AnyEventsIncludingUnfinished);\n    }\n  }, {\n    key: \"getTelemetryPortion\",\n    value: function getTelemetryPortion(includeUnfinished) {\n      var _this = this;\n\n      var eventsPortionToSend = Math.min(this.readyEvents.length, this.maxEventsPortionToSend);\n      var res = this.readyEvents.splice(0, eventsPortionToSend);\n\n      if (includeUnfinished && res.length < this.maxEventsPortionToSend) {\n        this.pendingEvents.forEach(function (value, key) {\n          if (res.length >= _this.maxEventsPortionToSend) {\n            return; // @fixme does not end the loop early\n          }\n\n          var event = _this.pendingEvents.get(key);\n\n          _this.pendingEvents.delete(key);\n\n          res.push(new TelemetryEventDescription(\"[UNFINISHED] \".concat(event.title), // add prefix title to mark unfinished events for CleanSock\n          event.details, event.start, null, // Not ended, on sending will be replaced with now\n          event.type, event.id));\n        });\n      }\n\n      return res;\n    } // Merging 2 partial events:\n    //   use start.startTime & end.endTime.\n    // For other fields,\n    //   if there are values in end, use them,\n    //   else use values from start.\n\n  }, {\n    key: \"merge\",\n    value: function merge(start, end) {\n      return new TelemetryEventDescription(end.title ? end.title : start.title, end.details ? end.details : start.details, start.start, end.end, end.type ? end.type : start.type, end.id ? end.id : start.id);\n    }\n  }, {\n    key: \"sendTelemetryIfMinimalPortionCollected\",\n    value: function sendTelemetryIfMinimalPortionCollected() {\n      this.sendTelemetry(EventSendingLimitation.MinEventsPortion);\n    } // NB: getTelemetryToSend will return non-empty array only if we have already received initReply\n    // and telemetry.v1 capability is enabled there.\n\n  }, {\n    key: \"sendTelemetry\",\n    value: function sendTelemetry(limit) {\n      var events = this.getTelemetryToSend(limit);\n\n      if (events.length === 0) {\n        return; // not enough telemetry data collected\n      }\n\n      try {\n        this.packetInterface.send(new telemetry_1.Telemetry(events.map(function (e) {\n          return e.toTelemetryEvent();\n        })));\n      } catch (err) {\n        logger_1.log.debug(\"Error while sending \".concat(events.length, \" telemetry events due to \").concat(err, \"; they will be resubmitted\"));\n        this.readyEvents = this.readyEvents.concat(events);\n      }\n    }\n  }, {\n    key: \"isTelemetryEnabled\",\n    get: function get() {\n      return this.config.confirmedCapabilities.has('telemetry.v1');\n    }\n  }, {\n    key: \"canSendTelemetry\",\n    get: function get() {\n      return this._canSendTelemetry && this.isTelemetryEnabled;\n    },\n    set: function set(enable) {\n      logger_1.log.debug(\"TelemetryTracker.canSendTelemetry: \".concat(enable, \" TelemetryTracker.isTelemetryEnabled: \").concat(this.isTelemetryEnabled)); // We want to keep telemetry events added in advance but\n      // we need to purge events from previous connection when being disconnected\n\n      if (this._canSendTelemetry && !enable) {\n        this.pendingEvents.clear();\n        this.readyEvents = [];\n      }\n\n      this._canSendTelemetry = enable;\n\n      if (enable) {\n        this.sendTelemetry(EventSendingLimitation.AnyEvents);\n      }\n\n      if (enable && !this.hasInitializationFinished) {\n        this.hasInitializationFinished = true;\n      }\n    }\n  }]);\n\n  return TelemetryTracker;\n}();\n\nexports.TelemetryTracker = TelemetryTracker;","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilsock/lib/services/telemetrytracker.js"],"names":["Object","defineProperty","exports","value","telemetry_1","require","logger_1","TelemetryEventDescription","title","details","start","end","type","id","now","Date","actualStart","actualEnd","tmp","startOffset","getTime","endOffset","result","TelemetryEvent","TelemetryPoint","EventSendingLimitation","TelemetryTracker","config","packetInterface","minEventsPortionToSend","maxEventsPortionToSend","pendingEvents","Map","readyEvents","hasInitializationFinished","_canSendTelemetry","event","canSendTelemetry","push","incompleteEvent","eventKey","point","log","debug","Start","exists","has","set","info","addTelemetryEvent","merge","get","delete","sendingLimit","length","MinEventsPortion","getTelemetryPortion","AnyEventsIncludingUnfinished","includeUnfinished","eventsPortionToSend","Math","min","res","splice","forEach","key","sendTelemetry","limit","events","getTelemetryToSend","send","Telemetry","map","e","toTelemetryEvent","err","concat","confirmedCapabilities","isTelemetryEnabled","enable","clear","AnyEvents"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst telemetry_1 = require(\"../protocol/messages/telemetry\");\nconst logger_1 = require(\"../logger\");\nclass TelemetryEventDescription {\n    constructor(title, details, start, end, type, id) {\n        this.title = title;\n        this.details = details;\n        this.start = start;\n        this.type = type;\n        this.id = id;\n        this.end = end;\n    }\n    // Prepare telemetry event right before sending it.\n    // Convert times to relative.\n    toTelemetryEvent() {\n        // Fix dates\n        const now = new Date();\n        let actualStart = this.start;\n        let actualEnd = this.end ? this.end : now;\n        if (actualEnd < actualStart) {\n            let tmp = actualEnd;\n            actualEnd = actualStart;\n            actualStart = tmp;\n        }\n        // Converting dates to relative offset from current moment in ms\n        const startOffset = actualStart.getTime() - now.getTime();\n        const endOffset = actualEnd.getTime() - now.getTime();\n        const result = new telemetry_1.TelemetryEvent(startOffset, endOffset, this.title, this.details, this.id, this.type);\n        return result;\n    }\n}\nexports.TelemetryEventDescription = TelemetryEventDescription;\nvar TelemetryPoint;\n(function (TelemetryPoint) {\n    TelemetryPoint[TelemetryPoint[\"Start\"] = 0] = \"Start\";\n    TelemetryPoint[TelemetryPoint[\"End\"] = 1] = \"End\";\n})(TelemetryPoint || (TelemetryPoint = {}));\nexports.TelemetryPoint = TelemetryPoint;\nvar EventSendingLimitation;\n(function (EventSendingLimitation) {\n    EventSendingLimitation[EventSendingLimitation[\"MinEventsPortion\"] = 0] = \"MinEventsPortion\";\n    EventSendingLimitation[EventSendingLimitation[\"AnyEvents\"] = 1] = \"AnyEvents\";\n    EventSendingLimitation[EventSendingLimitation[\"AnyEventsIncludingUnfinished\"] = 2] = \"AnyEventsIncludingUnfinished\";\n})(EventSendingLimitation || (EventSendingLimitation = {}));\nexports.EventSendingLimitation = EventSendingLimitation;\nclass TelemetryTracker {\n    constructor(config, packetInterface) {\n        // accumulated events count that is big enough to be sent out of schedule (not on timer but on new event registration)\n        this.minEventsPortionToSend = 50;\n        // max events batch size to be sent in a single Telemetry message\n        this.maxEventsPortionToSend = 100;\n        this.pendingEvents = new Map(); // started events: have TelemetryEvent::startTime only\n        this.readyEvents = []; // events ready to send\n        this.hasInitializationFinished = false;\n        this._canSendTelemetry = false;\n        this.config = config;\n        this.packetInterface = packetInterface;\n    }\n    // Keeping this private prevents the type declaration from being generated properly.\n    // Ideally, this should be private.\n    get isTelemetryEnabled() {\n        return this.config.confirmedCapabilities.has('telemetry.v1');\n    }\n    get canSendTelemetry() {\n        return this._canSendTelemetry && this.isTelemetryEnabled;\n    }\n    set canSendTelemetry(enable) {\n        logger_1.log.debug(`TelemetryTracker.canSendTelemetry: ${enable} TelemetryTracker.isTelemetryEnabled: ${this.isTelemetryEnabled}`);\n        // We want to keep telemetry events added in advance but\n        // we need to purge events from previous connection when being disconnected\n        if (this._canSendTelemetry && !enable) {\n            this.pendingEvents.clear();\n            this.readyEvents = [];\n        }\n        this._canSendTelemetry = enable;\n        if (enable) {\n            this.sendTelemetry(EventSendingLimitation.AnyEvents);\n        }\n        if (enable && !this.hasInitializationFinished) {\n            this.hasInitializationFinished = true;\n        }\n    }\n    // Add complete event\n    addTelemetryEvent(event) {\n        // Allow adding events before initialization.\n        if (!this.canSendTelemetry && this.hasInitializationFinished) {\n            return;\n        }\n        this.readyEvents.push(event);\n    }\n    // Add incomplete event (with either starting or ending time point)\n    addPartialEvent(incompleteEvent, eventKey, point) {\n        logger_1.log.debug(`Adding ${point === TelemetryPoint.Start ? 'starting' : 'ending'} timepoint for '${eventKey}' event`);\n        let exists = this.pendingEvents.has(eventKey);\n        if (point === TelemetryPoint.Start) {\n            if (exists) {\n                logger_1.log.debug(`Overwriting starting point for '${eventKey}' event`);\n            }\n            this.pendingEvents.set(eventKey, incompleteEvent);\n        }\n        else {\n            if (!exists) {\n                logger_1.log.info(`Could not find started event for '${eventKey}' event`);\n                return;\n            }\n            this.addTelemetryEvent(this.merge(this.pendingEvents.get(eventKey), incompleteEvent));\n            this.pendingEvents.delete(eventKey);\n        }\n    }\n    getTelemetryToSend(sendingLimit) {\n        if (!this.canSendTelemetry || this.readyEvents.length == 0) {\n            return []; // Events are collected but not sent until telemetry is enabled\n        }\n        if (sendingLimit == EventSendingLimitation.MinEventsPortion && this.readyEvents.length < this.minEventsPortionToSend) {\n            return [];\n        }\n        return this.getTelemetryPortion(sendingLimit == EventSendingLimitation.AnyEventsIncludingUnfinished);\n    }\n    getTelemetryPortion(includeUnfinished) {\n        const eventsPortionToSend = Math.min(this.readyEvents.length, this.maxEventsPortionToSend);\n        let res = this.readyEvents.splice(0, eventsPortionToSend);\n        if (includeUnfinished && res.length < this.maxEventsPortionToSend) {\n            this.pendingEvents.forEach((value, key) => {\n                if (res.length >= this.maxEventsPortionToSend) {\n                    return; // @fixme does not end the loop early\n                }\n                let event = this.pendingEvents.get(key);\n                this.pendingEvents.delete(key);\n                res.push(new TelemetryEventDescription(`[UNFINISHED] ${event.title}`, // add prefix title to mark unfinished events for CleanSock\n                event.details, event.start, null, // Not ended, on sending will be replaced with now\n                event.type, event.id));\n            });\n        }\n        return res;\n    }\n    // Merging 2 partial events:\n    //   use start.startTime & end.endTime.\n    // For other fields,\n    //   if there are values in end, use them,\n    //   else use values from start.\n    merge(start, end) {\n        return new TelemetryEventDescription(end.title ? end.title : start.title, end.details ? end.details : start.details, start.start, end.end, end.type ? end.type : start.type, end.id ? end.id : start.id);\n    }\n    sendTelemetryIfMinimalPortionCollected() {\n        this.sendTelemetry(EventSendingLimitation.MinEventsPortion);\n    }\n    // NB: getTelemetryToSend will return non-empty array only if we have already received initReply\n    // and telemetry.v1 capability is enabled there.\n    sendTelemetry(limit) {\n        const events = this.getTelemetryToSend(limit);\n        if (events.length === 0) {\n            return; // not enough telemetry data collected\n        }\n        try {\n            this.packetInterface.send(new telemetry_1.Telemetry(events.map(e => e.toTelemetryEvent())));\n        }\n        catch (err) {\n            logger_1.log.debug(`Error while sending ${events.length} telemetry events due to ${err}; they will be resubmitted`);\n            this.readyEvents = this.readyEvents.concat(events);\n        }\n    }\n}\nexports.TelemetryTracker = TelemetryTracker;\n"]},"metadata":{},"sourceType":"script"}
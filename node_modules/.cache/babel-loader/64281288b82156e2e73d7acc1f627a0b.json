{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\n\nfunction nmsParams(node, tensorMap, context) {\n  const boxes = getParamValue('boxes', node, tensorMap, context);\n  const scores = getParamValue('scores', node, tensorMap, context);\n  const maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);\n  const iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);\n  const scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);\n  const softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(node, tensorMap, context) {\n    var _nmsParams, boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, result, _nmsParams2, padToMaxOutputSize, _nmsParams3, condition;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.t0 = node.op;\n          _context.next = _context.t0 === 'NonMaxSuppressionV5' ? 3 : _context.t0 === 'NonMaxSuppressionV4' ? 8 : _context.t0 === 'NonMaxSuppressionV3' ? 14 : _context.t0 === 'NonMaxSuppressionV2' ? 14 : _context.t0 === 'Where' ? 19 : _context.t0 === 'ListDiff' ? 26 : 27;\n          break;\n\n        case 3:\n          _nmsParams = nmsParams(node, tensorMap, context), boxes = _nmsParams.boxes, scores = _nmsParams.scores, maxOutputSize = _nmsParams.maxOutputSize, iouThreshold = _nmsParams.iouThreshold, scoreThreshold = _nmsParams.scoreThreshold, softNmsSigma = _nmsParams.softNmsSigma;\n          _context.next = 6;\n          return tfOps.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n\n        case 6:\n          result = _context.sent;\n          return _context.abrupt(\"return\", [result.selectedIndices, result.selectedScores]);\n\n        case 8:\n          _nmsParams2 = nmsParams(node, tensorMap, context), boxes = _nmsParams2.boxes, scores = _nmsParams2.scores, maxOutputSize = _nmsParams2.maxOutputSize, iouThreshold = _nmsParams2.iouThreshold, scoreThreshold = _nmsParams2.scoreThreshold;\n          padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);\n          _context.next = 12;\n          return tfOps.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n\n        case 12:\n          result = _context.sent;\n          return _context.abrupt(\"return\", [result.selectedIndices, result.validOutputs]);\n\n        case 14:\n          _nmsParams3 = nmsParams(node, tensorMap, context), boxes = _nmsParams3.boxes, scores = _nmsParams3.scores, maxOutputSize = _nmsParams3.maxOutputSize, iouThreshold = _nmsParams3.iouThreshold, scoreThreshold = _nmsParams3.scoreThreshold;\n          _context.next = 17;\n          return tfOps.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold);\n\n        case 17:\n          _context.t1 = _context.sent;\n          return _context.abrupt(\"return\", [_context.t1]);\n\n        case 19:\n          condition = tfOps.cast(getParamValue('condition', node, tensorMap, context), 'bool');\n          _context.next = 22;\n          return tfOps.whereAsync(condition);\n\n        case 22:\n          _context.t2 = _context.sent;\n          result = [_context.t2];\n          condition.dispose();\n          return _context.abrupt(\"return\", result);\n\n        case 26:\n          return _context.abrupt(\"return\", tfOps.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context)));\n\n        case 27:\n          throw TypeError(\"Node type \".concat(node.op, \" is not implemented\"));\n\n        case 28:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n\n  return function executeOp(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport const CATEGORY = 'dynamic';","map":{"version":3,"sources":["../../../src/operations/executors/dynamic_executor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nfunction nmsParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const boxes = getParamValue('boxes', node, tensorMap, context) as Tensor;\n  const scores = getParamValue('scores', node, tensorMap, context) as Tensor;\n  const maxOutputSize =\n      getParamValue('maxOutputSize', node, tensorMap, context) as number;\n  const iouThreshold =\n      getParamValue('iouThreshold', node, tensorMap, context) as number;\n  const scoreThreshold =\n      getParamValue('scoreThreshold', node, tensorMap, context) as number;\n  const softNmsSigma =\n      getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5': {\n      const {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n      } = nmsParams(node, tensorMap, context);\n\n      const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, softNmsSigma);\n\n      return [result.selectedIndices, result.selectedScores];\n    }\n    case 'NonMaxSuppressionV4': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      const padToMaxOutputSize =\n          getParamValue('padToMaxOutputSize', node, tensorMap, context) as\n          boolean;\n\n      const result = await tfOps.image.nonMaxSuppressionPaddedAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, padToMaxOutputSize);\n\n      return [result.selectedIndices, result.validOutputs];\n    }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      return [await tfOps.image.nonMaxSuppressionAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold)];\n    }\n    case 'Where': {\n      const condition = tfOps.cast(\n          (getParamValue('condition', node, tensorMap, context) as Tensor),\n          'bool');\n      const result = [await tfOps.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return tfOps.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as Tensor,\n          getParamValue('y', node, tensorMap, context) as Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
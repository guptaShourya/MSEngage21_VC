{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Node = /*#__PURE__*/function () {\n  function Node(key, value) {\n    _classCallCheck(this, Node);\n\n    this.balanceFactor = 0;\n    this.key = key;\n    this.value = value;\n    this.parent = null;\n    this.left = null;\n    this.right = null;\n  }\n\n  _createClass(Node, [{\n    key: \"update\",\n    value: function update(value) {\n      this.value = value;\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(target, replacement) {\n      if (!target) {\n        return;\n      }\n\n      if (this.left === replacement) {\n        this.left = replacement;\n      } else if (this.right === replacement) {\n        this.right = replacement;\n      }\n    }\n  }, {\n    key: \"isRoot\",\n    get: function get() {\n      return this.parent === null;\n    }\n  }, {\n    key: \"isLeaf\",\n    get: function get() {\n      return this.left === null && this.right === null;\n    }\n  }, {\n    key: \"isLeftChild\",\n    get: function get() {\n      return this.parent.left === this;\n    }\n  }]);\n\n  return Node;\n}();\n/**\n * @property length\n */\n\n\nvar TreeMap = /*#__PURE__*/function () {\n  function TreeMap(less, equal) {\n    _classCallCheck(this, TreeMap);\n\n    this.isLessThan = less || function (x, y) {\n      return x < y;\n    };\n\n    this.isEqual = equal || function (x, y) {\n      return x === y;\n    };\n\n    this.root = null;\n    this.count = null;\n  }\n\n  _createClass(TreeMap, [{\n    key: \"clear\",\n    value: function clear() {\n      this.root = null;\n      this.count = 0;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var node = this.getNode(key);\n\n      if (node) {\n        node.update(value);\n      } else {\n        this.insert(key, value);\n      } // return node;\n\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(key, value) {\n      var node = new Node(key, value);\n      this.count++;\n\n      if (!this.root) {\n        this.root = node; // return node;\n\n        return;\n      }\n\n      var currNode = this.root;\n\n      for (;;) {\n        if (this.isLessThan(key, currNode.key)) {\n          if (currNode.left) {\n            currNode = currNode.left;\n          } else {\n            currNode.left = node;\n            break;\n          }\n        } else {\n          if (currNode.right) {\n            // eslint-disable-line no-lonely-if\n            currNode = currNode.right;\n          } else {\n            currNode.right = node;\n            break;\n          }\n        }\n      }\n\n      node.parent = currNode;\n      currNode = node;\n\n      while (currNode.parent) {\n        var parent = currNode.parent;\n        var prevBalanceFactor = parent.balanceFactor;\n\n        if (currNode.isLeftChild) {\n          parent.balanceFactor++;\n        } else {\n          parent.balanceFactor--;\n        }\n\n        if (Math.abs(parent.balanceFactor) < Math.abs(prevBalanceFactor)) {\n          break;\n        }\n\n        if (parent.balanceFactor < -1 || parent.balanceFactor > 1) {\n          this.rebalance(parent);\n          break;\n        }\n\n        currNode = parent;\n      } // return node;\n\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var currentNode = this.root;\n\n      while (currentNode) {\n        if (this.isEqual(key, currentNode.key)) {\n          return currentNode.value;\n        }\n\n        if (this.isLessThan(key, currentNode.key)) {\n          currentNode = currentNode.left;\n        } else {\n          currentNode = currentNode.right;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      // update this algorithm and remove any\n      var node = this.getNode(key);\n\n      if (!node || node.key !== key) {\n        return null;\n      }\n\n      var parent = node.parent;\n      var left = node.left;\n      var right = node.right;\n\n      if (!!left !== !!right) {\n        // one child\n        var child = left || right;\n\n        if (!parent && !child) {\n          this.root = null;\n        } else if (parent && !child) {\n          this.root = child;\n        } else {\n          parent.replace(node, null);\n          this.rebalance(parent);\n        }\n      } else {\n        // two children\n        var maxLeft = node.left;\n\n        while (maxLeft.right) {\n          maxLeft = maxLeft.right;\n        }\n\n        if (node.left === maxLeft) {\n          if (node.isRoot) {\n            this.root = maxLeft;\n            maxLeft.parent = null;\n          } else {\n            if (node.isLeftChild) {\n              node.parent.left = maxLeft;\n            } else {\n              node.parent.right = maxLeft;\n            }\n\n            maxLeft.parent = node.parent;\n          }\n\n          maxLeft.right = node.right;\n          maxLeft.right.parent = maxLeft;\n          maxLeft.balanceFactor = node.balanceFactor;\n          node = {\n            parent: maxLeft,\n            isLeftChild: true\n          };\n        } else {\n          var mlParent = maxLeft.parent;\n          var mlLeft = maxLeft.left;\n          mlParent.right = mlLeft;\n\n          if (mlLeft) {\n            mlLeft.parent = mlParent;\n          }\n\n          if (node.isRoot) {\n            this.root = maxLeft;\n            maxLeft.parent = null;\n          } else {\n            if (node.isLeftChild) {\n              node.parent.left = maxLeft;\n            } else {\n              node.parent.right = maxLeft;\n            }\n\n            maxLeft.parent = node.parent;\n          }\n\n          maxLeft.right = node.right;\n          maxLeft.right.parent = maxLeft;\n          maxLeft.left = node.left;\n          maxLeft.left.parent = maxLeft;\n          maxLeft.balanceFactor = node.balanceFactor;\n          node = {\n            parent: mlParent,\n            isLeftChild: false\n          };\n        }\n      }\n\n      this.count--;\n\n      while (node.parent) {\n        var _parent = node.parent;\n        var prevBalanceFactor = _parent.balanceFactor;\n\n        if (node.isLeftChild) {\n          _parent.balanceFactor -= 1;\n        } else {\n          _parent.balanceFactor += 1;\n        }\n\n        if (Math.abs(_parent.balanceFactor) > Math.abs(prevBalanceFactor)) {\n          if (_parent.balanceFactor < -1 || _parent.balanceFactor > 1) {\n            this.rebalance(_parent);\n\n            if (_parent.parent.balanceFactor === 0) {\n              node = _parent.parent;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } else {\n          node = _parent;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(key) {\n      var currentNode = this.root;\n\n      while (currentNode) {\n        if (this.isEqual(key, currentNode.key)) {\n          return currentNode;\n        }\n\n        if (this.isLessThan(key, currentNode.key)) {\n          currentNode = currentNode.left;\n        } else {\n          currentNode = currentNode.right;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"rebalance\",\n    value: function rebalance(node) {\n      if (node.balanceFactor < 0) {\n        if (node.right.balanceFactor > 0) {\n          this.rotateRight(node.right);\n          this.rotateLeft(node);\n        } else {\n          this.rotateLeft(node);\n        }\n      } else if (node.balanceFactor > 0) {\n        if (node.left.balanceFactor < 0) {\n          this.rotateLeft(node.left);\n          this.rotateRight(node);\n        } else {\n          this.rotateRight(node);\n        }\n      }\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft(pivot) {\n      var root = pivot.right;\n      pivot.right = root.left;\n\n      if (root.left !== null) {\n        root.left.parent = pivot;\n      }\n\n      root.parent = pivot.parent;\n\n      if (root.parent === null) {\n        this.root = root;\n      } else if (pivot.isLeftChild) {\n        root.parent.left = root;\n      } else {\n        root.parent.right = root;\n      }\n\n      root.left = pivot;\n      pivot.parent = root;\n      pivot.balanceFactor = pivot.balanceFactor + 1 - Math.min(root.balanceFactor, 0);\n      root.balanceFactor = root.balanceFactor + 1 - Math.max(pivot.balanceFactor, 0);\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight(pivot) {\n      var root = pivot.left;\n      pivot.left = root.right;\n\n      if (root.right !== null) {\n        root.right.parent = pivot;\n      }\n\n      root.parent = pivot.parent;\n\n      if (root.parent === null) {\n        this.root = root;\n      } else if (pivot.isLeftChild) {\n        root.parent.left = root;\n      } else {\n        root.parent.right = root;\n      }\n\n      root.right = pivot;\n      pivot.parent = root;\n      pivot.balanceFactor = pivot.balanceFactor - 1 - Math.min(root.balanceFactor, 0);\n      root.balanceFactor = root.balanceFactor - 1 - Math.max(pivot.balanceFactor, 0);\n    }\n  }, {\n    key: Symbol.iterator,\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {\n      var _iterator, _step, iter;\n\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator = _createForOfIteratorHelper(this.getIterator());\n              _context.prev = 1;\n\n              _iterator.s();\n\n            case 3:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 9;\n                break;\n              }\n\n              iter = _step.value;\n              _context.next = 7;\n              return iter;\n\n            case 7:\n              _context.next = 3;\n              break;\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n\n              _iterator.e(_context.t0);\n\n            case 14:\n              _context.prev = 14;\n\n              _iterator.f();\n\n              return _context.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this, [[1, 11, 14, 17]]);\n    })\n  }, {\n    key: \"getIterator\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function getIterator() {\n      var key,\n          currentNode,\n          fromleft,\n          _args2 = arguments;\n      return _regeneratorRuntime.wrap(function getIterator$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              key = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : null;\n              currentNode = this.root;\n\n            case 2:\n              if (!currentNode) {\n                _context2.next = 8;\n                break;\n              }\n\n              if (!(this.isEqual(key, currentNode.key) || key === null && !currentNode.left)) {\n                _context2.next = 5;\n                break;\n              }\n\n              return _context2.abrupt(\"break\", 8);\n\n            case 5:\n              if (this.isLessThan(key, currentNode.key) || key === null) {\n                currentNode = currentNode.left;\n              } else {\n                currentNode = currentNode.right;\n              }\n\n              _context2.next = 2;\n              break;\n\n            case 8:\n              if (currentNode) {\n                _context2.next = 10;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", null);\n\n            case 10:\n              fromleft = true;\n\n            case 11:\n              if (!fromleft) {\n                _context2.next = 29;\n                break;\n              }\n\n              _context2.next = 14;\n              return [currentNode.key, currentNode.value];\n\n            case 14:\n              fromleft = false;\n\n              if (!currentNode.right) {\n                _context2.next = 21;\n                break;\n              }\n\n              currentNode = currentNode.right;\n\n              while (currentNode.left) {\n                currentNode = currentNode.left;\n              }\n\n              fromleft = true;\n              _context2.next = 27;\n              break;\n\n            case 21:\n              if (!currentNode.parent) {\n                _context2.next = 26;\n                break;\n              }\n\n              fromleft = currentNode.parent.left === currentNode;\n              currentNode = currentNode.parent;\n              _context2.next = 27;\n              break;\n\n            case 26:\n              return _context2.abrupt(\"break\", 37);\n\n            case 27:\n              _context2.next = 35;\n              break;\n\n            case 29:\n              if (!currentNode.parent) {\n                _context2.next = 34;\n                break;\n              }\n\n              fromleft = currentNode.parent.left === currentNode;\n              currentNode = currentNode.parent;\n              _context2.next = 35;\n              break;\n\n            case 34:\n              return _context2.abrupt(\"break\", 37);\n\n            case 35:\n              _context2.next = 11;\n              break;\n\n            case 37:\n              return _context2.abrupt(\"return\", null);\n\n            case 38:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, getIterator, this);\n    })\n  }, {\n    key: \"getReverseIterator\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function getReverseIterator() {\n      var key,\n          currentNode,\n          fromright,\n          _args3 = arguments;\n      return _regeneratorRuntime.wrap(function getReverseIterator$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              key = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : null;\n              currentNode = this.root;\n\n            case 2:\n              if (!currentNode) {\n                _context3.next = 8;\n                break;\n              }\n\n              if (!(this.isEqual(key, currentNode.key) || key === null && !currentNode.right)) {\n                _context3.next = 5;\n                break;\n              }\n\n              return _context3.abrupt(\"break\", 8);\n\n            case 5:\n              if (!this.isLessThan(key, currentNode.key) || key === null) {\n                currentNode = currentNode.right;\n              } else {\n                currentNode = currentNode.left;\n              }\n\n              _context3.next = 2;\n              break;\n\n            case 8:\n              if (currentNode) {\n                _context3.next = 10;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", null);\n\n            case 10:\n              fromright = true;\n\n            case 11:\n              if (!fromright) {\n                _context3.next = 29;\n                break;\n              }\n\n              _context3.next = 14;\n              return [currentNode.key, currentNode.value];\n\n            case 14:\n              fromright = false;\n\n              if (!currentNode.left) {\n                _context3.next = 21;\n                break;\n              }\n\n              currentNode = currentNode.left;\n\n              while (currentNode.right) {\n                currentNode = currentNode.right;\n              }\n\n              fromright = true;\n              _context3.next = 27;\n              break;\n\n            case 21:\n              if (!currentNode.parent) {\n                _context3.next = 26;\n                break;\n              }\n\n              fromright = currentNode.parent.right === currentNode;\n              currentNode = currentNode.parent;\n              _context3.next = 27;\n              break;\n\n            case 26:\n              return _context3.abrupt(\"break\", 37);\n\n            case 27:\n              _context3.next = 35;\n              break;\n\n            case 29:\n              if (!currentNode.parent) {\n                _context3.next = 34;\n                break;\n              }\n\n              fromright = currentNode.parent.right === currentNode;\n              currentNode = currentNode.parent;\n              _context3.next = 35;\n              break;\n\n            case 34:\n              return _context3.abrupt(\"break\", 37);\n\n            case 35:\n              _context3.next = 11;\n              break;\n\n            case 37:\n              return _context3.abrupt(\"return\", null);\n\n            case 38:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, getReverseIterator, this);\n    })\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.count;\n    }\n  }]);\n\n  return TreeMap;\n}();\n\nexports.TreeMap = TreeMap;","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio-sync/lib/utils/tree.js"],"names":["Object","defineProperty","exports","value","Node","key","balanceFactor","parent","left","right","target","replacement","TreeMap","less","equal","isLessThan","x","y","isEqual","root","count","node","getNode","update","insert","currNode","prevBalanceFactor","isLeftChild","Math","abs","rebalance","currentNode","child","replace","maxLeft","isRoot","mlParent","mlLeft","rotateRight","rotateLeft","pivot","min","max","Symbol","iterator","getIterator","iter","fromleft","fromright"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Node {\n    constructor(key, value) {\n        this.balanceFactor = 0;\n        this.key = key;\n        this.value = value;\n        this.parent = null;\n        this.left = null;\n        this.right = null;\n    }\n    get isRoot() { return this.parent === null; }\n    get isLeaf() { return (this.left === null) && (this.right === null); }\n    get isLeftChild() { return this.parent.left === this; }\n    update(value) {\n        this.value = value;\n    }\n    replace(target, replacement) {\n        if (!target) {\n            return;\n        }\n        if (this.left === replacement) {\n            this.left = replacement;\n        }\n        else if (this.right === replacement) {\n            this.right = replacement;\n        }\n    }\n}\n/**\n * @property length\n */\nclass TreeMap {\n    constructor(less, equal) {\n        this.isLessThan = less || ((x, y) => x < y);\n        this.isEqual = equal || ((x, y) => x === y);\n        this.root = null;\n        this.count = null;\n    }\n    get size() { return this.count; }\n    clear() {\n        this.root = null;\n        this.count = 0;\n    }\n    set(key, value) {\n        let node = this.getNode(key);\n        if (node) {\n            node.update(value);\n        }\n        else {\n            this.insert(key, value);\n        }\n        // return node;\n    }\n    insert(key, value) {\n        let node = new Node(key, value);\n        this.count++;\n        if (!this.root) {\n            this.root = node;\n            // return node;\n            return;\n        }\n        let currNode = this.root;\n        for (;;) {\n            if (this.isLessThan(key, currNode.key)) {\n                if (currNode.left) {\n                    currNode = currNode.left;\n                }\n                else {\n                    currNode.left = node;\n                    break;\n                }\n            }\n            else {\n                if (currNode.right) { // eslint-disable-line no-lonely-if\n                    currNode = currNode.right;\n                }\n                else {\n                    currNode.right = node;\n                    break;\n                }\n            }\n        }\n        node.parent = currNode;\n        currNode = node;\n        while (currNode.parent) {\n            let parent = currNode.parent;\n            let prevBalanceFactor = parent.balanceFactor;\n            if (currNode.isLeftChild) {\n                parent.balanceFactor++;\n            }\n            else {\n                parent.balanceFactor--;\n            }\n            if (Math.abs(parent.balanceFactor) < Math.abs(prevBalanceFactor)) {\n                break;\n            }\n            if (parent.balanceFactor < -1 || parent.balanceFactor > 1) {\n                this.rebalance(parent);\n                break;\n            }\n            currNode = parent;\n        }\n        // return node;\n    }\n    get(key) {\n        let currentNode = this.root;\n        while (currentNode) {\n            if (this.isEqual(key, currentNode.key)) {\n                return currentNode.value;\n            }\n            if (this.isLessThan(key, currentNode.key)) {\n                currentNode = currentNode.left;\n            }\n            else {\n                currentNode = currentNode.right;\n            }\n        }\n        return null;\n    }\n    delete(key) {\n        // update this algorithm and remove any\n        let node = this.getNode(key);\n        if (!node || node.key !== key) {\n            return null;\n        }\n        let parent = node.parent;\n        let left = node.left;\n        let right = node.right;\n        if (!!left !== !!right) { // one child\n            let child = left || right;\n            if (!parent && !child) {\n                this.root = null;\n            }\n            else if (parent && !child) {\n                this.root = child;\n            }\n            else {\n                parent.replace(node, null);\n                this.rebalance(parent);\n            }\n        }\n        else { // two children\n            let maxLeft = node.left;\n            while (maxLeft.right) {\n                maxLeft = maxLeft.right;\n            }\n            if (node.left === maxLeft) {\n                if (node.isRoot) {\n                    this.root = maxLeft;\n                    maxLeft.parent = null;\n                }\n                else {\n                    if (node.isLeftChild) {\n                        node.parent.left = maxLeft;\n                    }\n                    else {\n                        node.parent.right = maxLeft;\n                    }\n                    maxLeft.parent = node.parent;\n                }\n                maxLeft.right = node.right;\n                maxLeft.right.parent = maxLeft;\n                maxLeft.balanceFactor = node.balanceFactor;\n                node = {\n                    parent: maxLeft, isLeftChild: true\n                };\n            }\n            else {\n                let mlParent = maxLeft.parent;\n                let mlLeft = maxLeft.left;\n                mlParent.right = mlLeft;\n                if (mlLeft) {\n                    mlLeft.parent = mlParent;\n                }\n                if (node.isRoot) {\n                    this.root = maxLeft;\n                    maxLeft.parent = null;\n                }\n                else {\n                    if (node.isLeftChild) {\n                        node.parent.left = maxLeft;\n                    }\n                    else {\n                        node.parent.right = maxLeft;\n                    }\n                    maxLeft.parent = node.parent;\n                }\n                maxLeft.right = node.right;\n                maxLeft.right.parent = maxLeft;\n                maxLeft.left = node.left;\n                maxLeft.left.parent = maxLeft;\n                maxLeft.balanceFactor = node.balanceFactor;\n                node = {\n                    parent: mlParent, isLeftChild: false\n                };\n            }\n        }\n        this.count--;\n        while (node.parent) {\n            let parent = node.parent;\n            let prevBalanceFactor = parent.balanceFactor;\n            if (node.isLeftChild) {\n                parent.balanceFactor -= 1;\n            }\n            else {\n                parent.balanceFactor += 1;\n            }\n            if (Math.abs(parent.balanceFactor) > Math.abs(prevBalanceFactor)) {\n                if (parent.balanceFactor < -1 || parent.balanceFactor > 1) {\n                    this.rebalance(parent);\n                    if (parent.parent.balanceFactor === 0) {\n                        node = parent.parent;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n            else {\n                node = parent;\n            }\n        }\n        return null;\n    }\n    getNode(key) {\n        let currentNode = this.root;\n        while (currentNode) {\n            if (this.isEqual(key, currentNode.key)) {\n                return currentNode;\n            }\n            if (this.isLessThan(key, currentNode.key)) {\n                currentNode = currentNode.left;\n            }\n            else {\n                currentNode = currentNode.right;\n            }\n        }\n        return null;\n    }\n    rebalance(node) {\n        if (node.balanceFactor < 0) {\n            if (node.right.balanceFactor > 0) {\n                this.rotateRight(node.right);\n                this.rotateLeft(node);\n            }\n            else {\n                this.rotateLeft(node);\n            }\n        }\n        else if (node.balanceFactor > 0) {\n            if (node.left.balanceFactor < 0) {\n                this.rotateLeft(node.left);\n                this.rotateRight(node);\n            }\n            else {\n                this.rotateRight(node);\n            }\n        }\n    }\n    rotateLeft(pivot) {\n        let root = pivot.right;\n        pivot.right = root.left;\n        if (root.left !== null) {\n            root.left.parent = pivot;\n        }\n        root.parent = pivot.parent;\n        if (root.parent === null) {\n            this.root = root;\n        }\n        else if (pivot.isLeftChild) {\n            root.parent.left = root;\n        }\n        else {\n            root.parent.right = root;\n        }\n        root.left = pivot;\n        pivot.parent = root;\n        pivot.balanceFactor = pivot.balanceFactor + 1 - Math.min(root.balanceFactor, 0);\n        root.balanceFactor = root.balanceFactor + 1 - Math.max(pivot.balanceFactor, 0);\n    }\n    rotateRight(pivot) {\n        let root = pivot.left;\n        pivot.left = root.right;\n        if (root.right !== null) {\n            root.right.parent = pivot;\n        }\n        root.parent = pivot.parent;\n        if (root.parent === null) {\n            this.root = root;\n        }\n        else if (pivot.isLeftChild) {\n            root.parent.left = root;\n        }\n        else {\n            root.parent.right = root;\n        }\n        root.right = pivot;\n        pivot.parent = root;\n        pivot.balanceFactor = pivot.balanceFactor - 1 - Math.min(root.balanceFactor, 0);\n        root.balanceFactor = root.balanceFactor - 1 - Math.max(pivot.balanceFactor, 0);\n    }\n    *[Symbol.iterator]() {\n        for (let iter of this.getIterator()) {\n            yield iter;\n        }\n    }\n    *getIterator(key = null) {\n        let currentNode = this.root;\n        while (currentNode) {\n            if (this.isEqual(key, currentNode.key) || ((key === null) && !currentNode.left)) {\n                break;\n            }\n            if (this.isLessThan(key, currentNode.key) || (key === null)) {\n                currentNode = currentNode.left;\n            }\n            else {\n                currentNode = currentNode.right;\n            }\n        }\n        if (!currentNode) {\n            return null;\n        }\n        let fromleft = true;\n        for (;;) {\n            if (fromleft) {\n                yield [currentNode.key, currentNode.value];\n                fromleft = false;\n                if (currentNode.right) {\n                    currentNode = currentNode.right;\n                    while (currentNode.left) {\n                        currentNode = currentNode.left;\n                    }\n                    fromleft = true;\n                }\n                else if (currentNode.parent) {\n                    fromleft = (currentNode.parent.left === currentNode);\n                    currentNode = currentNode.parent;\n                }\n                else {\n                    break;\n                }\n            }\n            else if (currentNode.parent) {\n                fromleft = (currentNode.parent.left === currentNode);\n                currentNode = currentNode.parent;\n            }\n            else {\n                break;\n            }\n        }\n        return null;\n    }\n    *getReverseIterator(key = null) {\n        let currentNode = this.root;\n        while (currentNode) {\n            if (this.isEqual(key, currentNode.key) || ((key === null) && !currentNode.right)) {\n                break;\n            }\n            if (!this.isLessThan(key, currentNode.key) || (key === null)) {\n                currentNode = currentNode.right;\n            }\n            else {\n                currentNode = currentNode.left;\n            }\n        }\n        if (!currentNode) {\n            return null;\n        }\n        let fromright = true;\n        for (;;) {\n            if (fromright) {\n                yield [currentNode.key, currentNode.value];\n                fromright = false;\n                if (currentNode.left) {\n                    currentNode = currentNode.left;\n                    while (currentNode.right) {\n                        currentNode = currentNode.right;\n                    }\n                    fromright = true;\n                }\n                else if (currentNode.parent) {\n                    fromright = (currentNode.parent.right === currentNode);\n                    currentNode = currentNode.parent;\n                }\n                else {\n                    break;\n                }\n            }\n            else if (currentNode.parent) {\n                fromright = (currentNode.parent.right === currentNode);\n                currentNode = currentNode.parent;\n            }\n            else {\n                break;\n            }\n        }\n        return null;\n    }\n}\nexports.TreeMap = TreeMap;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool } from '../utils/pool_utils';\nimport { identity } from './Identity';\nexport function avgPool(args) {\n  const inputs = args.inputs,\n        backend = args.backend,\n        attrs = args.attrs;\n  const x = inputs.x;\n  assertNotComplex(x, 'avgPool');\n  const filterSize = attrs.filterSize,\n        strides = attrs.strides,\n        pad = attrs.pad,\n        dimRoundingMode = attrs.dimRoundingMode;\n  const dilations = 1;\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' + \"Got strides \".concat(strides, \" and dilations '\").concat(dilations, \"'\"));\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  let res;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  } else {\n    const xValues = backend.data.get(x.dataId).values;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(convInfo.outShape, x.dtype, buffer.values);\n  }\n\n  return res;\n}\nexport const avgPoolConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool\n};","map":{"version":3,"sources":["../../src/kernels/AvgPool.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,OAAR,EAA8C,YAA9C,EAA8G,IAA9G,QAAyH,uBAAzH;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AACA,SAAQ,IAAR,QAAmB,qBAAnB;AACA,SAAQ,QAAR,QAAuB,YAAvB;AAEA,OAAM,SAAU,OAAV,CACF,IADE,EAEuE;AAAA,QAEpE,MAFoE,GAE1C,IAF0C,CAEpE,MAFoE;AAAA,QAE5D,OAF4D,GAE1C,IAF0C,CAE5D,OAF4D;AAAA,QAEnD,KAFmD,GAE1C,IAF0C,CAEnD,KAFmD;AAAA,QAGpE,CAHoE,GAG/D,MAH+D,CAGpE,CAHoE;AAI3E,EAAA,gBAAgB,CAAC,CAAD,EAAI,SAAJ,CAAhB;AAJ2E,QAKpE,UALoE,GAKvB,KALuB,CAKpE,UALoE;AAAA,QAKxD,OALwD,GAKvB,KALuB,CAKxD,OALwD;AAAA,QAK/C,GAL+C,GAKvB,KALuB,CAK/C,GAL+C;AAAA,QAK1C,eAL0C,GAKvB,KALuB,CAK1C,eAL0C;AAM3E,QAAM,SAAS,GAAG,CAAlB;AAEA,EAAA,IAAI,CAAC,MAAL,CACI,YAAY,CAAC,8BAAb,CAA4C,OAA5C,EAAqD,SAArD,CADJ,EAEI,MAAM,oFACa,OADb,6BACuC,SADvC,MAFV;AAKA,QAAM,QAAQ,GAAG,YAAY,CAAC,iBAAb,CACb,CAAC,CAAC,KADW,EACgC,UADhC,EAC4C,OAD5C,EAEb,SAFa,EAEF,GAFE,EAEG,eAFH,CAAjB;AAGA,MAAI,GAAJ;;AAEA,MAAI,QAAQ,CAAC,WAAT,KAAyB,CAAzB,IAA8B,QAAQ,CAAC,YAAT,KAA0B,CAAxD,IACA,IAAI,CAAC,WAAL,CAAiB,QAAQ,CAAC,OAA1B,EAAmC,QAAQ,CAAC,QAA5C,CADJ,EAC2D;AACzD,IAAA,GAAG,GAAG,QAAQ,CAAC;AAAC,MAAA,MAAM,EAAE;AAAC,QAAA;AAAD,OAAT;AAAc,MAAA;AAAd,KAAD,CAAd;AACD,GAHD,MAGO;AACL,UAAM,OAAO,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAA3C;AACA,UAAM,OAAO,GAAG,IAAI,CAAC,cAAL,CAAoB,CAAC,CAAC,KAAtB,CAAhB;AACA,UAAM,MAAM,GAAG,IAAI,CAAC,OAAD,EAAU,CAAC,CAAC,KAAZ,EAAmB,CAAC,CAAC,KAArB,EAA4B,OAA5B,EAAqC,QAArC,EAA+C,KAA/C,CAAnB;AACA,IAAA,GAAG,GAAG,OAAO,CAAC,cAAR,CACF,QAAQ,CAAC,QADP,EACiB,CAAC,CAAC,KADnB,EAC0B,MAAM,CAAC,MADjC,CAAN;AAED;;AACD,SAAO,GAAP;AACD;AAED,OAAO,MAAM,aAAa,GAAiB;AACzC,EAAA,UAAU,EAAE,OAD6B;AAEzC,EAAA,WAAW,EAAE,KAF4B;AAGzC,EAAA,UAAU,EAAE;AAH6B,CAApC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const x = inputs.x;\n    const filterSize = attrs.filterSize,\n          strides = attrs.strides,\n          pad = attrs.pad,\n          includeBatchInIndex = attrs.includeBatchInIndex;\n    const webglBackend = backend;\n    util.assert(x.shape.length === 4, () => \"Error in maxPool: input must be rank 4 but got rank \".concat(x.shape.length, \".\"));\n    const dilations = [1, 1];\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + \"Got strides \".concat(strides, \" and dilations '\").concat(dilations, \"'\"));\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);\n\n    const _maxPoolWithArgmaxImp = maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend),\n          _maxPoolWithArgmaxImp2 = _slicedToArray(_maxPoolWithArgmaxImp, 2),\n          result = _maxPoolWithArgmaxImp2[0],\n          indexes = _maxPoolWithArgmaxImp2[1];\n\n    return [result, indexes];\n  }\n};","map":{"version":3,"sources":["../../src/kernels/MaxPoolWithArgmax.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,iBAAR,QAAiF,uBAAjF;AACA,SAAQ,YAAR,EAAoC,IAApC,QAA+C,uBAA/C;AAIA,SAAQ,qBAAR,QAAoC,0BAApC;AAEA,OAAO,MAAM,uBAAuB,GAAiB;AACnD,EAAA,UAAU,EAAE,iBADuC;AAEnD,EAAA,WAAW,EAAE,OAFsC;AAGnD,EAAA,UAAU,EAAE,CAAC;AAAC,IAAA,MAAD;AAAS,IAAA,KAAT;AAAgB,IAAA;AAAhB,GAAD,KAA6B;AAAA,UAChC,CADgC,GAC3B,MAD2B,CAChC,CADgC;AAAA,UAEhC,UAFgC,GAGnC,KAHmC,CAEhC,UAFgC;AAAA,UAEpB,OAFoB,GAGnC,KAHmC,CAEpB,OAFoB;AAAA,UAEX,GAFW,GAGnC,KAHmC,CAEX,GAFW;AAAA,UAEN,mBAFM,GAGnC,KAHmC,CAEN,mBAFM;AAIvC,UAAM,YAAY,GAAG,OAArB;AAEA,IAAA,IAAI,CAAC,MAAL,CACI,CAAC,CAAC,KAAF,CAAQ,MAAR,KAAmB,CADvB,EAEI,oEACI,CAAC,CAAC,KAAF,CAAQ,MADZ,MAFJ;AAIA,UAAM,SAAS,GAAqB,CAAC,CAAD,EAAI,CAAJ,CAApC;AACA,IAAA,IAAI,CAAC,MAAL,CACI,YAAY,CAAC,8BAAb,CAA4C,OAA5C,EAAqD,SAArD,CADJ,EAEI,MAAM,oFACa,OADb,6BACuC,SADvC,MAFV;AAKA,UAAM,QAAQ,GAAG,YAAY,CAAC,iBAAb,CACb,CAAC,CAAC,KADW,EACgC,UADhC,EAC4C,OAD5C,EAEb,SAFa,EAEF,GAFE,CAAjB;;AAhBuC,kCAqBnC,qBAAqB,CAAC,CAAD,EAAI,mBAAJ,EAAyB,QAAzB,EAAmC,YAAnC,CArBc;AAAA;AAAA,UAoBhC,MApBgC;AAAA,UAoBxB,OApBwB;;AAsBvC,WAAO,CAAC,MAAD,EAAS,OAAT,CAAP;AACD;AA1BkD,CAA9C","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    util.assert(\n        x.shape.length === 4,\n        () => `Error in maxPool: input must be rank 4 but got rank ${\n            x.shape.length}.`);\n    const dilations: [number, number] = [1, 1];\n    util.assert(\n        backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n        () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        dilations, pad);\n\n    const [result, indexes] =\n        maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
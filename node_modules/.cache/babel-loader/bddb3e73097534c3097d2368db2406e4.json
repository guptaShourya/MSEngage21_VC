{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Media = void 0;\n/**\n * @classdesc A Media represents a metadata information for the media upload\n * @property {String} sid - The server-assigned unique identifier for Media\n * @property {String} serviceSid - Service instance id which Media belongs/uploaded to\n * @property {Date} dateCreated - When the Media was created\n * @property {Date} dateUpdated - When the Media was updated\n * @property {Number} size - Size of media, bytes\n * @property {String} contentType - content type of media\n * @property {String} fileName - file name, if present, null otherwise\n * @property {MediaCategory} category - attachment category\n */\n\nvar Media = /*#__PURE__*/function () {\n  function Media(config, network, data) {\n    _classCallCheck(this, Media);\n\n    this.config = config;\n    this.network = network;\n\n    this._update(data);\n  }\n\n  _createClass(Media, [{\n    key: \"getContentUrl\",\n\n    /**\n     * Returns direct content URL to uploaded binary. This URL will expire after some time.\n     * This function gets a new URL every time, preventing it from expiring but putting additional load on backend.\n     * See getCachedContentUrl() for a function that reduces the amount of network requests.\n     *\n     * It is reasonable to build your own refresh logic upon these two functions: as soon as URL returned\n     * by getCachedContentUrl() returns 40x status you should call getContentUrl() to refresh it.\n     *\n     * @returns {Promise<string>}\n     */\n    value: function () {\n      var _getContentUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.network.get(\"\".concat(this.config.baseUrl, \"/\").concat(this.sid));\n\n              case 2:\n                response = _context.sent;\n\n                this._update(response.body);\n\n                return _context.abrupt(\"return\", Promise.resolve(this.state.contentDirectUrl));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getContentUrl() {\n        return _getContentUrl.apply(this, arguments);\n      }\n\n      return getContentUrl;\n    }()\n    /**\n     * Returns direct content URL to uploaded binary. This URL will expire after some time.\n     * This function does not support getting a new URL however. Once set it will remain the same.\n     * Use getContentUrl() to query a new one.\n     *\n     * It is reasonable to build your own refresh logic upon these two functions: as soon as URL returned\n     * by getCachedContentUrl() returns 40x status you should call getContentUrl() to refresh it.\n     *\n     * @returns {Promise<string>}\n     */\n\n  }, {\n    key: \"getCachedContentUrl\",\n    value: function () {\n      var _getCachedContentUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.state.contentDirectUrl) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", Promise.resolve(this.state.contentDirectUrl));\n\n              case 2:\n                _context2.next = 4;\n                return this.getContentUrl();\n\n              case 4:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getCachedContentUrl() {\n        return _getCachedContentUrl.apply(this, arguments);\n      }\n\n      return getCachedContentUrl;\n    }()\n  }, {\n    key: \"_update\",\n    value: function _update(data) {\n      var _a, _b, _c;\n\n      this.state = {\n        sid: data.sid,\n        serviceSid: data.service_sid,\n        channelSid: data.channel_sid,\n        messageSid: data.message_sid,\n        dateCreated: data.date_created ? new Date(data.date_created) : null,\n        dateUploadUpdated: data.date_upload_updated ? new Date(data.date_upload_updated) : null,\n        dateUpdated: data.date_updated ? new Date(data.date_updated) : null,\n        size: data.size,\n        contentType: data.content_type,\n        author: data.author,\n        url: data.url,\n        contentUrl: data.links.content,\n        contentDirectUrl: data.links.content_direct_temporary,\n        filename: (_a = data.filename) !== null && _a !== void 0 ? _a : null,\n        category: (_b = data.category) !== null && _b !== void 0 ? _b : 'media',\n        isMultipartUpstream: (_c = data.is_multipart_upstream) !== null && _c !== void 0 ? _c : false\n      };\n    }\n  }, {\n    key: \"sid\",\n    get: function get() {\n      return this.state.sid;\n    }\n  }, {\n    key: \"serviceSid\",\n    get: function get() {\n      return this.state.serviceSid;\n    }\n  }, {\n    key: \"dateCreated\",\n    get: function get() {\n      return this.state.dateCreated;\n    }\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.state.dateUpdated;\n    }\n  }, {\n    key: \"contentType\",\n    get: function get() {\n      return this.state.contentType;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.state.size;\n    }\n    /** @deprecated Use filename instead */\n\n  }, {\n    key: \"fileName\",\n    get: function get() {\n      return this.state.filename;\n    }\n  }, {\n    key: \"filename\",\n    get: function get() {\n      return this.state.filename;\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return this.state.category;\n    }\n  }]);\n\n  return Media;\n}();\n\nexports.Media = Media;","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio-chat/node_modules/twilio-mcs-client/lib/media.js"],"names":["Object","defineProperty","exports","value","Media","config","network","data","_update","get","baseUrl","sid","response","body","Promise","resolve","state","contentDirectUrl","getContentUrl","_a","_b","_c","serviceSid","service_sid","channelSid","channel_sid","messageSid","message_sid","dateCreated","date_created","Date","dateUploadUpdated","date_upload_updated","dateUpdated","date_updated","size","contentType","content_type","author","url","contentUrl","links","content","content_direct_temporary","filename","category","isMultipartUpstream","is_multipart_upstream"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Media = void 0;\n/**\n * @classdesc A Media represents a metadata information for the media upload\n * @property {String} sid - The server-assigned unique identifier for Media\n * @property {String} serviceSid - Service instance id which Media belongs/uploaded to\n * @property {Date} dateCreated - When the Media was created\n * @property {Date} dateUpdated - When the Media was updated\n * @property {Number} size - Size of media, bytes\n * @property {String} contentType - content type of media\n * @property {String} fileName - file name, if present, null otherwise\n * @property {MediaCategory} category - attachment category\n */\nclass Media {\n    constructor(config, network, data) {\n        this.config = config;\n        this.network = network;\n        this._update(data);\n    }\n    get sid() { return this.state.sid; }\n    get serviceSid() { return this.state.serviceSid; }\n    get dateCreated() { return this.state.dateCreated; }\n    get dateUpdated() { return this.state.dateUpdated; }\n    get contentType() { return this.state.contentType; }\n    get size() { return this.state.size; }\n    /** @deprecated Use filename instead */\n    get fileName() { return this.state.filename; }\n    get filename() { return this.state.filename; }\n    get category() { return this.state.category; }\n    /**\n     * Returns direct content URL to uploaded binary. This URL will expire after some time.\n     * This function gets a new URL every time, preventing it from expiring but putting additional load on backend.\n     * See getCachedContentUrl() for a function that reduces the amount of network requests.\n     *\n     * It is reasonable to build your own refresh logic upon these two functions: as soon as URL returned\n     * by getCachedContentUrl() returns 40x status you should call getContentUrl() to refresh it.\n     *\n     * @returns {Promise<string>}\n     */\n    async getContentUrl() {\n        let response = await this.network.get(`${this.config.baseUrl}/${this.sid}`);\n        this._update(response.body);\n        return Promise.resolve(this.state.contentDirectUrl);\n    }\n    /**\n     * Returns direct content URL to uploaded binary. This URL will expire after some time.\n     * This function does not support getting a new URL however. Once set it will remain the same.\n     * Use getContentUrl() to query a new one.\n     *\n     * It is reasonable to build your own refresh logic upon these two functions: as soon as URL returned\n     * by getCachedContentUrl() returns 40x status you should call getContentUrl() to refresh it.\n     *\n     * @returns {Promise<string>}\n     */\n    async getCachedContentUrl() {\n        if (this.state.contentDirectUrl) {\n            return Promise.resolve(this.state.contentDirectUrl);\n        }\n        return await this.getContentUrl();\n    }\n    _update(data) {\n        var _a, _b, _c;\n        this.state = {\n            sid: data.sid,\n            serviceSid: data.service_sid,\n            channelSid: data.channel_sid,\n            messageSid: data.message_sid,\n            dateCreated: data.date_created ? new Date(data.date_created) : null,\n            dateUploadUpdated: data.date_upload_updated ? new Date(data.date_upload_updated) : null,\n            dateUpdated: data.date_updated ? new Date(data.date_updated) : null,\n            size: data.size,\n            contentType: data.content_type,\n            author: data.author,\n            url: data.url,\n            contentUrl: data.links.content,\n            contentDirectUrl: data.links.content_direct_temporary,\n            filename: (_a = data.filename) !== null && _a !== void 0 ? _a : null,\n            category: (_b = data.category) !== null && _b !== void 0 ? _b : 'media',\n            isMultipartUpstream: (_c = data.is_multipart_upstream) !== null && _c !== void 0 ? _c : false,\n        };\n    }\n}\nexports.Media = Media;\n"]},"metadata":{},"sourceType":"script"}
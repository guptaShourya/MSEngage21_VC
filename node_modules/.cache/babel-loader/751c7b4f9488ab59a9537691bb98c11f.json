{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BackgroundProcessor = void 0;\n\nrequire(\"@tensorflow/tfjs-backend-webgl\");\n\nrequire(\"@tensorflow/tfjs-backend-cpu\");\n\nvar body_pix_1 = require(\"@tensorflow-models/body-pix\");\n\nvar Processor_1 = require(\"../Processor\");\n\nvar Benchmark_1 = require(\"../../utils/Benchmark\");\n\nvar version_1 = require(\"../../utils/version\");\n\nvar constants_1 = require(\"../../constants\");\n/**\n * @private\n */\n\n\nvar BackgroundProcessor =\n/** @class */\nfunction (_super) {\n  __extends(BackgroundProcessor, _super);\n\n  function BackgroundProcessor(options) {\n    var _this = _super.call(this) || this;\n\n    _this._currentMask = new Uint8ClampedArray();\n    _this._debounce = constants_1.DEBOUNCE;\n    _this._dummyImageData = new ImageData(1, 1);\n    _this._historyCount = constants_1.HISTORY_COUNT;\n    _this._inferenceConfig = constants_1.INFERENCE_CONFIG;\n    _this._inferenceDimensions = constants_1.WASM_INFERENCE_DIMENSIONS;\n    _this._inputMemoryOffset = 0; // tslint:disable-next-line no-unused-variable\n\n    _this._isSimdEnabled = null;\n    _this._maskBlurRadius = constants_1.MASK_BLUR_RADIUS;\n    _this._maskUsageCounter = 0;\n    _this._outputMemoryOffset = 0;\n    _this._personProbabilityThreshold = constants_1.PERSON_PROBABILITY_THRESHOLD; // tslint:disable-next-line no-unused-variable\n\n    _this._version = version_1.version;\n\n    if (typeof options.assetsPath !== 'string') {\n      throw new Error('assetsPath parameter is missing');\n    }\n\n    var assetsPath = options.assetsPath;\n\n    if (assetsPath && assetsPath[assetsPath.length - 1] !== '/') {\n      assetsPath += '/';\n    }\n\n    _this.maskBlurRadius = options.maskBlurRadius;\n    _this._assetsPath = assetsPath;\n    _this._debounce = options.debounce || constants_1.DEBOUNCE;\n    _this._historyCount = options.historyCount || constants_1.HISTORY_COUNT;\n    _this._inferenceConfig = options.inferenceConfig || constants_1.INFERENCE_CONFIG;\n    _this._personProbabilityThreshold = options.personProbabilityThreshold || constants_1.PERSON_PROBABILITY_THRESHOLD;\n    _this._useWasm = typeof options.useWasm === 'boolean' ? options.useWasm : true;\n    _this._inferenceDimensions = options.inferenceDimensions || (_this._useWasm ? constants_1.WASM_INFERENCE_DIMENSIONS : constants_1.BODYPIX_INFERENCE_DIMENSIONS);\n    _this._benchmark = new Benchmark_1.Benchmark();\n    _this._inputCanvas = document.createElement('canvas');\n    _this._inputContext = _this._inputCanvas.getContext('2d');\n    _this._maskCanvas = new OffscreenCanvas(1, 1);\n    _this._maskContext = _this._maskCanvas.getContext('2d');\n    _this._outputCanvas = document.createElement('canvas');\n    _this._outputContext = _this._outputCanvas.getContext('2d');\n    _this._masks = [];\n    return _this;\n  }\n\n  BackgroundProcessor._loadModel = function (config) {\n    if (config === void 0) {\n      config = constants_1.MODEL_CONFIG;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = BackgroundProcessor;\n            return [4\n            /*yield*/\n            , body_pix_1.load(config).catch(function (error) {\n              return console.error('Unable to load model.', error);\n            })];\n\n          case 1:\n            _a._model = _b.sent() || null;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Object.defineProperty(BackgroundProcessor.prototype, \"maskBlurRadius\", {\n    /**\n     * The current blur radius when smoothing out the edges of the person's mask.\n     */\n    get: function get() {\n      return this._maskBlurRadius;\n    },\n\n    /**\n     * Set a new blur radius to be used when smoothing out the edges of the person's mask.\n     */\n    set: function set(radius) {\n      if (typeof radius !== 'number' || radius < 0) {\n        console.warn(\"Valid mask blur radius not found. Using \" + constants_1.MASK_BLUR_RADIUS + \" as default.\");\n        radius = constants_1.MASK_BLUR_RADIUS;\n      }\n\n      this._maskBlurRadius = radius;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Load the segmentation model.\n   * Call this method before attaching the processor to ensure\n   * video frames are processed correctly.\n   */\n\n  BackgroundProcessor.prototype.loadModel = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, tflite, modelResponse, model, modelBufferOffset;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all([BackgroundProcessor._loadModel(), this._loadTwilioTfLite(), fetch(this._assetsPath + constants_1.MODEL_NAME)])];\n\n          case 1:\n            _a = _b.sent(), tflite = _a[1], modelResponse = _a[2];\n            return [4\n            /*yield*/\n            , modelResponse.arrayBuffer()];\n\n          case 2:\n            model = _b.sent();\n            modelBufferOffset = tflite._getModelBufferMemoryOffset();\n            tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n\n            tflite._loadModel(model.byteLength);\n\n            this._inputMemoryOffset = tflite._getInputMemoryOffset() / 4;\n            this._outputMemoryOffset = tflite._getOutputMemoryOffset() / 4;\n            this._tflite = tflite;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Apply a transform to the background of an input video frame and leaving\n   * the foreground (person(s)) untouched. Any exception detected will\n   * result in the frame being dropped.\n   * @param inputFrameBuffer - The source of the input frame to process.\n   * @param outputFrameBuffer - The output frame buffer to use to draw the processed frame.\n   */\n\n\n  BackgroundProcessor.prototype.processFrame = function (inputFrameBuffer, outputFrameBuffer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var inputFrame, captureWidth, captureHeight, _a, inferenceWidth, inferenceHeight, reInitDummyImage, personMask;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!BackgroundProcessor._model || !this._tflite) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (!inputFrameBuffer || !outputFrameBuffer) {\n              throw new Error('Missing input or output frame buffer');\n            }\n\n            this._benchmark.end('captureFrameDelay');\n\n            this._benchmark.start('processFrameDelay');\n\n            inputFrame = inputFrameBuffer;\n            captureWidth = inputFrame.width, captureHeight = inputFrame.height;\n            _a = this._inferenceDimensions, inferenceWidth = _a.width, inferenceHeight = _a.height;\n\n            if (this._outputCanvas !== outputFrameBuffer) {\n              this._outputCanvas = outputFrameBuffer;\n              this._outputContext = outputFrameBuffer.getContext('2d');\n            }\n\n            reInitDummyImage = false;\n\n            if (this._inputCanvas.width !== inferenceWidth) {\n              this._inputCanvas.width = inferenceWidth;\n              this._maskCanvas.width = inferenceWidth;\n              reInitDummyImage = true;\n            }\n\n            if (this._inputCanvas.height !== inferenceHeight) {\n              this._inputCanvas.height = inferenceHeight;\n              this._maskCanvas.height = inferenceHeight;\n              reInitDummyImage = true;\n            }\n\n            if (reInitDummyImage) {\n              this._dummyImageData = new ImageData(new Uint8ClampedArray(inferenceWidth * inferenceHeight * 4), inferenceWidth, inferenceHeight);\n            }\n\n            return [4\n            /*yield*/\n            , this._createPersonMask(inputFrame)];\n\n          case 1:\n            personMask = _b.sent();\n\n            this._benchmark.start('imageCompositionDelay');\n\n            this._maskContext.putImageData(personMask, 0, 0);\n\n            this._outputContext.save();\n\n            this._outputContext.filter = \"blur(\" + this._maskBlurRadius + \"px)\";\n            this._outputContext.globalCompositeOperation = 'copy';\n\n            this._outputContext.drawImage(this._maskCanvas, 0, 0, captureWidth, captureHeight);\n\n            this._outputContext.filter = 'none';\n            this._outputContext.globalCompositeOperation = 'source-in';\n\n            this._outputContext.drawImage(inputFrame, 0, 0, captureWidth, captureHeight);\n\n            this._outputContext.globalCompositeOperation = 'destination-over';\n\n            this._setBackground(inputFrame);\n\n            this._outputContext.restore();\n\n            this._benchmark.end('imageCompositionDelay');\n\n            this._benchmark.end('processFrameDelay');\n\n            this._benchmark.end('totalProcessingDelay'); // NOTE (csantos): Start the benchmark from here so we can include the delay from the Video sdk\n            // for a more accurate fps\n\n\n            this._benchmark.start('totalProcessingDelay');\n\n            this._benchmark.start('captureFrameDelay');\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  BackgroundProcessor.prototype._addMask = function (mask) {\n    if (this._masks.length >= this._historyCount) {\n      this._masks.splice(0, this._masks.length - this._historyCount + 1);\n    }\n\n    this._masks.push(mask);\n  };\n\n  BackgroundProcessor.prototype._applyAlpha = function (imageData) {\n    var weightedSum = this._masks.reduce(function (sum, mask, j) {\n      return sum + (j + 1) * (j + 1);\n    }, 0);\n\n    var pixels = imageData.height * imageData.width;\n\n    var _loop_1 = function _loop_1(i) {\n      var w = this_1._masks.reduce(function (sum, mask, j) {\n        return sum + mask[i] * (j + 1) * (j + 1);\n      }, 0) / weightedSum;\n      imageData.data[i * 4 + 3] = Math.round(w * 255);\n    };\n\n    var this_1 = this;\n\n    for (var i = 0; i < pixels; i++) {\n      _loop_1(i);\n    }\n  };\n\n  BackgroundProcessor.prototype._createPersonMask = function (inputFrame) {\n    return __awaiter(this, void 0, void 0, function () {\n      var imageData, shouldRunInference, _a, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            imageData = this._dummyImageData;\n            shouldRunInference = this._maskUsageCounter < 1;\n\n            this._benchmark.start('inputImageResizeDelay');\n\n            if (shouldRunInference) {\n              imageData = this._getResizedInputImageData(inputFrame);\n            }\n\n            this._benchmark.end('inputImageResizeDelay');\n\n            this._benchmark.start('segmentationDelay');\n\n            if (!shouldRunInference) return [3\n            /*break*/\n            , 4];\n            _a = this;\n            if (!this._useWasm) return [3\n            /*break*/\n            , 1];\n            _b = this._runTwilioTfLiteInference(imageData);\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this._runBodyPixInference(imageData)];\n\n          case 2:\n            _b = _c.sent();\n            _c.label = 3;\n\n          case 3:\n            _a._currentMask = _b;\n            this._maskUsageCounter = this._debounce;\n            _c.label = 4;\n\n          case 4:\n            this._addMask(this._currentMask);\n\n            this._applyAlpha(imageData);\n\n            this._maskUsageCounter--;\n\n            this._benchmark.end('segmentationDelay');\n\n            return [2\n            /*return*/\n            , imageData];\n        }\n      });\n    });\n  };\n\n  BackgroundProcessor.prototype._getResizedInputImageData = function (inputFrame) {\n    var _a = this._inputCanvas,\n        width = _a.width,\n        height = _a.height;\n\n    this._inputContext.drawImage(inputFrame, 0, 0, width, height);\n\n    var imageData = this._inputContext.getImageData(0, 0, width, height);\n\n    return imageData;\n  };\n\n  BackgroundProcessor.prototype._loadJs = function (url) {\n    return new Promise(function (resolve, reject) {\n      var script = document.createElement('script');\n\n      script.onload = function () {\n        return resolve();\n      };\n\n      script.onerror = reject;\n      document.head.append(script);\n      script.src = url;\n    });\n  };\n\n  BackgroundProcessor.prototype._loadTwilioTfLite = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var tflite, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._loadJs(this._assetsPath + constants_1.TFLITE_SIMD_LOADER_NAME)];\n\n          case 1:\n            _b.sent();\n\n            _b.label = 2;\n\n          case 2:\n            _b.trys.push([2, 4,, 7]);\n\n            return [4\n            /*yield*/\n            , window.createTwilioTFLiteSIMDModule()];\n\n          case 3:\n            tflite = _b.sent();\n            this._isSimdEnabled = true;\n            return [3\n            /*break*/\n            , 7];\n\n          case 4:\n            _a = _b.sent();\n            console.warn('SIMD not supported. You may experience poor quality of background replacement.');\n            return [4\n            /*yield*/\n            , this._loadJs(this._assetsPath + constants_1.TFLITE_LOADER_NAME)];\n\n          case 5:\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , window.createTwilioTFLiteModule()];\n\n          case 6:\n            tflite = _b.sent();\n            this._isSimdEnabled = false;\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            return [2\n            /*return*/\n            , tflite];\n        }\n      });\n    });\n  };\n\n  BackgroundProcessor.prototype._runBodyPixInference = function (inputImage) {\n    return __awaiter(this, void 0, void 0, function () {\n      var segment;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , BackgroundProcessor._model.segmentPerson(inputImage, this._inferenceConfig)];\n\n          case 1:\n            segment = _a.sent();\n            return [2\n            /*return*/\n            , segment.data];\n        }\n      });\n    });\n  };\n\n  BackgroundProcessor.prototype._runTwilioTfLiteInference = function (inputImage) {\n    var _a = this,\n        _b = _a._inferenceDimensions,\n        width = _b.width,\n        height = _b.height,\n        offset = _a._inputMemoryOffset,\n        tflite = _a._tflite;\n\n    var pixels = width * height;\n\n    for (var i = 0; i < pixels; i++) {\n      tflite.HEAPF32[offset + i * 3] = inputImage.data[i * 4] / 255;\n      tflite.HEAPF32[offset + i * 3 + 1] = inputImage.data[i * 4 + 1] / 255;\n      tflite.HEAPF32[offset + i * 3 + 2] = inputImage.data[i * 4 + 2] / 255;\n    }\n\n    tflite._runInference();\n\n    var inferenceData = new Uint8ClampedArray(pixels * 4);\n\n    for (var i = 0; i < pixels; i++) {\n      var personProbability = tflite.HEAPF32[this._outputMemoryOffset + i];\n      inferenceData[i] = Number(personProbability >= this._personProbabilityThreshold) * personProbability;\n    }\n\n    return inferenceData;\n  };\n\n  BackgroundProcessor._model = null;\n  return BackgroundProcessor;\n}(Processor_1.Processor);\n\nexports.BackgroundProcessor = BackgroundProcessor;","map":{"version":3,"sources":["../../../lib/processors/background/BackgroundProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import '@tensorflow/tfjs-backend-webgl';\nimport '@tensorflow/tfjs-backend-cpu';\nimport { ModelConfig, PersonInferenceConfig } from '@tensorflow-models/body-pix/dist/body_pix_model';\nimport { BodyPix, load as loadModel } from '@tensorflow-models/body-pix';\nimport { Processor } from '../Processor';\nimport { Benchmark } from '../../utils/Benchmark';\nimport { version } from '../../utils/version';\nimport { Dimensions } from '../../types';\n\nimport {\n  BODYPIX_INFERENCE_DIMENSIONS,\n  DEBOUNCE,\n  HISTORY_COUNT,\n  INFERENCE_CONFIG,\n  MASK_BLUR_RADIUS,\n  MODEL_CONFIG,\n  MODEL_NAME,\n  PERSON_PROBABILITY_THRESHOLD,\n  TFLITE_LOADER_NAME,\n  TFLITE_SIMD_LOADER_NAME,\n  WASM_INFERENCE_DIMENSIONS,\n} from '../../constants';\n\n/**\n * @private\n */\nexport interface BackgroundProcessorOptions {\n  /**\n   * The VideoProcessors load assets dynamically depending on certain browser features.\n   * You need to serve all the assets and provide the root path so they can be referenced properly.\n   * These assets can be copied from the `dist/build` folder which you can add as part of your deployment process.\n   * @example\n   * <br/>\n   * <br/>\n   * For virtual background:\n   * <br/>\n   *\n   * ```ts\n   * const virtualBackground = new VirtualBackgroundProcessor({\n   *   assetsPath: 'https://my-server-path/assets',\n   *   backgroundImage: img,\n   * });\n   * await virtualBackground.loadModel();\n   * ```\n   *\n   * <br/>\n   * For blur background:\n   * <br/>\n   *\n   * ```ts\n   * const blurBackground = new GaussianBlurBackgroundProcessor({\n   *   assetsPath: 'https://my-server-path/assets'\n   * });\n   * await blurBackground.loadModel();\n   * ```\n   */\n  assetsPath: string;\n\n  /**\n   * @private\n   */\n  debounce?: number;\n\n  /**\n   * @private\n   */\n  historyCount?: number;\n\n  /**\n   * @private\n   */\n  inferenceConfig?: PersonInferenceConfig;\n\n  /**\n   * @private\n   */\n  inferenceDimensions?: Dimensions;\n\n  /**\n   * The blur radius to use when smoothing out the edges of the person's mask.\n   * @default\n   * ```html\n   * 5\n   * ```\n   */\n  maskBlurRadius?: number;\n\n  /**\n   * @private\n   */\n  personProbabilityThreshold?: number;\n\n  /**\n   * @private\n   */\n   useWasm?: boolean;\n}\n\n/**\n * @private\n */\nexport abstract class BackgroundProcessor extends Processor {\n  private static _model: BodyPix | null = null;\n  private static async _loadModel(config: ModelConfig = MODEL_CONFIG): Promise<void> {\n    BackgroundProcessor._model = await loadModel(config)\n      .catch((error: any) => console.error('Unable to load model.', error)) || null;\n  }\n  protected _outputCanvas: HTMLCanvasElement;\n  protected _outputContext: CanvasRenderingContext2D;\n\n  private _assetsPath: string;\n  private _benchmark: Benchmark;\n  private _currentMask: Uint8ClampedArray | Uint8Array = new Uint8ClampedArray();\n  private _debounce: number = DEBOUNCE;\n  private _dummyImageData: ImageData = new ImageData(1, 1);\n  private _historyCount: number = HISTORY_COUNT;\n  private _inferenceConfig: PersonInferenceConfig = INFERENCE_CONFIG;\n  private _inferenceDimensions: Dimensions = WASM_INFERENCE_DIMENSIONS;\n  private _inputCanvas: HTMLCanvasElement;\n  private _inputContext: CanvasRenderingContext2D;\n  private _inputMemoryOffset: number = 0;\n  // tslint:disable-next-line no-unused-variable\n  private _isSimdEnabled: boolean | null = null;\n  private _maskBlurRadius: number = MASK_BLUR_RADIUS;\n  private _maskCanvas: OffscreenCanvas;\n  private _maskContext: OffscreenCanvasRenderingContext2D;\n  private _masks: (Uint8ClampedArray | Uint8Array)[];\n  private _maskUsageCounter: number = 0;\n  private _outputMemoryOffset: number = 0;\n  private _personProbabilityThreshold: number = PERSON_PROBABILITY_THRESHOLD;\n  private _tflite: any;\n  private _useWasm: boolean;\n  // tslint:disable-next-line no-unused-variable\n  private readonly _version: string = version;\n\n  constructor(options: BackgroundProcessorOptions) {\n    super();\n\n    if (typeof options.assetsPath !== 'string') {\n      throw new Error('assetsPath parameter is missing');\n    }\n    let assetsPath = options.assetsPath;\n    if (assetsPath && assetsPath[assetsPath.length - 1] !== '/') {\n      assetsPath += '/';\n    }\n\n    this.maskBlurRadius = options.maskBlurRadius!;\n    this._assetsPath = assetsPath;\n    this._debounce = options.debounce! || DEBOUNCE;\n    this._historyCount = options.historyCount! || HISTORY_COUNT;\n    this._inferenceConfig = options.inferenceConfig! || INFERENCE_CONFIG;\n    this._personProbabilityThreshold = options.personProbabilityThreshold! || PERSON_PROBABILITY_THRESHOLD;\n    this._useWasm = typeof options.useWasm === 'boolean' ? options.useWasm : true;\n    this._inferenceDimensions = options.inferenceDimensions! ||\n      (this._useWasm ? WASM_INFERENCE_DIMENSIONS : BODYPIX_INFERENCE_DIMENSIONS);\n\n    this._benchmark = new Benchmark();\n    this._inputCanvas = document.createElement('canvas');\n    this._inputContext = this._inputCanvas.getContext('2d') as CanvasRenderingContext2D;\n    this._maskCanvas = new OffscreenCanvas(1, 1);\n    this._maskContext = this._maskCanvas.getContext('2d') as OffscreenCanvasRenderingContext2D;\n    this._outputCanvas = document.createElement('canvas');\n    this._outputContext = this._outputCanvas.getContext('2d') as CanvasRenderingContext2D;\n    this._masks = [];\n  }\n\n  /**\n   * The current blur radius when smoothing out the edges of the person's mask.\n   */\n  get maskBlurRadius(): number {\n    return this._maskBlurRadius;\n  }\n\n  /**\n   * Set a new blur radius to be used when smoothing out the edges of the person's mask.\n   */\n  set maskBlurRadius(radius: number) {\n    if (typeof radius !== 'number' || radius < 0) {\n      console.warn(`Valid mask blur radius not found. Using ${MASK_BLUR_RADIUS} as default.`);\n      radius = MASK_BLUR_RADIUS;\n    }\n    this._maskBlurRadius = radius;\n  }\n\n  /**\n   * Load the segmentation model.\n   * Call this method before attaching the processor to ensure\n   * video frames are processed correctly.\n   */\n   async loadModel() {\n    const [, tflite, modelResponse ] = await Promise.all([\n      BackgroundProcessor._loadModel(),\n      this._loadTwilioTfLite(),\n      fetch(this._assetsPath + MODEL_NAME),\n    ]);\n\n    const model = await modelResponse.arrayBuffer();\n    const modelBufferOffset = tflite._getModelBufferMemoryOffset();\n    tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);\n    tflite._loadModel(model.byteLength);\n\n    this._inputMemoryOffset = tflite._getInputMemoryOffset() / 4;\n    this._outputMemoryOffset = tflite._getOutputMemoryOffset() / 4;\n\n    this._tflite = tflite;\n  }\n\n  /**\n   * Apply a transform to the background of an input video frame and leaving\n   * the foreground (person(s)) untouched. Any exception detected will\n   * result in the frame being dropped.\n   * @param inputFrameBuffer - The source of the input frame to process.\n   * @param outputFrameBuffer - The output frame buffer to use to draw the processed frame.\n   */\n  async processFrame(inputFrameBuffer: OffscreenCanvas, outputFrameBuffer: HTMLCanvasElement): Promise<void> {\n    if (!BackgroundProcessor._model || !this._tflite) {\n      return;\n    }\n    if (!inputFrameBuffer || !outputFrameBuffer) {\n      throw new Error('Missing input or output frame buffer');\n    }\n    this._benchmark.end('captureFrameDelay');\n    this._benchmark.start('processFrameDelay');\n\n    const inputFrame = inputFrameBuffer;\n    const { width: captureWidth, height: captureHeight } = inputFrame;\n    const { width: inferenceWidth, height: inferenceHeight } = this._inferenceDimensions;\n\n    if (this._outputCanvas !== outputFrameBuffer) {\n      this._outputCanvas = outputFrameBuffer;\n      this._outputContext = outputFrameBuffer.getContext('2d') as CanvasRenderingContext2D;\n    }\n\n    // Only set the canvas' dimensions if they have changed to prevent unnecessary redraw\n    let reInitDummyImage = false;\n    if (this._inputCanvas.width !== inferenceWidth) {\n      this._inputCanvas.width = inferenceWidth;\n      this._maskCanvas.width = inferenceWidth;\n      reInitDummyImage = true;\n    }\n    if (this._inputCanvas.height !== inferenceHeight) {\n      this._inputCanvas.height = inferenceHeight;\n      this._maskCanvas.height = inferenceHeight;\n      reInitDummyImage = true;\n    }\n    if (reInitDummyImage) {\n      this._dummyImageData = new ImageData(\n        new Uint8ClampedArray(inferenceWidth * inferenceHeight * 4),\n        inferenceWidth, inferenceHeight);\n    }\n\n    const personMask = await this._createPersonMask(inputFrame);\n\n    this._benchmark.start('imageCompositionDelay');\n    this._maskContext.putImageData(personMask, 0, 0);\n    this._outputContext.save();\n    this._outputContext.filter = `blur(${this._maskBlurRadius}px)`;\n    this._outputContext.globalCompositeOperation = 'copy';\n    this._outputContext.drawImage(this._maskCanvas, 0, 0, captureWidth, captureHeight);\n    this._outputContext.filter = 'none';\n    this._outputContext.globalCompositeOperation = 'source-in';\n    this._outputContext.drawImage(inputFrame, 0, 0, captureWidth, captureHeight);\n    this._outputContext.globalCompositeOperation = 'destination-over';\n    this._setBackground(inputFrame);\n    this._outputContext.restore();\n\n    this._benchmark.end('imageCompositionDelay');\n    this._benchmark.end('processFrameDelay');\n    this._benchmark.end('totalProcessingDelay');\n\n    // NOTE (csantos): Start the benchmark from here so we can include the delay from the Video sdk\n    // for a more accurate fps\n    this._benchmark.start('totalProcessingDelay');\n    this._benchmark.start('captureFrameDelay');\n  }\n\n  protected abstract _setBackground(inputFrame: OffscreenCanvas): void;\n\n  private _addMask(mask: Uint8ClampedArray | Uint8Array) {\n    if (this._masks.length >= this._historyCount) {\n      this._masks.splice(0, this._masks.length - this._historyCount + 1);\n    }\n    this._masks.push(mask);\n  }\n\n  private _applyAlpha(imageData: ImageData) {\n    const weightedSum = this._masks.reduce((sum, mask, j) => sum + (j + 1) * (j + 1), 0);\n    const pixels = imageData.height * imageData.width;\n    for (let i = 0; i < pixels; i++) {\n      const w = this._masks.reduce((sum, mask, j) => sum + mask[i] * (j + 1) * (j + 1), 0) / weightedSum;\n      imageData.data[i * 4 + 3] = Math.round(w * 255);\n    }\n  }\n\n  private async _createPersonMask(inputFrame: OffscreenCanvas): Promise<ImageData> {\n    let imageData = this._dummyImageData;\n    const shouldRunInference = this._maskUsageCounter < 1;\n\n    this._benchmark.start('inputImageResizeDelay');\n    if (shouldRunInference) {\n      imageData = this._getResizedInputImageData(inputFrame);\n    }\n    this._benchmark.end('inputImageResizeDelay');\n\n    this._benchmark.start('segmentationDelay');\n    if (shouldRunInference) {\n      this._currentMask = this._useWasm\n        ? this._runTwilioTfLiteInference(imageData)\n        : await this._runBodyPixInference(imageData);\n      this._maskUsageCounter = this._debounce;\n    }\n    this._addMask(this._currentMask);\n    this._applyAlpha(imageData);\n    this._maskUsageCounter--;\n    this._benchmark.end('segmentationDelay');\n\n    return imageData;\n  }\n\n  private _getResizedInputImageData(inputFrame: OffscreenCanvas): ImageData {\n    const { width, height } = this._inputCanvas;\n    this._inputContext.drawImage(inputFrame, 0, 0, width, height);\n    const imageData = this._inputContext.getImageData(0, 0, width, height);\n    return imageData;\n  }\n\n  private _loadJs(url: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.onload = () => resolve();\n      script.onerror = reject;\n      document.head.append(script);\n      script.src = url;\n    });\n  }\n\n  private async _loadTwilioTfLite(): Promise<any> {\n    let tflite: any;\n    await this._loadJs(this._assetsPath + TFLITE_SIMD_LOADER_NAME);\n\n    try {\n      tflite = await window.createTwilioTFLiteSIMDModule();\n      this._isSimdEnabled = true;\n    } catch {\n      console.warn('SIMD not supported. You may experience poor quality of background replacement.');\n      await this._loadJs(this._assetsPath + TFLITE_LOADER_NAME);\n      tflite = await window.createTwilioTFLiteModule();\n      this._isSimdEnabled = false;\n    }\n    return tflite;\n  }\n\n  private async _runBodyPixInference(inputImage: ImageData): Promise<Uint8Array> {\n    const segment = await BackgroundProcessor._model!.segmentPerson(inputImage, this._inferenceConfig);\n    return segment.data;\n  }\n\n  private _runTwilioTfLiteInference(inputImage: ImageData): Uint8ClampedArray {\n    const { _inferenceDimensions: { width, height }, _inputMemoryOffset: offset, _tflite: tflite } = this;\n    const pixels = width * height;\n\n    for (let i = 0; i < pixels; i++) {\n      tflite.HEAPF32[offset + i * 3] = inputImage.data[i * 4] / 255;\n      tflite.HEAPF32[offset + i * 3 + 1] = inputImage.data[i * 4 + 1] / 255;\n      tflite.HEAPF32[offset + i * 3 + 2] = inputImage.data[i * 4 + 2] / 255;\n    }\n\n    tflite._runInference();\n    const inferenceData = new Uint8ClampedArray(pixels * 4);\n\n    for (let i = 0; i < pixels; i++) {\n      const personProbability = tflite.HEAPF32[this._outputMemoryOffset + i];\n      inferenceData[i] = Number(personProbability >= this._personProbabilityThreshold) * personProbability;\n    }\n\n    return inferenceData;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar MediaTrack = require('./mediatrack');\n\nvar VideoProcessorEventObserver = require('./videoprocessoreventobserver');\n\nvar _require = require('../../util/constants'),\n    DEFAULT_FRAME_RATE = _require.DEFAULT_FRAME_RATE;\n/**\n * A {@link VideoTrack} is a {@link Track} representing video.\n * @extends Track\n * @property {boolean} isStarted - Whether or not the {@link VideoTrack} has\n *   started; if the {@link VideoTrack} started, there is enough video data to\n *   begin playback\n * @property {boolean} isEnabled - Whether or not the {@link VideoTrack} is\n *   enabled; if the {@link VideoTrack} is not enabled, it is \"paused\"\n * @property {VideoTrack.Dimensions} dimensions - The {@link VideoTrack}'s\n *   {@link VideoTrack.Dimensions}\n * @property {Track.Kind} kind - \"video\"\n * @property {MediaStreamTrack} mediaStreamTrack - A video MediaStreamTrack\n * @property {?MediaStreamTrack} processedTrack - The source of processed video frames.\n * It is null if no VideoProcessor has been added.\n * @property {?VideoProcessor} processor - A {@link VideoProcessor} that is currently\n *   processing video frames. It is null if video frames are not being processed.\n * @emits VideoTrack#dimensionsChanged\n * @emits VideoTrack#disabled\n * @emits VideoTrack#enabled\n * @emits VideoTrack#started\n */\n\n\nvar VideoTrack = function (_MediaTrack) {\n  _inherits(VideoTrack, _MediaTrack);\n  /**\n   * Construct a {@link VideoTrack}.\n   * @param {MediaTrackTransceiver} mediaTrackTransceiver\n   * @param {{log: Log}} options\n   */\n\n\n  function VideoTrack(mediaTrackTransceiver, options) {\n    var _ret;\n\n    _classCallCheck(this, VideoTrack);\n\n    var _this = _possibleConstructorReturn(this, (VideoTrack.__proto__ || Object.getPrototypeOf(VideoTrack)).call(this, mediaTrackTransceiver, options));\n\n    Object.defineProperties(_this, {\n      _captureTimeoutId: {\n        value: null,\n        writable: true\n      },\n      _isCapturing: {\n        value: false,\n        writable: true\n      },\n      _inputFrame: {\n        value: null,\n        writable: true\n      },\n      _outputFrame: {\n        value: null,\n        writable: true\n      },\n      _processorEventObserver: {\n        value: null,\n        writable: true\n      },\n      _unmuteHandler: {\n        value: null,\n        writable: true\n      },\n      dimensions: {\n        enumerable: true,\n        value: {\n          width: null,\n          height: null\n        }\n      },\n      processor: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n    _this._processorEventObserver = new (options.VideoProcessorEventObserver || VideoProcessorEventObserver)(_this._log);\n    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n  }\n  /**\n   * @private\n   */\n\n\n  _createClass(VideoTrack, [{\n    key: '_checkIfCanCaptureFrames',\n    value: function _checkIfCanCaptureFrames() {\n      var isPublishing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var canCaptureFrames = true;\n      var message = '';\n      var _mediaStreamTrack = this.mediaStreamTrack,\n          enabled = _mediaStreamTrack.enabled,\n          readyState = _mediaStreamTrack.readyState;\n\n      if (!enabled) {\n        canCaptureFrames = false;\n        message = 'MediaStreamTrack is disabled';\n      }\n\n      if (readyState === 'ended') {\n        canCaptureFrames = false;\n        message = 'MediaStreamTrack is ended';\n      }\n\n      if (!this.processor) {\n        canCaptureFrames = false;\n        message = 'VideoProcessor not detected.';\n      }\n\n      if (!this._attachments.size && !isPublishing) {\n        canCaptureFrames = false;\n        message = 'VideoTrack is not publishing and there is no attached element.';\n      }\n\n      if (message) {\n        this._log.debug(message);\n      }\n\n      return {\n        canCaptureFrames: canCaptureFrames,\n        message: message\n      };\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_captureFrames',\n    value: function _captureFrames() {\n      var _this2 = this;\n\n      if (this._isCapturing) {\n        this._log.debug('Ignoring captureFrames call. Capture is already in progress');\n\n        return;\n      }\n\n      if (!this._checkIfCanCaptureFrames().canCaptureFrames) {\n        this._isCapturing = false;\n\n        this._log.debug('Cannot capture frames. Ignoring captureFrames call.');\n\n        return;\n      }\n\n      this._isCapturing = true;\n\n      this._processorEventObserver.emit('start');\n\n      this._log.debug('Start capturing frames');\n\n      var startTime = Date.now();\n      var processFramePeriodMs = void 0;\n\n      this._dummyEl.play().then(function () {\n        var captureFrame = function captureFrame(cb) {\n          clearTimeout(_this2._captureTimeoutId);\n\n          var _mediaStreamTrack$get = _this2.mediaStreamTrack.getSettings(),\n              _mediaStreamTrack$get2 = _mediaStreamTrack$get.frameRate,\n              frameRate = _mediaStreamTrack$get2 === undefined ? DEFAULT_FRAME_RATE : _mediaStreamTrack$get2;\n\n          var capturePeriodMs = Math.floor(1000 / frameRate);\n          var delay = capturePeriodMs - processFramePeriodMs;\n\n          if (delay < 0 || typeof processFramePeriodMs !== 'number') {\n            delay = 0;\n          }\n\n          _this2._captureTimeoutId = setTimeout(cb, delay);\n        };\n\n        var process = function process() {\n          var checkResult = _this2._checkIfCanCaptureFrames();\n\n          if (!checkResult.canCaptureFrames) {\n            _this2._isCapturing = false;\n\n            _this2._processorEventObserver.emit('stop', checkResult.message);\n\n            _this2._log.debug('Cannot capture frames. Stopping capturing frames.');\n\n            return;\n          }\n\n          startTime = Date.now();\n\n          var _mediaStreamTrack$get3 = _this2.mediaStreamTrack.getSettings(),\n              _mediaStreamTrack$get4 = _mediaStreamTrack$get3.width,\n              width = _mediaStreamTrack$get4 === undefined ? 0 : _mediaStreamTrack$get4,\n              _mediaStreamTrack$get5 = _mediaStreamTrack$get3.height,\n              height = _mediaStreamTrack$get5 === undefined ? 0 : _mediaStreamTrack$get5; // Setting the canvas' dimension triggers a redraw.\n          // Only set it if it has changed.\n\n\n          if (_this2._inputFrame.width !== width) {\n            _this2._inputFrame.width = width;\n            _this2._inputFrame.height = height;\n\n            if (_this2._outputFrame) {\n              _this2._outputFrame.width = width;\n              _this2._outputFrame.height = height;\n            }\n          }\n\n          _this2._inputFrame.getContext('2d').drawImage(_this2._dummyEl, 0, 0, width, height);\n\n          var result = null;\n\n          try {\n            result = _this2.processor.processFrame(_this2._inputFrame, _this2._outputFrame);\n          } catch (ex) {\n            _this2._log.debug('Exception detected after calling processFrame.', ex);\n          }\n\n          (result instanceof Promise ? result : Promise.resolve(result)).then(function () {\n            if (_this2._outputFrame) {\n              _this2.processedTrack.requestFrame();\n\n              _this2._processorEventObserver.emit('stats');\n            }\n          }).finally(function () {\n            processFramePeriodMs = Date.now() - startTime;\n            captureFrame(process);\n          });\n        };\n\n        captureFrame(process);\n      }).catch(function (error) {\n        return _this2._log.error('Video element cannot be played', {\n          error: error,\n          track: _this2\n        });\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_initialize',\n    value: function _initialize() {\n      var _this3 = this;\n\n      _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), '_initialize', this).call(this);\n\n      if (this._dummyEl) {\n        this._dummyEl.onloadedmetadata = function () {\n          if (dimensionsChanged(_this3, _this3._dummyEl)) {\n            _this3.dimensions.width = _this3._dummyEl.videoWidth;\n            _this3.dimensions.height = _this3._dummyEl.videoHeight;\n          }\n        };\n\n        this._dummyEl.onresize = function () {\n          if (dimensionsChanged(_this3, _this3._dummyEl)) {\n            _this3.dimensions.width = _this3._dummyEl.videoWidth;\n            _this3.dimensions.height = _this3._dummyEl.videoHeight;\n\n            if (_this3.isStarted) {\n              _this3._log.debug('Dimensions changed:', _this3.dimensions);\n\n              _this3.emit(VideoTrack.DIMENSIONS_CHANGED, _this3);\n            }\n          }\n        };\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_restartProcessor',\n    value: function _restartProcessor() {\n      var processor = this.processor;\n\n      if (processor) {\n        this.removeProcessor(processor);\n        this.addProcessor(processor);\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_start',\n    value: function _start(dummyEl) {\n      this.dimensions.width = dummyEl.videoWidth;\n      this.dimensions.height = dummyEl.videoHeight;\n\n      this._log.debug('Dimensions:', this.dimensions);\n\n      return _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), '_start', this).call(this, dummyEl);\n    }\n    /**\n     * Add a {@link VideoProcessor} to allow for custom processing of video frames belonging to a VideoTrack.\n     * Only Chrome supports this as of now. Calling this API from a non-supported browser will result in a log warning.\n     * @param {VideoProcessor} processor - The {@link VideoProcessor} to use.\n     * @returns {this}\n     * @example\n     * class GrayScaleProcessor {\n     *   constructor(percentage) {\n     *     this.percentage = percentage;\n     *   }\n     *   processFrame(inputFrameBuffer, outputFrameBuffer) {\n     *     const context = outputFrameBuffer.getContext('2d');\n     *     context.filter = `grayscale(${this.percentage}%)`;\n     *     context.drawImage(inputFrameBuffer, 0, 0, inputFrameBuffer.width, inputFrameBuffer.height);\n     *   }\n     * }\n     *\n     * Video.createLocalVideoTrack().then(function(videoTrack) {\n     *   videoTrack.addProcessor(new GrayScaleProcessor(100));\n     * });\n     */\n\n  }, {\n    key: 'addProcessor',\n    value: function addProcessor(processor) {\n      var _this4 = this;\n\n      if (typeof OffscreenCanvas !== 'function') {\n        return this._log.warn('Adding a VideoProcessor is not supported in this browser.');\n      }\n\n      if (!processor || typeof processor.processFrame !== 'function') {\n        throw new Error('Received an invalid VideoProcessor from addProcessor.');\n      }\n\n      if (this.processor) {\n        throw new Error('A VideoProcessor has already been added.');\n      }\n\n      if (!this._dummyEl) {\n        throw new Error('VideoTrack has not been initialized.');\n      }\n\n      this._log.debug('Adding VideoProcessor to the VideoTrack', processor);\n\n      if (!this._unmuteHandler) {\n        this._unmuteHandler = function () {\n          _this4._log.debug('mediaStreamTrack unmuted'); // NOTE(csantos): On certain scenarios where mediaStreamTrack is coming from muted to unmuted state,\n          // the processedTrack doesn't unmutes automatically although enabled is already set to true.\n          // This is a terminal state for the processedTrack and should be restarted. (VIDEO-4176)\n\n\n          if (_this4.processedTrack.muted) {\n            _this4._log.debug('mediaStreamTrack is unmuted but processedTrack is muted. Restarting processor.');\n\n            _this4._restartProcessor();\n          }\n        };\n\n        this.mediaStreamTrack.addEventListener('unmute', this._unmuteHandler);\n      }\n\n      var _mediaStreamTrack$get6 = this.mediaStreamTrack.getSettings(),\n          _mediaStreamTrack$get7 = _mediaStreamTrack$get6.width,\n          width = _mediaStreamTrack$get7 === undefined ? 0 : _mediaStreamTrack$get7,\n          _mediaStreamTrack$get8 = _mediaStreamTrack$get6.height,\n          height = _mediaStreamTrack$get8 === undefined ? 0 : _mediaStreamTrack$get8,\n          _mediaStreamTrack$get9 = _mediaStreamTrack$get6.frameRate,\n          frameRate = _mediaStreamTrack$get9 === undefined ? DEFAULT_FRAME_RATE : _mediaStreamTrack$get9;\n\n      this._inputFrame = new OffscreenCanvas(width, height);\n      this._outputFrame = document.createElement('canvas');\n      this._outputFrame.width = width;\n      this._outputFrame.height = height;\n      this.processedTrack = this._outputFrame.captureStream(0).getTracks()[0];\n      this.processedTrack.enabled = this.mediaStreamTrack.enabled;\n      this.processor = processor;\n\n      this._processorEventObserver.emit('add', {\n        processor: processor,\n        captureHeight: height,\n        captureWidth: width,\n        inputFrameRate: frameRate,\n        isRemoteVideoTrack: this.toString().includes('RemoteVideoTrack')\n      });\n\n      this._updateElementsMediaStreamTrack();\n\n      this._captureFrames();\n\n      return this;\n    }\n    /**\n     * Create an HTMLVideoElement and attach the {@link VideoTrack} to it.\n     *\n     * The HTMLVideoElement's <code>srcObject</code> will be set to a new\n     * MediaStream containing the {@link VideoTrack}'s MediaStreamTrack.\n     *\n     * @returns {HTMLVideoElement} videoElement\n     * @example\n     * const Video = require('twilio-video');\n     *\n     * Video.createLocalVideoTrack().then(function(videoTrack) {\n     *   const videoElement = videoTrack.attach();\n     *   document.body.appendChild(videoElement);\n     * });\n    */\n\n    /**\n    * Attach the {@link VideoTrack} to an existing HTMLMediaElement. The\n    * HTMLMediaElement could be an HTMLAudioElement or an HTMLVideoElement.\n    *\n    * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\n    * this method sets it to a new MediaStream containing the {@link VideoTrack}'s\n    * MediaStreamTrack; otherwise, it adds the {@link MediaTrack}'s\n    * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\n    * MediaStreamTracks of the same kind on the MediaStream, this method removes\n    * them.\n    *\n    * @param {HTMLMediaElement} mediaElement - The HTMLMediaElement to attach to\n    * @returns {HTMLMediaElement} mediaElement\n    * @example\n    * const Video = require('twilio-video');\n    *\n    * const videoElement = document.createElement('video');\n    * document.body.appendChild(videoElement);\n    *\n    * Video.createLocalVideoTrack().then(function(videoTrack) {\n    *   videoTrack.attach(videoElement);\n    * });\n    */\n\n    /**\n    * Attach the {@link VideoTrack} to an HTMLMediaElement selected by\n    * <code>document.querySelector</code>. The HTMLMediaElement could be an\n    * HTMLAudioElement or an HTMLVideoElement.\n    *\n    * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\n    * this method sets it to a new MediaStream containing the {@link VideoTrack}'s\n    * MediaStreamTrack; otherwise, it adds the {@link VideoTrack}'s\n    * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\n    * MediaStreamTracks of the same kind on the MediaStream, this method removes\n    * them.\n    *\n    * @param {string} selector - A query selector for the HTMLMediaElement to\n    *   attach to\n    * @returns {HTMLMediaElement} mediaElement\n    * @example\n    * const Video = require('twilio-video');\n    *\n    * const videoElement = document.createElement('video');\n    * videoElement.id = 'my-video-element';\n    * document.body.appendChild(videoElement);\n    *\n    * Video.createLocalVideoTrack().then(function(track) {\n    *   track.attach('#my-video-element');\n    * });\n    */\n\n  }, {\n    key: 'attach',\n    value: function attach() {\n      var result = _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), 'attach', this).apply(this, arguments);\n\n      if (this.processor) {\n        this._captureFrames();\n      }\n\n      return result;\n    }\n    /**\n     * Detach the {@link VideoTrack} from all previously attached HTMLMediaElements.\n     * @returns {Array<HTMLMediaElement>} mediaElements\n     * @example\n     * const mediaElements = videoTrack.detach();\n     * mediaElements.forEach(mediaElement => mediaElement.remove());\n    */\n\n    /**\n    * Detach the {@link VideoTrack} from a previously attached HTMLMediaElement.\n    * @param {HTMLMediaElement} mediaElement - One of the HTMLMediaElements to\n    *   which the {@link VideoTrack} is attached\n    * @returns {HTMLMediaElement} mediaElement\n    * @example\n    * const videoElement = document.getElementById('my-video-element');\n    * videoTrack.detach(videoElement).remove();\n    */\n\n    /**\n    * Detach the {@link VideoTrack} from a previously attached HTMLMediaElement\n    *   specified by <code>document.querySelector</code>.\n    * @param {string} selector - The query selector of HTMLMediaElement to which\n    *    the {@link VideoTrack} is attached\n    * @returns {HTMLMediaElement} mediaElement\n    * @example\n    * videoTrack.detach('#my-video-element').remove();\n    */\n\n  }, {\n    key: 'detach',\n    value: function detach() {\n      return _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), 'detach', this).apply(this, arguments);\n    }\n    /**\n     * Remove the previously added {@link VideoProcessor} using `addProcessor` API.\n     * @param {VideoProcessor} processor - The {@link VideoProcessor} to remove.\n     * @returns {this}\n     * @example\n     * class GrayScaleProcessor {\n     *   constructor(percentage) {\n     *     this.percentage = percentage;\n     *   }\n     *   processFrame(inputFrameBuffer, outputFrameBuffer) {\n     *     const context = outputFrameBuffer.getContext('2d');\n     *     context.filter = `grayscale(${this.percentage}%)`;\n     *     context.drawImage(inputFrameBuffer, 0, 0, inputFrameBuffer.width, inputFrameBuffer.height);\n     *   }\n     * }\n     *\n     * Video.createLocalVideoTrack().then(function(videoTrack) {\n     *   const grayScaleProcessor = new GrayScaleProcessor(100);\n     *   videoTrack.addProcessor(grayScaleProcessor);\n     *   document.getElementById('remove-button').onclick = () => videoTrack.removeProcessor(grayScaleProcessor);\n     * });\n     */\n\n  }, {\n    key: 'removeProcessor',\n    value: function removeProcessor(processor) {\n      if (!processor) {\n        throw new Error('Received an invalid VideoProcessor from removeProcessor.');\n      }\n\n      if (!this.processor) {\n        throw new Error('No existing VideoProcessor detected.');\n      }\n\n      if (processor !== this.processor) {\n        throw new Error('The provided VideoProcessor is different than the existing one.');\n      }\n\n      this._processorEventObserver.emit('remove');\n\n      this._log.debug('Removing VideoProcessor from the VideoTrack', processor);\n\n      clearTimeout(this._captureTimeoutId);\n      this.mediaStreamTrack.removeEventListener('unmute', this._unmuteHandler);\n      this._unmuteHandler = null;\n      this._isCapturing = false;\n      this.processor = null;\n      this.processedTrack = null;\n\n      this._inputFrame.getContext('2d').clearRect(0, 0, this._inputFrame.width, this._inputFrame.height);\n\n      this._outputFrame.getContext('2d').clearRect(0, 0, this._outputFrame.width, this._outputFrame.height);\n\n      this._inputFrame = null;\n      this._outputFrame = null;\n\n      this._updateElementsMediaStreamTrack();\n\n      return this;\n    }\n  }]);\n\n  return VideoTrack;\n}(MediaTrack);\n\nVideoTrack.DIMENSIONS_CHANGED = 'dimensionsChanged';\n\nfunction dimensionsChanged(track, elem) {\n  return track.dimensions.width !== elem.videoWidth || track.dimensions.height !== elem.videoHeight;\n}\n/**\n * A {@link VideoTrack}'s width and height.\n * @typedef {object} VideoTrack.Dimensions\n * @property {?number} width - The {@link VideoTrack}'s width or null if the\n *   {@link VideoTrack} has not yet started\n * @property {?number} height - The {@link VideoTrack}'s height or null if the\n *   {@link VideoTrack} has not yet started\n */\n\n/**\n * A {@link VideoProcessor}, when added via {@link VideoTrack#addProcessor},\n * is used to process incoming video frames before\n * sending to the encoder or renderer.\n * @typedef {object} VideoProcessor\n * @property {function} processFrame - A callback to receive input and output frame buffers for processing.\n * The input frame buffer contains the original video frame which can be used for additional processing\n * such as applying filters to it. The output frame buffer is used to receive the processed video frame\n * before sending to the encoder or renderer.\n *\n * Any exception raised (either synchronously or asynchronously) in `processFrame` will result in the frame being dropped.\n * This callback has the following signature:<br/><br/>\n * <code>processFrame(</code><br/>\n * &nbsp;&nbsp;<code>inputFrameBuffer: OffscreenCanvas,</code><br/>\n * &nbsp;&nbsp;<code>outputFrameBuffer: HTMLCanvasElement</code><br/>\n * <code>): Promise&lt;void&gt; | void;</code>\n *\n * @example\n * class GrayScaleProcessor {\n *   constructor(percentage) {\n *     this.percentage = percentage;\n *   }\n *   processFrame(inputFrameBuffer, outputFrameBuffer) {\n *     const context = outputFrameBuffer.getContext('2d');\n *     context.filter = `grayscale(${this.percentage}%)`;\n *     context.drawImage(inputFrameBuffer, 0, 0, inputFrameBuffer.width, inputFrameBuffer.height);\n *   }\n * }\n */\n\n/**\n * The {@link VideoTrack}'s dimensions changed.\n * @param {VideoTrack} track - The {@link VideoTrack} whose dimensions changed\n * @event VideoTrack#dimensionsChanged\n */\n\n/**\n * The {@link VideoTrack} was disabled, i.e. \"paused\".\n * @param {VideoTrack} track - The {@link VideoTrack} that was disabled\n * @event VideoTrack#disabled\n */\n\n/**\n * The {@link VideoTrack} was enabled, i.e. \"unpaused\".\n * @param {VideoTrack} track - The {@link VideoTrack} that was enabled\n * @event VideoTrack#enabled\n */\n\n/**\n * The {@link VideoTrack} started. This means there is enough video data to\n * begin playback.\n * @param {VideoTrack} track - The {@link VideoTrack} that started\n * @event VideoTrack#started\n */\n\n\nmodule.exports = VideoTrack;","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio-video/es5/media/track/videotrack.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_get","get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","parent","getPrototypeOf","value","getter","call","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","MediaTrack","require","VideoProcessorEventObserver","_require","DEFAULT_FRAME_RATE","VideoTrack","_MediaTrack","mediaTrackTransceiver","options","_ret","_this","_captureTimeoutId","_isCapturing","_inputFrame","_outputFrame","_processorEventObserver","_unmuteHandler","dimensions","width","height","processor","_log","_checkIfCanCaptureFrames","isPublishing","arguments","canCaptureFrames","message","_mediaStreamTrack","mediaStreamTrack","enabled","readyState","_attachments","size","debug","_captureFrames","_this2","emit","startTime","Date","now","processFramePeriodMs","_dummyEl","play","then","captureFrame","cb","clearTimeout","_mediaStreamTrack$get","getSettings","_mediaStreamTrack$get2","frameRate","capturePeriodMs","Math","floor","delay","setTimeout","process","checkResult","_mediaStreamTrack$get3","_mediaStreamTrack$get4","_mediaStreamTrack$get5","getContext","drawImage","result","processFrame","ex","Promise","resolve","processedTrack","requestFrame","finally","catch","error","track","_initialize","_this3","onloadedmetadata","dimensionsChanged","videoWidth","videoHeight","onresize","isStarted","DIMENSIONS_CHANGED","_restartProcessor","removeProcessor","addProcessor","_start","dummyEl","_this4","OffscreenCanvas","warn","Error","muted","addEventListener","_mediaStreamTrack$get6","_mediaStreamTrack$get7","_mediaStreamTrack$get8","_mediaStreamTrack$get9","document","createElement","captureStream","getTracks","captureHeight","captureWidth","inputFrameRate","isRemoteVideoTrack","toString","includes","_updateElementsMediaStreamTrack","attach","apply","detach","removeEventListener","clearRect","elem","module","exports"],"mappings":"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AAOvG,UAAP;AACD,CA7egB,CA6efL,UA7ee,CAAjB;;AA+eAK,UAAU,CAAC6E,kBAAX,GAAgC,mBAAhC;;AAEA,SAASL,iBAAT,CAA2BJ,KAA3B,EAAkCyC,IAAlC,EAAwC;AACtC,SAAOzC,KAAK,CAACxD,UAAN,CAAiBC,KAAjB,KAA2BgG,IAAI,CAACpC,UAAhC,IAA8CL,KAAK,CAACxD,UAAN,CAAiBE,MAAjB,KAA4B+F,IAAI,CAACnC,WAAtF;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEAoC,MAAM,CAACC,OAAP,GAAiB/G,UAAjB","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar MediaTrack = require('./mediatrack');\nvar VideoProcessorEventObserver = require('./videoprocessoreventobserver');\n\nvar _require = require('../../util/constants'),\n    DEFAULT_FRAME_RATE = _require.DEFAULT_FRAME_RATE;\n\n/**\n * A {@link VideoTrack} is a {@link Track} representing video.\n * @extends Track\n * @property {boolean} isStarted - Whether or not the {@link VideoTrack} has\n *   started; if the {@link VideoTrack} started, there is enough video data to\n *   begin playback\n * @property {boolean} isEnabled - Whether or not the {@link VideoTrack} is\n *   enabled; if the {@link VideoTrack} is not enabled, it is \"paused\"\n * @property {VideoTrack.Dimensions} dimensions - The {@link VideoTrack}'s\n *   {@link VideoTrack.Dimensions}\n * @property {Track.Kind} kind - \"video\"\n * @property {MediaStreamTrack} mediaStreamTrack - A video MediaStreamTrack\n * @property {?MediaStreamTrack} processedTrack - The source of processed video frames.\n * It is null if no VideoProcessor has been added.\n * @property {?VideoProcessor} processor - A {@link VideoProcessor} that is currently\n *   processing video frames. It is null if video frames are not being processed.\n * @emits VideoTrack#dimensionsChanged\n * @emits VideoTrack#disabled\n * @emits VideoTrack#enabled\n * @emits VideoTrack#started\n */\n\n\nvar VideoTrack = function (_MediaTrack) {\n  _inherits(VideoTrack, _MediaTrack);\n\n  /**\n   * Construct a {@link VideoTrack}.\n   * @param {MediaTrackTransceiver} mediaTrackTransceiver\n   * @param {{log: Log}} options\n   */\n  function VideoTrack(mediaTrackTransceiver, options) {\n    var _ret;\n\n    _classCallCheck(this, VideoTrack);\n\n    var _this = _possibleConstructorReturn(this, (VideoTrack.__proto__ || Object.getPrototypeOf(VideoTrack)).call(this, mediaTrackTransceiver, options));\n\n    Object.defineProperties(_this, {\n      _captureTimeoutId: {\n        value: null,\n        writable: true\n      },\n      _isCapturing: {\n        value: false,\n        writable: true\n      },\n      _inputFrame: {\n        value: null,\n        writable: true\n      },\n      _outputFrame: {\n        value: null,\n        writable: true\n      },\n      _processorEventObserver: {\n        value: null,\n        writable: true\n      },\n      _unmuteHandler: {\n        value: null,\n        writable: true\n      },\n      dimensions: {\n        enumerable: true,\n        value: {\n          width: null,\n          height: null\n        }\n      },\n      processor: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n\n    _this._processorEventObserver = new (options.VideoProcessorEventObserver || VideoProcessorEventObserver)(_this._log);\n\n    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n  }\n\n  /**\n   * @private\n   */\n\n\n  _createClass(VideoTrack, [{\n    key: '_checkIfCanCaptureFrames',\n    value: function _checkIfCanCaptureFrames() {\n      var isPublishing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var canCaptureFrames = true;\n      var message = '';\n      var _mediaStreamTrack = this.mediaStreamTrack,\n          enabled = _mediaStreamTrack.enabled,\n          readyState = _mediaStreamTrack.readyState;\n\n\n      if (!enabled) {\n        canCaptureFrames = false;\n        message = 'MediaStreamTrack is disabled';\n      }\n      if (readyState === 'ended') {\n        canCaptureFrames = false;\n        message = 'MediaStreamTrack is ended';\n      }\n      if (!this.processor) {\n        canCaptureFrames = false;\n        message = 'VideoProcessor not detected.';\n      }\n      if (!this._attachments.size && !isPublishing) {\n        canCaptureFrames = false;\n        message = 'VideoTrack is not publishing and there is no attached element.';\n      }\n\n      if (message) {\n        this._log.debug(message);\n      }\n      return { canCaptureFrames: canCaptureFrames, message: message };\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_captureFrames',\n    value: function _captureFrames() {\n      var _this2 = this;\n\n      if (this._isCapturing) {\n        this._log.debug('Ignoring captureFrames call. Capture is already in progress');\n        return;\n      }\n      if (!this._checkIfCanCaptureFrames().canCaptureFrames) {\n        this._isCapturing = false;\n        this._log.debug('Cannot capture frames. Ignoring captureFrames call.');\n        return;\n      }\n      this._isCapturing = true;\n      this._processorEventObserver.emit('start');\n      this._log.debug('Start capturing frames');\n\n      var startTime = Date.now();\n      var processFramePeriodMs = void 0;\n\n      this._dummyEl.play().then(function () {\n        var captureFrame = function captureFrame(cb) {\n          clearTimeout(_this2._captureTimeoutId);\n\n          var _mediaStreamTrack$get = _this2.mediaStreamTrack.getSettings(),\n              _mediaStreamTrack$get2 = _mediaStreamTrack$get.frameRate,\n              frameRate = _mediaStreamTrack$get2 === undefined ? DEFAULT_FRAME_RATE : _mediaStreamTrack$get2;\n\n          var capturePeriodMs = Math.floor(1000 / frameRate);\n          var delay = capturePeriodMs - processFramePeriodMs;\n          if (delay < 0 || typeof processFramePeriodMs !== 'number') {\n            delay = 0;\n          }\n          _this2._captureTimeoutId = setTimeout(cb, delay);\n        };\n        var process = function process() {\n          var checkResult = _this2._checkIfCanCaptureFrames();\n          if (!checkResult.canCaptureFrames) {\n            _this2._isCapturing = false;\n            _this2._processorEventObserver.emit('stop', checkResult.message);\n            _this2._log.debug('Cannot capture frames. Stopping capturing frames.');\n            return;\n          }\n          startTime = Date.now();\n\n          var _mediaStreamTrack$get3 = _this2.mediaStreamTrack.getSettings(),\n              _mediaStreamTrack$get4 = _mediaStreamTrack$get3.width,\n              width = _mediaStreamTrack$get4 === undefined ? 0 : _mediaStreamTrack$get4,\n              _mediaStreamTrack$get5 = _mediaStreamTrack$get3.height,\n              height = _mediaStreamTrack$get5 === undefined ? 0 : _mediaStreamTrack$get5;\n          // Setting the canvas' dimension triggers a redraw.\n          // Only set it if it has changed.\n\n\n          if (_this2._inputFrame.width !== width) {\n            _this2._inputFrame.width = width;\n            _this2._inputFrame.height = height;\n\n            if (_this2._outputFrame) {\n              _this2._outputFrame.width = width;\n              _this2._outputFrame.height = height;\n            }\n          }\n          _this2._inputFrame.getContext('2d').drawImage(_this2._dummyEl, 0, 0, width, height);\n\n          var result = null;\n          try {\n            result = _this2.processor.processFrame(_this2._inputFrame, _this2._outputFrame);\n          } catch (ex) {\n            _this2._log.debug('Exception detected after calling processFrame.', ex);\n          }\n          (result instanceof Promise ? result : Promise.resolve(result)).then(function () {\n            if (_this2._outputFrame) {\n              _this2.processedTrack.requestFrame();\n              _this2._processorEventObserver.emit('stats');\n            }\n          }).finally(function () {\n            processFramePeriodMs = Date.now() - startTime;\n            captureFrame(process);\n          });\n        };\n        captureFrame(process);\n      }).catch(function (error) {\n        return _this2._log.error('Video element cannot be played', { error: error, track: _this2 });\n      });\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_initialize',\n    value: function _initialize() {\n      var _this3 = this;\n\n      _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), '_initialize', this).call(this);\n      if (this._dummyEl) {\n        this._dummyEl.onloadedmetadata = function () {\n          if (dimensionsChanged(_this3, _this3._dummyEl)) {\n            _this3.dimensions.width = _this3._dummyEl.videoWidth;\n            _this3.dimensions.height = _this3._dummyEl.videoHeight;\n          }\n        };\n        this._dummyEl.onresize = function () {\n          if (dimensionsChanged(_this3, _this3._dummyEl)) {\n            _this3.dimensions.width = _this3._dummyEl.videoWidth;\n            _this3.dimensions.height = _this3._dummyEl.videoHeight;\n            if (_this3.isStarted) {\n              _this3._log.debug('Dimensions changed:', _this3.dimensions);\n              _this3.emit(VideoTrack.DIMENSIONS_CHANGED, _this3);\n            }\n          }\n        };\n      }\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_restartProcessor',\n    value: function _restartProcessor() {\n      var processor = this.processor;\n      if (processor) {\n        this.removeProcessor(processor);\n        this.addProcessor(processor);\n      }\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_start',\n    value: function _start(dummyEl) {\n      this.dimensions.width = dummyEl.videoWidth;\n      this.dimensions.height = dummyEl.videoHeight;\n\n      this._log.debug('Dimensions:', this.dimensions);\n      return _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), '_start', this).call(this, dummyEl);\n    }\n\n    /**\n     * Add a {@link VideoProcessor} to allow for custom processing of video frames belonging to a VideoTrack.\n     * Only Chrome supports this as of now. Calling this API from a non-supported browser will result in a log warning.\n     * @param {VideoProcessor} processor - The {@link VideoProcessor} to use.\n     * @returns {this}\n     * @example\n     * class GrayScaleProcessor {\n     *   constructor(percentage) {\n     *     this.percentage = percentage;\n     *   }\n     *   processFrame(inputFrameBuffer, outputFrameBuffer) {\n     *     const context = outputFrameBuffer.getContext('2d');\n     *     context.filter = `grayscale(${this.percentage}%)`;\n     *     context.drawImage(inputFrameBuffer, 0, 0, inputFrameBuffer.width, inputFrameBuffer.height);\n     *   }\n     * }\n     *\n     * Video.createLocalVideoTrack().then(function(videoTrack) {\n     *   videoTrack.addProcessor(new GrayScaleProcessor(100));\n     * });\n     */\n\n  }, {\n    key: 'addProcessor',\n    value: function addProcessor(processor) {\n      var _this4 = this;\n\n      if (typeof OffscreenCanvas !== 'function') {\n        return this._log.warn('Adding a VideoProcessor is not supported in this browser.');\n      }\n      if (!processor || typeof processor.processFrame !== 'function') {\n        throw new Error('Received an invalid VideoProcessor from addProcessor.');\n      }\n      if (this.processor) {\n        throw new Error('A VideoProcessor has already been added.');\n      }\n      if (!this._dummyEl) {\n        throw new Error('VideoTrack has not been initialized.');\n      }\n\n      this._log.debug('Adding VideoProcessor to the VideoTrack', processor);\n\n      if (!this._unmuteHandler) {\n        this._unmuteHandler = function () {\n          _this4._log.debug('mediaStreamTrack unmuted');\n          // NOTE(csantos): On certain scenarios where mediaStreamTrack is coming from muted to unmuted state,\n          // the processedTrack doesn't unmutes automatically although enabled is already set to true.\n          // This is a terminal state for the processedTrack and should be restarted. (VIDEO-4176)\n          if (_this4.processedTrack.muted) {\n            _this4._log.debug('mediaStreamTrack is unmuted but processedTrack is muted. Restarting processor.');\n            _this4._restartProcessor();\n          }\n        };\n        this.mediaStreamTrack.addEventListener('unmute', this._unmuteHandler);\n      }\n\n      var _mediaStreamTrack$get6 = this.mediaStreamTrack.getSettings(),\n          _mediaStreamTrack$get7 = _mediaStreamTrack$get6.width,\n          width = _mediaStreamTrack$get7 === undefined ? 0 : _mediaStreamTrack$get7,\n          _mediaStreamTrack$get8 = _mediaStreamTrack$get6.height,\n          height = _mediaStreamTrack$get8 === undefined ? 0 : _mediaStreamTrack$get8,\n          _mediaStreamTrack$get9 = _mediaStreamTrack$get6.frameRate,\n          frameRate = _mediaStreamTrack$get9 === undefined ? DEFAULT_FRAME_RATE : _mediaStreamTrack$get9;\n\n      this._inputFrame = new OffscreenCanvas(width, height);\n      this._outputFrame = document.createElement('canvas');\n      this._outputFrame.width = width;\n      this._outputFrame.height = height;\n\n      this.processedTrack = this._outputFrame.captureStream(0).getTracks()[0];\n      this.processedTrack.enabled = this.mediaStreamTrack.enabled;\n      this.processor = processor;\n\n      this._processorEventObserver.emit('add', {\n        processor: processor,\n        captureHeight: height,\n        captureWidth: width,\n        inputFrameRate: frameRate,\n        isRemoteVideoTrack: this.toString().includes('RemoteVideoTrack')\n      });\n      this._updateElementsMediaStreamTrack();\n      this._captureFrames();\n      return this;\n    }\n\n    /**\n     * Create an HTMLVideoElement and attach the {@link VideoTrack} to it.\n     *\n     * The HTMLVideoElement's <code>srcObject</code> will be set to a new\n     * MediaStream containing the {@link VideoTrack}'s MediaStreamTrack.\n     *\n     * @returns {HTMLVideoElement} videoElement\n     * @example\n     * const Video = require('twilio-video');\n     *\n     * Video.createLocalVideoTrack().then(function(videoTrack) {\n     *   const videoElement = videoTrack.attach();\n     *   document.body.appendChild(videoElement);\n     * });\n    */ /**\n       * Attach the {@link VideoTrack} to an existing HTMLMediaElement. The\n       * HTMLMediaElement could be an HTMLAudioElement or an HTMLVideoElement.\n       *\n       * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\n       * this method sets it to a new MediaStream containing the {@link VideoTrack}'s\n       * MediaStreamTrack; otherwise, it adds the {@link MediaTrack}'s\n       * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\n       * MediaStreamTracks of the same kind on the MediaStream, this method removes\n       * them.\n       *\n       * @param {HTMLMediaElement} mediaElement - The HTMLMediaElement to attach to\n       * @returns {HTMLMediaElement} mediaElement\n       * @example\n       * const Video = require('twilio-video');\n       *\n       * const videoElement = document.createElement('video');\n       * document.body.appendChild(videoElement);\n       *\n       * Video.createLocalVideoTrack().then(function(videoTrack) {\n       *   videoTrack.attach(videoElement);\n       * });\n       */ /**\n          * Attach the {@link VideoTrack} to an HTMLMediaElement selected by\n          * <code>document.querySelector</code>. The HTMLMediaElement could be an\n          * HTMLAudioElement or an HTMLVideoElement.\n          *\n          * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\n          * this method sets it to a new MediaStream containing the {@link VideoTrack}'s\n          * MediaStreamTrack; otherwise, it adds the {@link VideoTrack}'s\n          * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\n          * MediaStreamTracks of the same kind on the MediaStream, this method removes\n          * them.\n          *\n          * @param {string} selector - A query selector for the HTMLMediaElement to\n          *   attach to\n          * @returns {HTMLMediaElement} mediaElement\n          * @example\n          * const Video = require('twilio-video');\n          *\n          * const videoElement = document.createElement('video');\n          * videoElement.id = 'my-video-element';\n          * document.body.appendChild(videoElement);\n          *\n          * Video.createLocalVideoTrack().then(function(track) {\n          *   track.attach('#my-video-element');\n          * });\n          */\n\n  }, {\n    key: 'attach',\n    value: function attach() {\n      var result = _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), 'attach', this).apply(this, arguments);\n      if (this.processor) {\n        this._captureFrames();\n      }\n      return result;\n    }\n\n    /**\n     * Detach the {@link VideoTrack} from all previously attached HTMLMediaElements.\n     * @returns {Array<HTMLMediaElement>} mediaElements\n     * @example\n     * const mediaElements = videoTrack.detach();\n     * mediaElements.forEach(mediaElement => mediaElement.remove());\n    */ /**\n       * Detach the {@link VideoTrack} from a previously attached HTMLMediaElement.\n       * @param {HTMLMediaElement} mediaElement - One of the HTMLMediaElements to\n       *   which the {@link VideoTrack} is attached\n       * @returns {HTMLMediaElement} mediaElement\n       * @example\n       * const videoElement = document.getElementById('my-video-element');\n       * videoTrack.detach(videoElement).remove();\n       */ /**\n          * Detach the {@link VideoTrack} from a previously attached HTMLMediaElement\n          *   specified by <code>document.querySelector</code>.\n          * @param {string} selector - The query selector of HTMLMediaElement to which\n          *    the {@link VideoTrack} is attached\n          * @returns {HTMLMediaElement} mediaElement\n          * @example\n          * videoTrack.detach('#my-video-element').remove();\n          */\n\n  }, {\n    key: 'detach',\n    value: function detach() {\n      return _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), 'detach', this).apply(this, arguments);\n    }\n\n    /**\n     * Remove the previously added {@link VideoProcessor} using `addProcessor` API.\n     * @param {VideoProcessor} processor - The {@link VideoProcessor} to remove.\n     * @returns {this}\n     * @example\n     * class GrayScaleProcessor {\n     *   constructor(percentage) {\n     *     this.percentage = percentage;\n     *   }\n     *   processFrame(inputFrameBuffer, outputFrameBuffer) {\n     *     const context = outputFrameBuffer.getContext('2d');\n     *     context.filter = `grayscale(${this.percentage}%)`;\n     *     context.drawImage(inputFrameBuffer, 0, 0, inputFrameBuffer.width, inputFrameBuffer.height);\n     *   }\n     * }\n     *\n     * Video.createLocalVideoTrack().then(function(videoTrack) {\n     *   const grayScaleProcessor = new GrayScaleProcessor(100);\n     *   videoTrack.addProcessor(grayScaleProcessor);\n     *   document.getElementById('remove-button').onclick = () => videoTrack.removeProcessor(grayScaleProcessor);\n     * });\n     */\n\n  }, {\n    key: 'removeProcessor',\n    value: function removeProcessor(processor) {\n      if (!processor) {\n        throw new Error('Received an invalid VideoProcessor from removeProcessor.');\n      }\n      if (!this.processor) {\n        throw new Error('No existing VideoProcessor detected.');\n      }\n      if (processor !== this.processor) {\n        throw new Error('The provided VideoProcessor is different than the existing one.');\n      }\n\n      this._processorEventObserver.emit('remove');\n      this._log.debug('Removing VideoProcessor from the VideoTrack', processor);\n      clearTimeout(this._captureTimeoutId);\n      this.mediaStreamTrack.removeEventListener('unmute', this._unmuteHandler);\n      this._unmuteHandler = null;\n      this._isCapturing = false;\n\n      this.processor = null;\n      this.processedTrack = null;\n      this._inputFrame.getContext('2d').clearRect(0, 0, this._inputFrame.width, this._inputFrame.height);\n      this._outputFrame.getContext('2d').clearRect(0, 0, this._outputFrame.width, this._outputFrame.height);\n      this._inputFrame = null;\n      this._outputFrame = null;\n\n      this._updateElementsMediaStreamTrack();\n      return this;\n    }\n  }]);\n\n  return VideoTrack;\n}(MediaTrack);\n\nVideoTrack.DIMENSIONS_CHANGED = 'dimensionsChanged';\n\nfunction dimensionsChanged(track, elem) {\n  return track.dimensions.width !== elem.videoWidth || track.dimensions.height !== elem.videoHeight;\n}\n\n/**\n * A {@link VideoTrack}'s width and height.\n * @typedef {object} VideoTrack.Dimensions\n * @property {?number} width - The {@link VideoTrack}'s width or null if the\n *   {@link VideoTrack} has not yet started\n * @property {?number} height - The {@link VideoTrack}'s height or null if the\n *   {@link VideoTrack} has not yet started\n */\n\n/**\n * A {@link VideoProcessor}, when added via {@link VideoTrack#addProcessor},\n * is used to process incoming video frames before\n * sending to the encoder or renderer.\n * @typedef {object} VideoProcessor\n * @property {function} processFrame - A callback to receive input and output frame buffers for processing.\n * The input frame buffer contains the original video frame which can be used for additional processing\n * such as applying filters to it. The output frame buffer is used to receive the processed video frame\n * before sending to the encoder or renderer.\n *\n * Any exception raised (either synchronously or asynchronously) in `processFrame` will result in the frame being dropped.\n * This callback has the following signature:<br/><br/>\n * <code>processFrame(</code><br/>\n * &nbsp;&nbsp;<code>inputFrameBuffer: OffscreenCanvas,</code><br/>\n * &nbsp;&nbsp;<code>outputFrameBuffer: HTMLCanvasElement</code><br/>\n * <code>): Promise&lt;void&gt; | void;</code>\n *\n * @example\n * class GrayScaleProcessor {\n *   constructor(percentage) {\n *     this.percentage = percentage;\n *   }\n *   processFrame(inputFrameBuffer, outputFrameBuffer) {\n *     const context = outputFrameBuffer.getContext('2d');\n *     context.filter = `grayscale(${this.percentage}%)`;\n *     context.drawImage(inputFrameBuffer, 0, 0, inputFrameBuffer.width, inputFrameBuffer.height);\n *   }\n * }\n */\n\n/**\n * The {@link VideoTrack}'s dimensions changed.\n * @param {VideoTrack} track - The {@link VideoTrack} whose dimensions changed\n * @event VideoTrack#dimensionsChanged\n */\n\n/**\n * The {@link VideoTrack} was disabled, i.e. \"paused\".\n * @param {VideoTrack} track - The {@link VideoTrack} that was disabled\n * @event VideoTrack#disabled\n */\n\n/**\n * The {@link VideoTrack} was enabled, i.e. \"unpaused\".\n * @param {VideoTrack} track - The {@link VideoTrack} that was enabled\n * @event VideoTrack#enabled\n */\n\n/**\n * The {@link VideoTrack} started. This means there is enough video data to\n * begin playback.\n * @param {VideoTrack} track - The {@link VideoTrack} that started\n * @event VideoTrack#started\n */\n\nmodule.exports = VideoTrack;"]},"metadata":{},"sourceType":"script"}
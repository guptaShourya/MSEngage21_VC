{"ast":null,"code":"/**\n * Internal function to finds the largest rect area when trying to place N\n * rectangles into a container without rotation.\n *\n * @param {Number}  containerWidth      The width of the container.\n * @param {Number}  containerHeight     The height of the container.\n * @param {Number}  numSquares          How many rectangles must fit within.\n * @param {Object}  opts                Options, including aspect ratio.\n * @return {Object}                     The area and number of rows and columns that fit.\n */\nfunction findBestFit(containerWidth, containerHeight, numRects) {\n  var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  if (containerWidth < 0 || containerHeight < 0) {\n    throw new Error('Container must have a non-negative area');\n  }\n\n  if (numRects < 1 || !Number.isInteger(numRects)) {\n    throw new Error('Number of shapes to place must be a positive integer');\n  }\n\n  var aspectRatio = opts.aspectRatio || 1;\n\n  if (isNaN(aspectRatio)) {\n    throw new Error('Aspect ratio must be a number');\n  }\n\n  var best = {\n    area: 0,\n    cols: 0,\n    rows: 0,\n    width: 0,\n    height: 0\n  }; // TODO: Don't start with obviously-bad candidates.\n\n  var startCols = numRects;\n  var colDelta = -1; // For each combination of rows + cols that can fit the number of rectangles,\n  // place them and see the area.\n\n  for (var cols = startCols; cols > 0; cols += colDelta) {\n    var rows = Math.ceil(numRects / cols);\n    var hScale = containerWidth / (cols * aspectRatio);\n    var vScale = containerHeight / rows;\n    var width = void 0;\n    var height = void 0; // Determine which axis is the constraint.\n\n    if (hScale <= vScale) {\n      width = containerWidth / cols;\n      height = width / aspectRatio;\n    } else {\n      height = containerHeight / rows;\n      width = height * aspectRatio;\n    }\n\n    var area = width * height;\n\n    if (area > best.area) {\n      best = {\n        area: area,\n        width: width,\n        height: height,\n        rows: rows,\n        cols: cols\n      };\n    }\n  }\n\n  return best;\n}\n/**\n * Finds the largest square area when trying to place N squares into a rectangle without rotation.\n *\n * @param {Number}  containerWidth     The width of the container.\n * @param {Number}  containerHeight    The height of the container.\n * @param {Number}  numSquares         How many squares must fit within.\n * @return {Object}                    The area and number of rows and columns that fit.\n */\n\n\nfunction largestSquare(containerWidth, containerHeight, numSquares) {\n  return findBestFit(containerWidth, containerHeight, numSquares);\n}\n/**\n * Finds the largest rectangle area when trying to place N rectangle into a containing\n * rectangle without rotation.\n *\n * @param {Number}  containerWidth      The width of the container.\n * @param {Number}  containerHeight     The height of the container.\n * @param {Number}  numSquares          How many rectangles must fit within.\n * @param {Number}  width               The unscaled width of the rectangles to be placed.\n * @param {Number}  height              The unscaled height of the rectangles to be placed.\n * @return {Object}                     The area and number of rows and columns that fit.\n */\n\n\nfunction largestRect(containerWidth, containerHeight, numSquares, width, height) {\n  return findBestFit(containerWidth, containerHeight, numSquares, {\n    aspectRatio: width / height\n  });\n}\n\nmodule.exports = {\n  largestRect: largestRect,\n  largestSquare: largestSquare\n};","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/rect-scaler/index.js"],"names":["findBestFit","containerWidth","containerHeight","numRects","opts","Error","Number","isInteger","aspectRatio","isNaN","best","area","cols","rows","width","height","startCols","colDelta","Math","ceil","hScale","vScale","largestSquare","numSquares","largestRect","module","exports"],"mappings":"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","sourcesContent":["/**\n * Internal function to finds the largest rect area when trying to place N\n * rectangles into a container without rotation.\n *\n * @param {Number}  containerWidth      The width of the container.\n * @param {Number}  containerHeight     The height of the container.\n * @param {Number}  numSquares          How many rectangles must fit within.\n * @param {Object}  opts                Options, including aspect ratio.\n * @return {Object}                     The area and number of rows and columns that fit.\n */\nfunction findBestFit(containerWidth, containerHeight, numRects, opts={}) {\n  if (containerWidth < 0 || containerHeight < 0) {\n    throw new Error('Container must have a non-negative area');\n  }\n  if (numRects < 1 || !Number.isInteger(numRects)) {\n    throw new Error('Number of shapes to place must be a positive integer');\n  }\n  const aspectRatio = opts.aspectRatio || 1;\n  if (isNaN(aspectRatio)) {\n    throw new Error('Aspect ratio must be a number');\n  }\n\n  let best = { area: 0, cols: 0, rows: 0, width: 0, height: 0 };\n\n  // TODO: Don't start with obviously-bad candidates.\n  const startCols = numRects;\n  const colDelta = -1;\n\n  // For each combination of rows + cols that can fit the number of rectangles,\n  // place them and see the area.\n  for (let cols = startCols; cols > 0; cols += colDelta) {\n    const rows = Math.ceil(numRects / cols);\n    const hScale = containerWidth / (cols * aspectRatio);\n    const vScale = containerHeight / rows;\n    let width;\n    let height;\n    // Determine which axis is the constraint.\n    if (hScale <= vScale) {\n      width = containerWidth / cols;\n      height = width / aspectRatio;\n    } else {\n      height = containerHeight / rows;\n      width = height * aspectRatio;\n    }\n    const area = width * height;\n    if (area > best.area) {\n      best = {area, width, height, rows, cols};\n    }\n  }\n  return best;\n}\n\n\n/**\n * Finds the largest square area when trying to place N squares into a rectangle without rotation.\n *\n * @param {Number}  containerWidth     The width of the container.\n * @param {Number}  containerHeight    The height of the container.\n * @param {Number}  numSquares         How many squares must fit within.\n * @return {Object}                    The area and number of rows and columns that fit.\n */\nfunction largestSquare(containerWidth, containerHeight, numSquares) {\n  return findBestFit(containerWidth, containerHeight, numSquares);\n}\n\n\n/**\n * Finds the largest rectangle area when trying to place N rectangle into a containing\n * rectangle without rotation.\n *\n * @param {Number}  containerWidth      The width of the container.\n * @param {Number}  containerHeight     The height of the container.\n * @param {Number}  numSquares          How many rectangles must fit within.\n * @param {Number}  width               The unscaled width of the rectangles to be placed.\n * @param {Number}  height              The unscaled height of the rectangles to be placed.\n * @return {Object}                     The area and number of rows and columns that fit.\n */\nfunction largestRect(containerWidth, containerHeight, numSquares, width, height) {\n  return findBestFit(containerWidth, containerHeight, numSquares, { aspectRatio: width / height });\n}\n\n\nmodule.exports = {\n  largestRect: largestRect,\n  largestSquare: largestSquare,\n};\n"]},"metadata":{},"sourceType":"script"}
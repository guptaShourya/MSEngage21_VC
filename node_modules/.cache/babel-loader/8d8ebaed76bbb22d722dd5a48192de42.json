{"ast":null,"code":"import _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringSplit } from '@tensorflow/tfjs-core';\nimport { stringSplitImplCPU } from '../kernel_utils/shared';\nexport function stringSplit(args) {\n  const inputs = args.inputs,\n        backend = args.backend,\n        attrs = args.attrs;\n  const skipEmpty = attrs.skipEmpty;\n  const input = inputs.input,\n        delimiter = inputs.delimiter;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n\n  if (input.shape.length !== 1) {\n    throw new Error(\"Input must be a vector, got shape: \".concat(input.shape));\n  }\n\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\"Delimiter must be a scalar, got shape: \".concat(delimiter.shape));\n  }\n\n  const $input = backend.readSync(input.dataId);\n  const $delimiter = backend.readSync(delimiter.dataId)[0];\n\n  const _stringSplitImplCPU = stringSplitImplCPU($input, $delimiter, skipEmpty),\n        _stringSplitImplCPU2 = _slicedToArray(_stringSplitImplCPU, 3),\n        indices = _stringSplitImplCPU2[0],\n        values = _stringSplitImplCPU2[1],\n        shape = _stringSplitImplCPU2[2];\n\n  const outputSize = values.length;\n  return [backend.makeTensorInfo([outputSize, 2], 'int32', indices), backend.makeTensorInfo([outputSize], 'string', values), backend.makeTensorInfo([2], 'int32', new Int32Array(shape))];\n}\nexport const stringSplitConfig = {\n  kernelName: StringSplit,\n  backendName: 'webgl',\n  kernelFunc: stringSplit\n};","map":{"version":3,"sources":["../../src/kernels/StringSplit.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,WAAlC,QAAqG,uBAArG;AAGA,SAAQ,kBAAR,QAAiC,wBAAjC;AAEA,OAAM,SAAU,WAAV,CAAsB,IAAtB,EAIL;AAAA,QACQ,MADR,GACkC,IADlC,CACQ,MADR;AAAA,QACgB,OADhB,GACkC,IADlC,CACgB,OADhB;AAAA,QACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,QAEQ,SAFR,GAEqB,KAFrB,CAEQ,SAFR;AAAA,QAGQ,KAHR,GAG4B,MAH5B,CAGQ,KAHR;AAAA,QAGe,SAHf,GAG4B,MAH5B,CAGe,SAHf;;AAKC,MAAI,KAAK,CAAC,KAAN,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACD;;AACD,MAAI,KAAK,CAAC,KAAN,CAAY,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,UAAM,IAAI,KAAJ,8CAAgD,KAAK,CAAC,KAAtD,EAAN;AACD;;AACD,MAAI,SAAS,CAAC,KAAV,CAAgB,MAAhB,KAA2B,CAA/B,EAAkC;AAChC,UAAM,IAAI,KAAJ,kDACwC,SAAS,CAAC,KADlD,EAAN;AAED;;AAED,QAAM,MAAM,GAAG,OAAO,CAAC,QAAR,CAAiB,KAAK,CAAC,MAAvB,CAAf;AACA,QAAM,UAAU,GAAG,OAAO,CAAC,QAAR,CAAiB,SAAS,CAAC,MAA3B,EAAmC,CAAnC,CAAnB;;AAjBD,8BAoBK,kBAAkB,CAAC,MAAD,EAAS,UAAT,EAAqB,SAArB,CApBvB;AAAA;AAAA,QAmBQ,OAnBR;AAAA,QAmBiB,MAnBjB;AAAA,QAmByB,KAnBzB;;AAqBC,QAAM,UAAU,GAAG,MAAM,CAAC,MAA1B;AACA,SAAO,CACL,OAAO,CAAC,cAAR,CAAuB,CAAC,UAAD,EAAa,CAAb,CAAvB,EAAwC,OAAxC,EAAiD,OAAjD,CADK,EAEL,OAAO,CAAC,cAAR,CAAuB,CAAC,UAAD,CAAvB,EAAqC,QAArC,EAA+C,MAA/C,CAFK,EAGL,OAAO,CAAC,cAAR,CAAuB,CAAC,CAAD,CAAvB,EAA4B,OAA5B,EAAqC,IAAI,UAAJ,CAAe,KAAf,CAArC,CAHK,CAAP;AAKD;AAED,OAAO,MAAM,iBAAiB,GAAiB;AAC7C,EAAA,UAAU,EAAE,WADiC;AAE7C,EAAA,WAAW,EAAE,OAFgC;AAG7C,EAAA,UAAU,EAAE;AAHiC,CAAxC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringSplitImplCPU} from '../kernel_utils/shared';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendWebGL,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n  const $delimiter = backend.readSync(delimiter.dataId)[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImplCPU($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'webgl',\n  kernelFunc: stringSplit as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
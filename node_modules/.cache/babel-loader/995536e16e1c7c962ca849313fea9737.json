{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar InteractionList = require('./session/interaction').InteractionList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar ParticipantList = require('./session/participant').ParticipantList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar SessionList;\nvar SessionPage;\nvar SessionInstance;\nvar SessionContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the SessionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionList\n *\n * @param {Twilio.Proxy.V1} version - Version of the resource\n * @param {string} serviceSid - The SID of the resource's parent Service\n */\n\n/* jshint ignore:end */\n\nSessionList = function SessionList(version, serviceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function sessions\n   * @memberof Twilio.Proxy.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext}\n   */\n\n  /* jshint ignore:end */\n  function SessionListInstance(sid) {\n    return SessionListInstance.get(sid);\n  }\n\n  SessionListInstance._version = version; // Path Solution\n\n  SessionListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  SessionListInstance._uri = \"/Services/\".concat(serviceSid, \"/Sessions\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams SessionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  SessionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists SessionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SessionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of SessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SessionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SessionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of SessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SessionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SessionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a SessionInstance\n   *\n   * @function create\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {Date} [opts.dateExpiry] -\n   *          The ISO 8601 date when the Session should expire\n   * @param {number} [opts.ttl] - When the session will expire\n   * @param {session.mode} [opts.mode] - The Mode of the Session\n   * @param {session.status} [opts.status] - Session status\n   * @param {object|list} [opts.participants] -\n   *          The Participant objects to include in the new session\n   * @param {boolean} [opts.failOnParticipantConflict] -\n   *          An experimental parameter to override the ProxyAllowParticipantConflict account flag on a per-request basis.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SessionInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  SessionListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DateExpiry': serialize.iso8601DateTime(_.get(opts, 'dateExpiry')),\n      'Ttl': _.get(opts, 'ttl'),\n      'Mode': _.get(opts, 'mode'),\n      'Status': _.get(opts, 'status'),\n      'Participants': serialize.map(_.get(opts, 'participants'), function (e) {\n        return serialize.object(e);\n      }),\n      'FailOnParticipantConflict': serialize.bool(_.get(opts, 'failOnParticipantConflict'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SessionInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a session\n   *\n   * @function get\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  SessionListInstance.get = function get(sid) {\n    return new SessionContext(this._version, this._solution.serviceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  SessionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SessionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SessionListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SessionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SessionSolution} solution - Path solution\n *\n * @returns SessionPage\n */\n\n/* jshint ignore:end */\n\n\nSessionPage = function SessionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SessionPage.prototype, Page.prototype);\n\nSessionPage.prototype.constructor = SessionPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of SessionInstance\n *\n * @function getInstance\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionPage#\n *\n * @param {SessionPayload} payload - Payload response from the API\n *\n * @returns SessionInstance\n */\n\n/* jshint ignore:end */\n\nSessionPage.prototype.getInstance = function getInstance(payload) {\n  return new SessionInstance(this._version, payload, this._solution.serviceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSessionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSessionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SessionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} serviceSid - The SID of the resource's parent Service\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateStarted - The ISO 8601 date when the Session started\n * @property {Date} dateEnded - The ISO 8601 date when the Session ended\n * @property {Date} dateLastInteraction -\n *          The ISO 8601 date when the Session last had an interaction\n * @property {Date} dateExpiry - The ISO 8601 date when the Session should expire\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {session.status} status - The status of the Session\n * @property {string} closedReason - The reason the Session ended\n * @property {number} ttl - When the session will expire\n * @property {session.mode} mode - The Mode of the Session\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Session resource\n * @property {string} links - The URLs of resources related to the Session\n *\n * @param {V1} version - Version of the resource\n * @param {SessionPayload} payload - The instance payload\n * @param {sid} serviceSid - The SID of the resource's parent Service\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nSessionInstance = function SessionInstance(version, payload, serviceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateStarted = deserialize.iso8601DateTime(payload.date_started); // jshint ignore:line\n\n  this.dateEnded = deserialize.iso8601DateTime(payload.date_ended); // jshint ignore:line\n\n  this.dateLastInteraction = deserialize.iso8601DateTime(payload.date_last_interaction); // jshint ignore:line\n\n  this.dateExpiry = deserialize.iso8601DateTime(payload.date_expiry); // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.closedReason = payload.closed_reason; // jshint ignore:line\n\n  this.ttl = deserialize.integer(payload.ttl); // jshint ignore:line\n\n  this.mode = payload.mode; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(SessionInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new SessionContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a SessionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n\n/* jshint ignore:end */\n\nSessionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a SessionInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n\n/* jshint ignore:end */\n\n\nSessionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a SessionInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.dateExpiry] -\n *          The ISO 8601 date when the Session should expire\n * @param {number} [opts.ttl] - When the session will expire\n * @param {session.status} [opts.status] - The new status of the resource\n * @param {boolean} [opts.failOnParticipantConflict] -\n *          An experimental parameter to override the ProxyAllowParticipantConflict account flag on a per-request basis.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n\n/* jshint ignore:end */\n\n\nSessionInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the interactions\n *\n * @function interactions\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.InteractionList}\n */\n\n/* jshint ignore:end */\n\n\nSessionInstance.prototype.interactions = function interactions() {\n  return this._proxy.interactions;\n};\n/* jshint ignore:start */\n\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList}\n */\n\n/* jshint ignore:end */\n\n\nSessionInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSessionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSessionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SessionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext\n *\n * @property {Twilio.Proxy.V1.ServiceContext.SessionContext.InteractionList} interactions -\n *          interactions resource\n * @property {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList} participants -\n *          participants resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - The SID of the Service to fetch the resource from\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nSessionContext = function SessionContext(version, serviceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = \"/Services/\".concat(serviceSid, \"/Sessions/\").concat(sid); // Dependents\n\n  this._interactions = undefined;\n  this._participants = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a SessionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n\n/* jshint ignore:end */\n\n\nSessionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SessionInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a SessionInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n\n/* jshint ignore:end */\n\n\nSessionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a SessionInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.dateExpiry] -\n *          The ISO 8601 date when the Session should expire\n * @param {number} [opts.ttl] - When the session will expire\n * @param {session.status} [opts.status] - The new status of the resource\n * @param {boolean} [opts.failOnParticipantConflict] -\n *          An experimental parameter to override the ProxyAllowParticipantConflict account flag on a per-request basis.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n\n/* jshint ignore:end */\n\n\nSessionContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'DateExpiry': serialize.iso8601DateTime(_.get(opts, 'dateExpiry')),\n    'Ttl': _.get(opts, 'ttl'),\n    'Status': _.get(opts, 'status'),\n    'FailOnParticipantConflict': serialize.bool(_.get(opts, 'failOnParticipantConflict'))\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SessionInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(SessionContext.prototype, 'interactions', {\n  get: function get() {\n    if (!this._interactions) {\n      this._interactions = new InteractionList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._interactions;\n  }\n});\nObject.defineProperty(SessionContext.prototype, 'participants', {\n  get: function get() {\n    if (!this._participants) {\n      this._participants = new ParticipantList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._participants;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nSessionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSessionContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SessionList: SessionList,\n  SessionPage: SessionPage,\n  SessionInstance: SessionInstance,\n  SessionContext: SessionContext\n};","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio/lib/rest/proxy/v1/service/session.js"],"names":["Q","require","_","util","InteractionList","Page","ParticipantList","deserialize","serialize","values","SessionList","SessionPage","SessionInstance","SessionContext","version","serviceSid","SessionListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","iso8601DateTime","map","e","object","bool","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","service_sid","accountSid","account_sid","dateStarted","date_started","dateEnded","date_ended","dateLastInteraction","date_last_interaction","dateExpiry","date_expiry","uniqueName","unique_name","status","closedReason","closed_reason","ttl","integer","mode","dateCreated","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","interactions","participants","_interactions","_participants","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar InteractionList = require('./session/interaction').InteractionList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar ParticipantList = require('./session/participant').ParticipantList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar SessionList;\nvar SessionPage;\nvar SessionInstance;\nvar SessionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionList\n *\n * @param {Twilio.Proxy.V1} version - Version of the resource\n * @param {string} serviceSid - The SID of the resource's parent Service\n */\n/* jshint ignore:end */\nSessionList = function SessionList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function sessions\n   * @memberof Twilio.Proxy.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext}\n   */\n  /* jshint ignore:end */\n  function SessionListInstance(sid) {\n    return SessionListInstance.get(sid);\n  }\n\n  SessionListInstance._version = version;\n  // Path Solution\n  SessionListInstance._solution = {serviceSid: serviceSid};\n  SessionListInstance._uri = `/Services/${serviceSid}/Sessions`;\n  /* jshint ignore:start */\n  /**\n   * Streams SessionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SessionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SessionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SessionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SessionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SessionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SessionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a SessionInstance\n   *\n   * @function create\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {Date} [opts.dateExpiry] -\n   *          The ISO 8601 date when the Session should expire\n   * @param {number} [opts.ttl] - When the session will expire\n   * @param {session.mode} [opts.mode] - The Mode of the Session\n   * @param {session.status} [opts.status] - Session status\n   * @param {object|list} [opts.participants] -\n   *          The Participant objects to include in the new session\n   * @param {boolean} [opts.failOnParticipantConflict] -\n   *          An experimental parameter to override the ProxyAllowParticipantConflict account flag on a per-request basis.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SessionInstance\n   */\n  /* jshint ignore:end */\n  SessionListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DateExpiry': serialize.iso8601DateTime(_.get(opts, 'dateExpiry')),\n      'Ttl': _.get(opts, 'ttl'),\n      'Mode': _.get(opts, 'mode'),\n      'Status': _.get(opts, 'status'),\n      'Participants': serialize.map(_.get(opts, 'participants'), function(e) { return serialize.object(e); }),\n      'FailOnParticipantConflict': serialize.bool(_.get(opts, 'failOnParticipantConflict'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SessionInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a session\n   *\n   * @function get\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext}\n   */\n  /* jshint ignore:end */\n  SessionListInstance.get = function get(sid) {\n    return new SessionContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SessionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SessionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SessionListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SessionSolution} solution - Path solution\n *\n * @returns SessionPage\n */\n/* jshint ignore:end */\nSessionPage = function SessionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SessionPage.prototype, Page.prototype);\nSessionPage.prototype.constructor = SessionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SessionInstance\n *\n * @function getInstance\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionPage#\n *\n * @param {SessionPayload} payload - Payload response from the API\n *\n * @returns SessionInstance\n */\n/* jshint ignore:end */\nSessionPage.prototype.getInstance = function getInstance(payload) {\n  return new SessionInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSessionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} serviceSid - The SID of the resource's parent Service\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateStarted - The ISO 8601 date when the Session started\n * @property {Date} dateEnded - The ISO 8601 date when the Session ended\n * @property {Date} dateLastInteraction -\n *          The ISO 8601 date when the Session last had an interaction\n * @property {Date} dateExpiry - The ISO 8601 date when the Session should expire\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {session.status} status - The status of the Session\n * @property {string} closedReason - The reason the Session ended\n * @property {number} ttl - When the session will expire\n * @property {session.mode} mode - The Mode of the Session\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Session resource\n * @property {string} links - The URLs of resources related to the Session\n *\n * @param {V1} version - Version of the resource\n * @param {SessionPayload} payload - The instance payload\n * @param {sid} serviceSid - The SID of the resource's parent Service\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nSessionInstance = function SessionInstance(version, payload, serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateStarted = deserialize.iso8601DateTime(payload.date_started); // jshint ignore:line\n  this.dateEnded = deserialize.iso8601DateTime(payload.date_ended); // jshint ignore:line\n  this.dateLastInteraction = deserialize.iso8601DateTime(payload.date_last_interaction); // jshint ignore:line\n  this.dateExpiry = deserialize.iso8601DateTime(payload.date_expiry); // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.closedReason = payload.closed_reason; // jshint ignore:line\n  this.ttl = deserialize.integer(payload.ttl); // jshint ignore:line\n  this.mode = payload.mode; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(SessionInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new SessionContext(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SessionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SessionInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SessionInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.dateExpiry] -\n *          The ISO 8601 date when the Session should expire\n * @param {number} [opts.ttl] - When the session will expire\n * @param {session.status} [opts.status] - The new status of the resource\n * @param {boolean} [opts.failOnParticipantConflict] -\n *          An experimental parameter to override the ProxyAllowParticipantConflict account flag on a per-request basis.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the interactions\n *\n * @function interactions\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.InteractionList}\n */\n/* jshint ignore:end */\nSessionInstance.prototype.interactions = function interactions() {\n  return this._proxy.interactions;\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList}\n */\n/* jshint ignore:end */\nSessionInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSessionInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SessionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext\n *\n * @property {Twilio.Proxy.V1.ServiceContext.SessionContext.InteractionList} interactions -\n *          interactions resource\n * @property {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList} participants -\n *          participants resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - The SID of the Service to fetch the resource from\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nSessionContext = function SessionContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Sessions/${sid}`;\n\n  // Dependents\n  this._interactions = undefined;\n  this._participants = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SessionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SessionInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SessionInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SessionInstance\n *\n * @function update\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @param {object} [opts] - Options for request\n * @param {Date} [opts.dateExpiry] -\n *          The ISO 8601 date when the Session should expire\n * @param {number} [opts.ttl] - When the session will expire\n * @param {session.status} [opts.status] - The new status of the resource\n * @param {boolean} [opts.failOnParticipantConflict] -\n *          An experimental parameter to override the ProxyAllowParticipantConflict account flag on a per-request basis.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SessionInstance\n */\n/* jshint ignore:end */\nSessionContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'DateExpiry': serialize.iso8601DateTime(_.get(opts, 'dateExpiry')),\n    'Ttl': _.get(opts, 'ttl'),\n    'Status': _.get(opts, 'status'),\n    'FailOnParticipantConflict': serialize.bool(_.get(opts, 'failOnParticipantConflict'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SessionInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(SessionContext.prototype,\n  'interactions', {\n    get: function() {\n      if (!this._interactions) {\n        this._interactions = new InteractionList(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n      return this._interactions;\n    }\n});\n\nObject.defineProperty(SessionContext.prototype,\n  'participants', {\n    get: function() {\n      if (!this._participants) {\n        this._participants = new ParticipantList(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n      return this._participants;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSessionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSessionContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SessionList: SessionList,\n  SessionPage: SessionPage,\n  SessionInstance: SessionInstance,\n  SessionContext: SessionContext\n};\n"]},"metadata":{},"sourceType":"script"}
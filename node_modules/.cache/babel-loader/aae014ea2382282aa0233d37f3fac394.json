{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/RoomHeader.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport CallEndIcon from '@material-ui/icons/CallEndTwoTone';\nimport VideocamIcon from '@material-ui/icons/VideocamTwoTone';\nimport VideocamOffIcon from '@material-ui/icons/VideocamOffTwoTone';\nimport MicIcon from '@material-ui/icons/MicTwoTone';\nimport MicOffIcon from '@material-ui/icons/MicOffTwoTone';\nimport GroupAddIcon from '@material-ui/icons/GroupAddTwoTone';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport ScreenShareTwoToneIcon from '@material-ui/icons/ScreenShareTwoTone';\nimport CancelPresentationTwoToneIcon from '@material-ui/icons/CancelPresentationTwoTone';\n\nconst RoomHeader = ({\n  handleLogout,\n  room,\n  roomName\n}) => {\n  _s();\n\n  // state variables - used to swtich microphone and camera on/off\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        isMic = _useState2[0],\n        setIsMic = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isCamera = _useState4[0],\n        setIsCamera = _useState4[1]; // state variable - to open/close dialog box\n\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isOpen = _useState6[0],\n        setOpen = _useState6[1]; // state variable - to toggle screen share\n\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isScreenShared = _useState8[0],\n        setIsScreenShared = _useState8[1];\n\n  var screenTrack; // method to handle switch on/off\n\n  const switchOnOff = media => event => {\n    // for microphone\n    if (media === 'Mic') {\n      if (isMic) {\n        // to mute the mic\n        room.localParticipant.audioTracks.forEach(publication => {\n          publication.track.disable();\n        });\n      } else {\n        // to unmute the mic\n        room.localParticipant.audioTracks.forEach(publication => {\n          publication.track.enable();\n        });\n      } // toggle to current state\n\n\n      setIsMic(!isMic);\n    } else {\n      // for camera\n      if (isCamera) {\n        //to turn off videostream\n        room.localParticipant.videoTracks.forEach(publication => {\n          publication.track.disable();\n        });\n      } else {\n        // to turn on videostream\n        room.localParticipant.videoTracks.forEach(publication => {\n          publication.track.enable();\n        });\n      } // toggle to current state\n\n\n      setIsCamera(!isCamera);\n    }\n  }; // methods - open / close the dialog box\n\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  }; // method - copy text (roomName) to clipboard and close the dialog box\n\n\n  const copyText = () => {\n    navigator.clipboard.writeText(roomName);\n    setOpen(false);\n  };\n\n  const handleShareScreen = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _require, LocalVideoTrack, stream;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (isScreenShared) {\n              _context.next = 9;\n              break;\n            }\n\n            _require = require('twilio-video'), LocalVideoTrack = _require.LocalVideoTrack;\n            _context.next = 4;\n            return navigator.mediaDevices.getDisplayMedia();\n\n          case 4:\n            stream = _context.sent;\n            screenTrack = new LocalVideoTrack(stream.getTracks()[0]);\n            room.localParticipant.publishTrack(screenTrack).then(track => {\n              document.getElementById(room.localParticipant.sid).appendChild(track.track.attach());\n            });\n            _context.next = 10;\n            break;\n\n          case 9:\n            room.localParticipant.unpublishTrack(screenTrack); // screenTrack.stop();\n\n          case 10:\n            setIsScreenShared(!isScreenShared);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function handleShareScreen() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"toolbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: switchOnOff(\"Cam\"),\n        children: isCamera ? /*#__PURE__*/_jsxDEV(VideocamIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(VideocamOffIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 37\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: switchOnOff(\"Mic\"),\n        children: isMic ? /*#__PURE__*/_jsxDEV(MicIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 20\n        }, this) : /*#__PURE__*/_jsxDEV(MicOffIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 31\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        style: {\n          backgroundColor: \"#ff484e\"\n        },\n        children: /*#__PURE__*/_jsxDEV(CallEndIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleOpen,\n        style: {\n          background: \"#00be5d\"\n        },\n        children: /*#__PURE__*/_jsxDEV(GroupAddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: isOpen,\n        onClose: handleClose,\n        fullWidth: true,\n        maxWidth: \"sm\",\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"Invite others to join you\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: [\"Share the room name (\", /*#__PURE__*/_jsxDEV(\"q\", {\n            children: roomName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 68\n          }, this), \") with others who you wish to invite\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: copyText,\n          autoFocus: true,\n          children: \"Copy room name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleShareScreen,\n        style: {\n          backgroundColor: \"#ff484e\"\n        },\n        children: isScreenShared ? /*#__PURE__*/_jsxDEV(CancelPresentationTwoToneIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(ScreenShareTwoToneIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 62\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 7\n  }, this);\n};\n\n_s(RoomHeader, \"EQuBpnMmYQkL3jEHUG3qeYCSX0M=\");\n\n_c = RoomHeader;\nexport default RoomHeader;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoomHeader\");","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/RoomHeader.js"],"names":["React","useState","CallEndIcon","VideocamIcon","VideocamOffIcon","MicIcon","MicOffIcon","GroupAddIcon","Dialog","DialogTitle","Button","ScreenShareTwoToneIcon","CancelPresentationTwoToneIcon","RoomHeader","handleLogout","room","roomName","isMic","setIsMic","isCamera","setIsCamera","isOpen","setOpen","isScreenShared","setIsScreenShared","screenTrack","switchOnOff","media","event","localParticipant","audioTracks","forEach","publication","track","disable","enable","videoTracks","handleOpen","handleClose","copyText","navigator","clipboard","writeText","handleShareScreen","require","LocalVideoTrack","mediaDevices","getDisplayMedia","stream","getTracks","publishTrack","then","document","getElementById","sid","appendChild","attach","unpublishTrack","backgroundColor","background","textAlign"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport CallEndIcon from '@material-ui/icons/CallEndTwoTone';\nimport VideocamIcon from '@material-ui/icons/VideocamTwoTone';\nimport VideocamOffIcon from '@material-ui/icons/VideocamOffTwoTone';\nimport MicIcon from '@material-ui/icons/MicTwoTone';\nimport MicOffIcon from '@material-ui/icons/MicOffTwoTone';\nimport GroupAddIcon from '@material-ui/icons/GroupAddTwoTone';\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Button from '@material-ui/core/Button';\nimport ScreenShareTwoToneIcon from '@material-ui/icons/ScreenShareTwoTone';\nimport CancelPresentationTwoToneIcon from '@material-ui/icons/CancelPresentationTwoTone';\n\nconst RoomHeader = ({handleLogout, room, roomName}) => {\n\n    // state variables - used to swtich microphone and camera on/off\n    const [isMic, setIsMic] = useState(true);\n    const [isCamera, setIsCamera] = useState(true);\n\n    // state variable - to open/close dialog box\n    const [isOpen, setOpen] = useState(false); \n\n    // state variable - to toggle screen share\n    const [isScreenShared, setIsScreenShared] = useState(false);\n    var screenTrack;\n\n    // method to handle switch on/off\n    const switchOnOff = (media) => (event) => {\n      // for microphone\n      if(media === 'Mic'){\n        if(isMic){ // to mute the mic\n          room.localParticipant.audioTracks.forEach(publication => {\n            publication.track.disable();\n          });        \n        }else{ // to unmute the mic\n          room.localParticipant.audioTracks.forEach(publication => {\n            publication.track.enable();\n          });\n        }\n        // toggle to current state\n        setIsMic(!isMic);\n      }else{\n        // for camera\n        if(isCamera){ //to turn off videostream\n          room.localParticipant.videoTracks.forEach(publication => {\n            publication.track.disable();\n          });\n        }else{ // to turn on videostream\n          room.localParticipant.videoTracks.forEach(publication => {\n            publication.track.enable();\n          });\n        }\n        // toggle to current state\n        setIsCamera(!isCamera);\n      }\n    }\n\n    // methods - open / close the dialog box\n    const handleOpen = () => {\n      setOpen(true);\n    }\n    const handleClose = () =>{\n      setOpen(false);\n    }\n\n    // method - copy text (roomName) to clipboard and close the dialog box\n    const copyText = () => {\n      navigator.clipboard.writeText(roomName);\n      setOpen(false);\n    };\n    const handleShareScreen = async () => {\n      if(!isScreenShared){\n        const { LocalVideoTrack } = require('twilio-video');\n        const stream = await navigator.mediaDevices.getDisplayMedia();\n        screenTrack = new LocalVideoTrack(stream.getTracks()[0]);\n        room.localParticipant.publishTrack(screenTrack).then((track)=>{\n          document.getElementById(room.localParticipant.sid).appendChild(track.track.attach());\n        });\n      }else{\n        room.localParticipant.unpublishTrack(screenTrack);\n        // screenTrack.stop();\n      }\n      setIsScreenShared(!isScreenShared);\n    }\n    \n    return(\n      <div id = \"toolbar\">\n\n        {/* video camera icon */}\n        <div>\n          <button onClick = {switchOnOff(\"Cam\")}>\n          {isCamera?<VideocamIcon/>:<VideocamOffIcon/>}\n          </button>\n        </div>\n\n        {/* microphone icon */}\n        <div>\n          <button onClick = {switchOnOff(\"Mic\")}>\n            {isMic?<MicIcon/>:<MicOffIcon/>}\n          </button>\n        </div>\n\n        {/* End call icon */}\n        <div>\n          <button onClick = {handleLogout} style = {{backgroundColor:\"#ff484e\"}}>\n            <CallEndIcon/>\n          </button>\n        </div>\n\n        {/* Add others icon */}\n        <div>\n\n          <button onClick = {handleOpen} style = {{background: \"#00be5d\"}}>\n            <GroupAddIcon/>\n          </button>\n\n          {/* Dialog box */}\n          <Dialog open = {isOpen} onClose = {handleClose} fullWidth = {true} maxWidth = {\"sm\"}>\n          <DialogTitle>Invite others to join you</DialogTitle>\n          <p style = {{textAlign : 'center'}}>Share the room name (<q>{roomName}</q>) with others who you wish to invite</p>\n            <Button onClick={copyText} autoFocus>\n\t\t\t        Copy room name\n\t\t        </Button>\n          </Dialog>\n          \n        </div>\n\n        <div>\n          <button onClick = {handleShareScreen} style = {{backgroundColor:\"#ff484e\"}}>\n            {isScreenShared?<CancelPresentationTwoToneIcon/>:<ScreenShareTwoToneIcon/>}\n          </button>\n        </div>\n\n      </div>\n  );\n}\nexport default RoomHeader;"]},"metadata":{},"sourceType":"module"}
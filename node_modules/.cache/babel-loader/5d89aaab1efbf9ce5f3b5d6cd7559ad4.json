{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/VideoChat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport Video from \"twilio-video\";\nimport Lobby from \"./Lobby\";\nimport Room from \"./Room\";\nimport RoomHeader from \"./RoomHeader\"; // child to App.js\n// VideoChat.js handles data about the chat\n\nconst VideoChat = () => {\n  _s();\n\n  // state variables\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        username = _useState2[0],\n        setUsername = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        roomName = _useState4[0],\n        setRoomName = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        room = _useState6[0],\n        setRoom = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        connecting = _useState8[0],\n        setConnecting = _useState8[1]; // Methods to update Username & Roomname when changed\n\n\n  const handleUsernameChange = useCallback(event => {\n    setUsername(event.target.value);\n  }, []);\n  const handleRoomNameChange = useCallback(event => {\n    setRoomName(event.target.value);\n  }, []); // Method to send Username & Roomname to the server\n  // And recieve an access token\n\n  const handleSubmit = useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            event.preventDefault(); //prevents the browser from reload when submitting the form\n\n            setConnecting(true); // changes the button text to connecting\n\n            _context.next = 4;\n            return fetch(\"/video/token\", {\n              method: \"POST\",\n              body: JSON.stringify({\n                identity: username,\n                room: roomName\n              }),\n              headers: {\n                \"Content-Type\": \"application/json\"\n              }\n            }).then(res => res.json());\n\n          case 4:\n            data = _context.sent;\n            // connects to the room using twilio API\n            Video.connect(data.token, {\n              name: roomName,\n              dominantSpeaker: true,\n              video: {\n                height: 720,\n                frameRate: 24,\n                width: 1280\n              },\n              bandwidthProfile: {\n                video: {\n                  mode: 'collaboration',\n                  dominantSpeakerPriority: 'standard'\n                }\n              },\n              dominantSpeaker: true,\n              maxAudioBitrate: 16000,\n              //For music remove this line\n              preferredVideoCodecs: [{\n                codec: 'VP8',\n                simulcast: true\n              }],\n              networkQuality: {\n                local: 1,\n                remote: 1\n              }\n            }).then(room => {\n              setConnecting(false);\n              setRoom(room);\n            }).catch(err => {\n              console.error(err);\n              setConnecting(false);\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [roomName, username]); // Ejects the user from the room and puts in the Lobby\n\n  const handleLogout = useCallback(() => {\n    document.title = \"Microsoft Engage 2021\";\n    setRoom(prevRoom => {\n      if (prevRoom) {\n        prevRoom.localParticipant.tracks.forEach(trackPub => {\n          trackPub.track.stop();\n        });\n        prevRoom.disconnect();\n      }\n\n      return null;\n    });\n  }, []);\n  useEffect(() => {\n    if (room) {\n      const tidyUp = event => {\n        if (event.persisted) {\n          return;\n        }\n\n        if (room) {\n          handleLogout();\n        }\n      };\n\n      window.addEventListener(\"pagehide\", tidyUp);\n      window.addEventListener(\"beforeunload\", tidyUp);\n      return () => {\n        window.removeEventListener(\"pagehide\", tidyUp);\n        window.removeEventListener(\"beforeunload\", tidyUp);\n      };\n    }\n  }, [room, handleLogout]);\n  let render; // if room already exists then render Room.js\n\n  if (room) {\n    render = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Room, {\n        roomName: roomName,\n        room: room,\n        handleLogout: handleLogout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        children: /*#__PURE__*/_jsxDEV(RoomHeader, {\n          handleLogout: handleLogout,\n          room: room,\n          roomName: roomName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  } else {\n    // If room doesnt exists then render Lobby.js\n    render = /*#__PURE__*/_jsxDEV(Lobby, {\n      username: username,\n      roomName: roomName,\n      handleUsernameChange: handleUsernameChange,\n      handleRoomNameChange: handleRoomNameChange,\n      handleSubmit: handleSubmit,\n      connecting: connecting\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this);\n  }\n\n  return render;\n};\n\n_s(VideoChat, \"j83AMPH5PClS5UGuWzDOBR9Qz2Y=\");\n\n_c = VideoChat;\nexport default VideoChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoChat\");","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/VideoChat.js"],"names":["React","useState","useCallback","useEffect","Video","Lobby","Room","RoomHeader","VideoChat","username","setUsername","roomName","setRoomName","room","setRoom","connecting","setConnecting","handleUsernameChange","event","target","value","handleRoomNameChange","handleSubmit","preventDefault","fetch","method","body","JSON","stringify","identity","headers","then","res","json","data","connect","token","name","dominantSpeaker","video","height","frameRate","width","bandwidthProfile","mode","dominantSpeakerPriority","maxAudioBitrate","preferredVideoCodecs","codec","simulcast","networkQuality","local","remote","catch","err","console","error","handleLogout","document","title","prevRoom","localParticipant","tracks","forEach","trackPub","track","stop","disconnect","tidyUp","persisted","window","addEventListener","removeEventListener","render"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport Video from \"twilio-video\";\nimport Lobby from \"./Lobby\";\nimport Room from \"./Room\";\nimport RoomHeader from \"./RoomHeader\";\n\n// child to App.js\n// VideoChat.js handles data about the chat\n\nconst VideoChat = () => {\n\n  // state variables\n  const [username, setUsername] = useState(\"\");\n  const [roomName, setRoomName] = useState(\"\");\n  const [room, setRoom] = useState(null);\n  const [connecting, setConnecting] = useState(false);\n\n  // Methods to update Username & Roomname when changed\n  const handleUsernameChange = useCallback((event) => {\n    setUsername(event.target.value);\n  }, []);\n  const handleRoomNameChange = useCallback((event) => {\n    setRoomName(event.target.value);\n  }, []);\n\n      // Method to send Username & Roomname to the server\n  // And recieve an access token\n  const handleSubmit = useCallback(\n    async (event) => {\n      event.preventDefault(); //prevents the browser from reload when submitting the form\n      setConnecting(true); // changes the button text to connecting\n      const data = await fetch(\"/video/token\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          identity: username,\n          room: roomName,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }).then((res) => res.json());\n\n      // connects to the room using twilio API\n      Video.connect(data.token, {\n        name: roomName,\n        dominantSpeaker : true,\n        video: { height: 720, frameRate: 24, width: 1280 },\n        bandwidthProfile: {\n          video: {\n            mode: 'collaboration',\n            dominantSpeakerPriority: 'standard'\n          }\n        },\n        dominantSpeaker: true,\n        maxAudioBitrate: 16000, //For music remove this line\n        preferredVideoCodecs: [{ codec: 'VP8', simulcast: true }],\n        networkQuality: {local:1, remote: 1}\n      }).then((room) => {\n          setConnecting(false);\n          setRoom(room);\n        }).catch((err) => {\n          console.error(err);\n          setConnecting(false);\n        });\n    },\n    [roomName, username]\n  );\n\n  // Ejects the user from the room and puts in the Lobby\n  const handleLogout = useCallback(() => {\n    document.title = \"Microsoft Engage 2021\"\n    setRoom((prevRoom) => {\n      if (prevRoom) {\n        prevRoom.localParticipant.tracks.forEach((trackPub) => {\n          trackPub.track.stop();\n        });\n        prevRoom.disconnect();\n      }\n      return null;\n    });\n  }, []);\n\n  useEffect(() => {\n    if (room) {\n      const tidyUp = (event) => {\n        if (event.persisted) {\n          return;\n        }\n        if (room) {\n          handleLogout();\n        }\n      };\n      window.addEventListener(\"pagehide\", tidyUp);\n      window.addEventListener(\"beforeunload\", tidyUp);\n      return () => {\n        window.removeEventListener(\"pagehide\", tidyUp);\n        window.removeEventListener(\"beforeunload\", tidyUp);\n      };\n    }\n  }, [room, handleLogout]);\n  let render;\n\n  // if room already exists then render Room.js\n  if (room) {\n    render = (\n      <>\n      <Room roomName={roomName} room={room} handleLogout={handleLogout} />\n      <footer>\n        <RoomHeader handleLogout = {handleLogout} room = {room} roomName = {roomName}/>\n      </footer>\n      </>\n    );\n  } else { \n    // If room doesnt exists then render Lobby.js\n    render = (\n      <Lobby\n        username={username}\n        roomName={roomName}\n        handleUsernameChange={handleUsernameChange}\n        handleRoomNameChange={handleRoomNameChange}\n        handleSubmit={handleSubmit}\n        connecting={connecting}\n      />\n    );\n  }\n  return render;\n};\n\nexport default VideoChat;\n"]},"metadata":{},"sourceType":"module"}
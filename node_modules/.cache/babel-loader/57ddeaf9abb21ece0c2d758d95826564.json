{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/Blur.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport FilterIcon from '@material-ui/icons/FilterTwoTone';\nimport { GaussianBlurBackgroundProcessor } from '@twilio/video-processors';\n\nvar Blur = function Blur(_ref) {\n  _s();\n\n  var participant = _ref.participant;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isBlur = _useState2[0],\n      setIsBlur = _useState2[1];\n\n  var blurBackground = new GaussianBlurBackgroundProcessor({\n    assetsPath: 'assets'\n  });\n  var videoTrack;\n  console.log(participant.videoTracks); // participant.videoTracks.forEach((track) => {\n  //     if(track.track.name!=='screen_5139'){\n  //       videoTrack = track.track;\n  //       return;\n  //     }\n  // });\n\n  var handleBlur = function handleBlur() {\n    setIsBlur(!isBlur);\n\n    if (isBlur) {\n      blurBackground.loadModel().then(function () {\n        videoTrack.addProcessor(blurBackground);\n      });\n    } else {\n      videoTrack.removeProcessor(blurBackground);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"toolbarDiv\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBlur,\n      children: /*#__PURE__*/_jsxDEV(FilterIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Blur, \"8oy8RDktF0gefGLDAeEjb7/N99M=\");\n\n_c = Blur;\nexport default Blur;\n\nvar _c;\n\n$RefreshReg$(_c, \"Blur\");","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/Blur.js"],"names":["React","useState","FilterIcon","GaussianBlurBackgroundProcessor","Blur","participant","isBlur","setIsBlur","blurBackground","assetsPath","videoTrack","console","log","videoTracks","handleBlur","loadModel","then","addProcessor","removeProcessor"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,SAASC,+BAAT,QAAgD,0BAAhD;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAmB;AAAA;;AAAA,MAAjBC,WAAiB,QAAjBA,WAAiB;;AAAA,kBAEAJ,QAAQ,CAAC,KAAD,CAFR;AAAA;AAAA,MAErBK,MAFqB;AAAA,MAEbC,SAFa;;AAI5B,MAAMC,cAAc,GAAG,IAAIL,+BAAJ,CAAoC;AACvDM,IAAAA,UAAU,EAAE;AAD2C,GAApC,CAAvB;AAIA,MAAIC,UAAJ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,WAAW,CAACQ,WAAxB,EAT4B,CAU5B;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrBP,IAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;;AACA,QAAGA,MAAH,EAAU;AACNE,MAAAA,cAAc,CAACO,SAAf,GAA2BC,IAA3B,CAAgC,YAAM;AAClCN,QAAAA,UAAU,CAACO,YAAX,CAAwBT,cAAxB;AACH,OAFD;AAGH,KAJD,MAIK;AACDE,MAAAA,UAAU,CAACQ,eAAX,CAA2BV,cAA3B;AACH;AACJ,GATD;;AAWA,sBACI;AAAK,IAAA,SAAS,EAAG,YAAjB;AAAA,2BACI;AAAQ,MAAA,OAAO,EAAIM,UAAnB;AAAA,6BACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,WADJ;AAQH,CApCD;;GAAMV,I;;KAAAA,I;AAsCN,eAAeA,IAAf","sourcesContent":["import React, { useState } from 'react';\nimport FilterIcon from '@material-ui/icons/FilterTwoTone';\nimport { GaussianBlurBackgroundProcessor } from '@twilio/video-processors';\n\nconst Blur = ({participant}) => {\n\n    const [isBlur, setIsBlur] = useState(false);\n\n    const blurBackground = new GaussianBlurBackgroundProcessor({\n        assetsPath: 'assets'\n    });\n    \n    var videoTrack;\n    console.log(participant.videoTracks);\n    // participant.videoTracks.forEach((track) => {\n    //     if(track.track.name!=='screen_5139'){\n    //       videoTrack = track.track;\n    //       return;\n    //     }\n    // });\n\n    const handleBlur = () => {\n        setIsBlur(!isBlur);\n        if(isBlur){\n            blurBackground.loadModel().then(() => {\n                videoTrack.addProcessor(blurBackground);\n            });\n        }else{\n            videoTrack.removeProcessor(blurBackground);\n        }\n    }\n\n    return (\n        <div className = 'toolbarDiv'>\n            <button onClick = {handleBlur}>\n                <FilterIcon/>\n            </button>\n        </div>\n    );\n\n};\n\nexport default Blur;"]},"metadata":{},"sourceType":"module"}
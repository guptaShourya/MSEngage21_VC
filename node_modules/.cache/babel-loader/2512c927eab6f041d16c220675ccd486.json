{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ReversePackedProgram {\n  constructor(xShape, axis) {\n    this.variableNames = ['x'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    const rank = xShape.length;\n\n    if (rank > 4) {\n      throw new Error(\"WebGL backend: Reverse of rank-\".concat(rank, \" tensor is not yet supported\"));\n    }\n\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn = \"\".concat(channels[rank - 1], \" + 1 < \").concat(this.outputShape[rank - 1]);\n    const nextRow = \"\".concat(channels[rank - 2], \" + 1 < \").concat(this.outputShape[rank - 2]);\n    const type = getCoordsDataType(rank);\n\n    if (rank === 1) {\n      this.userCode = \"\\n        void main(){\\n          int rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = getChannel(getX(\".concat(xShape[0], \" - rc - 1),\\n            \").concat(xShape[0], \" - rc - 1);\\n          if(\").concat(nextColumn, \"){\\n              result.g = getChannel(getX(\").concat(xShape[0], \" - (rc  + 1) - 1),\\n                \").concat(xShape[0], \" - (rc  + 1) - 1);\\n          }\\n          setOutput(result);\\n        }\\n      \");\n    } else {\n      this.userCode = \"\\n        void main() {\\n          \".concat(type, \" rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = \").concat(getR(channels.slice()), \";\\n          if(\").concat(nextColumn, \"){\\n            result.g = \").concat(getG(channels.slice()), \";\\n          }\\n          if(\").concat(nextRow, \") {\\n            result.b = \").concat(getB(channels.slice()), \";\\n            if(\").concat(nextColumn, \") {\\n              result.a = \").concat(getA(channels.slice()), \";\\n            }\\n          }\\n          setOutput(result);\\n        }\\n    \");\n    }\n\n    function getR(channels) {\n      return getChannel(channels);\n    }\n\n    function getG(channels) {\n      channels[rank - 1] = '(' + channels[rank - 1] + \" + 1)\";\n      return getChannel(channels);\n    }\n\n    function getB(channels) {\n      channels[rank - 2] = '(' + channels[rank - 2] + \" + 1)\";\n      return getChannel(channels);\n    }\n\n    function getA(channels) {\n      channels[rank - 1] = '(' + channels[rank - 1] + \" + 1)\";\n      channels[rank - 2] = '(' + channels[rank - 2] + \" + 1)\";\n      return getChannel(channels);\n    }\n\n    function getChannel(channels) {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return \"getChannel(getX(\".concat(inCoords, \"), vec2(\").concat(innerDims, \"))\");\n    }\n\n    function getInCoord(i, channels1) {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return \"\".concat(xShape[i], \" - \").concat(channels1[i], \" - 1\");\n      } else {\n        return \"\".concat(channels1[i]);\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["../src/reverse_packed_gpu.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
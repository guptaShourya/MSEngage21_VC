{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar BindingList = require('./service/binding').BindingList;\n\nvar ConfigurationList = require('./service/configuration').ConfigurationList;\n\nvar ConversationList = require('./service/conversation').ConversationList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar RoleList = require('./service/role').RoleList;\n\nvar UserList = require('./service/user').UserList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ServiceList\n *\n * @constructor Twilio.Conversations.V1.ServiceList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function services\n   * @memberof Twilio.Conversations.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext}\n   */\n\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n\n  ServiceListInstance._version = version; // Path Solution\n\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = \"/Services\";\n  /* jshint ignore:start */\n\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.Conversations.V1.ServiceList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - The human-readable name of this service.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n\n  /* jshint ignore:end */\n\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.ServiceList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ServiceList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ServiceListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ServicePage\n *\n * @constructor Twilio.Conversations.V1.ServicePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n\n/* jshint ignore:end */\n\n\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ServicePage.prototype, Page.prototype);\n\nServicePage.prototype.constructor = ServicePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n\n/* jshint ignore:end */\n\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServicePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.Conversations.V1.ServiceInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this service.\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} friendlyName - The human-readable name of this service.\n * @property {Date} dateCreated - The date that this resource was created.\n * @property {Date} dateUpdated - The date that this resource was last updated.\n * @property {string} url - An absolute URL for this service.\n * @property {string} links -\n *          Absolute URLs to access the conversations, users, roles, bindings and configuration of this service.\n *\n * @param {V1} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid} sid - A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ServiceInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new ServiceContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the conversations\n *\n * @function conversations\n * @memberof Twilio.Conversations.V1.ServiceInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConversationList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.conversations = function conversations() {\n  return this._proxy.conversations;\n};\n/* jshint ignore:start */\n\n/**\n * Access the bindings\n *\n * @function bindings\n * @memberof Twilio.Conversations.V1.ServiceInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.BindingList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.bindings = function bindings() {\n  return this._proxy.bindings;\n};\n/* jshint ignore:start */\n\n/**\n * Access the users\n *\n * @function users\n * @memberof Twilio.Conversations.V1.ServiceInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.UserList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.users = function users() {\n  return this._proxy.users;\n};\n/* jshint ignore:start */\n\n/**\n * Access the roles\n *\n * @function roles\n * @memberof Twilio.Conversations.V1.ServiceInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.RoleList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.roles = function roles() {\n  return this._proxy.roles;\n};\n/* jshint ignore:start */\n\n/**\n * Access the configuration\n *\n * @function configuration\n * @memberof Twilio.Conversations.V1.ServiceInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConfigurationList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.configuration = function configuration() {\n  return this._proxy.configuration;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext\n *\n * @property {Twilio.Conversations.V1.ServiceContext.ConversationList} conversations -\n *          conversations resource\n * @property {Twilio.Conversations.V1.ServiceContext.BindingList} bindings -\n *          bindings resource\n * @property {Twilio.Conversations.V1.ServiceContext.UserList} users -\n *          users resource\n * @property {Twilio.Conversations.V1.ServiceContext.RoleList} roles -\n *          roles resource\n * @property {Twilio.Conversations.V1.ServiceContext.ConfigurationList} configuration -\n *          configuration resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\n\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = \"/Services/\".concat(sid); // Dependents\n\n  this._conversations = undefined;\n  this._bindings = undefined;\n  this._users = undefined;\n  this._roles = undefined;\n  this._configuration = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ServiceContext.prototype, 'conversations', {\n  get: function get() {\n    if (!this._conversations) {\n      this._conversations = new ConversationList(this._version, this._solution.sid);\n    }\n\n    return this._conversations;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'bindings', {\n  get: function get() {\n    if (!this._bindings) {\n      this._bindings = new BindingList(this._version, this._solution.sid);\n    }\n\n    return this._bindings;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'users', {\n  get: function get() {\n    if (!this._users) {\n      this._users = new UserList(this._version, this._solution.sid);\n    }\n\n    return this._users;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'roles', {\n  get: function get() {\n    if (!this._roles) {\n      this._roles = new RoleList(this._version, this._solution.sid);\n    }\n\n    return this._roles;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'configuration', {\n  get: function get() {\n    if (!this._configuration) {\n      this._configuration = new ConfigurationList(this._version, this._solution.sid);\n    }\n\n    return this._configuration;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio/lib/rest/conversations/v1/service.js"],"names":["Q","require","_","util","BindingList","ConfigurationList","ConversationList","Page","RoleList","UserList","deserialize","values","ServiceList","ServicePage","ServiceInstance","ServiceContext","version","ServiceListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","friendlyName","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendly_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","remove","_proxy","fetch","conversations","bindings","users","roles","configuration","_conversations","_bindings","_users","_roles","_configuration","module","exports"],"mappings":"AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAf;AAAuB;;;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;AAA4B;;;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;AAA6B;;;AAC7B,IAAIG,WAAW,GAAGH,OAAO,CAAC,mBAAD,CAAP,CAA6BG,WAA/C;;AACA,IAAIC,iBAAiB,GAAGJ,OAAO,CAAC,yBAAD,CAAP,CAAmCI,iBAA3D;;AACA,IAAIC,gBAAgB,GAAGL,OAAO,CAAC,wBAAD,CAAP,CAAkCK,gBAAzD;;AACA,IAAIC,IAAI,GAAGN,OAAO,CAAC,oBAAD,CAAlB;AAA2C;;;AAC3C,IAAIO,QAAQ,GAAGP,OAAO,CAAC,gBAAD,CAAP,CAA0BO,QAAzC;;AACA,IAAIC,QAAQ,GAAGR,OAAO,CAAC,gBAAD,CAAP,CAA0BQ,QAAzC;;AACA,IAAIC,WAAW,GAAGT,OAAO,CACrB,2BADqB,CAAzB;AACmC;;;AACnC,IAAIU,MAAM,GAAGV,OAAO,CAAC,sBAAD,CAApB;AAA+C;;;AAE/C,IAAIW,WAAJ;AACA,IAAIC,WAAJ;AACA,IAAIC,eAAJ;AACA,IAAIC,cAAJ;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAH,WAAW,GAAG,SAASA,WAAT,CAAqBI,OAArB,EAA8B;AAC1C;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;AACA,WAASC,mBAAT,CAA6BC,GAA7B,EAAkC;AAChC,WAAOD,mBAAmB,CAACE,GAApB,CAAwBD,GAAxB,CAAP;AACD;;AAEDD,EAAAA,mBAAmB,CAACG,QAApB,GAA+BJ,OAA/B,CAf0C,CAgB1C;;AACAC,EAAAA,mBAAmB,CAACI,SAApB,GAAgC,EAAhC;AACAJ,EAAAA,mBAAmB,CAACK,IAApB;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;AACAL,EAAAA,mBAAmB,CAACM,MAApB,GAA6B,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,QAAtB,EAAgC;AAC3D,QAAIvB,CAAC,CAACwB,WAAF,CAAcF,IAAd,CAAJ,EAAyB;AACvB,YAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,QAAIzB,CAAC,CAACwB,WAAF,CAAcF,IAAI,CAACI,YAAnB,CAAJ,EAAsC;AACpC,YAAM,IAAID,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,QAAIE,QAAQ,GAAG7B,CAAC,CAAC8B,KAAF,EAAf;AACA,QAAIC,IAAI,GAAGpB,MAAM,CAACqB,EAAP,CAAU;AAAC,sBAAgB9B,CAAC,CAACiB,GAAF,CAAMK,IAAN,EAAY,cAAZ;AAAjB,KAAV,CAAX;;AAEA,QAAIS,OAAO,GAAG,KAAKb,QAAL,CAAcG,MAAd,CAAqB;AAACW,MAAAA,GAAG,EAAE,KAAKZ,IAAX;AAAiBa,MAAAA,MAAM,EAAE,MAAzB;AAAiCJ,MAAAA,IAAI,EAAEA;AAAvC,KAArB,CAAd;;AAEAE,IAAAA,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;AACvCR,MAAAA,QAAQ,CAACS,OAAT,CAAiB,IAAIxB,eAAJ,CAAoB,KAAKM,QAAzB,EAAmCiB,OAAnC,EAA4C,KAAKhB,SAAL,CAAeH,GAA3D,CAAjB;AACD,KAFsB,CAErBqB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAN,IAAAA,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;AAC5BZ,MAAAA,QAAQ,CAACa,MAAT,CAAgBD,KAAhB;AACD,KAFD;;AAIA,QAAIvC,CAAC,CAACyC,UAAF,CAAalB,QAAb,CAAJ,EAA4B;AAC1BI,MAAAA,QAAQ,CAACI,OAAT,CAAiBW,OAAjB,CAAyBnB,QAAzB;AACD;;AAED,WAAOI,QAAQ,CAACI,OAAhB;AACD,GA1BD;AA4BA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAhB,EAAAA,mBAAmB,CAAC4B,IAApB,GAA2B,SAASA,IAAT,CAAcrB,IAAd,EAAoBC,QAApB,EAA8B;AACvD,QAAIvB,CAAC,CAACyC,UAAF,CAAanB,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AACA,QAAIA,IAAI,CAACC,QAAT,EAAmB;AACjBA,MAAAA,QAAQ,GAAGD,IAAI,CAACC,QAAhB;AACD;;AACD,QAAIvB,CAAC,CAACwB,WAAF,CAAcD,QAAd,CAAJ,EAA6B;AAC3B,YAAM,IAAIE,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAED,QAAImB,IAAI,GAAG,KAAX;AACA,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,eAAe,GAAG,CAAtB;;AACA,QAAIC,MAAM,GAAG,KAAK7B,QAAL,CAAc8B,UAAd,CAAyB;AACpCC,MAAAA,KAAK,EAAE3B,IAAI,CAAC2B,KADwB;AAEpCC,MAAAA,QAAQ,EAAE5B,IAAI,CAAC4B;AAFqB,KAAzB,CAAb;;AAKA,aAASC,UAAT,CAAoBZ,KAApB,EAA2B;AACzBK,MAAAA,IAAI,GAAG,IAAP;;AACA,UAAI5C,CAAC,CAACyC,UAAF,CAAanB,IAAI,CAACsB,IAAlB,CAAJ,EAA6B;AAC3BtB,QAAAA,IAAI,CAACsB,IAAL,CAAUL,KAAV;AACD;AACF;;AAED,aAASa,aAAT,CAAuBC,EAAvB,EAA2B;AACzB,UAAItB,OAAO,GAAGsB,EAAE,EAAhB;;AACA,UAAIrD,CAAC,CAACwB,WAAF,CAAcO,OAAd,CAAJ,EAA4B;AAC1BoB,QAAAA,UAAU;AACV;AACD;;AAEDpB,MAAAA,OAAO,CAACG,IAAR,CAAa,UAASoB,IAAT,EAAe;AAC1BtD,QAAAA,CAAC,CAAC2C,IAAF,CAAOW,IAAI,CAACC,SAAZ,EAAuB,UAASC,QAAT,EAAmB;AACxC,cAAIZ,IAAI,IAAK,CAAC5C,CAAC,CAACwB,WAAF,CAAcF,IAAI,CAAC2B,KAAnB,CAAD,IAA8BH,eAAe,IAAIxB,IAAI,CAAC2B,KAAnE,EAA2E;AACzEL,YAAAA,IAAI,GAAG,IAAP;AACA,mBAAO,KAAP;AACD;;AAEDE,UAAAA,eAAe;AACfvB,UAAAA,QAAQ,CAACiC,QAAD,EAAWL,UAAX,CAAR;AACD,SARD;;AAUA,YAAKJ,MAAM,CAACU,SAAP,IAAoBV,MAAM,CAACU,SAAP,IAAoBZ,WAA7C,EAA2D;AACzDM,UAAAA,UAAU;AACX,SAFD,MAEO,IAAI,CAACP,IAAL,EAAW;AAChBC,UAAAA,WAAW;AACXO,UAAAA,aAAa,CAACpD,CAAC,CAACqC,IAAF,CAAOiB,IAAI,CAACI,QAAZ,EAAsBJ,IAAtB,CAAD,CAAb;AACD;AACF,OAjBD;AAmBAvB,MAAAA,OAAO,CAACO,KAAR,CAAca,UAAd;AACD;;AAEDC,IAAAA,aAAa,CAACpD,CAAC,CAACqC,IAAF,CAAO,KAAKiB,IAAZ,EAAkB,IAAlB,EAAwBtD,CAAC,CAAC2D,KAAF,CAAQrC,IAAR,EAAcyB,MAAd,CAAxB,CAAD,CAAb;AACD,GA1DD;AA4DA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAhC,EAAAA,mBAAmB,CAAC6C,IAApB,GAA2B,SAASA,IAAT,CAActC,IAAd,EAAoBC,QAApB,EAA8B;AACvD,QAAIvB,CAAC,CAACyC,UAAF,CAAanB,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,QAAIK,QAAQ,GAAG7B,CAAC,CAAC8B,KAAF,EAAf;AACA,QAAIiC,YAAY,GAAG,EAAnB;;AACAvC,IAAAA,IAAI,CAACC,QAAL,GAAgB,UAASuC,QAAT,EAAmBlB,IAAnB,EAAyB;AACvCiB,MAAAA,YAAY,CAACE,IAAb,CAAkBD,QAAlB;;AAEA,UAAI,CAAC9D,CAAC,CAACwB,WAAF,CAAcF,IAAI,CAAC2B,KAAnB,CAAD,IAA8BY,YAAY,CAACG,MAAb,KAAwB1C,IAAI,CAAC2B,KAA/D,EAAsE;AACpEL,QAAAA,IAAI;AACL;AACF,KAND;;AAQAtB,IAAAA,IAAI,CAACsB,IAAL,GAAY,UAASL,KAAT,EAAgB;AAC1B,UAAIvC,CAAC,CAACwB,WAAF,CAAce,KAAd,CAAJ,EAA0B;AACxBZ,QAAAA,QAAQ,CAACS,OAAT,CAAiByB,YAAjB;AACD,OAFD,MAEO;AACLlC,QAAAA,QAAQ,CAACa,MAAT,CAAgBD,KAAhB;AACD;AACF,KAND;;AAQA,QAAIvC,CAAC,CAACyC,UAAF,CAAalB,QAAb,CAAJ,EAA4B;AAC1BI,MAAAA,QAAQ,CAACI,OAAT,CAAiBW,OAAjB,CAAyBnB,QAAzB;AACD;;AAED,SAAKoB,IAAL,CAAUrB,IAAV;AACA,WAAOK,QAAQ,CAACI,OAAhB;AACD,GA9BD;AAgCA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAhB,EAAAA,mBAAmB,CAACuC,IAApB,GAA2B,SAASA,IAAT,CAAchC,IAAd,EAAoBC,QAApB,EAA8B;AACvD,QAAIvB,CAAC,CAACyC,UAAF,CAAanB,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,QAAIK,QAAQ,GAAG7B,CAAC,CAAC8B,KAAF,EAAf;AACA,QAAIC,IAAI,GAAGpB,MAAM,CAACqB,EAAP,CAAU;AACnB,mBAAaR,IAAI,CAAC2C,SADC;AAEnB,cAAQ3C,IAAI,CAAC4C,UAFM;AAGnB,kBAAY5C,IAAI,CAAC4B;AAHE,KAAV,CAAX;;AAMA,QAAInB,OAAO,GAAG,KAAKb,QAAL,CAAcoC,IAAd,CAAmB;AAACtB,MAAAA,GAAG,EAAE,KAAKZ,IAAX;AAAiBa,MAAAA,MAAM,EAAE,KAAzB;AAAgCkC,MAAAA,MAAM,EAAEtC;AAAxC,KAAnB,CAAd;;AAEAE,IAAAA,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;AACvCR,MAAAA,QAAQ,CAACS,OAAT,CAAiB,IAAIzB,WAAJ,CAAgB,KAAKO,QAArB,EAA+BiB,OAA/B,EAAwC,KAAKhB,SAA7C,CAAjB;AACD,KAFsB,CAErBkB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAN,IAAAA,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;AAC5BZ,MAAAA,QAAQ,CAACa,MAAT,CAAgBD,KAAhB;AACD,KAFD;;AAIA,QAAIvC,CAAC,CAACyC,UAAF,CAAalB,QAAb,CAAJ,EAA4B;AAC1BI,MAAAA,QAAQ,CAACI,OAAT,CAAiBW,OAAjB,CAAyBnB,QAAzB;AACD;;AAED,WAAOI,QAAQ,CAACI,OAAhB;AACD,GA7BD;AA+BA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAhB,EAAAA,mBAAmB,CAACqD,OAApB,GAA8B,SAASA,OAAT,CAAiBC,SAAjB,EAA4B9C,QAA5B,EAAsC;AAClE,QAAII,QAAQ,GAAG7B,CAAC,CAAC8B,KAAF,EAAf;;AAEA,QAAIG,OAAO,GAAG,KAAKb,QAAL,CAAcoD,OAAd,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqC;AAACvC,MAAAA,MAAM,EAAE,KAAT;AAAgBD,MAAAA,GAAG,EAAEqC;AAArB,KAArC,CAAd;;AAEAtC,IAAAA,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;AACvCR,MAAAA,QAAQ,CAACS,OAAT,CAAiB,IAAIzB,WAAJ,CAAgB,KAAKO,QAArB,EAA+BiB,OAA/B,EAAwC,KAAKhB,SAA7C,CAAjB;AACD,KAFsB,CAErBkB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAN,IAAAA,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;AAC5BZ,MAAAA,QAAQ,CAACa,MAAT,CAAgBD,KAAhB;AACD,KAFD;;AAIA,QAAIvC,CAAC,CAACyC,UAAF,CAAalB,QAAb,CAAJ,EAA4B;AAC1BI,MAAAA,QAAQ,CAACI,OAAT,CAAiBW,OAAjB,CAAyBnB,QAAzB;AACD;;AAED,WAAOI,QAAQ,CAACI,OAAhB;AACD,GAlBD;AAoBA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAhB,EAAAA,mBAAmB,CAACE,GAApB,GAA0B,SAASA,GAAT,CAAaD,GAAb,EAAkB;AAC1C,WAAO,IAAIH,cAAJ,CAAmB,KAAKK,QAAxB,EAAkCF,GAAlC,CAAP;AACD,GAFD;AAIA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAD,EAAAA,mBAAmB,CAAC0D,MAApB,GAA6B,SAASA,MAAT,GAAkB;AAC7C,WAAO,KAAKtD,SAAZ;AACD,GAFD;;AAIAJ,EAAAA,mBAAmB,CAACd,IAAI,CAACyE,OAAL,CAAaC,MAAd,CAAnB,GAA2C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;AAC1E,WAAO5E,IAAI,CAACyE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,GAFD;;AAIA,SAAO9D,mBAAP;AACD,CArVD;AAwVA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,WAAW,GAAG,SAASA,WAAT,CAAqBG,OAArB,EAA8BgE,QAA9B,EAAwCC,QAAxC,EAAkD;AAC9D;AACA,OAAK5D,SAAL,GAAiB4D,QAAjB;AAEA1E,EAAAA,IAAI,CAAC2E,SAAL,CAAeC,WAAf,CAA2BC,IAA3B,CAAgC,IAAhC,EAAsCpE,OAAtC,EAA+CgE,QAA/C,EAAyD,KAAK3D,SAA9D;AACD,CALD;;AAOAnB,CAAC,CAACmF,MAAF,CAASxE,WAAW,CAACqE,SAArB,EAAgC3E,IAAI,CAAC2E,SAArC;;AACArE,WAAW,CAACqE,SAAZ,CAAsBC,WAAtB,GAAoCtE,WAApC;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,WAAW,CAACqE,SAAZ,CAAsBI,WAAtB,GAAoC,SAASA,WAAT,CAAqBjD,OAArB,EAA8B;AAChE,SAAO,IAAIvB,eAAJ,CAAoB,KAAKM,QAAzB,EAAmCiB,OAAnC,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAxB,WAAW,CAACqE,SAAZ,CAAsBP,MAAtB,GAA+B,SAASA,MAAT,GAAkB;AAC/C,MAAIY,KAAK,GAAG,EAAZ;;AACArF,EAAAA,CAAC,CAACsF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAACxF,CAAC,CAACyF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAExF,CAAC,CAACyC,UAAF,CAAa8C,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUA1E,WAAW,CAACqE,SAAZ,CAAsB/E,IAAI,CAACyE,OAAL,CAAaC,MAAnC,IAA6C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;AAC5E,SAAO5E,IAAI,CAACyE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAFD;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAjE,eAAe,GAAG,SAASA,eAAT,CAAyBE,OAAzB,EAAkCqB,OAAlC,EAA2CnB,GAA3C,EAAgD;AAChE,OAAKE,QAAL,GAAgBJ,OAAhB,CADgE,CAGhE;;AACA,OAAK4E,UAAL,GAAkBvD,OAAO,CAACwD,WAA1B,CAJgE,CAIzB;;AACvC,OAAK3E,GAAL,GAAWmB,OAAO,CAACnB,GAAnB,CALgE,CAKxC;;AACxB,OAAKU,YAAL,GAAoBS,OAAO,CAACyD,aAA5B,CANgE,CAMrB;;AAC3C,OAAKC,WAAL,GAAmBrF,WAAW,CAACsF,eAAZ,CAA4B3D,OAAO,CAAC4D,YAApC,CAAnB,CAPgE,CAOM;;AACtE,OAAKC,WAAL,GAAmBxF,WAAW,CAACsF,eAAZ,CAA4B3D,OAAO,CAAC8D,YAApC,CAAnB,CARgE,CAQM;;AACtE,OAAKC,GAAL,GAAW/D,OAAO,CAAC+D,GAAnB,CATgE,CASxC;;AACxB,OAAKC,KAAL,GAAahE,OAAO,CAACgE,KAArB,CAVgE,CAUpC;AAE5B;;AACA,OAAKC,QAAL,GAAgBC,SAAhB;AACA,OAAKlF,SAAL,GAAiB;AAACH,IAAAA,GAAG,EAAEA,GAAG,IAAI,KAAKA;AAAlB,GAAjB;AACD,CAfD;;AAiBAsF,MAAM,CAACC,cAAP,CAAsB3F,eAAe,CAACoE,SAAtC,EACE,QADF,EACY;AACR/D,EAAAA,GAAG,EAAE,eAAW;AACd,QAAI,CAAC,KAAKmF,QAAV,EAAoB;AAClB,WAAKA,QAAL,GAAgB,IAAIvF,cAAJ,CAAmB,KAAKK,QAAxB,EAAkC,KAAKC,SAAL,CAAeH,GAAjD,CAAhB;AACD;;AAED,WAAO,KAAKoF,QAAZ;AACD;AAPO,CADZ;AAWA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAxF,eAAe,CAACoE,SAAhB,CAA0BwB,MAA1B,GAAmC,SAASA,MAAT,CAAgBjF,QAAhB,EAA0B;AAC3D,SAAO,KAAKkF,MAAL,CAAYD,MAAZ,CAAmBjF,QAAnB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAX,eAAe,CAACoE,SAAhB,CAA0B0B,KAA1B,GAAkC,SAASA,KAAT,CAAenF,QAAf,EAAyB;AACzD,SAAO,KAAKkF,MAAL,CAAYC,KAAZ,CAAkBnF,QAAlB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAX,eAAe,CAACoE,SAAhB,CAA0B2B,aAA1B,GAA0C,SAASA,aAAT,GAAyB;AACjE,SAAO,KAAKF,MAAL,CAAYE,aAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA/F,eAAe,CAACoE,SAAhB,CAA0B4B,QAA1B,GAAqC,SAASA,QAAT,GAAoB;AACvD,SAAO,KAAKH,MAAL,CAAYG,QAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAhG,eAAe,CAACoE,SAAhB,CAA0B6B,KAA1B,GAAkC,SAASA,KAAT,GAAiB;AACjD,SAAO,KAAKJ,MAAL,CAAYI,KAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAjG,eAAe,CAACoE,SAAhB,CAA0B8B,KAA1B,GAAkC,SAASA,KAAT,GAAiB;AACjD,SAAO,KAAKL,MAAL,CAAYK,KAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAlG,eAAe,CAACoE,SAAhB,CAA0B+B,aAA1B,GAA0C,SAASA,aAAT,GAAyB;AACjE,SAAO,KAAKN,MAAL,CAAYM,aAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAnG,eAAe,CAACoE,SAAhB,CAA0BP,MAA1B,GAAmC,SAASA,MAAT,GAAkB;AACnD,MAAIY,KAAK,GAAG,EAAZ;;AACArF,EAAAA,CAAC,CAACsF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAACxF,CAAC,CAACyF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAExF,CAAC,CAACyC,UAAF,CAAa8C,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUAzE,eAAe,CAACoE,SAAhB,CAA0B/E,IAAI,CAACyE,OAAL,CAAaC,MAAvC,IAAiD,SAASD,OAAT,CAAiBE,KAAjB,EAC7CC,OAD6C,EACpC;AACX,SAAO5E,IAAI,CAACyE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAhE,cAAc,GAAG,SAASA,cAAT,CAAwBC,OAAxB,EAAiCE,GAAjC,EAAsC;AACrD,OAAKE,QAAL,GAAgBJ,OAAhB,CADqD,CAGrD;;AACA,OAAKK,SAAL,GAAiB;AAACH,IAAAA,GAAG,EAAEA;AAAN,GAAjB;AACA,OAAKI,IAAL,uBAAyBJ,GAAzB,EALqD,CAOrD;;AACA,OAAKgG,cAAL,GAAsBX,SAAtB;AACA,OAAKY,SAAL,GAAiBZ,SAAjB;AACA,OAAKa,MAAL,GAAcb,SAAd;AACA,OAAKc,MAAL,GAAcd,SAAd;AACA,OAAKe,cAAL,GAAsBf,SAAtB;AACD,CAbD;AAeA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAxF,cAAc,CAACmE,SAAf,CAAyBwB,MAAzB,GAAkC,SAASA,MAAT,CAAgBjF,QAAhB,EAA0B;AAC1D,MAAII,QAAQ,GAAG7B,CAAC,CAAC8B,KAAF,EAAf;;AACA,MAAIG,OAAO,GAAG,KAAKb,QAAL,CAAcsF,MAAd,CAAqB;AAACxE,IAAAA,GAAG,EAAE,KAAKZ,IAAX;AAAiBa,IAAAA,MAAM,EAAE;AAAzB,GAArB,CAAd;;AAEAF,EAAAA,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;AACvCR,IAAAA,QAAQ,CAACS,OAAT,CAAiBD,OAAjB;AACD,GAFsB,CAErBE,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAN,EAAAA,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;AAC5BZ,IAAAA,QAAQ,CAACa,MAAT,CAAgBD,KAAhB;AACD,GAFD;;AAIA,MAAIvC,CAAC,CAACyC,UAAF,CAAalB,QAAb,CAAJ,EAA4B;AAC1BI,IAAAA,QAAQ,CAACI,OAAT,CAAiBW,OAAjB,CAAyBnB,QAAzB;AACD;;AAED,SAAOI,QAAQ,CAACI,OAAhB;AACD,CAjBD;AAmBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAlB,cAAc,CAACmE,SAAf,CAAyB0B,KAAzB,GAAiC,SAASA,KAAT,CAAenF,QAAf,EAAyB;AACxD,MAAII,QAAQ,GAAG7B,CAAC,CAAC8B,KAAF,EAAf;;AACA,MAAIG,OAAO,GAAG,KAAKb,QAAL,CAAcwF,KAAd,CAAoB;AAAC1E,IAAAA,GAAG,EAAE,KAAKZ,IAAX;AAAiBa,IAAAA,MAAM,EAAE;AAAzB,GAApB,CAAd;;AAEAF,EAAAA,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;AACvCR,IAAAA,QAAQ,CAACS,OAAT,CAAiB,IAAIxB,eAAJ,CAAoB,KAAKM,QAAzB,EAAmCiB,OAAnC,EAA4C,KAAKhB,SAAL,CAAeH,GAA3D,CAAjB;AACD,GAFsB,CAErBqB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAN,EAAAA,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;AAC5BZ,IAAAA,QAAQ,CAACa,MAAT,CAAgBD,KAAhB;AACD,GAFD;;AAIA,MAAIvC,CAAC,CAACyC,UAAF,CAAalB,QAAb,CAAJ,EAA4B;AAC1BI,IAAAA,QAAQ,CAACI,OAAT,CAAiBW,OAAjB,CAAyBnB,QAAzB;AACD;;AAED,SAAOI,QAAQ,CAACI,OAAhB;AACD,CAjBD;;AAmBAuE,MAAM,CAACC,cAAP,CAAsB1F,cAAc,CAACmE,SAArC,EACE,eADF,EACmB;AACf/D,EAAAA,GAAG,EAAE,eAAW;AACd,QAAI,CAAC,KAAK+F,cAAV,EAA0B;AACxB,WAAKA,cAAL,GAAsB,IAAI5G,gBAAJ,CAAqB,KAAKc,QAA1B,EAAoC,KAAKC,SAAL,CAAeH,GAAnD,CAAtB;AACD;;AACD,WAAO,KAAKgG,cAAZ;AACD;AANc,CADnB;AAUAV,MAAM,CAACC,cAAP,CAAsB1F,cAAc,CAACmE,SAArC,EACE,UADF,EACc;AACV/D,EAAAA,GAAG,EAAE,eAAW;AACd,QAAI,CAAC,KAAKgG,SAAV,EAAqB;AACnB,WAAKA,SAAL,GAAiB,IAAI/G,WAAJ,CAAgB,KAAKgB,QAArB,EAA+B,KAAKC,SAAL,CAAeH,GAA9C,CAAjB;AACD;;AACD,WAAO,KAAKiG,SAAZ;AACD;AANS,CADd;AAUAX,MAAM,CAACC,cAAP,CAAsB1F,cAAc,CAACmE,SAArC,EACE,OADF,EACW;AACP/D,EAAAA,GAAG,EAAE,eAAW;AACd,QAAI,CAAC,KAAKiG,MAAV,EAAkB;AAChB,WAAKA,MAAL,GAAc,IAAI3G,QAAJ,CAAa,KAAKW,QAAlB,EAA4B,KAAKC,SAAL,CAAeH,GAA3C,CAAd;AACD;;AACD,WAAO,KAAKkG,MAAZ;AACD;AANM,CADX;AAUAZ,MAAM,CAACC,cAAP,CAAsB1F,cAAc,CAACmE,SAArC,EACE,OADF,EACW;AACP/D,EAAAA,GAAG,EAAE,eAAW;AACd,QAAI,CAAC,KAAKkG,MAAV,EAAkB;AAChB,WAAKA,MAAL,GAAc,IAAI7G,QAAJ,CAAa,KAAKY,QAAlB,EAA4B,KAAKC,SAAL,CAAeH,GAA3C,CAAd;AACD;;AACD,WAAO,KAAKmG,MAAZ;AACD;AANM,CADX;AAUAb,MAAM,CAACC,cAAP,CAAsB1F,cAAc,CAACmE,SAArC,EACE,eADF,EACmB;AACf/D,EAAAA,GAAG,EAAE,eAAW;AACd,QAAI,CAAC,KAAKmG,cAAV,EAA0B;AACxB,WAAKA,cAAL,GAAsB,IAAIjH,iBAAJ,CAAsB,KAAKe,QAA3B,EAAqC,KAAKC,SAAL,CAAeH,GAApD,CAAtB;AACD;;AACD,WAAO,KAAKoG,cAAZ;AACD;AANc,CADnB;AAUA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAvG,cAAc,CAACmE,SAAf,CAAyBP,MAAzB,GAAkC,SAASA,MAAT,GAAkB;AAClD,SAAO,KAAKtD,SAAZ;AACD,CAFD;;AAIAN,cAAc,CAACmE,SAAf,CAAyB/E,IAAI,CAACyE,OAAL,CAAaC,MAAtC,IAAgD,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAC5C;AACF,SAAO5E,IAAI,CAACyE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;;AAKAwC,MAAM,CAACC,OAAP,GAAiB;AACf5G,EAAAA,WAAW,EAAEA,WADE;AAEfC,EAAAA,WAAW,EAAEA,WAFE;AAGfC,EAAAA,eAAe,EAAEA,eAHF;AAIfC,EAAAA,cAAc,EAAEA;AAJD,CAAjB","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar BindingList = require('./service/binding').BindingList;\nvar ConfigurationList = require('./service/configuration').ConfigurationList;\nvar ConversationList = require('./service/conversation').ConversationList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar RoleList = require('./service/role').RoleList;\nvar UserList = require('./service/user').UserList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceList\n *\n * @constructor Twilio.Conversations.V1.ServiceList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function services\n   * @memberof Twilio.Conversations.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext}\n   */\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n\n  ServiceListInstance._version = version;\n  // Path Solution\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = `/Services`;\n  /* jshint ignore:start */\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.Conversations.V1.ServiceList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - The human-readable name of this service.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({'FriendlyName': _.get(opts, 'friendlyName')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.ServiceList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext}\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ServiceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ServiceListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServicePage\n *\n * @constructor Twilio.Conversations.V1.ServicePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n/* jshint ignore:end */\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ServicePage.prototype, Page.prototype);\nServicePage.prototype.constructor = ServicePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n/* jshint ignore:end */\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServicePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.Conversations.V1.ServiceInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this service.\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} friendlyName - The human-readable name of this service.\n * @property {Date} dateCreated - The date that this resource was created.\n * @property {Date} dateUpdated - The date that this resource was last updated.\n * @property {string} url - An absolute URL for this service.\n * @property {string} links -\n *          Absolute URLs to access the conversations, users, roles, bindings and configuration of this service.\n *\n * @param {V1} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid} sid - A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(ServiceInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ServiceContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the conversations\n *\n * @function conversations\n * @memberof Twilio.Conversations.V1.ServiceInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConversationList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.conversations = function conversations() {\n  return this._proxy.conversations;\n};\n\n/* jshint ignore:start */\n/**\n * Access the bindings\n *\n * @function bindings\n * @memberof Twilio.Conversations.V1.ServiceInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.BindingList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.bindings = function bindings() {\n  return this._proxy.bindings;\n};\n\n/* jshint ignore:start */\n/**\n * Access the users\n *\n * @function users\n * @memberof Twilio.Conversations.V1.ServiceInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.UserList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.users = function users() {\n  return this._proxy.users;\n};\n\n/* jshint ignore:start */\n/**\n * Access the roles\n *\n * @function roles\n * @memberof Twilio.Conversations.V1.ServiceInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.RoleList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.roles = function roles() {\n  return this._proxy.roles;\n};\n\n/* jshint ignore:start */\n/**\n * Access the configuration\n *\n * @function configuration\n * @memberof Twilio.Conversations.V1.ServiceInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConfigurationList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.configuration = function configuration() {\n  return this._proxy.configuration;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext\n *\n * @property {Twilio.Conversations.V1.ServiceContext.ConversationList} conversations -\n *          conversations resource\n * @property {Twilio.Conversations.V1.ServiceContext.BindingList} bindings -\n *          bindings resource\n * @property {Twilio.Conversations.V1.ServiceContext.UserList} users -\n *          users resource\n * @property {Twilio.Conversations.V1.ServiceContext.RoleList} roles -\n *          roles resource\n * @property {Twilio.Conversations.V1.ServiceContext.ConfigurationList} configuration -\n *          configuration resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Services/${sid}`;\n\n  // Dependents\n  this._conversations = undefined;\n  this._bindings = undefined;\n  this._users = undefined;\n  this._roles = undefined;\n  this._configuration = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ServiceContext.prototype,\n  'conversations', {\n    get: function() {\n      if (!this._conversations) {\n        this._conversations = new ConversationList(this._version, this._solution.sid);\n      }\n      return this._conversations;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'bindings', {\n    get: function() {\n      if (!this._bindings) {\n        this._bindings = new BindingList(this._version, this._solution.sid);\n      }\n      return this._bindings;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'users', {\n    get: function() {\n      if (!this._users) {\n        this._users = new UserList(this._version, this._solution.sid);\n      }\n      return this._users;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'roles', {\n    get: function() {\n      if (!this._roles) {\n        this._roles = new RoleList(this._version, this._solution.sid);\n      }\n      return this._roles;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'configuration', {\n    get: function() {\n      if (!this._configuration) {\n        this._configuration = new ConfigurationList(this._version, this._solution.sid);\n      }\n      return this._configuration;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};\n"]},"metadata":{},"sourceType":"script"}
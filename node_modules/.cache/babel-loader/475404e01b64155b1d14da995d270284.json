{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar ParticipantList = require('./room/participant').ParticipantList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar RoomList;\nvar RoomPage;\nvar RoomInstance;\nvar RoomContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the RoomList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Insights.V1.RoomList\n *\n * @param {Twilio.Insights.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nRoomList = function RoomList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function rooms\n   * @memberof Twilio.Insights.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Insights.V1.RoomContext}\n   */\n\n  /* jshint ignore:end */\n  function RoomListInstance(sid) {\n    return RoomListInstance.get(sid);\n  }\n\n  RoomListInstance._version = version; // Path Solution\n\n  RoomListInstance._solution = {};\n  RoomListInstance._uri = \"/Video/Rooms\";\n  /* jshint ignore:start */\n\n  /**\n   * Streams RoomInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Insights.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_type|list} [opts.roomType] - The room_type\n   * @param {room.codec|list} [opts.codec] - The codec\n   * @param {string} [opts.roomName] - The room_name\n   * @param {Date} [opts.createdAfter] - The created_after\n   * @param {Date} [opts.createdBefore] - The created_before\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  RoomListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists RoomInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Insights.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_type|list} [opts.roomType] - The room_type\n   * @param {room.codec|list} [opts.codec] - The codec\n   * @param {string} [opts.roomName] - The room_name\n   * @param {Date} [opts.createdAfter] - The created_after\n   * @param {Date} [opts.createdBefore] - The created_before\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Insights.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_type|list} [opts.roomType] - The room_type\n   * @param {room.codec|list} [opts.codec] - The codec\n   * @param {string} [opts.roomName] - The room_name\n   * @param {Date} [opts.createdAfter] - The created_after\n   * @param {Date} [opts.createdBefore] - The created_before\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'RoomType': serialize.map(_.get(opts, 'roomType'), function (e) {\n        return e;\n      }),\n      'Codec': serialize.map(_.get(opts, 'codec'), function (e) {\n        return e;\n      }),\n      'RoomName': _.get(opts, 'roomName'),\n      'CreatedAfter': serialize.iso8601DateTime(_.get(opts, 'createdAfter')),\n      'CreatedBefore': serialize.iso8601DateTime(_.get(opts, 'createdBefore')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Insights.V1.RoomList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a room\n   *\n   * @function get\n   * @memberof Twilio.Insights.V1.RoomList#\n   *\n   * @param {string} roomSid - The room_sid\n   *\n   * @returns {Twilio.Insights.V1.RoomContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.get = function get(roomSid) {\n    return new RoomContext(this._version, roomSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Insights.V1.RoomList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  RoomListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return RoomListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RoomPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Insights.V1.RoomPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RoomSolution} solution - Path solution\n *\n * @returns RoomPage\n */\n\n/* jshint ignore:end */\n\n\nRoomPage = function RoomPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(RoomPage.prototype, Page.prototype);\n\nRoomPage.prototype.constructor = RoomPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of RoomInstance\n *\n * @function getInstance\n * @memberof Twilio.Insights.V1.RoomPage#\n *\n * @param {RoomPayload} payload - Payload response from the API\n *\n * @returns RoomInstance\n */\n\n/* jshint ignore:end */\n\nRoomPage.prototype.getInstance = function getInstance(payload) {\n  return new RoomInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.RoomPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nRoomPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nRoomPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RoomContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Insights.V1.RoomInstance\n *\n * @property {string} accountSid - The account_sid\n * @property {string} roomSid - The room_sid\n * @property {string} roomName - The room_name\n * @property {Date} createTime - The create_time\n * @property {Date} endTime - The end_time\n * @property {room.room_type} roomType - The room_type\n * @property {room.room_status} roomStatus - The room_status\n * @property {string} statusCallback - The status_callback\n * @property {string} statusCallbackMethod - The status_callback_method\n * @property {room.created_method} createdMethod - The created_method\n * @property {room.end_reason} endReason - The end_reason\n * @property {number} maxParticipants - The max_participants\n * @property {number} uniqueParticipants - The unique_participants\n * @property {number} uniqueParticipantIdentities -\n *          The unique_participant_identities\n * @property {number} concurrentParticipants - The concurrent_participants\n * @property {number} maxConcurrentParticipants - The max_concurrent_participants\n * @property {room.codec} codecs - The codecs\n * @property {room.twilio_realm} mediaRegion - The media_region\n * @property {number} durationSec - The duration_sec\n * @property {number} totalParticipantDurationSec -\n *          The total_participant_duration_sec\n * @property {number} totalRecordingDurationSec - The total_recording_duration_sec\n * @property {room.processing_state} processingState - The processing_state\n * @property {boolean} recordingEnabled - The recording_enabled\n * @property {room.edge_location} edgeLocation - The edge_location\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {RoomPayload} payload - The instance payload\n * @param {sid_like} roomSid - The room_sid\n */\n\n/* jshint ignore:end */\n\n\nRoomInstance = function RoomInstance(version, payload, roomSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.roomSid = payload.room_sid; // jshint ignore:line\n\n  this.roomName = payload.room_name; // jshint ignore:line\n\n  this.createTime = deserialize.iso8601DateTime(payload.create_time); // jshint ignore:line\n\n  this.endTime = deserialize.iso8601DateTime(payload.end_time); // jshint ignore:line\n\n  this.roomType = payload.room_type; // jshint ignore:line\n\n  this.roomStatus = payload.room_status; // jshint ignore:line\n\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n\n  this.createdMethod = payload.created_method; // jshint ignore:line\n\n  this.endReason = payload.end_reason; // jshint ignore:line\n\n  this.maxParticipants = deserialize.integer(payload.max_participants); // jshint ignore:line\n\n  this.uniqueParticipants = deserialize.integer(payload.unique_participants); // jshint ignore:line\n\n  this.uniqueParticipantIdentities = deserialize.integer(payload.unique_participant_identities); // jshint ignore:line\n\n  this.concurrentParticipants = deserialize.integer(payload.concurrent_participants); // jshint ignore:line\n\n  this.maxConcurrentParticipants = deserialize.integer(payload.max_concurrent_participants); // jshint ignore:line\n\n  this.codecs = payload.codecs; // jshint ignore:line\n\n  this.mediaRegion = payload.media_region; // jshint ignore:line\n\n  this.durationSec = deserialize.integer(payload.duration_sec); // jshint ignore:line\n\n  this.totalParticipantDurationSec = deserialize.integer(payload.total_participant_duration_sec); // jshint ignore:line\n\n  this.totalRecordingDurationSec = deserialize.integer(payload.total_recording_duration_sec); // jshint ignore:line\n\n  this.processingState = payload.processing_state; // jshint ignore:line\n\n  this.recordingEnabled = payload.recording_enabled; // jshint ignore:line\n\n  this.edgeLocation = payload.edge_location; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    roomSid: roomSid || this.roomSid\n  };\n};\n\nObject.defineProperty(RoomInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new RoomContext(this._version, this._solution.roomSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Insights.V1.RoomInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n\n/* jshint ignore:end */\n\nRoomInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Insights.V1.RoomInstance#\n *\n * @returns {Twilio.Insights.V1.RoomContext.ParticipantList}\n */\n\n/* jshint ignore:end */\n\n\nRoomInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.RoomInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nRoomInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nRoomInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RoomContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Insights.V1.RoomContext\n *\n * @property {Twilio.Insights.V1.RoomContext.ParticipantList} participants -\n *          participants resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} roomSid - The room_sid\n */\n\n/* jshint ignore:end */\n\n\nRoomContext = function RoomContext(version, roomSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    roomSid: roomSid\n  };\n  this._uri = \"/Video/Rooms/\".concat(roomSid); // Dependents\n\n  this._participants = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Insights.V1.RoomContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n\n/* jshint ignore:end */\n\n\nRoomContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.roomSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(RoomContext.prototype, 'participants', {\n  get: function get() {\n    if (!this._participants) {\n      this._participants = new ParticipantList(this._version, this._solution.roomSid);\n    }\n\n    return this._participants;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.RoomContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nRoomContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nRoomContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  RoomList: RoomList,\n  RoomPage: RoomPage,\n  RoomInstance: RoomInstance,\n  RoomContext: RoomContext\n};","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio/lib/rest/insights/v1/room.js"],"names":["Q","require","_","util","Page","ParticipantList","deserialize","serialize","values","RoomList","RoomPage","RoomInstance","RoomContext","version","RoomListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","map","e","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","roomSid","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","room_sid","roomName","room_name","createTime","create_time","endTime","end_time","roomType","room_type","roomStatus","room_status","statusCallback","status_callback","statusCallbackMethod","status_callback_method","createdMethod","created_method","endReason","end_reason","maxParticipants","integer","max_participants","uniqueParticipants","unique_participants","uniqueParticipantIdentities","unique_participant_identities","concurrentParticipants","concurrent_participants","maxConcurrentParticipants","max_concurrent_participants","codecs","mediaRegion","media_region","durationSec","duration_sec","totalParticipantDurationSec","total_participant_duration_sec","totalRecordingDurationSec","total_recording_duration_sec","processingState","processing_state","recordingEnabled","recording_enabled","edgeLocation","edge_location","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","participants","_participants","module","exports"],"mappings":"AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAf;AAAuB;;;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;AAA4B;;;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;AAA6B;;;AAC7B,IAAIG,IAAI,GAAGH,OAAO,CAAC,oBAAD,CAAlB;AAA2C;;;AAC3C,IAAII,eAAe,GAAGJ,OAAO,CAAC,oBAAD,CAAP,CAA8BI,eAApD;;AACA,IAAIC,WAAW,GAAGL,OAAO,CACrB,2BADqB,CAAzB;AACmC;;;AACnC,IAAIM,SAAS,GAAGN,OAAO,CAAC,yBAAD,CAAvB;AAAqD;;;AACrD,IAAIO,MAAM,GAAGP,OAAO,CAAC,sBAAD,CAApB;AAA+C;;;AAE/C,IAAIQ,QAAJ;AACA,IAAIC,QAAJ;AACA,IAAIC,YAAJ;AACA,IAAIC,WAAJ;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAH,QAAQ,GAAG,SAASA,QAAT,CAAkBI,OAAlB,EAA2B;AACpC;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;AACA,WAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC7B,WAAOD,gBAAgB,CAACE,GAAjB,CAAqBD,GAArB,CAAP;AACD;;AAEDD,EAAAA,gBAAgB,CAACG,QAAjB,GAA4BJ,OAA5B,CAfoC,CAgBpC;;AACAC,EAAAA,gBAAgB,CAACI,SAAjB,GAA6B,EAA7B;AACAJ,EAAAA,gBAAgB,CAACK,IAAjB;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;AACAL,EAAAA,gBAAgB,CAACM,IAAjB,GAAwB,SAASA,IAAT,CAAcC,IAAd,EAAoBC,QAApB,EAA8B;AACpD,QAAIpB,CAAC,CAACqB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AACA,QAAIA,IAAI,CAACC,QAAT,EAAmB;AACjBA,MAAAA,QAAQ,GAAGD,IAAI,CAACC,QAAhB;AACD;;AACD,QAAIpB,CAAC,CAACsB,WAAF,CAAcF,QAAd,CAAJ,EAA6B;AAC3B,YAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAED,QAAIC,IAAI,GAAG,KAAX;AACA,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,eAAe,GAAG,CAAtB;;AACA,QAAIC,MAAM,GAAG,KAAKZ,QAAL,CAAca,UAAd,CAAyB;AACpCC,MAAAA,KAAK,EAAEV,IAAI,CAACU,KADwB;AAEpCC,MAAAA,QAAQ,EAAEX,IAAI,CAACW;AAFqB,KAAzB,CAAb;;AAKA,aAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzBR,MAAAA,IAAI,GAAG,IAAP;;AACA,UAAIxB,CAAC,CAACqB,UAAF,CAAaF,IAAI,CAACK,IAAlB,CAAJ,EAA6B;AAC3BL,QAAAA,IAAI,CAACK,IAAL,CAAUQ,KAAV;AACD;AACF;;AAED,aAASC,aAAT,CAAuBC,EAAvB,EAA2B;AACzB,UAAIC,OAAO,GAAGD,EAAE,EAAhB;;AACA,UAAIlC,CAAC,CAACsB,WAAF,CAAca,OAAd,CAAJ,EAA4B;AAC1BJ,QAAAA,UAAU;AACV;AACD;;AAEDI,MAAAA,OAAO,CAACC,IAAR,CAAa,UAASC,IAAT,EAAe;AAC1BrC,QAAAA,CAAC,CAACkB,IAAF,CAAOmB,IAAI,CAACC,SAAZ,EAAuB,UAASC,QAAT,EAAmB;AACxC,cAAIf,IAAI,IAAK,CAACxB,CAAC,CAACsB,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BH,eAAe,IAAIP,IAAI,CAACU,KAAnE,EAA2E;AACzEL,YAAAA,IAAI,GAAG,IAAP;AACA,mBAAO,KAAP;AACD;;AAEDE,UAAAA,eAAe;AACfN,UAAAA,QAAQ,CAACmB,QAAD,EAAWR,UAAX,CAAR;AACD,SARD;;AAUA,YAAKJ,MAAM,CAACa,SAAP,IAAoBb,MAAM,CAACa,SAAP,IAAoBf,WAA7C,EAA2D;AACzDM,UAAAA,UAAU;AACX,SAFD,MAEO,IAAI,CAACP,IAAL,EAAW;AAChBC,UAAAA,WAAW;AACXQ,UAAAA,aAAa,CAACjC,CAAC,CAACyC,IAAF,CAAOJ,IAAI,CAACK,QAAZ,EAAsBL,IAAtB,CAAD,CAAb;AACD;AACF,OAjBD;AAmBAF,MAAAA,OAAO,CAACQ,KAAR,CAAcZ,UAAd;AACD;;AAEDE,IAAAA,aAAa,CAACjC,CAAC,CAACyC,IAAF,CAAO,KAAKJ,IAAZ,EAAkB,IAAlB,EAAwBrC,CAAC,CAAC4C,KAAF,CAAQzB,IAAR,EAAcQ,MAAd,CAAxB,CAAD,CAAb;AACD,GA1DD;AA4DA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAf,EAAAA,gBAAgB,CAACiC,IAAjB,GAAwB,SAASA,IAAT,CAAc1B,IAAd,EAAoBC,QAApB,EAA8B;AACpD,QAAIpB,CAAC,CAACqB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,QAAI2B,QAAQ,GAAGhD,CAAC,CAACiD,KAAF,EAAf;AACA,QAAIC,YAAY,GAAG,EAAnB;;AACA7B,IAAAA,IAAI,CAACC,QAAL,GAAgB,UAAS6B,QAAT,EAAmBzB,IAAnB,EAAyB;AACvCwB,MAAAA,YAAY,CAACE,IAAb,CAAkBD,QAAlB;;AAEA,UAAI,CAACjD,CAAC,CAACsB,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BmB,YAAY,CAACG,MAAb,KAAwBhC,IAAI,CAACU,KAA/D,EAAsE;AACpEL,QAAAA,IAAI;AACL;AACF,KAND;;AAQAL,IAAAA,IAAI,CAACK,IAAL,GAAY,UAASQ,KAAT,EAAgB;AAC1B,UAAIhC,CAAC,CAACsB,WAAF,CAAcU,KAAd,CAAJ,EAA0B;AACxBc,QAAAA,QAAQ,CAACM,OAAT,CAAiBJ,YAAjB;AACD,OAFD,MAEO;AACLF,QAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD;AACF,KAND;;AAQA,QAAIhC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,MAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,SAAKF,IAAL,CAAUC,IAAV;AACA,WAAO2B,QAAQ,CAACX,OAAhB;AACD,GA9BD;AAgCA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,gBAAgB,CAACyB,IAAjB,GAAwB,SAASA,IAAT,CAAclB,IAAd,EAAoBC,QAApB,EAA8B;AACpD,QAAIpB,CAAC,CAACqB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,QAAI2B,QAAQ,GAAGhD,CAAC,CAACiD,KAAF,EAAf;AACA,QAAIQ,IAAI,GAAGjD,MAAM,CAACkD,EAAP,CAAU;AACnB,kBAAYnD,SAAS,CAACoD,GAAV,CAAczD,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,UAAZ,CAAd,EAAuC,UAASuC,CAAT,EAAY;AAAE,eAAOA,CAAP;AAAW,OAAhE,CADO;AAEnB,eAASrD,SAAS,CAACoD,GAAV,CAAczD,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,OAAZ,CAAd,EAAoC,UAASuC,CAAT,EAAY;AAAE,eAAOA,CAAP;AAAW,OAA7D,CAFU;AAGnB,kBAAY1D,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,UAAZ,CAHO;AAInB,sBAAgBd,SAAS,CAACsD,eAAV,CAA0B3D,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,cAAZ,CAA1B,CAJG;AAKnB,uBAAiBd,SAAS,CAACsD,eAAV,CAA0B3D,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,eAAZ,CAA1B,CALE;AAMnB,mBAAaA,IAAI,CAACyC,SANC;AAOnB,cAAQzC,IAAI,CAAC0C,UAPM;AAQnB,kBAAY1C,IAAI,CAACW;AARE,KAAV,CAAX;;AAWA,QAAIK,OAAO,GAAG,KAAKpB,QAAL,CAAcsB,IAAd,CAAmB;AAACyB,MAAAA,GAAG,EAAE,KAAK7C,IAAX;AAAiB8C,MAAAA,MAAM,EAAE,KAAzB;AAAgCC,MAAAA,MAAM,EAAET;AAAxC,KAAnB,CAAd;;AAEApB,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS6B,OAAT,EAAkB;AACvCnB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,QAAJ,CAAa,KAAKO,QAAlB,EAA4BkD,OAA5B,EAAqC,KAAKjD,SAA1C,CAAjB;AACD,KAFsB,CAErByB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAN,IAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,MAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,KAFD;;AAIA,QAAIhC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,MAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,WAAO0B,QAAQ,CAACX,OAAhB;AACD,GAlCD;AAoCA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,gBAAgB,CAACsD,OAAjB,GAA2B,SAASA,OAAT,CAAiBC,SAAjB,EAA4B/C,QAA5B,EAAsC;AAC/D,QAAI0B,QAAQ,GAAGhD,CAAC,CAACiD,KAAF,EAAf;;AAEA,QAAIZ,OAAO,GAAG,KAAKpB,QAAL,CAAcqD,OAAd,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqC;AAACP,MAAAA,MAAM,EAAE,KAAT;AAAgBD,MAAAA,GAAG,EAAEK;AAArB,KAArC,CAAd;;AAEAhC,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS6B,OAAT,EAAkB;AACvCnB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,QAAJ,CAAa,KAAKO,QAAlB,EAA4BkD,OAA5B,EAAqC,KAAKjD,SAA1C,CAAjB;AACD,KAFsB,CAErByB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAN,IAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,MAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,KAFD;;AAIA,QAAIhC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,MAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,WAAO0B,QAAQ,CAACX,OAAhB;AACD,GAlBD;AAoBA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,gBAAgB,CAACE,GAAjB,GAAuB,SAASA,GAAT,CAAayD,OAAb,EAAsB;AAC3C,WAAO,IAAI7D,WAAJ,CAAgB,KAAKK,QAArB,EAA+BwD,OAA/B,CAAP;AACD,GAFD;AAIA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACA3D,EAAAA,gBAAgB,CAAC4D,MAAjB,GAA0B,SAASA,MAAT,GAAkB;AAC1C,WAAO,KAAKxD,SAAZ;AACD,GAFD;;AAIAJ,EAAAA,gBAAgB,CAACX,IAAI,CAACwE,OAAL,CAAaC,MAAd,CAAhB,GAAwC,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;AACvE,WAAO3E,IAAI,CAACwE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,GAFD;;AAIA,SAAOhE,gBAAP;AACD,CA9TD;AAiUA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,QAAQ,GAAG,SAASA,QAAT,CAAkBG,OAAlB,EAA2BkE,QAA3B,EAAqCC,QAArC,EAA+C;AACxD;AACA,OAAK9D,SAAL,GAAiB8D,QAAjB;AAEA5E,EAAAA,IAAI,CAAC6E,SAAL,CAAeC,WAAf,CAA2BC,IAA3B,CAAgC,IAAhC,EAAsCtE,OAAtC,EAA+CkE,QAA/C,EAAyD,KAAK7D,SAA9D;AACD,CALD;;AAOAhB,CAAC,CAACkF,MAAF,CAAS1E,QAAQ,CAACuE,SAAlB,EAA6B7E,IAAI,CAAC6E,SAAlC;;AACAvE,QAAQ,CAACuE,SAAT,CAAmBC,WAAnB,GAAiCxE,QAAjC;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,QAAQ,CAACuE,SAAT,CAAmBI,WAAnB,GAAiC,SAASA,WAAT,CAAqBlB,OAArB,EAA8B;AAC7D,SAAO,IAAIxD,YAAJ,CAAiB,KAAKM,QAAtB,EAAgCkD,OAAhC,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAzD,QAAQ,CAACuE,SAAT,CAAmBP,MAAnB,GAA4B,SAASA,MAAT,GAAkB;AAC5C,MAAIY,KAAK,GAAG,EAAZ;;AACApF,EAAAA,CAAC,CAACqF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAACvF,CAAC,CAACwF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAEvF,CAAC,CAACqB,UAAF,CAAaiE,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUA5E,QAAQ,CAACuE,SAAT,CAAmB9E,IAAI,CAACwE,OAAL,CAAaC,MAAhC,IAA0C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;AACzE,SAAO3E,IAAI,CAACwE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAFD;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAnE,YAAY,GAAG,SAASA,YAAT,CAAsBE,OAAtB,EAA+BsD,OAA/B,EAAwCM,OAAxC,EAAiD;AAC9D,OAAKxD,QAAL,GAAgBJ,OAAhB,CAD8D,CAG9D;;AACA,OAAK8E,UAAL,GAAkBxB,OAAO,CAACyB,WAA1B,CAJ8D,CAIvB;;AACvC,OAAKnB,OAAL,GAAeN,OAAO,CAAC0B,QAAvB,CAL8D,CAK7B;;AACjC,OAAKC,QAAL,GAAgB3B,OAAO,CAAC4B,SAAxB,CAN8D,CAM3B;;AACnC,OAAKC,UAAL,GAAkB1F,WAAW,CAACuD,eAAZ,CAA4BM,OAAO,CAAC8B,WAApC,CAAlB,CAP8D,CAOM;;AACpE,OAAKC,OAAL,GAAe5F,WAAW,CAACuD,eAAZ,CAA4BM,OAAO,CAACgC,QAApC,CAAf,CAR8D,CAQA;;AAC9D,OAAKC,QAAL,GAAgBjC,OAAO,CAACkC,SAAxB,CAT8D,CAS3B;;AACnC,OAAKC,UAAL,GAAkBnC,OAAO,CAACoC,WAA1B,CAV8D,CAUvB;;AACvC,OAAKC,cAAL,GAAsBrC,OAAO,CAACsC,eAA9B,CAX8D,CAWf;;AAC/C,OAAKC,oBAAL,GAA4BvC,OAAO,CAACwC,sBAApC,CAZ8D,CAYF;;AAC5D,OAAKC,aAAL,GAAqBzC,OAAO,CAAC0C,cAA7B,CAb8D,CAajB;;AAC7C,OAAKC,SAAL,GAAiB3C,OAAO,CAAC4C,UAAzB,CAd8D,CAczB;;AACrC,OAAKC,eAAL,GAAuB1G,WAAW,CAAC2G,OAAZ,CAAoB9C,OAAO,CAAC+C,gBAA5B,CAAvB,CAf8D,CAeQ;;AACtE,OAAKC,kBAAL,GAA0B7G,WAAW,CAAC2G,OAAZ,CAAoB9C,OAAO,CAACiD,mBAA5B,CAA1B,CAhB8D,CAgBc;;AAC5E,OAAKC,2BAAL,GAAmC/G,WAAW,CAAC2G,OAAZ,CAAoB9C,OAAO,CAACmD,6BAA5B,CAAnC,CAjB8D,CAiBiC;;AAC/F,OAAKC,sBAAL,GAA8BjH,WAAW,CAAC2G,OAAZ,CAAoB9C,OAAO,CAACqD,uBAA5B,CAA9B,CAlB8D,CAkBsB;;AACpF,OAAKC,yBAAL,GAAiCnH,WAAW,CAAC2G,OAAZ,CAAoB9C,OAAO,CAACuD,2BAA5B,CAAjC,CAnB8D,CAmB6B;;AAC3F,OAAKC,MAAL,GAAcxD,OAAO,CAACwD,MAAtB,CApB8D,CAoBhC;;AAC9B,OAAKC,WAAL,GAAmBzD,OAAO,CAAC0D,YAA3B,CArB8D,CAqBrB;;AACzC,OAAKC,WAAL,GAAmBxH,WAAW,CAAC2G,OAAZ,CAAoB9C,OAAO,CAAC4D,YAA5B,CAAnB,CAtB8D,CAsBA;;AAC9D,OAAKC,2BAAL,GAAmC1H,WAAW,CAAC2G,OAAZ,CAAoB9C,OAAO,CAAC8D,8BAA5B,CAAnC,CAvB8D,CAuBkC;;AAChG,OAAKC,yBAAL,GAAiC5H,WAAW,CAAC2G,OAAZ,CAAoB9C,OAAO,CAACgE,4BAA5B,CAAjC,CAxB8D,CAwB8B;;AAC5F,OAAKC,eAAL,GAAuBjE,OAAO,CAACkE,gBAA/B,CAzB8D,CAyBb;;AACjD,OAAKC,gBAAL,GAAwBnE,OAAO,CAACoE,iBAAhC,CA1B8D,CA0BX;;AACnD,OAAKC,YAAL,GAAoBrE,OAAO,CAACsE,aAA5B,CA3B8D,CA2BnB;;AAC3C,OAAKC,GAAL,GAAWvE,OAAO,CAACuE,GAAnB,CA5B8D,CA4BtC;;AACxB,OAAKC,KAAL,GAAaxE,OAAO,CAACwE,KAArB,CA7B8D,CA6BlC;AAE5B;;AACA,OAAKC,QAAL,GAAgBC,SAAhB;AACA,OAAK3H,SAAL,GAAiB;AAACuD,IAAAA,OAAO,EAAEA,OAAO,IAAI,KAAKA;AAA1B,GAAjB;AACD,CAlCD;;AAoCAqE,MAAM,CAACC,cAAP,CAAsBpI,YAAY,CAACsE,SAAnC,EACE,QADF,EACY;AACRjE,EAAAA,GAAG,EAAE,eAAW;AACd,QAAI,CAAC,KAAK4H,QAAV,EAAoB;AAClB,WAAKA,QAAL,GAAgB,IAAIhI,WAAJ,CAAgB,KAAKK,QAArB,EAA+B,KAAKC,SAAL,CAAeuD,OAA9C,CAAhB;AACD;;AAED,WAAO,KAAKmE,QAAZ;AACD;AAPO,CADZ;AAWA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAjI,YAAY,CAACsE,SAAb,CAAuB+D,KAAvB,GAA+B,SAASA,KAAT,CAAe1H,QAAf,EAAyB;AACtD,SAAO,KAAK2H,MAAL,CAAYD,KAAZ,CAAkB1H,QAAlB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAX,YAAY,CAACsE,SAAb,CAAuBiE,YAAvB,GAAsC,SAASA,YAAT,GAAwB;AAC5D,SAAO,KAAKD,MAAL,CAAYC,YAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAvI,YAAY,CAACsE,SAAb,CAAuBP,MAAvB,GAAgC,SAASA,MAAT,GAAkB;AAChD,MAAIY,KAAK,GAAG,EAAZ;;AACApF,EAAAA,CAAC,CAACqF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAACvF,CAAC,CAACwF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAEvF,CAAC,CAACqB,UAAF,CAAaiE,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUA3E,YAAY,CAACsE,SAAb,CAAuB9E,IAAI,CAACwE,OAAL,CAAaC,MAApC,IAA8C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;AAC7E,SAAO3E,IAAI,CAACwE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAFD;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAlE,WAAW,GAAG,SAASA,WAAT,CAAqBC,OAArB,EAA8B4D,OAA9B,EAAuC;AACnD,OAAKxD,QAAL,GAAgBJ,OAAhB,CADmD,CAGnD;;AACA,OAAKK,SAAL,GAAiB;AAACuD,IAAAA,OAAO,EAAEA;AAAV,GAAjB;AACA,OAAKtD,IAAL,0BAA4BsD,OAA5B,EALmD,CAOnD;;AACA,OAAK0E,aAAL,GAAqBN,SAArB;AACD,CATD;AAWA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAjI,WAAW,CAACqE,SAAZ,CAAsB+D,KAAtB,GAA8B,SAASA,KAAT,CAAe1H,QAAf,EAAyB;AACrD,MAAI0B,QAAQ,GAAGhD,CAAC,CAACiD,KAAF,EAAf;;AACA,MAAIZ,OAAO,GAAG,KAAKpB,QAAL,CAAc+H,KAAd,CAAoB;AAAChF,IAAAA,GAAG,EAAE,KAAK7C,IAAX;AAAiB8C,IAAAA,MAAM,EAAE;AAAzB,GAApB,CAAd;;AAEA5B,EAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS6B,OAAT,EAAkB;AACvCnB,IAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI3C,YAAJ,CAAiB,KAAKM,QAAtB,EAAgCkD,OAAhC,EAAyC,KAAKjD,SAAL,CAAeuD,OAAxD,CAAjB;AACD,GAFsB,CAErB9B,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAN,EAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,IAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,GAFD;;AAIA,MAAIhC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,IAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,SAAO0B,QAAQ,CAACX,OAAhB;AACD,CAjBD;;AAmBAyG,MAAM,CAACC,cAAP,CAAsBnI,WAAW,CAACqE,SAAlC,EACE,cADF,EACkB;AACdjE,EAAAA,GAAG,EAAE,eAAW;AACd,QAAI,CAAC,KAAKmI,aAAV,EAAyB;AACvB,WAAKA,aAAL,GAAqB,IAAI9I,eAAJ,CAAoB,KAAKY,QAAzB,EAAmC,KAAKC,SAAL,CAAeuD,OAAlD,CAArB;AACD;;AACD,WAAO,KAAK0E,aAAZ;AACD;AANa,CADlB;AAUA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAvI,WAAW,CAACqE,SAAZ,CAAsBP,MAAtB,GAA+B,SAASA,MAAT,GAAkB;AAC/C,SAAO,KAAKxD,SAAZ;AACD,CAFD;;AAIAN,WAAW,CAACqE,SAAZ,CAAsB9E,IAAI,CAACwE,OAAL,CAAaC,MAAnC,IAA6C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;AAC5E,SAAO3E,IAAI,CAACwE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAFD;;AAIAsE,MAAM,CAACC,OAAP,GAAiB;AACf5I,EAAAA,QAAQ,EAAEA,QADK;AAEfC,EAAAA,QAAQ,EAAEA,QAFK;AAGfC,EAAAA,YAAY,EAAEA,YAHC;AAIfC,EAAAA,WAAW,EAAEA;AAJE,CAAjB","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar ParticipantList = require('./room/participant').ParticipantList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar RoomList;\nvar RoomPage;\nvar RoomInstance;\nvar RoomContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Insights.V1.RoomList\n *\n * @param {Twilio.Insights.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nRoomList = function RoomList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function rooms\n   * @memberof Twilio.Insights.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Insights.V1.RoomContext}\n   */\n  /* jshint ignore:end */\n  function RoomListInstance(sid) {\n    return RoomListInstance.get(sid);\n  }\n\n  RoomListInstance._version = version;\n  // Path Solution\n  RoomListInstance._solution = {};\n  RoomListInstance._uri = `/Video/Rooms`;\n  /* jshint ignore:start */\n  /**\n   * Streams RoomInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Insights.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_type|list} [opts.roomType] - The room_type\n   * @param {room.codec|list} [opts.codec] - The codec\n   * @param {string} [opts.roomName] - The room_name\n   * @param {Date} [opts.createdAfter] - The created_after\n   * @param {Date} [opts.createdBefore] - The created_before\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  RoomListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists RoomInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Insights.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_type|list} [opts.roomType] - The room_type\n   * @param {room.codec|list} [opts.codec] - The codec\n   * @param {string} [opts.roomName] - The room_name\n   * @param {Date} [opts.createdAfter] - The created_after\n   * @param {Date} [opts.createdBefore] - The created_before\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Insights.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_type|list} [opts.roomType] - The room_type\n   * @param {room.codec|list} [opts.codec] - The codec\n   * @param {string} [opts.roomName] - The room_name\n   * @param {Date} [opts.createdAfter] - The created_after\n   * @param {Date} [opts.createdBefore] - The created_before\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'RoomType': serialize.map(_.get(opts, 'roomType'), function(e) { return e; }),\n      'Codec': serialize.map(_.get(opts, 'codec'), function(e) { return e; }),\n      'RoomName': _.get(opts, 'roomName'),\n      'CreatedAfter': serialize.iso8601DateTime(_.get(opts, 'createdAfter')),\n      'CreatedBefore': serialize.iso8601DateTime(_.get(opts, 'createdBefore')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Insights.V1.RoomList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a room\n   *\n   * @function get\n   * @memberof Twilio.Insights.V1.RoomList#\n   *\n   * @param {string} roomSid - The room_sid\n   *\n   * @returns {Twilio.Insights.V1.RoomContext}\n   */\n  /* jshint ignore:end */\n  RoomListInstance.get = function get(roomSid) {\n    return new RoomContext(this._version, roomSid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Insights.V1.RoomList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  RoomListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  RoomListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return RoomListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Insights.V1.RoomPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RoomSolution} solution - Path solution\n *\n * @returns RoomPage\n */\n/* jshint ignore:end */\nRoomPage = function RoomPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(RoomPage.prototype, Page.prototype);\nRoomPage.prototype.constructor = RoomPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of RoomInstance\n *\n * @function getInstance\n * @memberof Twilio.Insights.V1.RoomPage#\n *\n * @param {RoomPayload} payload - Payload response from the API\n *\n * @returns RoomInstance\n */\n/* jshint ignore:end */\nRoomPage.prototype.getInstance = function getInstance(payload) {\n  return new RoomInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.RoomPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRoomPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Insights.V1.RoomInstance\n *\n * @property {string} accountSid - The account_sid\n * @property {string} roomSid - The room_sid\n * @property {string} roomName - The room_name\n * @property {Date} createTime - The create_time\n * @property {Date} endTime - The end_time\n * @property {room.room_type} roomType - The room_type\n * @property {room.room_status} roomStatus - The room_status\n * @property {string} statusCallback - The status_callback\n * @property {string} statusCallbackMethod - The status_callback_method\n * @property {room.created_method} createdMethod - The created_method\n * @property {room.end_reason} endReason - The end_reason\n * @property {number} maxParticipants - The max_participants\n * @property {number} uniqueParticipants - The unique_participants\n * @property {number} uniqueParticipantIdentities -\n *          The unique_participant_identities\n * @property {number} concurrentParticipants - The concurrent_participants\n * @property {number} maxConcurrentParticipants - The max_concurrent_participants\n * @property {room.codec} codecs - The codecs\n * @property {room.twilio_realm} mediaRegion - The media_region\n * @property {number} durationSec - The duration_sec\n * @property {number} totalParticipantDurationSec -\n *          The total_participant_duration_sec\n * @property {number} totalRecordingDurationSec - The total_recording_duration_sec\n * @property {room.processing_state} processingState - The processing_state\n * @property {boolean} recordingEnabled - The recording_enabled\n * @property {room.edge_location} edgeLocation - The edge_location\n * @property {string} url - The url\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {RoomPayload} payload - The instance payload\n * @param {sid_like} roomSid - The room_sid\n */\n/* jshint ignore:end */\nRoomInstance = function RoomInstance(version, payload, roomSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.roomSid = payload.room_sid; // jshint ignore:line\n  this.roomName = payload.room_name; // jshint ignore:line\n  this.createTime = deserialize.iso8601DateTime(payload.create_time); // jshint ignore:line\n  this.endTime = deserialize.iso8601DateTime(payload.end_time); // jshint ignore:line\n  this.roomType = payload.room_type; // jshint ignore:line\n  this.roomStatus = payload.room_status; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n  this.createdMethod = payload.created_method; // jshint ignore:line\n  this.endReason = payload.end_reason; // jshint ignore:line\n  this.maxParticipants = deserialize.integer(payload.max_participants); // jshint ignore:line\n  this.uniqueParticipants = deserialize.integer(payload.unique_participants); // jshint ignore:line\n  this.uniqueParticipantIdentities = deserialize.integer(payload.unique_participant_identities); // jshint ignore:line\n  this.concurrentParticipants = deserialize.integer(payload.concurrent_participants); // jshint ignore:line\n  this.maxConcurrentParticipants = deserialize.integer(payload.max_concurrent_participants); // jshint ignore:line\n  this.codecs = payload.codecs; // jshint ignore:line\n  this.mediaRegion = payload.media_region; // jshint ignore:line\n  this.durationSec = deserialize.integer(payload.duration_sec); // jshint ignore:line\n  this.totalParticipantDurationSec = deserialize.integer(payload.total_participant_duration_sec); // jshint ignore:line\n  this.totalRecordingDurationSec = deserialize.integer(payload.total_recording_duration_sec); // jshint ignore:line\n  this.processingState = payload.processing_state; // jshint ignore:line\n  this.recordingEnabled = payload.recording_enabled; // jshint ignore:line\n  this.edgeLocation = payload.edge_location; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {roomSid: roomSid || this.roomSid, };\n};\n\nObject.defineProperty(RoomInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new RoomContext(this._version, this._solution.roomSid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Insights.V1.RoomInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Insights.V1.RoomInstance#\n *\n * @returns {Twilio.Insights.V1.RoomContext.ParticipantList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.RoomInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRoomInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Insights.V1.RoomContext\n *\n * @property {Twilio.Insights.V1.RoomContext.ParticipantList} participants -\n *          participants resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} roomSid - The room_sid\n */\n/* jshint ignore:end */\nRoomContext = function RoomContext(version, roomSid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {roomSid: roomSid, };\n  this._uri = `/Video/Rooms/${roomSid}`;\n\n  // Dependents\n  this._participants = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Insights.V1.RoomContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.roomSid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(RoomContext.prototype,\n  'participants', {\n    get: function() {\n      if (!this._participants) {\n        this._participants = new ParticipantList(this._version, this._solution.roomSid);\n      }\n      return this._participants;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Insights.V1.RoomContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nRoomContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  RoomList: RoomList,\n  RoomPage: RoomPage,\n  RoomInstance: RoomInstance,\n  RoomContext: RoomContext\n};\n"]},"metadata":{},"sourceType":"script"}
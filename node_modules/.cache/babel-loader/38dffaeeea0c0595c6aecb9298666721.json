{"ast":null,"code":"\"use strict\";\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _assign = require(\"babel-runtime/core-js/object/assign\");\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _metadata = require(\"babel-runtime/core-js/reflect/metadata\");\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _defineProperty = require(\"babel-runtime/core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getOwnPropertyDescriptor = require(\"babel-runtime/core-js/object/get-own-property-descriptor\");\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = (0, _getOwnPropertyDescriptor2.default)(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && (0, _defineProperty2.default)(target, key, r), r;\n};\n\nvar __metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof _metadata2.default === \"function\") return (0, _metadata2.default)(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PushNotification = exports.Client = exports.User = void 0;\n\nvar events_1 = require(\"events\");\n\nvar logger_1 = require(\"./logger\");\n\nvar configuration_1 = require(\"./configuration\");\n\nvar user_1 = require(\"./user\");\n\nObject.defineProperty(exports, \"User\", {\n  enumerable: true,\n  get: function get() {\n    return user_1.User;\n  }\n});\n\nvar publicchannels_1 = require(\"./data/publicchannels\");\n\nvar network_1 = require(\"./services/network\");\n\nvar notificationtypes_1 = require(\"./interfaces/notificationtypes\");\n\nvar twilsock_1 = require(\"twilsock\");\n\nvar twilio_notifications_1 = require(\"twilio-notifications\");\n\nvar twilio_sync_1 = require(\"twilio-sync\");\n\nvar twilio_mcs_client_1 = require(\"twilio-mcs-client\");\n\nvar channels_1 = require(\"./data/channels\");\n\nvar users_1 = require(\"./data/users\");\n\nvar typingindicator_1 = require(\"./services/typingindicator\");\n\nvar userchannels_1 = require(\"./data/userchannels\");\n\nvar pushnotification_1 = require(\"./pushnotification\");\n\nObject.defineProperty(exports, \"PushNotification\", {\n  enumerable: true,\n  get: function get() {\n    return pushnotification_1.PushNotification;\n  }\n});\n\nvar util_1 = require(\"./util\");\n\nvar twilio_sdk_type_validator_1 = require(\"twilio-sdk-type-validator\");\n\nvar commandexecutor_1 = require(\"./commandexecutor\");\n\nvar log = logger_1.Logger.scope('Client');\n\nvar SDK_VERSION = require('./../package.json').version;\n\nvar ClientServices = function ClientServices() {\n  (0, _classCallCheck3.default)(this, ClientServices);\n};\n/**\n * A Client is a starting point to access Twilio Programmable Chat functionality.\n *\n * @property {Client#ConnectionState} connectionState - Client connection state\n * @property {Boolean} reachabilityEnabled - Client reachability state\n * @property {User} user - Information for logged in user\n * @property {String} version - Current version of Chat client\n *\n * @fires Client#connectionError\n * @fires Client#connectionStateChanged\n * @fires Client#channelAdded\n * @fires Client#channelInvited\n * @fires Client#channelJoined\n * @fires Client#channelLeft\n * @fires Client#channelRemoved\n * @fires Client#channelUpdated\n * @fires Client#memberJoined\n * @fires Client#memberLeft\n * @fires Client#memberUpdated\n * @fires Client#messageAdded\n * @fires Client#messageRemoved\n * @fires Client#messageUpdated\n * @fires Client#pushNotification\n * @fires Client#tokenAboutToExpire\n * @fires Client#tokenExpired\n * @fires Client#typingEnded\n * @fires Client#typingStarted\n * @fires Client#userSubscribed\n * @fires Client#userUnsubscribed\n * @fires Client#userUpdated\n */\n\n\nvar Client = function (_events_1$EventEmitte) {\n  (0, _inherits3.default)(Client, _events_1$EventEmitte);\n\n  function Client(token) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    (0, _classCallCheck3.default)(this, Client);\n\n    var _a;\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Client.__proto__ || (0, _getPrototypeOf2.default)(Client)).call(this));\n\n    _this.options = options;\n    _this.connectionState = 'connecting';\n    _this.channelsPromise = null;\n    _this.configurationPromise = null;\n    _this.version = SDK_VERSION;\n    _this.parsePushNotification = Client.parsePushNotification;\n\n    if (!_this.options.disableDeepClone) {\n      var _options = (0, _assign2.default)((0, _assign2.default)({}, _this.options), {\n        transport: undefined,\n        twilsockClient: undefined\n      });\n\n      _options = util_1.deepClone(_options);\n      _options.transport = _this.options.transport;\n      _options.twilsockClient = _this.options.twilsockClient;\n      _this.options = _options;\n    }\n\n    _this.options.logLevel = _this.options.logLevel || 'silent';\n    log.setLevel(_this.options.logLevel);\n    var productId = _this.options.productId = 'ip_messaging'; // Filling ClientMetadata\n\n    _this.options.clientMetadata = _this.options.clientMetadata || {};\n\n    if (!_this.options.clientMetadata.hasOwnProperty('type')) {\n      _this.options.clientMetadata.type = 'chat';\n    }\n\n    if (!_this.options.clientMetadata.hasOwnProperty('sdk')) {\n      _this.options.clientMetadata.sdk = 'JS';\n      _this.options.clientMetadata.sdkv = SDK_VERSION;\n    } // Enable session local storage for Sync\n\n\n    _this.options.Sync = _this.options.Sync || {};\n\n    if (!((_a = _this.options.Sync) === null || _a === void 0 ? void 0 : _a.enableSessionStorage)) {\n      _this.options.Sync.enableSessionStorage = true;\n    }\n\n    if (_this.options.region) {\n      _this.options.Sync.region = _this.options.region;\n    }\n\n    if (!token) {\n      throw new Error('A valid Twilio token should be provided');\n    }\n\n    _this.services = new ClientServices();\n    _this.options.twilsockClient = _this.options.twilsockClient || new twilsock_1.Twilsock(token, productId, _this.options);\n    _this.options.transport = _this.options.transport || _this.options.twilsockClient;\n    _this.options.notificationsClient = _this.options.notificationsClient || new twilio_notifications_1.Notifications(token, _this.options);\n    _this.options.syncClient = _this.options.syncClient || new twilio_sync_1.SyncClient(token, _this.options);\n    _this.services.syncClient = _this.options.syncClient;\n    _this.services.transport = _this.options.transport;\n    _this.services.twilsockClient = _this.options.twilsockClient;\n    _this.services.notificationClient = _this.options.notificationsClient;\n    var configurationOptions = options.Chat || options.IPMessaging || options || {};\n    var region = configurationOptions.region || options.region;\n    var baseUrl = configurationOptions.apiUri || configurationOptions.typingUri || \"https://aim.\" + (region || 'us1') + \".twilio.com\";\n    _this.services.commandExecutor = new commandexecutor_1.CommandExecutor(baseUrl, {\n      transport: _this.options.transport\n    }, productId);\n    _this.configurationPromise = _this.services.commandExecutor.fetchResource('Client/v1/Configuration');\n\n    _this.configurationPromise.then(function (configurationResponse) {\n      _this.configuration = new configuration_1.Configuration(_this.options, configurationResponse, log);\n      _this.services.typingIndicator = new typingindicator_1.TypingIndicator(_this.getChannelBySid.bind(_this), _this.configuration, _this.services);\n      _this.services.network = new network_1.Network(_this.configuration, _this.services);\n      _this.services.users = new users_1.Users(_this.configuration, _this.services);\n\n      _this.services.users.on('userSubscribed', _this.emit.bind(_this, 'userSubscribed'));\n\n      _this.services.users.on('userUpdated', function (args) {\n        return _this.emit('userUpdated', args);\n      });\n\n      _this.services.users.on('userUnsubscribed', _this.emit.bind(_this, 'userUnsubscribed'));\n\n      _this.services.twilsockClient.on('tokenAboutToExpire', function (ttl) {\n        return _this.emit('tokenAboutToExpire', ttl);\n      });\n\n      _this.services.twilsockClient.on('tokenExpired', function () {\n        return _this.emit('tokenExpired');\n      });\n\n      _this.services.twilsockClient.on('connectionError', function (error) {\n        return _this.emit('connectionError', error);\n      });\n\n      _this.channels = new channels_1.Channels(_this.configuration, _this.services);\n\n      _this.channels.on('channelAdded', _this.emit.bind(_this, 'channelAdded'));\n\n      _this.channels.on('channelInvited', _this.emit.bind(_this, 'channelInvited'));\n\n      _this.channels.on('channelRemoved', _this.emit.bind(_this, 'channelRemoved'));\n\n      _this.channels.on('channelJoined', _this.emit.bind(_this, 'channelJoined'));\n\n      _this.channels.on('channelLeft', _this.emit.bind(_this, 'channelLeft'));\n\n      _this.channels.on('channelUpdated', function (args) {\n        return _this.emit('channelUpdated', args);\n      });\n\n      _this.channels.on('memberJoined', _this.emit.bind(_this, 'memberJoined'));\n\n      _this.channels.on('memberLeft', _this.emit.bind(_this, 'memberLeft'));\n\n      _this.channels.on('memberUpdated', function (args) {\n        return _this.emit('memberUpdated', args);\n      });\n\n      _this.channels.on('messageAdded', _this.emit.bind(_this, 'messageAdded'));\n\n      _this.channels.on('messageUpdated', function (args) {\n        return _this.emit('messageUpdated', args);\n      });\n\n      _this.channels.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n\n      _this.channels.on('typingStarted', _this.emit.bind(_this, 'typingStarted'));\n\n      _this.channels.on('typingEnded', _this.emit.bind(_this, 'typingEnded'));\n\n      return _this.services.users.myself._ensureFetched();\n    });\n\n    _this.channelsPromise = _this.configurationPromise.then(function () {\n      return _this.channels.fetchChannels();\n    }).then(function () {\n      return _this.channels;\n    });\n\n    _this.services.notificationClient.on('connectionStateChanged', function (state) {\n      var changedConnectionState = null;\n\n      switch (state) {\n        case 'connected':\n          changedConnectionState = 'connected';\n          break;\n\n        case 'denied':\n          changedConnectionState = 'denied';\n          break;\n\n        case 'disconnecting':\n          changedConnectionState = 'disconnecting';\n          break;\n\n        case 'disconnected':\n          changedConnectionState = 'disconnected';\n          break;\n\n        default:\n          changedConnectionState = 'connecting';\n      }\n\n      if (changedConnectionState !== _this.connectionState) {\n        _this.connectionState = changedConnectionState;\n\n        _this.emit('connectionStateChanged', _this.connectionState);\n      }\n    });\n\n    _this.fpaToken = token;\n    return _this;\n  }\n  /**\n   * These options can be passed to {@link Client#getLocalChannels}.\n   * @typedef {Object} Client#ChannelSortingOptions\n   * @property {('lastMessage'|'friendlyName'|'uniqueName')} [criteria] - Sorting criteria for Channels array\n   * @property {('ascending'|'descending')} [order] - Sorting order. If not present, then default is <code>ascending</code>\n   */\n\n  /**\n   * These options can be passed to Client constructor.\n   * @typedef {Object} Client#ClientOptions\n   * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n   *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n   */\n\n  /**\n   * These options can be passed to {@link Client#createChannel}.\n   * @typedef {Object} Client#CreateChannelOptions\n   * @property {any} [attributes] - Any custom attributes to attach to the Channel\n   * @property {String} [friendlyName] - The non-unique display name of the Channel\n   * @property {Boolean} [isPrivate] - Whether or not this Channel should be visible to uninvited Clients\n   * @property {String} [uniqueName] - The unique identity name of the Channel\n   */\n\n  /**\n   * Connection state of Client.\n   * @typedef {('connecting'|'connected'|'disconnecting'|'disconnected'|'denied')} Client#ConnectionState\n   */\n\n  /**\n   * Notifications channel type.\n   * @typedef {('gcm'|'fcm'|'apn')} Client#NotificationsChannelType\n   */\n\n  /**\n   * Factory method to create Chat client instance.\n   *\n   * @param {String} token - Access token\n   * @param {Client#ClientOptions} [options] - Options to customize the Client\n   * @returns {Promise<Client>}\n   */\n\n\n  (0, _createClass3.default)(Client, [{\n    key: \"subscribeToPushNotifications\",\n    value: function subscribeToPushNotifications(channelType) {\n      var _this2 = this;\n\n      var subscriptions = [];\n      [notificationtypes_1.NotificationTypes.NEW_MESSAGE, notificationtypes_1.NotificationTypes.ADDED_TO_CHANNEL, notificationtypes_1.NotificationTypes.INVITED_TO_CHANNEL, notificationtypes_1.NotificationTypes.REMOVED_FROM_CHANNEL, notificationtypes_1.NotificationTypes.TYPING_INDICATOR, notificationtypes_1.NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {\n        subscriptions.push(_this2.services.notificationClient.subscribe(messageType, channelType));\n      });\n      return _promise2.default.all(subscriptions);\n    }\n  }, {\n    key: \"unsubscribeFromPushNotifications\",\n    value: function unsubscribeFromPushNotifications(channelType) {\n      var _this3 = this;\n\n      var subscriptions = [];\n      [notificationtypes_1.NotificationTypes.NEW_MESSAGE, notificationtypes_1.NotificationTypes.ADDED_TO_CHANNEL, notificationtypes_1.NotificationTypes.INVITED_TO_CHANNEL, notificationtypes_1.NotificationTypes.REMOVED_FROM_CHANNEL, notificationtypes_1.NotificationTypes.TYPING_INDICATOR, notificationtypes_1.NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {\n        subscriptions.push(_this3.services.notificationClient.unsubscribe(messageType, channelType));\n      });\n      return _promise2.default.all(subscriptions);\n    }\n  }, {\n    key: \"initialize\",\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n        var _this4 = this;\n\n        var options;\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.configurationPromise;\n\n              case 2:\n                Client.supportedPushChannels.forEach(function (channelType) {\n                  return _this4.subscribeToPushNotifications(channelType);\n                });\n                this.services.publicChannels = new publicchannels_1.PublicChannels(this, this.services, this.configuration.links.conversations);\n                this.services.userChannels = new userchannels_1.UserChannels(this, this.services, this.configuration.links.myConversations);\n                options = (0, _assign2.default)(this.options);\n                options.transport = null;\n                this.services.mcsClient = new twilio_mcs_client_1.McsClient(this.fpaToken, this.configuration.links.mediaService, options);\n                _context.next = 10;\n                return this.services.typingIndicator.initialize();\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initialize() {\n        return _ref.apply(this, arguments);\n      }\n\n      return initialize;\n    }()\n    /**\n     * Gracefully shutting down library instance.\n     * @public\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"shutdown\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.services.twilsockClient.disconnect();\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function shutdown() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return shutdown;\n    }()\n    /**\n     * Update the token used by the Client and re-register with Programmable Chat services.\n     * @param {String} token - Access token\n     * @public\n     * @returns {Promise<Client>}\n     */\n\n  }, {\n    key: \"updateToken\",\n    value: function () {\n      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(token) {\n        var _this5 = this;\n\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                log.info('updateToken');\n\n                if (!(this.fpaToken === token)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this);\n\n              case 3:\n                _context3.next = 5;\n                return this.services.twilsockClient.updateToken(token).then(function () {\n                  return _this5.fpaToken = token;\n                }).then(function () {\n                  return _this5.services.mcsClient.updateToken(token);\n                }).then(function () {\n                  return _this5.configurationPromise;\n                });\n\n              case 5:\n                return _context3.abrupt(\"return\", this);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateToken(_x2) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return updateToken;\n    }()\n    /**\n     * Get a known Channel by its SID.\n     * @param {String} channelSid - Channel sid\n     * @returns {Promise<Channel>}\n     */\n\n  }, {\n    key: \"getChannelBySid\",\n    value: function () {\n      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(channelSid) {\n        var _this6 = this;\n\n        return _regenerator2.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.channels.myChannelsRead.promise.then(function () {\n                  return _this6.channels.getChannel(channelSid).then(function (channel) {\n                    return channel || _this6.services.publicChannels.getChannelBySid(channelSid).then(function (x) {\n                      return _this6.channels.pushChannel(x);\n                    });\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getChannelBySid(_x3) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return getChannelBySid;\n    }()\n    /**\n     * Get a known Channel by its unique identifier name.\n     * @param {String} uniqueName - The unique identifier name of the Channel to get\n     * @returns {Promise<Channel>}\n     */\n\n  }, {\n    key: \"getChannelByUniqueName\",\n    value: function () {\n      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(uniqueName) {\n        var _this7 = this;\n\n        return _regenerator2.default.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.channels.myChannelsRead.promise.then(function () {\n                  return _this7.services.publicChannels.getChannelByUniqueName(uniqueName).then(function (x) {\n                    return _this7.channels.pushChannel(x);\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getChannelByUniqueName(_x4) {\n        return _ref5.apply(this, arguments);\n      }\n\n      return getChannelByUniqueName;\n    }()\n    /**\n     * Get the current list of all subscribed Channels.\n     * @returns {Promise<Paginator<Channel>>}\n     */\n\n  }, {\n    key: \"getSubscribedChannels\",\n    value: function getSubscribedChannels(args) {\n      return this.channelsPromise.then(function (channels) {\n        return channels.getChannels(args);\n      });\n    }\n    /**\n     * Get array of Channels locally known to Client in provided sorting order.\n     * Locally known channels are the ones created and/or joined during client runtime and currently logged in User subscribed Channels.\n     * To ensure full list of subscribed Channels fetched - call the {@link Client#getSubscribedChannels} method\n     * and fetch all pages with help of {@link Paginator#nextPage} method.\n     * @param {Client#ChannelSortingOptions} [sortingOptions] - Options for the Channel sorting\n     * @returns {Promise<Array<Channel>>}\n     */\n\n  }, {\n    key: \"getLocalChannels\",\n    value: function getLocalChannels(sortingOptions) {\n      return this.channelsPromise.then(function (channels) {\n        var result = [];\n        channels.channels.forEach(function (value) {\n          result.push(value);\n        });\n        var sortingOrder = (sortingOptions === null || sortingOptions === void 0 ? void 0 : sortingOptions.order) || 'ascending';\n\n        if (sortingOptions && sortingOptions.criteria) {\n          if (sortingOptions.criteria === 'lastMessage') {\n            result.sort(function (a, b) {\n              return Client.compareChannelsByLastMessage(a, b, sortingOrder);\n            });\n          } else if (sortingOptions.criteria === 'uniqueName') {\n            result.sort(function (a, b) {\n              return Client.compareChannelsByStringProperty(a.uniqueName, b.uniqueName, sortingOrder);\n            });\n          } else if (sortingOptions.criteria === 'friendlyName') {\n            result.sort(function (a, b) {\n              return Client.compareChannelsByStringProperty(a.friendlyName, b.friendlyName, sortingOrder);\n            });\n          }\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"getPublicChannelDescriptors\",\n\n    /**\n     * Get the public channels directory content.\n     * @returns {Promise<Paginator<ChannelDescriptor>>}\n     */\n    value: function getPublicChannelDescriptors() {\n      return this.services.publicChannels.getChannels();\n    }\n    /**\n     * Get the User's (created by, joined or invited to) channels directory content.\n     * @returns {Promise<Paginator<ChannelDescriptor>>}\n     */\n\n  }, {\n    key: \"getUserChannelDescriptors\",\n    value: function getUserChannelDescriptors() {\n      return this.services.userChannels.getChannels();\n    }\n    /**\n     * Create a Channel on the server and subscribe to its events.\n     * Default options are public Channel type with empty uniqueName and friendlyName.\n     * @param {Client#CreateChannelOptions} [options] - Options for the Channel\n     * @returns {Promise<Channel>}\n     */\n\n  }, {\n    key: \"createChannel\",\n    value: function createChannel(options) {\n      options = options || {};\n      return this.channelsPromise.then(function (channelsEntity) {\n        return channelsEntity.addChannel(options);\n      });\n    }\n    /**\n     * Registers for push notifications.\n     * @param {Client#NotificationsChannelType} channelType - 'gcm', 'apn' and 'fcm' are supported\n     * @param {string} registrationId - Push notification id provided by platform\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"setPushRegistrationId\",\n    value: function () {\n      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(channelType, registrationId) {\n        var _this8 = this;\n\n        return _regenerator2.default.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.subscribeToPushNotifications(channelType).then(function () {\n                  return _this8.services.notificationClient.setPushRegistrationId(registrationId, channelType);\n                });\n\n              case 2:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function setPushRegistrationId(_x5, _x6) {\n        return _ref6.apply(this, arguments);\n      }\n\n      return setPushRegistrationId;\n    }()\n    /**\n     * Unregisters from push notifications.\n     * @param {Client#NotificationsChannelType} channelType - 'gcm', 'apn' and 'fcm' are supported\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"unsetPushRegistrationId\",\n    value: function () {\n      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(channelType) {\n        return _regenerator2.default.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(Client.supportedPushChannels.indexOf(channelType) === -1)) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                throw new Error('Invalid or unsupported channelType: ' + channelType);\n\n              case 2:\n                _context7.next = 4;\n                return this.unsubscribeFromPushNotifications(channelType);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function unsetPushRegistrationId(_x7) {\n        return _ref7.apply(this, arguments);\n      }\n\n      return unsetPushRegistrationId;\n    }()\n  }, {\n    key: \"handlePushNotification\",\n\n    /**\n     * Handle push notification payload parsing and emits event {@link Client#event:pushNotification} on this {@link Client} instance.\n     * @param {Object} notificationPayload - Push notification payload\n     * @returns {Promise<void>}\n     */\n    value: function () {\n      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(notificationPayload) {\n        return _regenerator2.default.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                log.debug('handlePushNotification, notificationPayload=', notificationPayload);\n                this.emit('pushNotification', Client.parsePushNotification(notificationPayload));\n\n              case 2:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function handlePushNotification(_x8) {\n        return _ref8.apply(this, arguments);\n      }\n\n      return handlePushNotification;\n    }()\n    /**\n     * Gets user for given identity, if it's in subscribed list - then return the user object from it,\n     * if not - then subscribes and adds user to the subscribed list.\n     * @param {String} identity - Identity of User\n     * @returns {Promise<User>} Fully initialized user\n     */\n\n  }, {\n    key: \"getUser\",\n    value: function getUser(identity) {\n      return this.services.users.getUser(identity);\n    }\n    /**\n     * Gets user descriptor for given identity.\n     * @param {String} identity - Identity of User\n     * @returns {Promise<UserDescriptor>} User descriptor\n     */\n\n  }, {\n    key: \"getUserDescriptor\",\n    value: function () {\n      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(identity) {\n        return _regenerator2.default.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", this.services.users.getUserDescriptor(identity));\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getUserDescriptor(_x9) {\n        return _ref9.apply(this, arguments);\n      }\n\n      return getUserDescriptor;\n    }()\n    /**\n     * @returns {Promise<Array<User>>} List of subscribed User objects\n     */\n\n  }, {\n    key: \"getSubscribedUsers\",\n    value: function () {\n      var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {\n        return _regenerator2.default.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", this.services.users.getSubscribedUsers());\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getSubscribedUsers() {\n        return _ref10.apply(this, arguments);\n      }\n\n      return getSubscribedUsers;\n    }()\n  }, {\n    key: \"user\",\n    get: function get() {\n      return this.services.users.myself;\n    }\n  }, {\n    key: \"reachabilityEnabled\",\n    get: function get() {\n      return this.configuration.reachabilityEnabled;\n    }\n  }, {\n    key: \"token\",\n    get: function get() {\n      return this.fpaToken;\n    }\n  }], [{\n    key: \"create\",\n    value: function () {\n      var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(token, options) {\n        var client;\n        return _regenerator2.default.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                client = new Client(token, options);\n                _context11.next = 3;\n                return client.initialize();\n\n              case 3:\n                return _context11.abrupt(\"return\", client);\n\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function create(_x10, _x11) {\n        return _ref11.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }, {\n    key: \"compareChannelsByLastMessage\",\n    value: function compareChannelsByLastMessage(a, b, order) {\n      if (a.lastMessage && b.lastMessage) {\n        if (a.lastMessage.dateCreated && b.lastMessage.dateCreated) {\n          if (a.lastMessage.dateCreated.getTime() < b.lastMessage.dateCreated.getTime()) {\n            return order === 'ascending' ? -1 : 1;\n          } else {\n            return order === 'ascending' ? 1 : -1;\n          }\n        } else {\n          if (a.lastMessage.dateCreated) {\n            return -1;\n          } else if (b.lastMessage.dateCreated) {\n            return 1;\n          }\n        }\n      }\n\n      if (a.lastMessage) {\n        return -1;\n      } else if (b.lastMessage) {\n        return 1;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"compareChannelsByStringProperty\",\n    value: function compareChannelsByStringProperty(str1, str2, order) {\n      if (str1 && str2) {\n        return order === 'ascending' ? str1.localeCompare(str2) : -1 * str1.localeCompare(str2);\n      } else if (str1) {\n        return -1;\n      } else if (str2) {\n        return 1;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"parsePushNotificationChatData\",\n    value: function parsePushNotificationChatData(data) {\n      var result = {};\n\n      for (var key in Client.supportedPushDataFields) {\n        if (typeof data[key] !== 'undefined' && data[key] !== null) {\n          if (key === 'message_index') {\n            if (util_1.parseToNumber(data[key]) !== null) {\n              result[Client.supportedPushDataFields[key]] = Number(data[key]);\n            }\n          } else {\n            result[Client.supportedPushDataFields[key]] = data[key];\n          }\n        }\n      }\n\n      return result;\n    }\n    /**\n     * Static method for push notification payload parsing. Returns parsed push as {@link PushNotification} object\n     * @param {Object} notificationPayload - Push notification payload\n     * @returns {PushNotification|Error}\n     */\n\n  }, {\n    key: \"parsePushNotification\",\n    value: function parsePushNotification(notificationPayload) {\n      log.debug('parsePushNotification, notificationPayload=', notificationPayload); // APNS specifics\n\n      if (typeof notificationPayload.aps !== 'undefined') {\n        if (!notificationPayload.twi_message_type) {\n          throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n        }\n\n        var data = Client.parsePushNotificationChatData(notificationPayload);\n        var apsPayload = notificationPayload.aps;\n        var body = null;\n        var title = null;\n\n        if (typeof apsPayload.alert === 'string') {\n          body = apsPayload.alert || null;\n        } else {\n          body = apsPayload.alert.body || null;\n          title = apsPayload.alert.title || null;\n        }\n\n        return new pushnotification_1.PushNotification({\n          title: title,\n          body: body,\n          sound: apsPayload.sound || null,\n          badge: apsPayload.badge || null,\n          action: apsPayload.category || null,\n          type: notificationPayload.twi_message_type,\n          data: data\n        });\n      } // FCM/GCM specifics\n\n\n      if (typeof notificationPayload.data !== 'undefined') {\n        var dataPayload = notificationPayload.data;\n\n        if (!dataPayload.twi_message_type) {\n          throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n        }\n\n        var _data = Client.parsePushNotificationChatData(notificationPayload.data);\n\n        return new pushnotification_1.PushNotification({\n          title: dataPayload.twi_title || null,\n          body: dataPayload.twi_body || null,\n          sound: dataPayload.twi_sound || null,\n          badge: null,\n          action: dataPayload.twi_action || null,\n          type: dataPayload.twi_message_type,\n          data: _data\n        });\n      }\n\n      throw new Error('Provided push notification payload is not Programmable Chat notification');\n    }\n  }]);\n  return Client;\n}(events_1.EventEmitter);\n\nClient.version = SDK_VERSION;\nClient.supportedPushChannels = ['fcm', 'apn', 'gcm'];\nClient.supportedPushDataFields = {\n  'channel_sid': 'channelSid',\n  'message_sid': 'messageSid',\n  'message_index': 'messageIndex'\n};\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"updateToken\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getChannelBySid\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getChannelByUniqueName\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['undefined', twilio_sdk_type_validator_1.objectSchema('sorting options', {\n  criteria: [twilio_sdk_type_validator_1.literal('lastMessage', 'friendlyName', 'uniqueName'), 'undefined'],\n  order: [twilio_sdk_type_validator_1.literal('ascending', 'descending'), 'undefined']\n})]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getLocalChannels\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['undefined', twilio_sdk_type_validator_1.objectSchema('channel options', {\n  friendlyName: ['string', 'undefined'],\n  isPrivate: ['boolean', 'undefined'],\n  uniqueName: ['string', 'undefined']\n})]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"createChannel\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.literal('gcm', 'fcm', 'apn'), 'string'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"setPushRegistrationId\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.literal('gcm', 'fcm', 'apn')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"unsetPushRegistrationId\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.pureObject), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"handlePushNotification\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getUser\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getUserDescriptor\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync('string', ['undefined', twilio_sdk_type_validator_1.pureObject]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, Object]), __metadata(\"design:returntype\", _promise2.default)], Client, \"create\", null);\n\n__decorate([twilio_sdk_type_validator_1.validateTypes(twilio_sdk_type_validator_1.pureObject), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", pushnotification_1.PushNotification)], Client, \"parsePushNotification\", null);\n\nexports.Client = Client;\nexports.default = Client;\n/**\n * Fired when a Channel becomes visible to the Client.\n * Fired for created and not joined private channels and for all type of channels Client has joined or invited to.\n * @event Client#channelAdded\n * @type {Channel}\n */\n\n/**\n * Fired when the Client is invited to a Channel.\n * @event Client#channelInvited\n * @type {Channel}\n */\n\n/**\n * Fired when the Client joins a Channel.\n * @event Client#channelJoined\n * @type {Channel}\n */\n\n/**\n * Fired when the Client leaves a Channel.\n * @event Client#channelLeft\n * @type {Channel}\n */\n\n/**\n * Fired when a Channel is no longer visible to the Client.\n * @event Client#channelRemoved\n * @type {Channel}\n */\n\n/**\n * Fired when a Channel's attributes or metadata have been updated.\n * During Channel's {@link Client.create| creation and initialization} this event might be fired multiple times\n * for same joined or created Channel as new data is arriving from different sources.\n * @event Client#channelUpdated\n * @type {Object}\n * @property {Channel} channel - Updated Channel\n * @property {Channel#UpdateReason[]} updateReasons - Array of Channel's updated event reasons\n */\n\n/**\n * Fired when Client's connection state has been changed.\n * @event Client#connectionStateChanged\n * @type {Client#ConnectionState}\n */\n\n/**\n * Fired when a Member has joined the Channel.\n * @event Client#memberJoined\n * @type {Member}\n */\n\n/**\n * Fired when a Member has left the Channel.\n * @event Client#memberLeft\n * @type {Member}\n */\n\n/**\n * Fired when a Member's fields has been updated.\n * @event Client#memberUpdated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */\n\n/**\n * Fired when a new Message has been added to the Channel on the server.\n * @event Client#messageAdded\n * @type {Message}\n */\n\n/**\n * Fired when Message is removed from Channel's message list.\n * @event Client#messageRemoved\n * @type {Message}\n */\n\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Client#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n\n/**\n * Fired when token is about to expire and needs to be updated.\n * @event Client#tokenAboutToExpire\n * @type {void}\n */\n\n/**\n * Fired when token is expired.\n * @event Client#tokenExpired\n * @type {void}\n */\n\n/**\n * Fired when a Member has stopped typing.\n * @event Client#typingEnded\n * @type {Member}\n */\n\n/**\n * Fired when a Member has started typing.\n * @event Client#typingStarted\n * @type {Member}\n */\n\n/**\n * Fired when client received (and parsed) push notification via one of push channels (apn, gcm, fcm).\n * @event Client#pushNotification\n * @type {PushNotification}\n */\n\n/**\n * Fired when the Client is subscribed to a User.\n * @event Client#userSubscribed\n * @type {User}\n */\n\n/**\n * Fired when the Client is unsubscribed from a User.\n * @event Client#userUnsubscribed\n * @type {User}\n */\n\n/**\n * Fired when the User's properties or reachability status have been updated.\n * @event Client#userUpdated\n * @type {Object}\n * @property {User} user - Updated User\n * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons\n */\n\n/**\n * Fired when connection is interrupted by unexpected reason\n * @event Client#connectionError\n * @type {Object}\n * @property {Boolean} terminal - twilsock will stop connection attempts\n * @property {String} message - root cause\n * @property {Number} [httpStatusCode] - http status code if available\n * @property {Number} [errorCode] - Twilio public error code if available\n */","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio-chat/browser/client.js"],"names":["_regenerator","require","_regenerator2","_interopRequireDefault","_asyncToGenerator2","_asyncToGenerator3","_promise","_promise2","_assign","_assign2","_getPrototypeOf","_getPrototypeOf2","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_classCallCheck2","_classCallCheck3","_metadata","_metadata2","_defineProperty","_defineProperty2","_typeof2","_typeof3","_getOwnPropertyDescriptor","_getOwnPropertyDescriptor2","obj","__esModule","default","__decorate","undefined","decorators","target","key","desc","c","arguments","length","r","d","Reflect","decorate","i","__metadata","k","v","Object","defineProperty","exports","value","PushNotification","Client","User","events_1","logger_1","configuration_1","user_1","enumerable","get","publicchannels_1","network_1","notificationtypes_1","twilsock_1","twilio_notifications_1","twilio_sync_1","twilio_mcs_client_1","channels_1","users_1","typingindicator_1","userchannels_1","pushnotification_1","util_1","twilio_sdk_type_validator_1","commandexecutor_1","log","Logger","scope","SDK_VERSION","version","ClientServices","_events_1$EventEmitte","token","options","_a","_this","__proto__","call","connectionState","channelsPromise","configurationPromise","parsePushNotification","disableDeepClone","_options","transport","twilsockClient","deepClone","logLevel","setLevel","productId","clientMetadata","hasOwnProperty","type","sdk","sdkv","Sync","enableSessionStorage","region","Error","services","Twilsock","notificationsClient","Notifications","syncClient","SyncClient","notificationClient","configurationOptions","Chat","IPMessaging","baseUrl","apiUri","typingUri","commandExecutor","CommandExecutor","fetchResource","then","configurationResponse","configuration","Configuration","typingIndicator","TypingIndicator","getChannelBySid","bind","network","Network","users","Users","on","emit","args","ttl","error","channels","Channels","myself","_ensureFetched","fetchChannels","state","changedConnectionState","fpaToken","subscribeToPushNotifications","channelType","_this2","subscriptions","NotificationTypes","NEW_MESSAGE","ADDED_TO_CHANNEL","INVITED_TO_CHANNEL","REMOVED_FROM_CHANNEL","TYPING_INDICATOR","CONSUMPTION_UPDATE","forEach","messageType","push","subscribe","all","unsubscribeFromPushNotifications","_this3","unsubscribe","_ref","mark","_callee","_this4","wrap","_callee$","_context","prev","next","supportedPushChannels","publicChannels","PublicChannels","links","conversations","userChannels","UserChannels","myConversations","mcsClient","McsClient","mediaService","initialize","stop","apply","_ref2","_callee2","_callee2$","_context2","disconnect","shutdown","_ref3","_callee3","_this5","_callee3$","_context3","info","abrupt","updateToken","_x2","_ref4","_callee4","channelSid","_this6","_callee4$","_context4","myChannelsRead","promise","getChannel","channel","x","pushChannel","_x3","_ref5","_callee5","uniqueName","_this7","_callee5$","_context5","getChannelByUniqueName","_x4","getSubscribedChannels","getChannels","getLocalChannels","sortingOptions","result","sortingOrder","order","criteria","sort","a","b","compareChannelsByLastMessage","compareChannelsByStringProperty","friendlyName","getPublicChannelDescriptors","getUserChannelDescriptors","createChannel","channelsEntity","addChannel","_ref6","_callee6","registrationId","_this8","_callee6$","_context6","setPushRegistrationId","_x5","_x6","_ref7","_callee7","_callee7$","_context7","indexOf","unsetPushRegistrationId","_x7","_ref8","_callee8","notificationPayload","_callee8$","_context8","debug","handlePushNotification","_x8","getUser","identity","_ref9","_callee9","_callee9$","_context9","getUserDescriptor","_x9","_ref10","_callee10","_callee10$","_context10","getSubscribedUsers","reachabilityEnabled","_ref11","_callee11","client","_callee11$","_context11","create","_x10","_x11","lastMessage","dateCreated","getTime","str1","str2","localeCompare","parsePushNotificationChatData","data","supportedPushDataFields","parseToNumber","Number","aps","twi_message_type","apsPayload","body","title","alert","sound","badge","action","category","dataPayload","_data","twi_title","twi_body","twi_sound","twi_action","EventEmitter","validateTypesAsync","nonEmptyString","Function","String","prototype","objectSchema","literal","isPrivate","pureObject","validateTypes"],"mappings":"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":["\"use strict\";\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _assign = require(\"babel-runtime/core-js/object/assign\");\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _metadata = require(\"babel-runtime/core-js/reflect/metadata\");\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _defineProperty = require(\"babel-runtime/core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getOwnPropertyDescriptor = require(\"babel-runtime/core-js/object/get-own-property-descriptor\");\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = (0, _getOwnPropertyDescriptor2.default)(target, key) : desc,\n        d;\n    if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    }return c > 3 && r && (0, _defineProperty2.default)(target, key, r), r;\n};\nvar __metadata = undefined && undefined.__metadata || function (k, v) {\n    if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof _metadata2.default === \"function\") return (0, _metadata2.default)(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PushNotification = exports.Client = exports.User = void 0;\nvar events_1 = require(\"events\");\nvar logger_1 = require(\"./logger\");\nvar configuration_1 = require(\"./configuration\");\nvar user_1 = require(\"./user\");\nObject.defineProperty(exports, \"User\", { enumerable: true, get: function get() {\n        return user_1.User;\n    } });\nvar publicchannels_1 = require(\"./data/publicchannels\");\nvar network_1 = require(\"./services/network\");\nvar notificationtypes_1 = require(\"./interfaces/notificationtypes\");\nvar twilsock_1 = require(\"twilsock\");\nvar twilio_notifications_1 = require(\"twilio-notifications\");\nvar twilio_sync_1 = require(\"twilio-sync\");\nvar twilio_mcs_client_1 = require(\"twilio-mcs-client\");\nvar channels_1 = require(\"./data/channels\");\nvar users_1 = require(\"./data/users\");\nvar typingindicator_1 = require(\"./services/typingindicator\");\nvar userchannels_1 = require(\"./data/userchannels\");\nvar pushnotification_1 = require(\"./pushnotification\");\nObject.defineProperty(exports, \"PushNotification\", { enumerable: true, get: function get() {\n        return pushnotification_1.PushNotification;\n    } });\nvar util_1 = require(\"./util\");\nvar twilio_sdk_type_validator_1 = require(\"twilio-sdk-type-validator\");\nvar commandexecutor_1 = require(\"./commandexecutor\");\nvar log = logger_1.Logger.scope('Client');\nvar SDK_VERSION = require('./../package.json').version;\n\nvar ClientServices = function ClientServices() {\n    (0, _classCallCheck3.default)(this, ClientServices);\n};\n/**\n * A Client is a starting point to access Twilio Programmable Chat functionality.\n *\n * @property {Client#ConnectionState} connectionState - Client connection state\n * @property {Boolean} reachabilityEnabled - Client reachability state\n * @property {User} user - Information for logged in user\n * @property {String} version - Current version of Chat client\n *\n * @fires Client#connectionError\n * @fires Client#connectionStateChanged\n * @fires Client#channelAdded\n * @fires Client#channelInvited\n * @fires Client#channelJoined\n * @fires Client#channelLeft\n * @fires Client#channelRemoved\n * @fires Client#channelUpdated\n * @fires Client#memberJoined\n * @fires Client#memberLeft\n * @fires Client#memberUpdated\n * @fires Client#messageAdded\n * @fires Client#messageRemoved\n * @fires Client#messageUpdated\n * @fires Client#pushNotification\n * @fires Client#tokenAboutToExpire\n * @fires Client#tokenExpired\n * @fires Client#typingEnded\n * @fires Client#typingStarted\n * @fires Client#userSubscribed\n * @fires Client#userUnsubscribed\n * @fires Client#userUpdated\n */\n\n\nvar Client = function (_events_1$EventEmitte) {\n    (0, _inherits3.default)(Client, _events_1$EventEmitte);\n\n    function Client(token) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        (0, _classCallCheck3.default)(this, Client);\n\n        var _a;\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (Client.__proto__ || (0, _getPrototypeOf2.default)(Client)).call(this));\n\n        _this.options = options;\n        _this.connectionState = 'connecting';\n        _this.channelsPromise = null;\n        _this.configurationPromise = null;\n        _this.version = SDK_VERSION;\n        _this.parsePushNotification = Client.parsePushNotification;\n        if (!_this.options.disableDeepClone) {\n            var _options = (0, _assign2.default)((0, _assign2.default)({}, _this.options), { transport: undefined, twilsockClient: undefined });\n            _options = util_1.deepClone(_options);\n            _options.transport = _this.options.transport;\n            _options.twilsockClient = _this.options.twilsockClient;\n            _this.options = _options;\n        }\n        _this.options.logLevel = _this.options.logLevel || 'silent';\n        log.setLevel(_this.options.logLevel);\n        var productId = _this.options.productId = 'ip_messaging';\n        // Filling ClientMetadata\n        _this.options.clientMetadata = _this.options.clientMetadata || {};\n        if (!_this.options.clientMetadata.hasOwnProperty('type')) {\n            _this.options.clientMetadata.type = 'chat';\n        }\n        if (!_this.options.clientMetadata.hasOwnProperty('sdk')) {\n            _this.options.clientMetadata.sdk = 'JS';\n            _this.options.clientMetadata.sdkv = SDK_VERSION;\n        }\n        // Enable session local storage for Sync\n        _this.options.Sync = _this.options.Sync || {};\n        if (!((_a = _this.options.Sync) === null || _a === void 0 ? void 0 : _a.enableSessionStorage)) {\n            _this.options.Sync.enableSessionStorage = true;\n        }\n        if (_this.options.region) {\n            _this.options.Sync.region = _this.options.region;\n        }\n        if (!token) {\n            throw new Error('A valid Twilio token should be provided');\n        }\n        _this.services = new ClientServices();\n        _this.options.twilsockClient = _this.options.twilsockClient || new twilsock_1.Twilsock(token, productId, _this.options);\n        _this.options.transport = _this.options.transport || _this.options.twilsockClient;\n        _this.options.notificationsClient = _this.options.notificationsClient || new twilio_notifications_1.Notifications(token, _this.options);\n        _this.options.syncClient = _this.options.syncClient || new twilio_sync_1.SyncClient(token, _this.options);\n        _this.services.syncClient = _this.options.syncClient;\n        _this.services.transport = _this.options.transport;\n        _this.services.twilsockClient = _this.options.twilsockClient;\n        _this.services.notificationClient = _this.options.notificationsClient;\n        var configurationOptions = options.Chat || options.IPMessaging || options || {};\n        var region = configurationOptions.region || options.region;\n        var baseUrl = configurationOptions.apiUri || configurationOptions.typingUri || \"https://aim.\" + (region || 'us1') + \".twilio.com\";\n        _this.services.commandExecutor = new commandexecutor_1.CommandExecutor(baseUrl, { transport: _this.options.transport }, productId);\n        _this.configurationPromise = _this.services.commandExecutor.fetchResource('Client/v1/Configuration');\n        _this.configurationPromise.then(function (configurationResponse) {\n            _this.configuration = new configuration_1.Configuration(_this.options, configurationResponse, log);\n            _this.services.typingIndicator = new typingindicator_1.TypingIndicator(_this.getChannelBySid.bind(_this), _this.configuration, _this.services);\n            _this.services.network = new network_1.Network(_this.configuration, _this.services);\n            _this.services.users = new users_1.Users(_this.configuration, _this.services);\n            _this.services.users.on('userSubscribed', _this.emit.bind(_this, 'userSubscribed'));\n            _this.services.users.on('userUpdated', function (args) {\n                return _this.emit('userUpdated', args);\n            });\n            _this.services.users.on('userUnsubscribed', _this.emit.bind(_this, 'userUnsubscribed'));\n            _this.services.twilsockClient.on('tokenAboutToExpire', function (ttl) {\n                return _this.emit('tokenAboutToExpire', ttl);\n            });\n            _this.services.twilsockClient.on('tokenExpired', function () {\n                return _this.emit('tokenExpired');\n            });\n            _this.services.twilsockClient.on('connectionError', function (error) {\n                return _this.emit('connectionError', error);\n            });\n            _this.channels = new channels_1.Channels(_this.configuration, _this.services);\n            _this.channels.on('channelAdded', _this.emit.bind(_this, 'channelAdded'));\n            _this.channels.on('channelInvited', _this.emit.bind(_this, 'channelInvited'));\n            _this.channels.on('channelRemoved', _this.emit.bind(_this, 'channelRemoved'));\n            _this.channels.on('channelJoined', _this.emit.bind(_this, 'channelJoined'));\n            _this.channels.on('channelLeft', _this.emit.bind(_this, 'channelLeft'));\n            _this.channels.on('channelUpdated', function (args) {\n                return _this.emit('channelUpdated', args);\n            });\n            _this.channels.on('memberJoined', _this.emit.bind(_this, 'memberJoined'));\n            _this.channels.on('memberLeft', _this.emit.bind(_this, 'memberLeft'));\n            _this.channels.on('memberUpdated', function (args) {\n                return _this.emit('memberUpdated', args);\n            });\n            _this.channels.on('messageAdded', _this.emit.bind(_this, 'messageAdded'));\n            _this.channels.on('messageUpdated', function (args) {\n                return _this.emit('messageUpdated', args);\n            });\n            _this.channels.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n            _this.channels.on('typingStarted', _this.emit.bind(_this, 'typingStarted'));\n            _this.channels.on('typingEnded', _this.emit.bind(_this, 'typingEnded'));\n            return _this.services.users.myself._ensureFetched();\n        });\n        _this.channelsPromise = _this.configurationPromise.then(function () {\n            return _this.channels.fetchChannels();\n        }).then(function () {\n            return _this.channels;\n        });\n        _this.services.notificationClient.on('connectionStateChanged', function (state) {\n            var changedConnectionState = null;\n            switch (state) {\n                case 'connected':\n                    changedConnectionState = 'connected';\n                    break;\n                case 'denied':\n                    changedConnectionState = 'denied';\n                    break;\n                case 'disconnecting':\n                    changedConnectionState = 'disconnecting';\n                    break;\n                case 'disconnected':\n                    changedConnectionState = 'disconnected';\n                    break;\n                default:\n                    changedConnectionState = 'connecting';\n            }\n            if (changedConnectionState !== _this.connectionState) {\n                _this.connectionState = changedConnectionState;\n                _this.emit('connectionStateChanged', _this.connectionState);\n            }\n        });\n        _this.fpaToken = token;\n        return _this;\n    }\n    /**\n     * These options can be passed to {@link Client#getLocalChannels}.\n     * @typedef {Object} Client#ChannelSortingOptions\n     * @property {('lastMessage'|'friendlyName'|'uniqueName')} [criteria] - Sorting criteria for Channels array\n     * @property {('ascending'|'descending')} [order] - Sorting order. If not present, then default is <code>ascending</code>\n     */\n    /**\n     * These options can be passed to Client constructor.\n     * @typedef {Object} Client#ClientOptions\n     * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n     *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n     */\n    /**\n     * These options can be passed to {@link Client#createChannel}.\n     * @typedef {Object} Client#CreateChannelOptions\n     * @property {any} [attributes] - Any custom attributes to attach to the Channel\n     * @property {String} [friendlyName] - The non-unique display name of the Channel\n     * @property {Boolean} [isPrivate] - Whether or not this Channel should be visible to uninvited Clients\n     * @property {String} [uniqueName] - The unique identity name of the Channel\n     */\n    /**\n     * Connection state of Client.\n     * @typedef {('connecting'|'connected'|'disconnecting'|'disconnected'|'denied')} Client#ConnectionState\n     */\n    /**\n     * Notifications channel type.\n     * @typedef {('gcm'|'fcm'|'apn')} Client#NotificationsChannelType\n     */\n    /**\n     * Factory method to create Chat client instance.\n     *\n     * @param {String} token - Access token\n     * @param {Client#ClientOptions} [options] - Options to customize the Client\n     * @returns {Promise<Client>}\n     */\n\n\n    (0, _createClass3.default)(Client, [{\n        key: \"subscribeToPushNotifications\",\n        value: function subscribeToPushNotifications(channelType) {\n            var _this2 = this;\n\n            var subscriptions = [];\n            [notificationtypes_1.NotificationTypes.NEW_MESSAGE, notificationtypes_1.NotificationTypes.ADDED_TO_CHANNEL, notificationtypes_1.NotificationTypes.INVITED_TO_CHANNEL, notificationtypes_1.NotificationTypes.REMOVED_FROM_CHANNEL, notificationtypes_1.NotificationTypes.TYPING_INDICATOR, notificationtypes_1.NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {\n                subscriptions.push(_this2.services.notificationClient.subscribe(messageType, channelType));\n            });\n            return _promise2.default.all(subscriptions);\n        }\n    }, {\n        key: \"unsubscribeFromPushNotifications\",\n        value: function unsubscribeFromPushNotifications(channelType) {\n            var _this3 = this;\n\n            var subscriptions = [];\n            [notificationtypes_1.NotificationTypes.NEW_MESSAGE, notificationtypes_1.NotificationTypes.ADDED_TO_CHANNEL, notificationtypes_1.NotificationTypes.INVITED_TO_CHANNEL, notificationtypes_1.NotificationTypes.REMOVED_FROM_CHANNEL, notificationtypes_1.NotificationTypes.TYPING_INDICATOR, notificationtypes_1.NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {\n                subscriptions.push(_this3.services.notificationClient.unsubscribe(messageType, channelType));\n            });\n            return _promise2.default.all(subscriptions);\n        }\n    }, {\n        key: \"initialize\",\n        value: function () {\n            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n                var _this4 = this;\n\n                var options;\n                return _regenerator2.default.wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                _context.next = 2;\n                                return this.configurationPromise;\n\n                            case 2:\n                                Client.supportedPushChannels.forEach(function (channelType) {\n                                    return _this4.subscribeToPushNotifications(channelType);\n                                });\n                                this.services.publicChannels = new publicchannels_1.PublicChannels(this, this.services, this.configuration.links.conversations);\n                                this.services.userChannels = new userchannels_1.UserChannels(this, this.services, this.configuration.links.myConversations);\n                                options = (0, _assign2.default)(this.options);\n\n                                options.transport = null;\n                                this.services.mcsClient = new twilio_mcs_client_1.McsClient(this.fpaToken, this.configuration.links.mediaService, options);\n                                _context.next = 10;\n                                return this.services.typingIndicator.initialize();\n\n                            case 10:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, this);\n            }));\n\n            function initialize() {\n                return _ref.apply(this, arguments);\n            }\n\n            return initialize;\n        }()\n        /**\n         * Gracefully shutting down library instance.\n         * @public\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"shutdown\",\n        value: function () {\n            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n                return _regenerator2.default.wrap(function _callee2$(_context2) {\n                    while (1) {\n                        switch (_context2.prev = _context2.next) {\n                            case 0:\n                                _context2.next = 2;\n                                return this.services.twilsockClient.disconnect();\n\n                            case 2:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2, this);\n            }));\n\n            function shutdown() {\n                return _ref2.apply(this, arguments);\n            }\n\n            return shutdown;\n        }()\n        /**\n         * Update the token used by the Client and re-register with Programmable Chat services.\n         * @param {String} token - Access token\n         * @public\n         * @returns {Promise<Client>}\n         */\n\n    }, {\n        key: \"updateToken\",\n        value: function () {\n            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(token) {\n                var _this5 = this;\n\n                return _regenerator2.default.wrap(function _callee3$(_context3) {\n                    while (1) {\n                        switch (_context3.prev = _context3.next) {\n                            case 0:\n                                log.info('updateToken');\n\n                                if (!(this.fpaToken === token)) {\n                                    _context3.next = 3;\n                                    break;\n                                }\n\n                                return _context3.abrupt(\"return\", this);\n\n                            case 3:\n                                _context3.next = 5;\n                                return this.services.twilsockClient.updateToken(token).then(function () {\n                                    return _this5.fpaToken = token;\n                                }).then(function () {\n                                    return _this5.services.mcsClient.updateToken(token);\n                                }).then(function () {\n                                    return _this5.configurationPromise;\n                                });\n\n                            case 5:\n                                return _context3.abrupt(\"return\", this);\n\n                            case 6:\n                            case \"end\":\n                                return _context3.stop();\n                        }\n                    }\n                }, _callee3, this);\n            }));\n\n            function updateToken(_x2) {\n                return _ref3.apply(this, arguments);\n            }\n\n            return updateToken;\n        }()\n        /**\n         * Get a known Channel by its SID.\n         * @param {String} channelSid - Channel sid\n         * @returns {Promise<Channel>}\n         */\n\n    }, {\n        key: \"getChannelBySid\",\n        value: function () {\n            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(channelSid) {\n                var _this6 = this;\n\n                return _regenerator2.default.wrap(function _callee4$(_context4) {\n                    while (1) {\n                        switch (_context4.prev = _context4.next) {\n                            case 0:\n                                return _context4.abrupt(\"return\", this.channels.myChannelsRead.promise.then(function () {\n                                    return _this6.channels.getChannel(channelSid).then(function (channel) {\n                                        return channel || _this6.services.publicChannels.getChannelBySid(channelSid).then(function (x) {\n                                            return _this6.channels.pushChannel(x);\n                                        });\n                                    });\n                                }));\n\n                            case 1:\n                            case \"end\":\n                                return _context4.stop();\n                        }\n                    }\n                }, _callee4, this);\n            }));\n\n            function getChannelBySid(_x3) {\n                return _ref4.apply(this, arguments);\n            }\n\n            return getChannelBySid;\n        }()\n        /**\n         * Get a known Channel by its unique identifier name.\n         * @param {String} uniqueName - The unique identifier name of the Channel to get\n         * @returns {Promise<Channel>}\n         */\n\n    }, {\n        key: \"getChannelByUniqueName\",\n        value: function () {\n            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(uniqueName) {\n                var _this7 = this;\n\n                return _regenerator2.default.wrap(function _callee5$(_context5) {\n                    while (1) {\n                        switch (_context5.prev = _context5.next) {\n                            case 0:\n                                return _context5.abrupt(\"return\", this.channels.myChannelsRead.promise.then(function () {\n                                    return _this7.services.publicChannels.getChannelByUniqueName(uniqueName).then(function (x) {\n                                        return _this7.channels.pushChannel(x);\n                                    });\n                                }));\n\n                            case 1:\n                            case \"end\":\n                                return _context5.stop();\n                        }\n                    }\n                }, _callee5, this);\n            }));\n\n            function getChannelByUniqueName(_x4) {\n                return _ref5.apply(this, arguments);\n            }\n\n            return getChannelByUniqueName;\n        }()\n        /**\n         * Get the current list of all subscribed Channels.\n         * @returns {Promise<Paginator<Channel>>}\n         */\n\n    }, {\n        key: \"getSubscribedChannels\",\n        value: function getSubscribedChannels(args) {\n            return this.channelsPromise.then(function (channels) {\n                return channels.getChannels(args);\n            });\n        }\n        /**\n         * Get array of Channels locally known to Client in provided sorting order.\n         * Locally known channels are the ones created and/or joined during client runtime and currently logged in User subscribed Channels.\n         * To ensure full list of subscribed Channels fetched - call the {@link Client#getSubscribedChannels} method\n         * and fetch all pages with help of {@link Paginator#nextPage} method.\n         * @param {Client#ChannelSortingOptions} [sortingOptions] - Options for the Channel sorting\n         * @returns {Promise<Array<Channel>>}\n         */\n\n    }, {\n        key: \"getLocalChannels\",\n        value: function getLocalChannels(sortingOptions) {\n            return this.channelsPromise.then(function (channels) {\n                var result = [];\n                channels.channels.forEach(function (value) {\n                    result.push(value);\n                });\n                var sortingOrder = (sortingOptions === null || sortingOptions === void 0 ? void 0 : sortingOptions.order) || 'ascending';\n                if (sortingOptions && sortingOptions.criteria) {\n                    if (sortingOptions.criteria === 'lastMessage') {\n                        result.sort(function (a, b) {\n                            return Client.compareChannelsByLastMessage(a, b, sortingOrder);\n                        });\n                    } else if (sortingOptions.criteria === 'uniqueName') {\n                        result.sort(function (a, b) {\n                            return Client.compareChannelsByStringProperty(a.uniqueName, b.uniqueName, sortingOrder);\n                        });\n                    } else if (sortingOptions.criteria === 'friendlyName') {\n                        result.sort(function (a, b) {\n                            return Client.compareChannelsByStringProperty(a.friendlyName, b.friendlyName, sortingOrder);\n                        });\n                    }\n                }\n                return result;\n            });\n        }\n    }, {\n        key: \"getPublicChannelDescriptors\",\n\n        /**\n         * Get the public channels directory content.\n         * @returns {Promise<Paginator<ChannelDescriptor>>}\n         */\n        value: function getPublicChannelDescriptors() {\n            return this.services.publicChannels.getChannels();\n        }\n        /**\n         * Get the User's (created by, joined or invited to) channels directory content.\n         * @returns {Promise<Paginator<ChannelDescriptor>>}\n         */\n\n    }, {\n        key: \"getUserChannelDescriptors\",\n        value: function getUserChannelDescriptors() {\n            return this.services.userChannels.getChannels();\n        }\n        /**\n         * Create a Channel on the server and subscribe to its events.\n         * Default options are public Channel type with empty uniqueName and friendlyName.\n         * @param {Client#CreateChannelOptions} [options] - Options for the Channel\n         * @returns {Promise<Channel>}\n         */\n\n    }, {\n        key: \"createChannel\",\n        value: function createChannel(options) {\n            options = options || {};\n            return this.channelsPromise.then(function (channelsEntity) {\n                return channelsEntity.addChannel(options);\n            });\n        }\n        /**\n         * Registers for push notifications.\n         * @param {Client#NotificationsChannelType} channelType - 'gcm', 'apn' and 'fcm' are supported\n         * @param {string} registrationId - Push notification id provided by platform\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"setPushRegistrationId\",\n        value: function () {\n            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(channelType, registrationId) {\n                var _this8 = this;\n\n                return _regenerator2.default.wrap(function _callee6$(_context6) {\n                    while (1) {\n                        switch (_context6.prev = _context6.next) {\n                            case 0:\n                                _context6.next = 2;\n                                return this.subscribeToPushNotifications(channelType).then(function () {\n                                    return _this8.services.notificationClient.setPushRegistrationId(registrationId, channelType);\n                                });\n\n                            case 2:\n                            case \"end\":\n                                return _context6.stop();\n                        }\n                    }\n                }, _callee6, this);\n            }));\n\n            function setPushRegistrationId(_x5, _x6) {\n                return _ref6.apply(this, arguments);\n            }\n\n            return setPushRegistrationId;\n        }()\n        /**\n         * Unregisters from push notifications.\n         * @param {Client#NotificationsChannelType} channelType - 'gcm', 'apn' and 'fcm' are supported\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"unsetPushRegistrationId\",\n        value: function () {\n            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(channelType) {\n                return _regenerator2.default.wrap(function _callee7$(_context7) {\n                    while (1) {\n                        switch (_context7.prev = _context7.next) {\n                            case 0:\n                                if (!(Client.supportedPushChannels.indexOf(channelType) === -1)) {\n                                    _context7.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('Invalid or unsupported channelType: ' + channelType);\n\n                            case 2:\n                                _context7.next = 4;\n                                return this.unsubscribeFromPushNotifications(channelType);\n\n                            case 4:\n                            case \"end\":\n                                return _context7.stop();\n                        }\n                    }\n                }, _callee7, this);\n            }));\n\n            function unsetPushRegistrationId(_x7) {\n                return _ref7.apply(this, arguments);\n            }\n\n            return unsetPushRegistrationId;\n        }()\n    }, {\n        key: \"handlePushNotification\",\n\n        /**\n         * Handle push notification payload parsing and emits event {@link Client#event:pushNotification} on this {@link Client} instance.\n         * @param {Object} notificationPayload - Push notification payload\n         * @returns {Promise<void>}\n         */\n        value: function () {\n            var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(notificationPayload) {\n                return _regenerator2.default.wrap(function _callee8$(_context8) {\n                    while (1) {\n                        switch (_context8.prev = _context8.next) {\n                            case 0:\n                                log.debug('handlePushNotification, notificationPayload=', notificationPayload);\n                                this.emit('pushNotification', Client.parsePushNotification(notificationPayload));\n\n                            case 2:\n                            case \"end\":\n                                return _context8.stop();\n                        }\n                    }\n                }, _callee8, this);\n            }));\n\n            function handlePushNotification(_x8) {\n                return _ref8.apply(this, arguments);\n            }\n\n            return handlePushNotification;\n        }()\n        /**\n         * Gets user for given identity, if it's in subscribed list - then return the user object from it,\n         * if not - then subscribes and adds user to the subscribed list.\n         * @param {String} identity - Identity of User\n         * @returns {Promise<User>} Fully initialized user\n         */\n\n    }, {\n        key: \"getUser\",\n        value: function getUser(identity) {\n            return this.services.users.getUser(identity);\n        }\n        /**\n         * Gets user descriptor for given identity.\n         * @param {String} identity - Identity of User\n         * @returns {Promise<UserDescriptor>} User descriptor\n         */\n\n    }, {\n        key: \"getUserDescriptor\",\n        value: function () {\n            var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(identity) {\n                return _regenerator2.default.wrap(function _callee9$(_context9) {\n                    while (1) {\n                        switch (_context9.prev = _context9.next) {\n                            case 0:\n                                return _context9.abrupt(\"return\", this.services.users.getUserDescriptor(identity));\n\n                            case 1:\n                            case \"end\":\n                                return _context9.stop();\n                        }\n                    }\n                }, _callee9, this);\n            }));\n\n            function getUserDescriptor(_x9) {\n                return _ref9.apply(this, arguments);\n            }\n\n            return getUserDescriptor;\n        }()\n        /**\n         * @returns {Promise<Array<User>>} List of subscribed User objects\n         */\n\n    }, {\n        key: \"getSubscribedUsers\",\n        value: function () {\n            var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {\n                return _regenerator2.default.wrap(function _callee10$(_context10) {\n                    while (1) {\n                        switch (_context10.prev = _context10.next) {\n                            case 0:\n                                return _context10.abrupt(\"return\", this.services.users.getSubscribedUsers());\n\n                            case 1:\n                            case \"end\":\n                                return _context10.stop();\n                        }\n                    }\n                }, _callee10, this);\n            }));\n\n            function getSubscribedUsers() {\n                return _ref10.apply(this, arguments);\n            }\n\n            return getSubscribedUsers;\n        }()\n    }, {\n        key: \"user\",\n        get: function get() {\n            return this.services.users.myself;\n        }\n    }, {\n        key: \"reachabilityEnabled\",\n        get: function get() {\n            return this.configuration.reachabilityEnabled;\n        }\n    }, {\n        key: \"token\",\n        get: function get() {\n            return this.fpaToken;\n        }\n    }], [{\n        key: \"create\",\n        value: function () {\n            var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(token, options) {\n                var client;\n                return _regenerator2.default.wrap(function _callee11$(_context11) {\n                    while (1) {\n                        switch (_context11.prev = _context11.next) {\n                            case 0:\n                                client = new Client(token, options);\n                                _context11.next = 3;\n                                return client.initialize();\n\n                            case 3:\n                                return _context11.abrupt(\"return\", client);\n\n                            case 4:\n                            case \"end\":\n                                return _context11.stop();\n                        }\n                    }\n                }, _callee11, this);\n            }));\n\n            function create(_x10, _x11) {\n                return _ref11.apply(this, arguments);\n            }\n\n            return create;\n        }()\n    }, {\n        key: \"compareChannelsByLastMessage\",\n        value: function compareChannelsByLastMessage(a, b, order) {\n            if (a.lastMessage && b.lastMessage) {\n                if (a.lastMessage.dateCreated && b.lastMessage.dateCreated) {\n                    if (a.lastMessage.dateCreated.getTime() < b.lastMessage.dateCreated.getTime()) {\n                        return order === 'ascending' ? -1 : 1;\n                    } else {\n                        return order === 'ascending' ? 1 : -1;\n                    }\n                } else {\n                    if (a.lastMessage.dateCreated) {\n                        return -1;\n                    } else if (b.lastMessage.dateCreated) {\n                        return 1;\n                    }\n                }\n            }\n            if (a.lastMessage) {\n                return -1;\n            } else if (b.lastMessage) {\n                return 1;\n            }\n            return 0;\n        }\n    }, {\n        key: \"compareChannelsByStringProperty\",\n        value: function compareChannelsByStringProperty(str1, str2, order) {\n            if (str1 && str2) {\n                return order === 'ascending' ? str1.localeCompare(str2) : -1 * str1.localeCompare(str2);\n            } else if (str1) {\n                return -1;\n            } else if (str2) {\n                return 1;\n            }\n            return 0;\n        }\n    }, {\n        key: \"parsePushNotificationChatData\",\n        value: function parsePushNotificationChatData(data) {\n            var result = {};\n            for (var key in Client.supportedPushDataFields) {\n                if (typeof data[key] !== 'undefined' && data[key] !== null) {\n                    if (key === 'message_index') {\n                        if (util_1.parseToNumber(data[key]) !== null) {\n                            result[Client.supportedPushDataFields[key]] = Number(data[key]);\n                        }\n                    } else {\n                        result[Client.supportedPushDataFields[key]] = data[key];\n                    }\n                }\n            }\n            return result;\n        }\n        /**\n         * Static method for push notification payload parsing. Returns parsed push as {@link PushNotification} object\n         * @param {Object} notificationPayload - Push notification payload\n         * @returns {PushNotification|Error}\n         */\n\n    }, {\n        key: \"parsePushNotification\",\n        value: function parsePushNotification(notificationPayload) {\n            log.debug('parsePushNotification, notificationPayload=', notificationPayload);\n            // APNS specifics\n            if (typeof notificationPayload.aps !== 'undefined') {\n                if (!notificationPayload.twi_message_type) {\n                    throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n                }\n                var data = Client.parsePushNotificationChatData(notificationPayload);\n                var apsPayload = notificationPayload.aps;\n                var body = null;\n                var title = null;\n                if (typeof apsPayload.alert === 'string') {\n                    body = apsPayload.alert || null;\n                } else {\n                    body = apsPayload.alert.body || null;\n                    title = apsPayload.alert.title || null;\n                }\n                return new pushnotification_1.PushNotification({\n                    title: title,\n                    body: body,\n                    sound: apsPayload.sound || null,\n                    badge: apsPayload.badge || null,\n                    action: apsPayload.category || null,\n                    type: notificationPayload.twi_message_type,\n                    data: data\n                });\n            }\n            // FCM/GCM specifics\n            if (typeof notificationPayload.data !== 'undefined') {\n                var dataPayload = notificationPayload.data;\n                if (!dataPayload.twi_message_type) {\n                    throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n                }\n                var _data = Client.parsePushNotificationChatData(notificationPayload.data);\n                return new pushnotification_1.PushNotification({\n                    title: dataPayload.twi_title || null,\n                    body: dataPayload.twi_body || null,\n                    sound: dataPayload.twi_sound || null,\n                    badge: null,\n                    action: dataPayload.twi_action || null,\n                    type: dataPayload.twi_message_type,\n                    data: _data\n                });\n            }\n            throw new Error('Provided push notification payload is not Programmable Chat notification');\n        }\n    }]);\n    return Client;\n}(events_1.EventEmitter);\n\nClient.version = SDK_VERSION;\nClient.supportedPushChannels = ['fcm', 'apn', 'gcm'];\nClient.supportedPushDataFields = {\n    'channel_sid': 'channelSid',\n    'message_sid': 'messageSid',\n    'message_index': 'messageIndex'\n};\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"updateToken\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getChannelBySid\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getChannelByUniqueName\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['undefined', twilio_sdk_type_validator_1.objectSchema('sorting options', {\n    criteria: [twilio_sdk_type_validator_1.literal('lastMessage', 'friendlyName', 'uniqueName'), 'undefined'],\n    order: [twilio_sdk_type_validator_1.literal('ascending', 'descending'), 'undefined']\n})]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getLocalChannels\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(['undefined', twilio_sdk_type_validator_1.objectSchema('channel options', {\n    friendlyName: ['string', 'undefined'],\n    isPrivate: ['boolean', 'undefined'],\n    uniqueName: ['string', 'undefined']\n})]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"createChannel\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.literal('gcm', 'fcm', 'apn'), 'string'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"setPushRegistrationId\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.literal('gcm', 'fcm', 'apn')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"unsetPushRegistrationId\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.pureObject), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"handlePushNotification\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getUser\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync(twilio_sdk_type_validator_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getUserDescriptor\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypesAsync('string', ['undefined', twilio_sdk_type_validator_1.pureObject]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, Object]), __metadata(\"design:returntype\", _promise2.default)], Client, \"create\", null);\n__decorate([twilio_sdk_type_validator_1.validateTypes(twilio_sdk_type_validator_1.pureObject), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", pushnotification_1.PushNotification)], Client, \"parsePushNotification\", null);\nexports.Client = Client;\nexports.default = Client;\n/**\n * Fired when a Channel becomes visible to the Client.\n * Fired for created and not joined private channels and for all type of channels Client has joined or invited to.\n * @event Client#channelAdded\n * @type {Channel}\n */\n/**\n * Fired when the Client is invited to a Channel.\n * @event Client#channelInvited\n * @type {Channel}\n */\n/**\n * Fired when the Client joins a Channel.\n * @event Client#channelJoined\n * @type {Channel}\n */\n/**\n * Fired when the Client leaves a Channel.\n * @event Client#channelLeft\n * @type {Channel}\n */\n/**\n * Fired when a Channel is no longer visible to the Client.\n * @event Client#channelRemoved\n * @type {Channel}\n */\n/**\n * Fired when a Channel's attributes or metadata have been updated.\n * During Channel's {@link Client.create| creation and initialization} this event might be fired multiple times\n * for same joined or created Channel as new data is arriving from different sources.\n * @event Client#channelUpdated\n * @type {Object}\n * @property {Channel} channel - Updated Channel\n * @property {Channel#UpdateReason[]} updateReasons - Array of Channel's updated event reasons\n */\n/**\n * Fired when Client's connection state has been changed.\n * @event Client#connectionStateChanged\n * @type {Client#ConnectionState}\n */\n/**\n * Fired when a Member has joined the Channel.\n * @event Client#memberJoined\n * @type {Member}\n */\n/**\n * Fired when a Member has left the Channel.\n * @event Client#memberLeft\n * @type {Member}\n */\n/**\n * Fired when a Member's fields has been updated.\n * @event Client#memberUpdated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */\n/**\n * Fired when a new Message has been added to the Channel on the server.\n * @event Client#messageAdded\n * @type {Message}\n */\n/**\n * Fired when Message is removed from Channel's message list.\n * @event Client#messageRemoved\n * @type {Message}\n */\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Client#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n/**\n * Fired when token is about to expire and needs to be updated.\n * @event Client#tokenAboutToExpire\n * @type {void}\n */\n/**\n * Fired when token is expired.\n * @event Client#tokenExpired\n * @type {void}\n */\n/**\n * Fired when a Member has stopped typing.\n * @event Client#typingEnded\n * @type {Member}\n */\n/**\n * Fired when a Member has started typing.\n * @event Client#typingStarted\n * @type {Member}\n */\n/**\n * Fired when client received (and parsed) push notification via one of push channels (apn, gcm, fcm).\n * @event Client#pushNotification\n * @type {PushNotification}\n */\n/**\n * Fired when the Client is subscribed to a User.\n * @event Client#userSubscribed\n * @type {User}\n */\n/**\n * Fired when the Client is unsubscribed from a User.\n * @event Client#userUnsubscribed\n * @type {User}\n */\n/**\n * Fired when the User's properties or reachability status have been updated.\n * @event Client#userUpdated\n * @type {Object}\n * @property {User} user - Updated User\n * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons\n */\n/**\n * Fired when connection is interrupted by unexpected reason\n * @event Client#connectionError\n * @type {Object}\n * @property {Boolean} terminal - twilsock will stop connection attempts\n * @property {String} message - root cause\n * @property {Number} [httpStatusCode] - http status code if available\n * @property {Number} [errorCode] - Twilio public error code if available\n */"]},"metadata":{},"sourceType":"script"}
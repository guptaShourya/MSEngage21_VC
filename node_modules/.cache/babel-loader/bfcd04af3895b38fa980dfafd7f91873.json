{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\n/**\n * Computes the difference between two lists of numbers.\n *\n * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\n * that represents all values that are in `x` but not in `y`. The returned\n * Tensor `out` is sorted in the same order that the numbers appear in `x`\n * (duplicates are preserved). This operation also returns a Tensor indices that\n * represents the position of each out element in `x`. In other words:\n *\n * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\n *\n * ```js\n * const x = [1, 2, 3, 4, 5, 6];\n * const y = [1, 3, 5];\n *\n * const [out, indices] = await tf.setdiff1dAsync(x, y);\n * out.print(); // [2, 4, 6]\n * indices.print(); // [1, 3, 5]\n * ```\n *\n * @param x 1-D Tensor. Values to keep.\n * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the\n *     output.\n * @returns Promise of Tensor tuple [out, indices].\n *  out: Tensor with the same type as x.\n *  indices: A Tensor of type int32.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\n\nfunction setdiff1dAsync_(_x, _x2) {\n  return _setdiff1dAsync_.apply(this, arguments);\n}\n\nfunction _setdiff1dAsync_() {\n  _setdiff1dAsync_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(x, y) {\n    var $x, $y, xVals, yVals, ySet, outputSize, i, buffer, indices, p;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          $x = convertToTensor(x, 'x', 'setdiff1d');\n          $y = convertToTensor(y, 'y', 'setdiff1d');\n          util.assert($x.dtype === $y.dtype, () => \"x and y should have the same dtype, but got x (\".concat($x.dtype, \") and y (\").concat($y.dtype, \").\"));\n          util.assert($x.rank === 1, () => \"x should be 1D tensor, but got x (\".concat($x.shape, \").\"));\n          util.assert($y.rank === 1, () => \"y should be 1D tensor, but got y (\".concat($y.shape, \").\"));\n          _context.next = 7;\n          return $x.data();\n\n        case 7:\n          xVals = _context.sent;\n          _context.next = 10;\n          return $y.data();\n\n        case 10:\n          yVals = _context.sent;\n          ySet = new Set(yVals);\n          outputSize = 0;\n\n          for (i = 0; i < xVals.length; i++) {\n            if (!ySet.has(xVals[i])) {\n              outputSize++;\n            }\n          }\n\n          buffer = new TensorBuffer([outputSize], $x.dtype);\n          indices = new TensorBuffer([outputSize], 'int32');\n\n          for (i = 0, p = 0; i < xVals.length; i++) {\n            if (!ySet.has(xVals[i])) {\n              buffer.values[p] = xVals[i];\n              indices.values[p] = i;\n              p++;\n            }\n          }\n\n          return _context.abrupt(\"return\", [buffer.toTensor(), indices.toTensor()]);\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _setdiff1dAsync_.apply(this, arguments);\n}\n\nexport const setdiff1dAsync = setdiff1dAsync_;","map":{"version":3,"sources":["../../src/ops/setdiff1d_async.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAgB,YAAhB,QAAmC,WAAnC;AACA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BG;;SACY,e;;;;;8EAAf,iBACI,CADJ,EAC0B,CAD1B;AAAA;AAAA;AAAA;AAAA;AAEQ,UAAA,EAFR,GAEa,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,WAAT,CAF5B;AAGQ,UAAA,EAHR,GAGa,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,WAAT,CAH5B;AAKE,UAAA,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,KAAH,KAAa,EAAE,CAAC,KADpB,EAEI,+DACI,EAAE,CAAC,KADP,sBACwB,EAAE,CAAC,KAD3B,OAFJ;AAKA,UAAA,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,IAAH,KAAY,CADhB,EACmB,kDAA2C,EAAE,CAAC,KAA9C,OADnB;AAGA,UAAA,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,IAAH,KAAY,CADhB,EACmB,kDAA2C,EAAE,CAAC,KAA9C,OADnB;AAbF;AAAA,iBAgBsB,EAAE,CAAC,IAAH,EAhBtB;;AAAA;AAgBQ,UAAA,KAhBR;AAAA;AAAA,iBAiBsB,EAAE,CAAC,IAAH,EAjBtB;;AAAA;AAiBQ,UAAA,KAjBR;AAkBQ,UAAA,IAlBR,GAkBe,IAAI,GAAJ,CAAQ,KAAR,CAlBf;AAoBM,UAAA,UApBN,GAoBmB,CApBnB;;AAqBE,eAAS,CAAT,GAAa,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,gBAAI,CAAC,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,CAAD,CAAd,CAAL,EAAyB;AACvB,cAAA,UAAU;AACX;AACF;;AAEK,UAAA,MA3BR,GA2BiB,IAAI,YAAJ,CAAiB,CAAC,UAAD,CAAjB,EAA+B,EAAE,CAAC,KAAlC,CA3BjB;AA4BQ,UAAA,OA5BR,GA4BkB,IAAI,YAAJ,CAAiB,CAAC,UAAD,CAAjB,EAA+B,OAA/B,CA5BlB;;AA6BE,eAAS,CAAT,GAAa,CAAb,EAAgB,CAAhB,GAAoB,CAApB,EAAuB,CAAC,GAAG,KAAK,CAAC,MAAjC,EAAyC,CAAC,EAA1C,EAA8C;AAC5C,gBAAI,CAAC,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,CAAD,CAAd,CAAL,EAAyB;AACvB,cAAA,MAAM,CAAC,MAAP,CAAc,CAAd,IAAmB,KAAK,CAAC,CAAD,CAAxB;AACA,cAAA,OAAO,CAAC,MAAR,CAAe,CAAf,IAAoB,CAApB;AACA,cAAA,CAAC;AACF;AACF;;AAnCH,2CAoCS,CAAC,MAAM,CAAC,QAAP,EAAD,EAAoB,OAAO,CAAC,QAAR,EAApB,CApCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAsCA,OAAO,MAAM,cAAc,GAAG,eAAvB","sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor, TensorBuffer} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\n/**\n * Computes the difference between two lists of numbers.\n *\n * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\n * that represents all values that are in `x` but not in `y`. The returned\n * Tensor `out` is sorted in the same order that the numbers appear in `x`\n * (duplicates are preserved). This operation also returns a Tensor indices that\n * represents the position of each out element in `x`. In other words:\n *\n * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\n *\n * ```js\n * const x = [1, 2, 3, 4, 5, 6];\n * const y = [1, 3, 5];\n *\n * const [out, indices] = await tf.setdiff1dAsync(x, y);\n * out.print(); // [2, 4, 6]\n * indices.print(); // [1, 3, 5]\n * ```\n *\n * @param x 1-D Tensor. Values to keep.\n * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the\n *     output.\n * @returns Promise of Tensor tuple [out, indices].\n *  out: Tensor with the same type as x.\n *  indices: A Tensor of type int32.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nasync function setdiff1dAsync_(\n    x: Tensor|TensorLike, y: Tensor|TensorLike): Promise<[Tensor, Tensor]> {\n  const $x = convertToTensor(x, 'x', 'setdiff1d');\n  const $y = convertToTensor(y, 'y', 'setdiff1d');\n\n  util.assert(\n      $x.dtype === $y.dtype,\n      () => `x and y should have the same dtype, but got x (${\n          $x.dtype}) and y (${$y.dtype}).`);\n\n  util.assert(\n      $x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);\n\n  util.assert(\n      $y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);\n\n  const xVals = await $x.data();\n  const yVals = await $y.data();\n  const ySet = new Set(yVals);\n\n  let outputSize = 0;\n  for (let i = 0; i < xVals.length; i++) {\n    if (!ySet.has(xVals[i])) {\n      outputSize++;\n    }\n  }\n\n  const buffer = new TensorBuffer([outputSize], $x.dtype);\n  const indices = new TensorBuffer([outputSize], 'int32');\n  for (let i = 0, p = 0; i < xVals.length; i++) {\n    if (!ySet.has(xVals[i])) {\n      buffer.values[p] = xVals[i];\n      indices.values[p] = i;\n      p++;\n    }\n  }\n  return [buffer.toTensor(), indices.toTensor()];\n}\nexport const setdiff1dAsync = setdiff1dAsync_;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
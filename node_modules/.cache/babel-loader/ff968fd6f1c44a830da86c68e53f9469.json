{"ast":null,"code":"import _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseReshape } from '@tensorflow/tfjs-core';\nimport { sparseReshapeImplCPU } from '../kernel_utils/shared';\nexport function sparseReshape(args) {\n  const inputs = args.inputs,\n        backend = args.backend;\n  const inputIndices = inputs.inputIndices,\n        inputShape = inputs.inputShape,\n        newShape = inputs.newShape;\n\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(\"Input indices should be a matrix but received shape \".concat(inputIndices.shape));\n  }\n\n  if (inputShape.shape.length !== 1) {\n    throw new Error(\"Input shape should be a vector but received shape \".concat(inputShape.shape));\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\"Target shape should be a vector but received shape \".concat(newShape.shape));\n  }\n\n  const $inputShape = Array.from(backend.readSync(inputShape.dataId));\n  const $inputIndices = backend.readSync(inputIndices.dataId);\n  const targetShape = Array.from(backend.readSync(newShape.dataId));\n\n  const _sparseReshapeImplCPU = sparseReshapeImplCPU($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape),\n        _sparseReshapeImplCPU2 = _slicedToArray(_sparseReshapeImplCPU, 3),\n        newIndices = _sparseReshapeImplCPU2[0],\n        indicesShape = _sparseReshapeImplCPU2[1],\n        outputShape = _sparseReshapeImplCPU2[2];\n\n  return [backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices), backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape))];\n}\nexport const sparseReshapeConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape\n};","map":{"version":3,"sources":["../../src/kernels/SparseReshape.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAsB,aAAtB,QAAuF,uBAAvF;AAGA,SAAQ,oBAAR,QAAmC,wBAAnC;AAEA,OAAM,SAAU,aAAV,CACF,IADE,EAC4D;AAAA,QAEzD,MAFyD,GAEtC,IAFsC,CAEzD,MAFyD;AAAA,QAEjD,OAFiD,GAEtC,IAFsC,CAEjD,OAFiD;AAAA,QAGzD,YAHyD,GAGnB,MAHmB,CAGzD,YAHyD;AAAA,QAG3C,UAH2C,GAGnB,MAHmB,CAG3C,UAH2C;AAAA,QAG/B,QAH+B,GAGnB,MAHmB,CAG/B,QAH+B;;AAIhE,MAAI,YAAY,CAAC,KAAb,CAAmB,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,UAAM,IAAI,KAAJ,+DACF,YAAY,CAAC,KADX,EAAN;AAED;;AACD,MAAI,UAAU,CAAC,KAAX,CAAiB,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,UAAM,IAAI,KAAJ,6DACF,UAAU,CAAC,KADT,EAAN;AAED;;AAED,MAAI,QAAQ,CAAC,KAAT,CAAe,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,UAAM,IAAI,KAAJ,8DACoD,QAAQ,CAAC,KAD7D,EAAN;AAED;;AAED,QAAM,WAAW,GACb,KAAK,CAAC,IAAN,CAAW,OAAO,CAAC,QAAR,CAAiB,UAAU,CAAC,MAA5B,CAAX,CADJ;AAEA,QAAM,aAAa,GAAG,OAAO,CAAC,QAAR,CAAiB,YAAY,CAAC,MAA9B,CAAtB;AACA,QAAM,WAAW,GACb,KAAK,CAAC,IAAN,CAAW,OAAO,CAAC,QAAR,CAAiB,QAAQ,CAAC,MAA1B,CAAX,CADJ;;AArBgE,gCAwBhB,oBAAoB,CAChE,aADgE,EACjD,YAAY,CAAC,KADoC,EAC7B,YAAY,CAAC,KADgB,EACT,WADS,EAEhE,WAFgE,CAxBJ;AAAA;AAAA,QAwBzD,UAxByD;AAAA,QAwB7C,YAxB6C;AAAA,QAwB/B,WAxB+B;;AA2BhE,SAAO,CACL,OAAO,CAAC,cAAR,CAAuB,YAAvB,EAAqC,YAAY,CAAC,KAAlD,EAAyD,UAAzD,CADK,EAEL,OAAO,CAAC,cAAR,CACI,CAAC,WAAW,CAAC,MAAb,CADJ,EAC0B,QAAQ,CAAC,KADnC,EAC0C,IAAI,UAAJ,CAAe,WAAf,CAD1C,CAFK,CAAP;AAKD;AAED,OAAO,MAAM,mBAAmB,GAAiB;AAC/C,EAAA,UAAU,EAAE,aADmC;AAE/C,EAAA,WAAW,EAAE,OAFkC;AAG/C,EAAA,UAAU,EAAE;AAHmC,CAA1C","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseReshapeImplCPU} from '../kernel_utils/shared';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${\n        inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${\n        inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.readSync(inputShape.dataId) as TypedArray);\n  const $inputIndices = backend.readSync(inputIndices.dataId) as TypedArray;\n  const targetShape =\n      Array.from(backend.readSync(newShape.dataId) as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
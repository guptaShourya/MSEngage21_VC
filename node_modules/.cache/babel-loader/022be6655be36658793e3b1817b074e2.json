{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar InstalledAddOnExtensionList = require('./installedAddOn/installedAddOnExtension').InstalledAddOnExtensionList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar InstalledAddOnList;\nvar InstalledAddOnPage;\nvar InstalledAddOnInstance;\nvar InstalledAddOnContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the InstalledAddOnList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnList\n *\n * @param {Twilio.Preview.Marketplace} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nInstalledAddOnList = function InstalledAddOnList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function installedAddOns\n   * @memberof Twilio.Preview.Marketplace#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext}\n   */\n\n  /* jshint ignore:end */\n  function InstalledAddOnListInstance(sid) {\n    return InstalledAddOnListInstance.get(sid);\n  }\n\n  InstalledAddOnListInstance._version = version; // Path Solution\n\n  InstalledAddOnListInstance._solution = {};\n  InstalledAddOnListInstance._uri = \"/InstalledAddOns\";\n  /* jshint ignore:start */\n\n  /**\n   * create a InstalledAddOnInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.availableAddOnSid -\n   *          The SID of the AvaliableAddOn to install\n   * @param {boolean} opts.acceptTermsOfService -\n   *          Whether the Terms of Service were accepted\n   * @param {object} [opts.configuration] -\n   *          The JSON object representing the configuration\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed InstalledAddOnInstance\n   */\n\n  /* jshint ignore:end */\n\n  InstalledAddOnListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.availableAddOnSid)) {\n      throw new Error('Required parameter \"opts.availableAddOnSid\" missing.');\n    }\n\n    if (_.isUndefined(opts.acceptTermsOfService)) {\n      throw new Error('Required parameter \"opts.acceptTermsOfService\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'AvailableAddOnSid': _.get(opts, 'availableAddOnSid'),\n      'AcceptTermsOfService': serialize.bool(_.get(opts, 'acceptTermsOfService')),\n      'Configuration': serialize.object(_.get(opts, 'configuration')),\n      'UniqueName': _.get(opts, 'uniqueName')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams InstalledAddOnInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists InstalledAddOnInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of InstalledAddOnInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InstalledAddOnPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of InstalledAddOnInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InstalledAddOnPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a installed_add_on\n   *\n   * @function get\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {string} sid - The SID of the InstalledAddOn resource to fetch\n   *\n   * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnListInstance.get = function get(sid) {\n    return new InstalledAddOnContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  InstalledAddOnListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return InstalledAddOnListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InstalledAddOnPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnPage\n *\n * @param {Marketplace} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {InstalledAddOnSolution} solution - Path solution\n *\n * @returns InstalledAddOnPage\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnPage = function InstalledAddOnPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(InstalledAddOnPage.prototype, Page.prototype);\n\nInstalledAddOnPage.prototype.constructor = InstalledAddOnPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of InstalledAddOnInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnPage#\n *\n * @param {InstalledAddOnPayload} payload - Payload response from the API\n *\n * @returns InstalledAddOnInstance\n */\n\n/* jshint ignore:end */\n\nInstalledAddOnPage.prototype.getInstance = function getInstance(payload) {\n  return new InstalledAddOnInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nInstalledAddOnPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InstalledAddOnContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} description -\n *          A short description of the Add-on's functionality\n * @property {object} configuration -\n *          The JSON object that represents the current configuration of installed Add-on\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {Marketplace} version - Version of the resource\n * @param {InstalledAddOnPayload} payload - The instance payload\n * @param {sid} sid - The SID of the InstalledAddOn resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnInstance = function InstalledAddOnInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.description = payload.description; // jshint ignore:line\n\n  this.configuration = payload.configuration; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(InstalledAddOnInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new InstalledAddOnContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * remove a InstalledAddOnInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n\n/* jshint ignore:end */\n\nInstalledAddOnInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a InstalledAddOnInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a InstalledAddOnInstance\n *\n * @function update\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {object} [opts.configuration] -\n *          The JSON object representing the configuration\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the extensions\n *\n * @function extensions\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList}\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnInstance.prototype.extensions = function extensions() {\n  return this._proxy.extensions;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nInstalledAddOnInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InstalledAddOnContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnContext\n *\n * @property {Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList} extensions -\n *          extensions resource\n *\n * @param {Marketplace} version - Version of the resource\n * @param {sid} sid - The SID of the InstalledAddOn resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnContext = function InstalledAddOnContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = \"/InstalledAddOns/\".concat(sid); // Dependents\n\n  this._extensions = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * remove a InstalledAddOnInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a InstalledAddOnInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a InstalledAddOnInstance\n *\n * @function update\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {object} [opts] - Options for request\n * @param {object} [opts.configuration] -\n *          The JSON object representing the configuration\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Configuration': serialize.object(_.get(opts, 'configuration')),\n    'UniqueName': _.get(opts, 'uniqueName')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(InstalledAddOnContext.prototype, 'extensions', {\n  get: function get() {\n    if (!this._extensions) {\n      this._extensions = new InstalledAddOnExtensionList(this._version, this._solution.sid);\n    }\n\n    return this._extensions;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nInstalledAddOnContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nInstalledAddOnContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  InstalledAddOnList: InstalledAddOnList,\n  InstalledAddOnPage: InstalledAddOnPage,\n  InstalledAddOnInstance: InstalledAddOnInstance,\n  InstalledAddOnContext: InstalledAddOnContext\n};","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio/lib/rest/preview/marketplace/installedAddOn.js"],"names":["Q","require","_","util","InstalledAddOnExtensionList","Page","deserialize","serialize","values","InstalledAddOnList","InstalledAddOnPage","InstalledAddOnInstance","InstalledAddOnContext","version","InstalledAddOnListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","availableAddOnSid","acceptTermsOfService","deferred","defer","data","of","bool","object","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendlyName","friendly_name","description","configuration","uniqueName","unique_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","remove","_proxy","fetch","update","extensions","_extensions","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar InstalledAddOnExtensionList = require(\n    './installedAddOn/installedAddOnExtension').InstalledAddOnExtensionList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar InstalledAddOnList;\nvar InstalledAddOnPage;\nvar InstalledAddOnInstance;\nvar InstalledAddOnContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnList\n *\n * @param {Twilio.Preview.Marketplace} version - Version of the resource\n */\n/* jshint ignore:end */\nInstalledAddOnList = function InstalledAddOnList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function installedAddOns\n   * @memberof Twilio.Preview.Marketplace#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext}\n   */\n  /* jshint ignore:end */\n  function InstalledAddOnListInstance(sid) {\n    return InstalledAddOnListInstance.get(sid);\n  }\n\n  InstalledAddOnListInstance._version = version;\n  // Path Solution\n  InstalledAddOnListInstance._solution = {};\n  InstalledAddOnListInstance._uri = `/InstalledAddOns`;\n  /* jshint ignore:start */\n  /**\n   * create a InstalledAddOnInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.availableAddOnSid -\n   *          The SID of the AvaliableAddOn to install\n   * @param {boolean} opts.acceptTermsOfService -\n   *          Whether the Terms of Service were accepted\n   * @param {object} [opts.configuration] -\n   *          The JSON object representing the configuration\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed InstalledAddOnInstance\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.availableAddOnSid)) {\n      throw new Error('Required parameter \"opts.availableAddOnSid\" missing.');\n    }\n    if (_.isUndefined(opts.acceptTermsOfService)) {\n      throw new Error('Required parameter \"opts.acceptTermsOfService\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'AvailableAddOnSid': _.get(opts, 'availableAddOnSid'),\n      'AcceptTermsOfService': serialize.bool(_.get(opts, 'acceptTermsOfService')),\n      'Configuration': serialize.object(_.get(opts, 'configuration')),\n      'UniqueName': _.get(opts, 'uniqueName')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams InstalledAddOnInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists InstalledAddOnInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of InstalledAddOnInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InstalledAddOnPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of InstalledAddOnInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InstalledAddOnPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a installed_add_on\n   *\n   * @function get\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @param {string} sid - The SID of the InstalledAddOn resource to fetch\n   *\n   * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext}\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.get = function get(sid) {\n    return new InstalledAddOnContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  InstalledAddOnListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  InstalledAddOnListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return InstalledAddOnListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnPage\n *\n * @param {Marketplace} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {InstalledAddOnSolution} solution - Path solution\n *\n * @returns InstalledAddOnPage\n */\n/* jshint ignore:end */\nInstalledAddOnPage = function InstalledAddOnPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(InstalledAddOnPage.prototype, Page.prototype);\nInstalledAddOnPage.prototype.constructor = InstalledAddOnPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of InstalledAddOnInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnPage#\n *\n * @param {InstalledAddOnPayload} payload - Payload response from the API\n *\n * @returns InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnPage.prototype.getInstance = function getInstance(payload) {\n  return new InstalledAddOnInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInstalledAddOnPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nInstalledAddOnPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} description -\n *          A short description of the Add-on's functionality\n * @property {object} configuration -\n *          The JSON object that represents the current configuration of installed Add-on\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {Marketplace} version - Version of the resource\n * @param {InstalledAddOnPayload} payload - The instance payload\n * @param {sid} sid - The SID of the InstalledAddOn resource to fetch\n */\n/* jshint ignore:end */\nInstalledAddOnInstance = function InstalledAddOnInstance(version, payload, sid)\n                                                          {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.configuration = payload.configuration; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(InstalledAddOnInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new InstalledAddOnContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * remove a InstalledAddOnInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a InstalledAddOnInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a InstalledAddOnInstance\n *\n * @function update\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {object} [opts.configuration] -\n *          The JSON object representing the configuration\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the extensions\n *\n * @function extensions\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList}\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.extensions = function extensions() {\n  return this._proxy.extensions;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInstalledAddOnInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nInstalledAddOnInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnContext\n *\n * @property {Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList} extensions -\n *          extensions resource\n *\n * @param {Marketplace} version - Version of the resource\n * @param {sid} sid - The SID of the InstalledAddOn resource to fetch\n */\n/* jshint ignore:end */\nInstalledAddOnContext = function InstalledAddOnContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/InstalledAddOns/${sid}`;\n\n  // Dependents\n  this._extensions = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * remove a InstalledAddOnInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a InstalledAddOnInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a InstalledAddOnInstance\n *\n * @function update\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @param {object} [opts] - Options for request\n * @param {object} [opts.configuration] -\n *          The JSON object representing the configuration\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnInstance\n */\n/* jshint ignore:end */\nInstalledAddOnContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Configuration': serialize.object(_.get(opts, 'configuration')),\n    'UniqueName': _.get(opts, 'uniqueName')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new InstalledAddOnInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(InstalledAddOnContext.prototype,\n  'extensions', {\n    get: function() {\n      if (!this._extensions) {\n        this._extensions = new InstalledAddOnExtensionList(this._version, this._solution.sid);\n      }\n      return this._extensions;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInstalledAddOnContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nInstalledAddOnContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  InstalledAddOnList: InstalledAddOnList,\n  InstalledAddOnPage: InstalledAddOnPage,\n  InstalledAddOnInstance: InstalledAddOnInstance,\n  InstalledAddOnContext: InstalledAddOnContext\n};\n"]},"metadata":{},"sourceType":"script"}
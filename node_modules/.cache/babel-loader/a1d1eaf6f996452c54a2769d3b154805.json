{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Benchmark = void 0;\n/**\n * @private\n */\n\nvar Benchmark =\n/** @class */\nfunction () {\n  function Benchmark() {\n    this._timingCache = new Map();\n    this._timings = new Map();\n  }\n\n  Benchmark.prototype.end = function (name) {\n    var timing = this._timings.get(name);\n\n    if (!timing) {\n      return;\n    }\n\n    timing.end = Date.now();\n    timing.delay = timing.end - timing.start;\n\n    this._save(name, __assign({}, timing));\n  };\n\n  Benchmark.prototype.getAverageDelay = function (name) {\n    var timingCache = this._timingCache.get(name);\n\n    if (!timingCache || !timingCache.length) {\n      return;\n    }\n\n    return timingCache.map(function (timing) {\n      return timing.delay;\n    }).reduce(function (total, value) {\n      return total += value;\n    }, 0) / timingCache.length;\n  };\n\n  Benchmark.prototype.getNames = function () {\n    return Array.from(this._timingCache.keys());\n  };\n\n  Benchmark.prototype.getRate = function (name) {\n    var timingCache = this._timingCache.get(name);\n\n    if (!timingCache || timingCache.length < 2) {\n      return;\n    }\n\n    var totalDelay = timingCache[timingCache.length - 1].end - timingCache[0].start;\n    return timingCache.length / totalDelay * 1000;\n  };\n\n  Benchmark.prototype.start = function (name) {\n    var timing = this._timings.get(name);\n\n    if (!timing) {\n      timing = {};\n\n      this._timings.set(name, timing);\n    }\n\n    timing.start = Date.now();\n    delete timing.end;\n    delete timing.delay;\n  };\n\n  Benchmark.prototype._save = function (name, timing) {\n    var timingCache = this._timingCache.get(name);\n\n    if (!timingCache) {\n      timingCache = [];\n\n      this._timingCache.set(name, timingCache);\n    }\n\n    timingCache.push(timing);\n\n    if (timingCache.length > Benchmark.cacheSize) {\n      timingCache.splice(0, timingCache.length - Benchmark.cacheSize);\n    }\n  }; // NOTE (csantos): How many timing information to save per benchmark.\n  // This is about the amount of timing info generated on a 24fps input.\n  // Enough samples to calculate fps\n\n\n  Benchmark.cacheSize = 41;\n  return Benchmark;\n}();\n\nexports.Benchmark = Benchmark;","map":{"version":3,"sources":["../../lib/utils/Benchmark.ts"],"names":[],"mappings":"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","sourcesContent":["import { Timing } from '../types';\n\n/**\n * @private\n */\nexport class Benchmark {\n\n  // NOTE (csantos): How many timing information to save per benchmark.\n  // This is about the amount of timing info generated on a 24fps input.\n  // Enough samples to calculate fps\n  static readonly cacheSize = 41;\n\n  private _timingCache: Map<string, Timing[]>;\n  private _timings: Map<string, Timing>;\n\n  constructor() {\n    this._timingCache = new Map();\n    this._timings = new Map();\n  }\n\n  end(name: string) {\n    const timing = this._timings.get(name);\n    if (!timing) {\n      return;\n    }\n    timing.end = Date.now();\n    timing.delay = timing.end - timing.start!;\n    this._save(name, {...timing});\n  }\n\n  getAverageDelay(name: string): number | undefined {\n    const timingCache = this._timingCache.get(name);\n    if (!timingCache || !timingCache.length) {\n      return;\n    }\n    return timingCache.map(timing => timing.delay!)\n      .reduce((total: number, value: number) => total += value, 0) / timingCache.length;\n  }\n\n  getNames(): string[] {\n    return Array.from(this._timingCache.keys());\n  }\n\n  getRate(name: string): number | undefined {\n    const timingCache = this._timingCache.get(name);\n    if (!timingCache || timingCache.length < 2) {\n      return;\n    }\n    const totalDelay = timingCache[timingCache.length - 1].end! - timingCache[0].start!;\n    return (timingCache.length / totalDelay) * 1000;\n  }\n\n  start(name: string) {\n    let timing = this._timings.get(name);\n    if (!timing) {\n      timing = {};\n      this._timings.set(name, timing);\n    }\n    timing.start = Date.now();\n    delete timing.end;\n    delete timing.delay;\n  }\n\n  private _save(name: string, timing: Timing) {\n    let timingCache = this._timingCache.get(name);\n    if (!timingCache) {\n      timingCache = [];\n      this._timingCache.set(name, timingCache);\n    }\n\n    timingCache.push(timing);\n\n    if (timingCache.length > Benchmark.cacheSize) {\n      timingCache.splice(0, timingCache.length - Benchmark.cacheSize);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}
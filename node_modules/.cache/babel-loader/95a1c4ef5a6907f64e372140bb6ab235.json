{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nexport class Im2ColPackedProgram {\n  constructor(outputShape, inputShape, convInfo) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = outputShape;\n    const filterWidth = convInfo.filterWidth,\n          inChannels = convInfo.inChannels,\n          strideWidth = convInfo.strideWidth,\n          strideHeight = convInfo.strideHeight,\n          padInfo = convInfo.padInfo,\n          outWidth = convInfo.outWidth,\n          dilationWidth = convInfo.dilationWidth,\n          dilationHeight = convInfo.dilationHeight,\n          dataFormat = convInfo.dataFormat;\n    const left = padInfo.left,\n          top = padInfo.top;\n    const itemsPerBlockRow = inChannels * filterWidth;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n    let unrolled = \"\";\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += \"\\n          blockIndex = rc.y + \".concat(col, \";\\n          pos = rc.x + \").concat(row, \";\\n\\n          if(blockIndex < \").concat(outputShape[1], \" && pos < \").concat(outputShape[0], \") {\\n            offsetY = int(blockIndex / (\").concat(outWidth, \")) * \").concat(strideHeight, \" - \").concat(top, \";\\n            d0 = offsetY + \").concat(dilationHeight, \" * (pos / \").concat(itemsPerBlockRow, \");\\n\\n            if(d0 < \").concat(inputShape[rowDim], \" && d0 >= 0) {\\n\\n              offsetX = int(mod(float(blockIndex), \").concat(outWidth, \".) * \").concat(strideWidth, \". - \").concat(left, \".);\\n              d1 = offsetX + \").concat(dilationWidth, \" * (int(mod(float(pos), \").concat(itemsPerBlockRow, \".) / \").concat(inChannels, \".));\\n\\n              if(d1 < \").concat(inputShape[colDim], \" && d1 >= 0) {\\n\\n                ch = int(mod(float(pos), \").concat(inChannels, \".));\\n\\n                if (\").concat(isChannelsLast, \") {\\n                  innerDims = vec2(d1, ch);\\n                  result[\").concat(row * 2 + col, \"] = getChannel(\\n                    getA(d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[\").concat(row * 2 + col, \"] = getChannel(\\n                    getA(ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        \");\n      }\n    }\n\n    this.userCode = \"\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        \".concat(unrolled, \"\\n\\n        \").concat(glsl.output, \" = result;\\n      }\\n    \");\n  }\n\n}","map":{"version":3,"sources":["../src/im2col_packed_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,kBAAR,QAAiC,gBAAjC;AAGA,OAAM,MAAO,mBAAP,CAA0B;AAO9B,EAAA,WAAA,CACI,WADJ,EAC2B,UAD3B,EAEI,QAFJ,EAEqC;AARrC,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AACA,SAAA,YAAA,GAAe,IAAf;AACA,SAAA,YAAA,GAAe,IAAf;AAOE,SAAK,WAAL,GAAmB,WAAnB;AADmC,UAIjC,WAJiC,GAa/B,QAb+B,CAIjC,WAJiC;AAAA,UAKjC,UALiC,GAa/B,QAb+B,CAKjC,UALiC;AAAA,UAMjC,WANiC,GAa/B,QAb+B,CAMjC,WANiC;AAAA,UAOjC,YAPiC,GAa/B,QAb+B,CAOjC,YAPiC;AAAA,UAQjC,OARiC,GAa/B,QAb+B,CAQjC,OARiC;AAAA,UASjC,QATiC,GAa/B,QAb+B,CASjC,QATiC;AAAA,UAUjC,aAViC,GAa/B,QAb+B,CAUjC,aAViC;AAAA,UAWjC,cAXiC,GAa/B,QAb+B,CAWjC,cAXiC;AAAA,UAYjC,UAZiC,GAa/B,QAb+B,CAYjC,UAZiC;AAAA,UAc5B,IAd4B,GAcf,OAde,CAc5B,IAd4B;AAAA,UActB,GAdsB,GAcf,OAde,CActB,GAdsB;AAenC,UAAM,gBAAgB,GAAG,UAAU,GAAG,WAAtC;AACA,UAAM,IAAI,GAAG,kBAAkB,EAA/B;AACA,UAAM,cAAc,GAAG,UAAU,KAAK,cAAtC;AACA,UAAM,MAAM,GAAG,cAAc,GAAG,CAAH,GAAO,CAApC;AACA,UAAM,MAAM,GAAG,cAAc,GAAG,CAAH,GAAO,CAApC;AAEA,QAAI,QAAQ,KAAZ;;AAEA,SAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,IAAI,CAAzB,EAA4B,GAAG,EAA/B,EAAmC;AACjC,WAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,IAAI,CAAzB,EAA4B,GAAG,EAA/B,EAAmC;AACjC,QAAA,QAAQ,8CACgB,GADhB,uCAES,GAFT,4CAIY,WAAW,CAAC,CAAD,CAJvB,uBAIuC,WAAW,CAAC,CAAD,CAJlD,0DAK0B,QAL1B,kBAK0C,YAL1C,gBAMJ,GANI,2CAOa,cAPb,uBAOwC,gBAPxC,uCASM,UAAU,CAAC,MAAD,CAThB,kFAWqC,QAXrC,kBAYJ,WAZI,iBAYc,IAZd,+CAae,aAbf,qCAcJ,gBAdI,kBAcoB,UAdpB,2CAgBQ,UAAU,CAAC,MAAD,CAhBlB,wEAkB2B,UAlB3B,yCAoBM,cApBN,wFAsBW,GAAG,GAAG,CAAN,GAAU,GAtBrB,kOA2BW,GAAG,GAAG,CAAN,GAAU,GA3BrB,kMAAR;AAmCD;AACF;;AAED,SAAK,QAAL,8MASM,QATN,yBAWM,IAAI,CAAC,MAXX;AAcD;;AAtF6B","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      outputShape: number[], inputShape: number[],\n      convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n\n    const {\n      filterWidth,\n      inChannels,\n      strideWidth,\n      strideHeight,\n      padInfo,\n      outWidth,\n      dilationWidth,\n      dilationHeight,\n      dataFormat\n    } = convInfo;\n    const {left, top} = padInfo;\n    const itemsPerBlockRow = inChannels * filterWidth;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {\n            offsetY = int(blockIndex / (${outWidth})) * ${strideHeight} - ${\n            top};\n            d0 = offsetY + ${dilationHeight} * (pos / ${itemsPerBlockRow});\n\n            if(d0 < ${inputShape[rowDim]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${outWidth}.) * ${\n            strideWidth}. - ${left}.);\n              d1 = offsetX + ${dilationWidth} * (int(mod(float(pos), ${\n            itemsPerBlockRow}.) / ${inChannels}.));\n\n              if(d1 < ${inputShape[colDim]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${inChannels}.));\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar DeploymentList = require('./environment/deployment').DeploymentList;\n\nvar LogList = require('./environment/log').LogList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar VariableList = require('./environment/variable').VariableList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar EnvironmentList;\nvar EnvironmentPage;\nvar EnvironmentInstance;\nvar EnvironmentContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the EnvironmentList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentList\n *\n * @param {Twilio.Serverless.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n */\n\n/* jshint ignore:end */\n\nEnvironmentList = function EnvironmentList(version, serviceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function environments\n   * @memberof Twilio.Serverless.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext}\n   */\n\n  /* jshint ignore:end */\n  function EnvironmentListInstance(sid) {\n    return EnvironmentListInstance.get(sid);\n  }\n\n  EnvironmentListInstance._version = version; // Path Solution\n\n  EnvironmentListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  EnvironmentListInstance._uri = \"/Services/\".concat(serviceSid, \"/Environments\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams EnvironmentInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  EnvironmentListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists EnvironmentInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EnvironmentListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of EnvironmentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EnvironmentListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EnvironmentPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of EnvironmentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EnvironmentListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EnvironmentPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a EnvironmentInstance\n   *\n   * @function create\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.uniqueName -\n   *          A user-defined string that uniquely identifies the Environment resource\n   * @param {string} [opts.domainSuffix] -\n   *          A URL-friendly name that represents the environment\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed EnvironmentInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  EnvironmentListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.uniqueName)) {\n      throw new Error('Required parameter \"opts.uniqueName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DomainSuffix': _.get(opts, 'domainSuffix')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EnvironmentInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a environment\n   *\n   * @function get\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {string} sid - The SID of the Environment resource to fetch\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  EnvironmentListInstance.get = function get(sid) {\n    return new EnvironmentContext(this._version, this._solution.serviceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  EnvironmentListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  EnvironmentListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return EnvironmentListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EnvironmentPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EnvironmentSolution} solution - Path solution\n *\n * @returns EnvironmentPage\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentPage = function EnvironmentPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(EnvironmentPage.prototype, Page.prototype);\n\nEnvironmentPage.prototype.constructor = EnvironmentPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of EnvironmentInstance\n *\n * @function getInstance\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentPage#\n *\n * @param {EnvironmentPayload} payload - Payload response from the API\n *\n * @returns EnvironmentInstance\n */\n\n/* jshint ignore:end */\n\nEnvironmentPage.prototype.getInstance = function getInstance(payload) {\n  return new EnvironmentInstance(this._version, payload, this._solution.serviceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nEnvironmentPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EnvironmentContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentInstance\n *\n * @property {string} sid -\n *          The unique string that identifies the Environment resource\n * @property {string} accountSid -\n *          The SID of the Account that created the Environment resource\n * @property {string} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n * @property {string} buildSid - The SID of the build deployed in the environment\n * @property {string} uniqueName -\n *          A user-defined string that uniquely identifies the Environment resource\n * @property {string} domainSuffix -\n *          A URL-friendly name that represents the environment\n * @property {string} domainName -\n *          The base domain name for all Functions and Assets deployed in the Environment\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the Environment resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the Environment resource was last updated\n * @property {string} url - The absolute URL of the Environment resource\n * @property {string} links -\n *          The URLs of the Environment resource's nested resources\n *\n * @param {V1} version - Version of the resource\n * @param {EnvironmentPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n * @param {sid} sid - The SID of the Environment resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentInstance = function EnvironmentInstance(version, payload, serviceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.buildSid = payload.build_sid; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.domainSuffix = payload.domain_suffix; // jshint ignore:line\n\n  this.domainName = payload.domain_name; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(EnvironmentInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new EnvironmentContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a EnvironmentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n\n/* jshint ignore:end */\n\nEnvironmentInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a EnvironmentInstance\n *\n * @function remove\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the variables\n *\n * @function variables\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.VariableList}\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentInstance.prototype.variables = function variables() {\n  return this._proxy.variables;\n};\n/* jshint ignore:start */\n\n/**\n * Access the deployments\n *\n * @function deployments\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList}\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentInstance.prototype.deployments = function deployments() {\n  return this._proxy.deployments;\n};\n/* jshint ignore:start */\n\n/**\n * Access the logs\n *\n * @function logs\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList}\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentInstance.prototype.logs = function logs() {\n  return this._proxy.logs;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nEnvironmentInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EnvironmentContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext\n *\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.VariableList} variables -\n *          variables resource\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList} deployments -\n *          deployments resource\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList} logs -\n *          logs resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid -\n *          The SID of the Service to fetch the Environment resource from\n * @param {sid} sid - The SID of the Environment resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentContext = function EnvironmentContext(version, serviceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = \"/Services/\".concat(serviceSid, \"/Environments/\").concat(sid); // Dependents\n\n  this._variables = undefined;\n  this._deployments = undefined;\n  this._logs = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a EnvironmentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new EnvironmentInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a EnvironmentInstance\n *\n * @function remove\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n\n/* jshint ignore:end */\n\n\nEnvironmentContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(EnvironmentContext.prototype, 'variables', {\n  get: function get() {\n    if (!this._variables) {\n      this._variables = new VariableList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._variables;\n  }\n});\nObject.defineProperty(EnvironmentContext.prototype, 'deployments', {\n  get: function get() {\n    if (!this._deployments) {\n      this._deployments = new DeploymentList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._deployments;\n  }\n});\nObject.defineProperty(EnvironmentContext.prototype, 'logs', {\n  get: function get() {\n    if (!this._logs) {\n      this._logs = new LogList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._logs;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nEnvironmentContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nEnvironmentContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  EnvironmentList: EnvironmentList,\n  EnvironmentPage: EnvironmentPage,\n  EnvironmentInstance: EnvironmentInstance,\n  EnvironmentContext: EnvironmentContext\n};","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio/lib/rest/serverless/v1/service/environment.js"],"names":["Q","require","_","util","DeploymentList","LogList","Page","VariableList","deserialize","values","EnvironmentList","EnvironmentPage","EnvironmentInstance","EnvironmentContext","version","serviceSid","EnvironmentListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","uniqueName","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","buildSid","build_sid","unique_name","domainSuffix","domain_suffix","domainName","domain_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","variables","deployments","logs","_variables","_deployments","_logs","module","exports"],"mappings":"AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAf;AAAuB;;;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;AAA4B;;;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;AAA6B;;;AAC7B,IAAIG,cAAc,GAAGH,OAAO,CAAC,0BAAD,CAAP,CAAoCG,cAAzD;;AACA,IAAIC,OAAO,GAAGJ,OAAO,CAAC,mBAAD,CAAP,CAA6BI,OAA3C;;AACA,IAAIC,IAAI,GAAGL,OAAO,CAAC,uBAAD,CAAlB;AAA8C;;;AAC9C,IAAIM,YAAY,GAAGN,OAAO,CAAC,wBAAD,CAAP,CAAkCM,YAArD;;AACA,IAAIC,WAAW,GAAGP,OAAO,CACrB,8BADqB,CAAzB;AACsC;;;AACtC,IAAIQ,MAAM,GAAGR,OAAO,CAAC,yBAAD,CAApB;AAAkD;;;AAElD,IAAIS,eAAJ;AACA,IAAIC,eAAJ;AACA,IAAIC,mBAAJ;AACA,IAAIC,kBAAJ;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAH,eAAe,GAAG,SAASA,eAAT,CAAyBI,OAAzB,EAAkCC,UAAlC,EAA8C;AAC9D;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;AACA,WAASC,uBAAT,CAAiCC,GAAjC,EAAsC;AACpC,WAAOD,uBAAuB,CAACE,GAAxB,CAA4BD,GAA5B,CAAP;AACD;;AAEDD,EAAAA,uBAAuB,CAACG,QAAxB,GAAmCL,OAAnC,CAf8D,CAgB9D;;AACAE,EAAAA,uBAAuB,CAACI,SAAxB,GAAoC;AAACL,IAAAA,UAAU,EAAEA;AAAb,GAApC;AACAC,EAAAA,uBAAuB,CAACK,IAAxB,uBAA4CN,UAA5C;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;AACAC,EAAAA,uBAAuB,CAACM,IAAxB,GAA+B,SAASA,IAAT,CAAcC,IAAd,EAAoBC,QAApB,EAA8B;AAC3D,QAAItB,CAAC,CAACuB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AACA,QAAIA,IAAI,CAACC,QAAT,EAAmB;AACjBA,MAAAA,QAAQ,GAAGD,IAAI,CAACC,QAAhB;AACD;;AACD,QAAItB,CAAC,CAACwB,WAAF,CAAcF,QAAd,CAAJ,EAA6B;AAC3B,YAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAED,QAAIC,IAAI,GAAG,KAAX;AACA,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,eAAe,GAAG,CAAtB;;AACA,QAAIC,MAAM,GAAG,KAAKZ,QAAL,CAAca,UAAd,CAAyB;AACpCC,MAAAA,KAAK,EAAEV,IAAI,CAACU,KADwB;AAEpCC,MAAAA,QAAQ,EAAEX,IAAI,CAACW;AAFqB,KAAzB,CAAb;;AAKA,aAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzBR,MAAAA,IAAI,GAAG,IAAP;;AACA,UAAI1B,CAAC,CAACuB,UAAF,CAAaF,IAAI,CAACK,IAAlB,CAAJ,EAA6B;AAC3BL,QAAAA,IAAI,CAACK,IAAL,CAAUQ,KAAV;AACD;AACF;;AAED,aAASC,aAAT,CAAuBC,EAAvB,EAA2B;AACzB,UAAIC,OAAO,GAAGD,EAAE,EAAhB;;AACA,UAAIpC,CAAC,CAACwB,WAAF,CAAca,OAAd,CAAJ,EAA4B;AAC1BJ,QAAAA,UAAU;AACV;AACD;;AAEDI,MAAAA,OAAO,CAACC,IAAR,CAAa,UAASC,IAAT,EAAe;AAC1BvC,QAAAA,CAAC,CAACoB,IAAF,CAAOmB,IAAI,CAACC,SAAZ,EAAuB,UAASC,QAAT,EAAmB;AACxC,cAAIf,IAAI,IAAK,CAAC1B,CAAC,CAACwB,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BH,eAAe,IAAIP,IAAI,CAACU,KAAnE,EAA2E;AACzEL,YAAAA,IAAI,GAAG,IAAP;AACA,mBAAO,KAAP;AACD;;AAEDE,UAAAA,eAAe;AACfN,UAAAA,QAAQ,CAACmB,QAAD,EAAWR,UAAX,CAAR;AACD,SARD;;AAUA,YAAKJ,MAAM,CAACa,SAAP,IAAoBb,MAAM,CAACa,SAAP,IAAoBf,WAA7C,EAA2D;AACzDM,UAAAA,UAAU;AACX,SAFD,MAEO,IAAI,CAACP,IAAL,EAAW;AAChBC,UAAAA,WAAW;AACXQ,UAAAA,aAAa,CAACnC,CAAC,CAAC2C,IAAF,CAAOJ,IAAI,CAACK,QAAZ,EAAsBL,IAAtB,CAAD,CAAb;AACD;AACF,OAjBD;AAmBAF,MAAAA,OAAO,CAACQ,KAAR,CAAcZ,UAAd;AACD;;AAEDE,IAAAA,aAAa,CAACnC,CAAC,CAAC2C,IAAF,CAAO,KAAKJ,IAAZ,EAAkB,IAAlB,EAAwBvC,CAAC,CAAC8C,KAAF,CAAQzB,IAAR,EAAcQ,MAAd,CAAxB,CAAD,CAAb;AACD,GA1DD;AA4DA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAf,EAAAA,uBAAuB,CAACiC,IAAxB,GAA+B,SAASA,IAAT,CAAc1B,IAAd,EAAoBC,QAApB,EAA8B;AAC3D,QAAItB,CAAC,CAACuB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,QAAI2B,QAAQ,GAAGlD,CAAC,CAACmD,KAAF,EAAf;AACA,QAAIC,YAAY,GAAG,EAAnB;;AACA7B,IAAAA,IAAI,CAACC,QAAL,GAAgB,UAAS6B,QAAT,EAAmBzB,IAAnB,EAAyB;AACvCwB,MAAAA,YAAY,CAACE,IAAb,CAAkBD,QAAlB;;AAEA,UAAI,CAACnD,CAAC,CAACwB,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BmB,YAAY,CAACG,MAAb,KAAwBhC,IAAI,CAACU,KAA/D,EAAsE;AACpEL,QAAAA,IAAI;AACL;AACF,KAND;;AAQAL,IAAAA,IAAI,CAACK,IAAL,GAAY,UAASQ,KAAT,EAAgB;AAC1B,UAAIlC,CAAC,CAACwB,WAAF,CAAcU,KAAd,CAAJ,EAA0B;AACxBc,QAAAA,QAAQ,CAACM,OAAT,CAAiBJ,YAAjB;AACD,OAFD,MAEO;AACLF,QAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD;AACF,KAND;;AAQA,QAAIlC,CAAC,CAACuB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,MAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,SAAKF,IAAL,CAAUC,IAAV;AACA,WAAO2B,QAAQ,CAACX,OAAhB;AACD,GA9BD;AAgCA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,uBAAuB,CAACyB,IAAxB,GAA+B,SAASA,IAAT,CAAclB,IAAd,EAAoBC,QAApB,EAA8B;AAC3D,QAAItB,CAAC,CAACuB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,QAAI2B,QAAQ,GAAGlD,CAAC,CAACmD,KAAF,EAAf;AACA,QAAIQ,IAAI,GAAGlD,MAAM,CAACmD,EAAP,CAAU;AACnB,mBAAarC,IAAI,CAACsC,SADC;AAEnB,cAAQtC,IAAI,CAACuC,UAFM;AAGnB,kBAAYvC,IAAI,CAACW;AAHE,KAAV,CAAX;;AAMA,QAAIK,OAAO,GAAG,KAAKpB,QAAL,CAAcsB,IAAd,CAAmB;AAACsB,MAAAA,GAAG,EAAE,KAAK1C,IAAX;AAAiB2C,MAAAA,MAAM,EAAE,KAAzB;AAAgCC,MAAAA,MAAM,EAAEN;AAAxC,KAAnB,CAAd;;AAEApB,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS0B,OAAT,EAAkB;AACvChB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI7C,eAAJ,CAAoB,KAAKQ,QAAzB,EAAmC+C,OAAnC,EAA4C,KAAK9C,SAAjD,CAAjB;AACD,KAFsB,CAErByB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAN,IAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,MAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,KAFD;;AAIA,QAAIlC,CAAC,CAACuB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,MAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,WAAO0B,QAAQ,CAACX,OAAhB;AACD,GA7BD;AA+BA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,uBAAuB,CAACmD,OAAxB,GAAkC,SAASA,OAAT,CAAiBC,SAAjB,EAA4B5C,QAA5B,EAAsC;AACtE,QAAI0B,QAAQ,GAAGlD,CAAC,CAACmD,KAAF,EAAf;;AAEA,QAAIZ,OAAO,GAAG,KAAKpB,QAAL,CAAckD,OAAd,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqC;AAACP,MAAAA,MAAM,EAAE,KAAT;AAAgBD,MAAAA,GAAG,EAAEK;AAArB,KAArC,CAAd;;AAEA7B,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS0B,OAAT,EAAkB;AACvChB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI7C,eAAJ,CAAoB,KAAKQ,QAAzB,EAAmC+C,OAAnC,EAA4C,KAAK9C,SAAjD,CAAjB;AACD,KAFsB,CAErByB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAN,IAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,MAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,KAFD;;AAIA,QAAIlC,CAAC,CAACuB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,MAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,WAAO0B,QAAQ,CAACX,OAAhB;AACD,GAlBD;AAoBA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,uBAAuB,CAACwD,MAAxB,GAAiC,SAASA,MAAT,CAAgBjD,IAAhB,EAAsBC,QAAtB,EAAgC;AAC/D,QAAItB,CAAC,CAACwB,WAAF,CAAcH,IAAd,CAAJ,EAAyB;AACvB,YAAM,IAAII,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,QAAIzB,CAAC,CAACwB,WAAF,CAAcH,IAAI,CAACkD,UAAnB,CAAJ,EAAoC;AAClC,YAAM,IAAI9C,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,QAAIuB,QAAQ,GAAGlD,CAAC,CAACmD,KAAF,EAAf;AACA,QAAIQ,IAAI,GAAGlD,MAAM,CAACmD,EAAP,CAAU;AACnB,oBAAc1D,CAAC,CAACgB,GAAF,CAAMK,IAAN,EAAY,YAAZ,CADK;AAEnB,sBAAgBrB,CAAC,CAACgB,GAAF,CAAMK,IAAN,EAAY,cAAZ;AAFG,KAAV,CAAX;;AAKA,QAAIgB,OAAO,GAAG,KAAKpB,QAAL,CAAcqD,MAAd,CAAqB;AAACT,MAAAA,GAAG,EAAE,KAAK1C,IAAX;AAAiB2C,MAAAA,MAAM,EAAE,MAAzB;AAAiCL,MAAAA,IAAI,EAAEA;AAAvC,KAArB,CAAd;;AAEApB,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS0B,OAAT,EAAkB;AACvChB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,mBAAJ,CACf,KAAKO,QADU,EAEf+C,OAFe,EAGf,KAAK9C,SAAL,CAAeL,UAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;AAMD,KAPsB,CAOrB4B,IAPqB,CAOhB,IAPgB,CAAb,CAAV;AASAN,IAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,MAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,KAFD;;AAIA,QAAIlC,CAAC,CAACuB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,MAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,WAAO0B,QAAQ,CAACX,OAAhB;AACD,GAlCD;AAoCA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,uBAAuB,CAACE,GAAxB,GAA8B,SAASA,GAAT,CAAaD,GAAb,EAAkB;AAC9C,WAAO,IAAIJ,kBAAJ,CAAuB,KAAKM,QAA5B,EAAsC,KAAKC,SAAL,CAAeL,UAArD,EAAiEE,GAAjE,CAAP;AACD,GAFD;AAIA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAD,EAAAA,uBAAuB,CAAC0D,MAAxB,GAAiC,SAASA,MAAT,GAAkB;AACjD,WAAO,KAAKtD,SAAZ;AACD,GAFD;;AAIAJ,EAAAA,uBAAuB,CAACb,IAAI,CAACwE,OAAL,CAAaC,MAAd,CAAvB,GAA+C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAC3C;AACF,WAAO3E,IAAI,CAACwE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,GAHD;;AAKA,SAAO9D,uBAAP;AACD,CAhWD;AAmWA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAL,eAAe,GAAG,SAASA,eAAT,CAAyBG,OAAzB,EAAkCiE,QAAlC,EAA4CC,QAA5C,EAAsD;AACtE;AACA,OAAK5D,SAAL,GAAiB4D,QAAjB;AAEA1E,EAAAA,IAAI,CAAC2E,SAAL,CAAeC,WAAf,CAA2BC,IAA3B,CAAgC,IAAhC,EAAsCrE,OAAtC,EAA+CiE,QAA/C,EAAyD,KAAK3D,SAA9D;AACD,CALD;;AAOAlB,CAAC,CAACkF,MAAF,CAASzE,eAAe,CAACsE,SAAzB,EAAoC3E,IAAI,CAAC2E,SAAzC;;AACAtE,eAAe,CAACsE,SAAhB,CAA0BC,WAA1B,GAAwCvE,eAAxC;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,eAAe,CAACsE,SAAhB,CAA0BI,WAA1B,GAAwC,SAASA,WAAT,CAAqBnB,OAArB,EAA8B;AACpE,SAAO,IAAItD,mBAAJ,CAAwB,KAAKO,QAA7B,EAAuC+C,OAAvC,EAAgD,KAAK9C,SAAL,CAAeL,UAA/D,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,eAAe,CAACsE,SAAhB,CAA0BP,MAA1B,GAAmC,SAASA,MAAT,GAAkB;AACnD,MAAIY,KAAK,GAAG,EAAZ;;AACApF,EAAAA,CAAC,CAACqF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAACvF,CAAC,CAACwF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAEvF,CAAC,CAACuB,UAAF,CAAa+D,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUA3E,eAAe,CAACsE,SAAhB,CAA0B9E,IAAI,CAACwE,OAAL,CAAaC,MAAvC,IAAiD,SAASD,OAAT,CAAiBE,KAAjB,EAC7CC,OAD6C,EACpC;AACX,SAAO3E,IAAI,CAACwE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAlE,mBAAmB,GAAG,SAASA,mBAAT,CAA6BE,OAA7B,EAAsCoD,OAAtC,EAA+CnD,UAA/C,EAC8BE,GAD9B,EACmC;AACvD,OAAKE,QAAL,GAAgBL,OAAhB,CADuD,CAGvD;;AACA,OAAKG,GAAL,GAAWiD,OAAO,CAACjD,GAAnB,CAJuD,CAI/B;;AACxB,OAAK0E,UAAL,GAAkBzB,OAAO,CAAC0B,WAA1B,CALuD,CAKhB;;AACvC,OAAK7E,UAAL,GAAkBmD,OAAO,CAAC2B,WAA1B,CANuD,CAMhB;;AACvC,OAAKC,QAAL,GAAgB5B,OAAO,CAAC6B,SAAxB,CAPuD,CAOpB;;AACnC,OAAKtB,UAAL,GAAkBP,OAAO,CAAC8B,WAA1B,CARuD,CAQhB;;AACvC,OAAKC,YAAL,GAAoB/B,OAAO,CAACgC,aAA5B,CATuD,CASZ;;AAC3C,OAAKC,UAAL,GAAkBjC,OAAO,CAACkC,WAA1B,CAVuD,CAUhB;;AACvC,OAAKC,WAAL,GAAmB7F,WAAW,CAAC8F,eAAZ,CAA4BpC,OAAO,CAACqC,YAApC,CAAnB,CAXuD,CAWe;;AACtE,OAAKC,WAAL,GAAmBhG,WAAW,CAAC8F,eAAZ,CAA4BpC,OAAO,CAACuC,YAApC,CAAnB,CAZuD,CAYe;;AACtE,OAAKC,GAAL,GAAWxC,OAAO,CAACwC,GAAnB,CAbuD,CAa/B;;AACxB,OAAKC,KAAL,GAAazC,OAAO,CAACyC,KAArB,CAduD,CAc3B;AAE5B;;AACA,OAAKC,QAAL,GAAgBC,SAAhB;AACA,OAAKzF,SAAL,GAAiB;AAACL,IAAAA,UAAU,EAAEA,UAAb;AAAyBE,IAAAA,GAAG,EAAEA,GAAG,IAAI,KAAKA;AAA1C,GAAjB;AACD,CApBD;;AAsBA6F,MAAM,CAACC,cAAP,CAAsBnG,mBAAmB,CAACqE,SAA1C,EACE,QADF,EACY;AACR/D,EAAAA,GAAG,EAAE,eAAW;AACd,QAAI,CAAC,KAAK0F,QAAV,EAAoB;AAClB,WAAKA,QAAL,GAAgB,IAAI/F,kBAAJ,CACd,KAAKM,QADS,EAEd,KAAKC,SAAL,CAAeL,UAFD,EAGd,KAAKK,SAAL,CAAeH,GAHD,CAAhB;AAKD;;AAED,WAAO,KAAK2F,QAAZ;AACD;AAXO,CADZ;AAeA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAhG,mBAAmB,CAACqE,SAApB,CAA8B+B,KAA9B,GAAsC,SAASA,KAAT,CAAexF,QAAf,EAAyB;AAC7D,SAAO,KAAKyF,MAAL,CAAYD,KAAZ,CAAkBxF,QAAlB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,mBAAmB,CAACqE,SAApB,CAA8BiC,MAA9B,GAAuC,SAASA,MAAT,CAAgB1F,QAAhB,EAA0B;AAC/D,SAAO,KAAKyF,MAAL,CAAYC,MAAZ,CAAmB1F,QAAnB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,mBAAmB,CAACqE,SAApB,CAA8BkC,SAA9B,GAA0C,SAASA,SAAT,GAAqB;AAC7D,SAAO,KAAKF,MAAL,CAAYE,SAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAvG,mBAAmB,CAACqE,SAApB,CAA8BmC,WAA9B,GAA4C,SAASA,WAAT,GAAuB;AACjE,SAAO,KAAKH,MAAL,CAAYG,WAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAxG,mBAAmB,CAACqE,SAApB,CAA8BoC,IAA9B,GAAqC,SAASA,IAAT,GAAgB;AACnD,SAAO,KAAKJ,MAAL,CAAYI,IAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAzG,mBAAmB,CAACqE,SAApB,CAA8BP,MAA9B,GAAuC,SAASA,MAAT,GAAkB;AACvD,MAAIY,KAAK,GAAG,EAAZ;;AACApF,EAAAA,CAAC,CAACqF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAACvF,CAAC,CAACwF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAEvF,CAAC,CAACuB,UAAF,CAAa+D,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUA1E,mBAAmB,CAACqE,SAApB,CAA8B9E,IAAI,CAACwE,OAAL,CAAaC,MAA3C,IAAqD,SAASD,OAAT,CAAiBE,KAAjB,EACjDC,OADiD,EACxC;AACX,SAAO3E,IAAI,CAACwE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAjE,kBAAkB,GAAG,SAASA,kBAAT,CAA4BC,OAA5B,EAAqCC,UAArC,EAAiDE,GAAjD,EAAsD;AACzE,OAAKE,QAAL,GAAgBL,OAAhB,CADyE,CAGzE;;AACA,OAAKM,SAAL,GAAiB;AAACL,IAAAA,UAAU,EAAEA,UAAb;AAAyBE,IAAAA,GAAG,EAAEA;AAA9B,GAAjB;AACA,OAAKI,IAAL,uBAAyBN,UAAzB,2BAAoDE,GAApD,EALyE,CAOzE;;AACA,OAAKqG,UAAL,GAAkBT,SAAlB;AACA,OAAKU,YAAL,GAAoBV,SAApB;AACA,OAAKW,KAAL,GAAaX,SAAb;AACD,CAXD;AAaA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAhG,kBAAkB,CAACoE,SAAnB,CAA6B+B,KAA7B,GAAqC,SAASA,KAAT,CAAexF,QAAf,EAAyB;AAC5D,MAAI0B,QAAQ,GAAGlD,CAAC,CAACmD,KAAF,EAAf;;AACA,MAAIZ,OAAO,GAAG,KAAKpB,QAAL,CAAc6F,KAAd,CAAoB;AAACjD,IAAAA,GAAG,EAAE,KAAK1C,IAAX;AAAiB2C,IAAAA,MAAM,EAAE;AAAzB,GAApB,CAAd;;AAEAzB,EAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS0B,OAAT,EAAkB;AACvChB,IAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,mBAAJ,CACf,KAAKO,QADU,EAEf+C,OAFe,EAGf,KAAK9C,SAAL,CAAeL,UAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;AAMD,GAPsB,CAOrB4B,IAPqB,CAOhB,IAPgB,CAAb,CAAV;AASAN,EAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,IAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,GAFD;;AAIA,MAAIlC,CAAC,CAACuB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,IAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,SAAO0B,QAAQ,CAACX,OAAhB;AACD,CAtBD;AAwBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA1B,kBAAkB,CAACoE,SAAnB,CAA6BiC,MAA7B,GAAsC,SAASA,MAAT,CAAgB1F,QAAhB,EAA0B;AAC9D,MAAI0B,QAAQ,GAAGlD,CAAC,CAACmD,KAAF,EAAf;;AACA,MAAIZ,OAAO,GAAG,KAAKpB,QAAL,CAAc+F,MAAd,CAAqB;AAACnD,IAAAA,GAAG,EAAE,KAAK1C,IAAX;AAAiB2C,IAAAA,MAAM,EAAE;AAAzB,GAArB,CAAd;;AAEAzB,EAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS0B,OAAT,EAAkB;AACvChB,IAAAA,QAAQ,CAACM,OAAT,CAAiBU,OAAjB;AACD,GAFsB,CAErBrB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAN,EAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,IAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,GAFD;;AAIA,MAAIlC,CAAC,CAACuB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,IAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,SAAO0B,QAAQ,CAACX,OAAhB;AACD,CAjBD;;AAmBAuE,MAAM,CAACC,cAAP,CAAsBlG,kBAAkB,CAACoE,SAAzC,EACE,WADF,EACe;AACX/D,EAAAA,GAAG,EAAE,eAAW;AACd,QAAI,CAAC,KAAKoG,UAAV,EAAsB;AACpB,WAAKA,UAAL,GAAkB,IAAI/G,YAAJ,CAAiB,KAAKY,QAAtB,EAAgC,KAAKC,SAAL,CAAeL,UAA/C,EAA2D,KAAKK,SAAL,CAAeH,GAA1E,CAAlB;AACD;;AACD,WAAO,KAAKqG,UAAZ;AACD;AANU,CADf;AAUAR,MAAM,CAACC,cAAP,CAAsBlG,kBAAkB,CAACoE,SAAzC,EACE,aADF,EACiB;AACb/D,EAAAA,GAAG,EAAE,eAAW;AACd,QAAI,CAAC,KAAKqG,YAAV,EAAwB;AACtB,WAAKA,YAAL,GAAoB,IAAInH,cAAJ,CAClB,KAAKe,QADa,EAElB,KAAKC,SAAL,CAAeL,UAFG,EAGlB,KAAKK,SAAL,CAAeH,GAHG,CAApB;AAKD;;AACD,WAAO,KAAKsG,YAAZ;AACD;AAVY,CADjB;AAcAT,MAAM,CAACC,cAAP,CAAsBlG,kBAAkB,CAACoE,SAAzC,EACE,MADF,EACU;AACN/D,EAAAA,GAAG,EAAE,eAAW;AACd,QAAI,CAAC,KAAKsG,KAAV,EAAiB;AACf,WAAKA,KAAL,GAAa,IAAInH,OAAJ,CAAY,KAAKc,QAAjB,EAA2B,KAAKC,SAAL,CAAeL,UAA1C,EAAsD,KAAKK,SAAL,CAAeH,GAArE,CAAb;AACD;;AACD,WAAO,KAAKuG,KAAZ;AACD;AANK,CADV;AAUA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA3G,kBAAkB,CAACoE,SAAnB,CAA6BP,MAA7B,GAAsC,SAASA,MAAT,GAAkB;AACtD,SAAO,KAAKtD,SAAZ;AACD,CAFD;;AAIAP,kBAAkB,CAACoE,SAAnB,CAA6B9E,IAAI,CAACwE,OAAL,CAAaC,MAA1C,IAAoD,SAASD,OAAT,CAAiBE,KAAjB,EAChDC,OADgD,EACvC;AACX,SAAO3E,IAAI,CAACwE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;;AAKA2C,MAAM,CAACC,OAAP,GAAiB;AACfhH,EAAAA,eAAe,EAAEA,eADF;AAEfC,EAAAA,eAAe,EAAEA,eAFF;AAGfC,EAAAA,mBAAmB,EAAEA,mBAHN;AAIfC,EAAAA,kBAAkB,EAAEA;AAJL,CAAjB","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar DeploymentList = require('./environment/deployment').DeploymentList;\nvar LogList = require('./environment/log').LogList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar VariableList = require('./environment/variable').VariableList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar EnvironmentList;\nvar EnvironmentPage;\nvar EnvironmentInstance;\nvar EnvironmentContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the EnvironmentList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentList\n *\n * @param {Twilio.Serverless.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n */\n/* jshint ignore:end */\nEnvironmentList = function EnvironmentList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function environments\n   * @memberof Twilio.Serverless.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext}\n   */\n  /* jshint ignore:end */\n  function EnvironmentListInstance(sid) {\n    return EnvironmentListInstance.get(sid);\n  }\n\n  EnvironmentListInstance._version = version;\n  // Path Solution\n  EnvironmentListInstance._solution = {serviceSid: serviceSid};\n  EnvironmentListInstance._uri = `/Services/${serviceSid}/Environments`;\n  /* jshint ignore:start */\n  /**\n   * Streams EnvironmentInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists EnvironmentInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of EnvironmentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EnvironmentPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of EnvironmentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EnvironmentPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a EnvironmentInstance\n   *\n   * @function create\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.uniqueName -\n   *          A user-defined string that uniquely identifies the Environment resource\n   * @param {string} [opts.domainSuffix] -\n   *          A URL-friendly name that represents the environment\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed EnvironmentInstance\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.uniqueName)) {\n      throw new Error('Required parameter \"opts.uniqueName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DomainSuffix': _.get(opts, 'domainSuffix')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EnvironmentInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a environment\n   *\n   * @function get\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @param {string} sid - The SID of the Environment resource to fetch\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext}\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.get = function get(sid) {\n    return new EnvironmentContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  EnvironmentListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  EnvironmentListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return EnvironmentListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EnvironmentPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EnvironmentSolution} solution - Path solution\n *\n * @returns EnvironmentPage\n */\n/* jshint ignore:end */\nEnvironmentPage = function EnvironmentPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(EnvironmentPage.prototype, Page.prototype);\nEnvironmentPage.prototype.constructor = EnvironmentPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of EnvironmentInstance\n *\n * @function getInstance\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentPage#\n *\n * @param {EnvironmentPayload} payload - Payload response from the API\n *\n * @returns EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentPage.prototype.getInstance = function getInstance(payload) {\n  return new EnvironmentInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEnvironmentPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nEnvironmentPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EnvironmentContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentInstance\n *\n * @property {string} sid -\n *          The unique string that identifies the Environment resource\n * @property {string} accountSid -\n *          The SID of the Account that created the Environment resource\n * @property {string} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n * @property {string} buildSid - The SID of the build deployed in the environment\n * @property {string} uniqueName -\n *          A user-defined string that uniquely identifies the Environment resource\n * @property {string} domainSuffix -\n *          A URL-friendly name that represents the environment\n * @property {string} domainName -\n *          The base domain name for all Functions and Assets deployed in the Environment\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the Environment resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the Environment resource was last updated\n * @property {string} url - The absolute URL of the Environment resource\n * @property {string} links -\n *          The URLs of the Environment resource's nested resources\n *\n * @param {V1} version - Version of the resource\n * @param {EnvironmentPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the Environment resource is associated with\n * @param {sid} sid - The SID of the Environment resource to fetch\n */\n/* jshint ignore:end */\nEnvironmentInstance = function EnvironmentInstance(version, payload, serviceSid,\n                                                    sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.buildSid = payload.build_sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.domainSuffix = payload.domain_suffix; // jshint ignore:line\n  this.domainName = payload.domain_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(EnvironmentInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new EnvironmentContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a EnvironmentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a EnvironmentInstance\n *\n * @function remove\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the variables\n *\n * @function variables\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.VariableList}\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.variables = function variables() {\n  return this._proxy.variables;\n};\n\n/* jshint ignore:start */\n/**\n * Access the deployments\n *\n * @function deployments\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList}\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.deployments = function deployments() {\n  return this._proxy.deployments;\n};\n\n/* jshint ignore:start */\n/**\n * Access the logs\n *\n * @function logs\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList}\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.logs = function logs() {\n  return this._proxy.logs;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEnvironmentInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nEnvironmentInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EnvironmentContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext\n *\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.VariableList} variables -\n *          variables resource\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList} deployments -\n *          deployments resource\n * @property {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList} logs -\n *          logs resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid -\n *          The SID of the Service to fetch the Environment resource from\n * @param {sid} sid - The SID of the Environment resource to fetch\n */\n/* jshint ignore:end */\nEnvironmentContext = function EnvironmentContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Environments/${sid}`;\n\n  // Dependents\n  this._variables = undefined;\n  this._deployments = undefined;\n  this._logs = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a EnvironmentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new EnvironmentInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a EnvironmentInstance\n *\n * @function remove\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EnvironmentInstance\n */\n/* jshint ignore:end */\nEnvironmentContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(EnvironmentContext.prototype,\n  'variables', {\n    get: function() {\n      if (!this._variables) {\n        this._variables = new VariableList(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n      return this._variables;\n    }\n});\n\nObject.defineProperty(EnvironmentContext.prototype,\n  'deployments', {\n    get: function() {\n      if (!this._deployments) {\n        this._deployments = new DeploymentList(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n      return this._deployments;\n    }\n});\n\nObject.defineProperty(EnvironmentContext.prototype,\n  'logs', {\n    get: function() {\n      if (!this._logs) {\n        this._logs = new LogList(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n      return this._logs;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEnvironmentContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nEnvironmentContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  EnvironmentList: EnvironmentList,\n  EnvironmentPage: EnvironmentPage,\n  EnvironmentInstance: EnvironmentInstance,\n  EnvironmentContext: EnvironmentContext\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/*\n@license\nCopyright (c) 2021 Twilio Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n*/\n'use strict';\n\nrequire(\"core-js/modules/es.symbol\");\n\nrequire(\"core-js/modules/es.symbol.description\");\n\nrequire(\"core-js/modules/es.symbol.iterator\");\n\nrequire(\"core-js/modules/es.array.concat\");\n\nrequire(\"core-js/modules/es.array.from\");\n\nrequire(\"core-js/modules/es.array.includes\");\n\nrequire(\"core-js/modules/es.array.iterator\");\n\nrequire(\"core-js/modules/es.array.slice\");\n\nrequire(\"core-js/modules/es.number.constructor\");\n\nrequire(\"core-js/modules/es.number.is-integer\");\n\nrequire(\"core-js/modules/es.object.entries\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.promise\");\n\nrequire(\"core-js/modules/es.reflect.construct\");\n\nrequire(\"core-js/modules/es.string.iterator\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _typeof = require('@babel/runtime/helpers/typeof');\n\nvar _slicedToArray = require('@babel/runtime/helpers/slicedToArray');\n\nvar _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');\n\nvar _classCallCheck = require('@babel/runtime/helpers/classCallCheck');\n\nvar _inherits = require('@babel/runtime/helpers/inherits');\n\nvar _possibleConstructorReturn = require('@babel/runtime/helpers/possibleConstructorReturn');\n\nvar _getPrototypeOf = require('@babel/runtime/helpers/getPrototypeOf');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);\n\nvar _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);\n\nvar _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);\n\nvar _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);\n\nvar _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);\n\nvar _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy(_possibleConstructorReturn);\n\nvar _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy(_getPrototypeOf);\n\nvar custom = function custom() {\n  for (var _len = arguments.length, checks = new Array(_len), _key = 0; _key < _len; _key++) {\n    checks[_key] = arguments[_key];\n  }\n\n  return {\n    checks: checks\n  };\n};\n\nfunction _createForOfIteratorHelper$3(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray$3(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$3(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);\n}\n\nfunction _arrayLikeToArray$3(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar type = function type() {\n  for (var _len = arguments.length, checks = new Array(_len), _key = 0; _key < _len; _key++) {\n    checks[_key] = arguments[_key];\n  }\n\n  return custom(function (value) {\n    var isValid = false;\n    var expectedTypes = [];\n\n    var _iterator = _createForOfIteratorHelper$3(checks),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _type = _step.value;\n\n        if (typeof _type === \"string\") {\n          isValid = isValid || _typeof__default['default'](value) === _type;\n          expectedTypes.push(\"of type \".concat(_type));\n          continue;\n        }\n\n        isValid = isValid || value instanceof _type;\n        expectedTypes.push(\"an instance of \".concat(_type.name));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return [isValid, expectedTypes];\n  });\n};\n\nfunction _createForOfIteratorHelper$2(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray$2(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$2(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);\n}\n\nfunction _arrayLikeToArray$2(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar literal = function literal() {\n  for (var _len = arguments.length, checks = new Array(_len), _key = 0; _key < _len; _key++) {\n    checks[_key] = arguments[_key];\n  }\n\n  return custom(function (value) {\n    var isValid = false;\n    var expectedTypes = [];\n\n    var _iterator = _createForOfIteratorHelper$2(checks),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var type = _step.value;\n        isValid = isValid || value === type;\n        expectedTypes.push(typeof type === \"string\" ? \"\\\"\".concat(type, \"\\\"\") : \"\".concat(type));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return [isValid, expectedTypes];\n  });\n};\n\nvar nonEmptyString = custom(function (value) {\n  return [typeof value === \"string\" && value.length > 0, \"a non-empty string\"];\n});\nvar nonNegativeInteger = custom(function (value) {\n  return [typeof value === \"number\" && Number.isInteger(value) && value >= 0, \"a non-negative integer\"];\n});\nvar pureObject = custom(function (value) {\n  return [_typeof__default['default'](value) === \"object\" && value !== null && !Array.isArray(value), \"a pure object (non-null and non-array)\"];\n});\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf__default['default'](Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf__default['default'](this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn__default['default'](this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _createForOfIteratorHelper$1(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray$1(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);\n}\n\nfunction _arrayLikeToArray$1(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar runtimeTypeValidation = function runtimeTypeValidation(rules, values) {\n  if (values.length > rules.length) {\n    throw new Error(\"Expected at most \".concat(rules.length, \" argument(s), but got \").concat(values.length));\n  }\n\n  while (values.length < rules.length) {\n    values.push(undefined);\n  }\n\n  var _iterator = _createForOfIteratorHelper$1(values.entries()),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray__default['default'](_step.value, 2),\n          index = _step$value[0],\n          value = _step$value[1];\n\n      var _validateValue = validateValue(rules[index], value),\n          _validateValue2 = _slicedToArray__default['default'](_validateValue, 4),\n          isValid = _validateValue2[0],\n          received = _validateValue2[1],\n          expected = _validateValue2[2],\n          delimeter = _validateValue2[3];\n\n      if (isValid) {\n        continue;\n      }\n\n      var argumentIndex = index + 1;\n      throw new Error(\"Argument \".concat(argumentIndex, \" is expected to be \").concat(expected).concat(delimeter, \" but got \").concat(received));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n\nvar stringifyReceivedType = function stringifyReceivedType(value) {\n  var _value$constructor;\n\n  var receivedType;\n  var types = [\"undefined\", \"boolean\", \"number\", \"bigint\", \"string\"];\n\n  if (types.includes(_typeof__default['default'](value))) {\n    receivedType = typeof value === \"string\" ? \"\\\"\".concat(value, \"\\\"\") : \"\".concat(value);\n  }\n\n  if (_typeof__default['default'](value) === \"object\" && (value === null || value === void 0 ? void 0 : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name) !== \"Object\") {\n    var _value$constructor2;\n\n    receivedType = value === null ? \"null\" : \"instance of \".concat(value === null || value === void 0 ? void 0 : (_value$constructor2 = value.constructor) === null || _value$constructor2 === void 0 ? void 0 : _value$constructor2.name);\n  }\n\n  if (!receivedType) {\n    receivedType = _typeof__default['default'](value);\n  }\n\n  return receivedType;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nvar validateConstructorTypes = function validateConstructorTypes() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var finalRuleSet = convertRuleArguments(args);\n  return function (ctor) {\n    return /*#__PURE__*/function (_ctor) {\n      _inherits__default['default'](_class, _ctor);\n\n      var _super = _createSuper(_class);\n\n      function _class() {\n        _classCallCheck__default['default'](this, _class);\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        runtimeTypeValidation(finalRuleSet, args);\n        return _super.call.apply(_super, [this].concat(args));\n      }\n\n      return _class;\n    }(ctor);\n  };\n};\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n\nvar validateTypes = function validateTypes() {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  var finalRuleSet = convertRuleArguments(args);\n  return function (target, propertyKey, descriptor) {\n    if (typeof descriptor.value !== \"function\") {\n      throw new Error(\"The validateTypes decorator can only be applied to methods\");\n    }\n\n    var originalMethod = descriptor.value;\n\n    descriptor.value = function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      runtimeTypeValidation(finalRuleSet, args);\n      return originalMethod.apply(this, args);\n    };\n  };\n};\n\nvar validateTypesAsync = function validateTypesAsync() {\n  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    args[_key5] = arguments[_key5];\n  }\n\n  var finalRuleSet = convertRuleArguments(args);\n  return function (target, propertyKey, descriptor) {\n    if (typeof descriptor.value !== \"function\") {\n      throw new Error(\"The validateTypesAsync decorator can only be applied to methods\");\n    }\n\n    var originalMethod = descriptor.value;\n\n    descriptor.value = function () {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n\n      try {\n        runtimeTypeValidation(finalRuleSet, args);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n\n      return originalMethod.apply(this, args);\n    };\n  };\n};\n\nvar convertRuleArguments = function convertRuleArguments(args) {\n  var finalRuleDefinitionSet = [];\n\n  var _iterator2 = _createForOfIteratorHelper$1(args),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var arg = _step2.value;\n      finalRuleDefinitionSet.push(convertRuleArgument(arg));\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return finalRuleDefinitionSet;\n};\n\nvar convertRuleArgument = function convertRuleArgument(arg) {\n  var finalArgumentRuleDefinitions = [];\n  var declaredRules = Array.isArray(arg) ? arg : [arg];\n\n  var _iterator3 = _createForOfIteratorHelper$1(declaredRules),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var rule = _step3.value;\n\n      if (typeof rule === \"string\" || typeof rule === \"function\") {\n        finalArgumentRuleDefinitions.push(type(rule));\n        continue;\n      }\n\n      finalArgumentRuleDefinitions.push(rule);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return finalArgumentRuleDefinitions;\n};\n\nvar validateValue = function validateValue(ruleDefinitions, value) {\n  var expectedTypes = [];\n  var customReceivedType;\n  var isValid = false;\n\n  var _iterator4 = _createForOfIteratorHelper$1(ruleDefinitions),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var definition = _step4.value;\n\n      var _iterator5 = _createForOfIteratorHelper$1(definition.checks),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var check = _step5.value;\n\n          var _check = check(value),\n              _check2 = _slicedToArray__default['default'](_check, 3),\n              checkPassed = _check2[0],\n              typeDescription = _check2[1],\n              _receivedType = _check2[2];\n\n          isValid = isValid || checkPassed;\n\n          if (!customReceivedType && _receivedType) {\n            customReceivedType = _receivedType;\n          }\n\n          if (typeDescription) {\n            expectedTypes = typeof typeDescription === \"string\" ? [].concat(_toConsumableArray__default['default'](expectedTypes), [typeDescription]) : [].concat(_toConsumableArray__default['default'](expectedTypes), _toConsumableArray__default['default'](typeDescription));\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  if (isValid) {\n    return [true];\n  }\n\n  var receivedType = customReceivedType || stringifyReceivedType(value);\n  var lastIndex = expectedTypes.length - 1;\n  var expectedTypesString = lastIndex > 0 ? \"\".concat(expectedTypes.slice(0, lastIndex).join(\", \"), \" or \").concat(expectedTypes[lastIndex]) : expectedTypes.join(\", \");\n  return [false, receivedType, expectedTypesString, lastIndex > 1 ? \";\" : \",\"];\n};\n\nvar objectSchema = function objectSchema(name, schema) {\n  return custom(function (object) {\n    if (_typeof__default['default'](object) !== \"object\" || object === null || Array.isArray(object)) {\n      return [false, \"valid \".concat(name, \" (should be a pure object)\")];\n    }\n\n    for (var _i = 0, _Object$entries = Object.entries(schema); _i < _Object$entries.length; _i++) {\n      var _Object$entries$_i = _slicedToArray__default['default'](_Object$entries[_i], 2),\n          key = _Object$entries$_i[0],\n          rules = _Object$entries$_i[1];\n\n      var _validateValue = validateValue(convertRuleArgument(rules), object[key]),\n          _validateValue2 = _slicedToArray__default['default'](_validateValue, 3),\n          isValid = _validateValue2[0],\n          received = _validateValue2[1],\n          expected = _validateValue2[2];\n\n      if (!isValid) {\n        return [false, \"valid \".concat(name, \" (key \\\"\").concat(key, \"\\\" should be \").concat(expected, \")\"), \"malformed \".concat(name, \" (key \\\"\").concat(key, \"\\\" is \").concat(received, \")\")];\n      }\n    }\n\n    return [true];\n  });\n};\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar array = function array(name, rules) {\n  return custom(function (value) {\n    if (!Array.isArray(value)) {\n      return [false, \"an array of \".concat(name)];\n    }\n\n    var _iterator = _createForOfIteratorHelper(value.entries()),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray__default['default'](_step.value, 2),\n            key = _step$value[0],\n            valueOfKey = _step$value[1];\n\n        var _validateValue = validateValue(convertRuleArgument(rules), valueOfKey),\n            _validateValue2 = _slicedToArray__default['default'](_validateValue, 3),\n            isValid = _validateValue2[0],\n            received = _validateValue2[1],\n            expected = _validateValue2[2];\n\n        if (!isValid) {\n          return [false, \"a valid array of \".concat(name, \" (index \").concat(key, \" should be \").concat(expected, \")\"), \"malformed array of \".concat(name, \" (index \").concat(key, \" is \").concat(received, \")\")];\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return [true];\n  });\n};\n\nexports.array = array;\nexports.custom = custom;\nexports.literal = literal;\nexports.nonEmptyString = nonEmptyString;\nexports.nonNegativeInteger = nonNegativeInteger;\nexports.objectSchema = objectSchema;\nexports.pureObject = pureObject;\nexports.runtimeTypeValidation = runtimeTypeValidation;\nexports.stringifyReceivedType = stringifyReceivedType;\nexports.type = type;\nexports.validateConstructorTypes = validateConstructorTypes;\nexports.validateTypes = validateTypes;\nexports.validateTypesAsync = validateTypesAsync;","map":{"version":3,"sources":["../src/rules/custom.ts","../src/rules/type.ts","../src/rules/literal.ts","../src/rules/non-empty-string.ts","../src/rules/non-negative-integer.ts","../src/rules/pure-object.ts","../src/type-validator.ts","../src/rules/object-schema.ts","../src/rules/array.ts"],"names":["_typeof"],"mappings":"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","sourcesContent":["import { RuleDefinition, RuleFunction } from \"../type-validator\";\n\nexport const custom = (...checks: RuleFunction[]): RuleDefinition => ({\n  checks,\n});\n","import { RuleDefinition, TypeRule } from \"../type-validator\";\nimport { custom } from \"./custom\";\n\nexport const type = (...checks: TypeRule[]): RuleDefinition =>\n  custom((value: unknown) => {\n    let isValid = false;\n    const expectedTypes: string[] = [];\n\n    for (const type of checks) {\n      if (typeof type === \"string\") {\n        isValid = isValid || typeof value === type;\n        expectedTypes.push(`of type ${type}`);\n\n        continue;\n      }\n\n      isValid = isValid || value instanceof type;\n      expectedTypes.push(`an instance of ${type.name}`);\n    }\n\n    return [isValid, expectedTypes];\n  });\n","import { RuleDefinition } from \"../type-validator\";\nimport { custom } from \"./custom\";\n\nexport const literal = (...checks: unknown[]): RuleDefinition =>\n  custom((value: unknown) => {\n    let isValid = false;\n    const expectedTypes = [];\n\n    for (const type of checks) {\n      isValid = isValid || value === type;\n      expectedTypes.push(typeof type === \"string\" ? `\"${type}\"` : `${type}`);\n    }\n\n    return [isValid, expectedTypes];\n  });\n","import { RuleDefinition } from \"../type-validator\";\nimport { custom } from \"./custom\";\n\nexport const nonEmptyString: RuleDefinition = custom((value) => [\n  typeof value === \"string\" && value.length > 0,\n  \"a non-empty string\",\n]);\n","import { RuleDefinition } from \"../type-validator\";\nimport { custom } from \"./custom\";\n\nexport const nonNegativeInteger: RuleDefinition = custom((value) => [\n  typeof value === \"number\" && Number.isInteger(value) && value >= 0,\n  \"a non-negative integer\",\n]);\n","import { RuleDefinition } from \"../type-validator\";\nimport { custom } from \"./custom\";\n\nexport const pureObject: RuleDefinition = custom((value) => [\n  typeof value === \"object\" && value !== null && !Array.isArray(value),\n  \"a pure object (non-null and non-array)\",\n]);\n","import { type } from \"./rules/type\";\n\nexport type TypeRule =\n  | \"undefined\"\n  | \"object\"\n  | \"boolean\"\n  | \"number\"\n  | \"bigint\"\n  | \"string\"\n  | \"symbol\"\n  | \"function\"\n  | { new (...args: unknown[]): unknown };\n\nexport type RuleFunction = (\n  value: unknown\n) => [boolean, (string | string[])?, string?];\n\nexport type RuleDefinition = {\n  checks: RuleFunction[];\n};\n\nexport type RuleArgument =\n  | TypeRule\n  | RuleDefinition\n  | (TypeRule | RuleDefinition)[];\n\ntype Decorator = (\n  target: unknown,\n  propertyKey: string,\n  descriptor: PropertyDescriptor\n) => void;\n\nexport const runtimeTypeValidation = (\n  rules: RuleDefinition[][],\n  values: unknown[]\n): void => {\n  if (values.length > rules.length) {\n    throw new Error(\n      `Expected at most ${rules.length} argument(s), but got ${values.length}`\n    );\n  }\n\n  while (values.length < rules.length) {\n    values.push(undefined);\n  }\n\n  for (const [index, value] of values.entries()) {\n    const [isValid, received, expected, delimeter] = validateValue(\n      rules[index],\n      value\n    );\n\n    if (isValid) {\n      continue;\n    }\n\n    const argumentIndex = index + 1;\n\n    throw new Error(\n      `Argument ${argumentIndex} is expected to be ${expected}${delimeter} but got ${received}`\n    );\n  }\n};\n\nexport const stringifyReceivedType = (value: unknown): string => {\n  let receivedType;\n  const types = [\"undefined\", \"boolean\", \"number\", \"bigint\", \"string\"];\n\n  if (types.includes(typeof value)) {\n    receivedType = typeof value === \"string\" ? `\"${value}\"` : `${value}`;\n  }\n\n  if (typeof value === \"object\" && value?.constructor?.name !== \"Object\") {\n    receivedType =\n      value === null ? \"null\" : `instance of ${value?.constructor?.name}`;\n  }\n\n  if (!receivedType) {\n    receivedType = typeof value;\n  }\n\n  return receivedType;\n};\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport const validateConstructorTypes = (\n  ...args: RuleArgument[]\n): (<T extends new (...args: any[]) => any>(ctor: T) => T) => {\n  const finalRuleSet = convertRuleArguments(args);\n\n  return <T extends { new (...args: any[]): any }>(ctor: T): T => {\n    return class extends ctor {\n      constructor(...args: any[]) {\n        runtimeTypeValidation(finalRuleSet, args);\n        super(...args);\n      }\n    };\n  };\n};\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nexport const validateTypes = (...args: RuleArgument[]): Decorator => {\n  const finalRuleSet = convertRuleArguments(args);\n\n  return (\n    target: unknown,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) => {\n    if (typeof descriptor.value !== \"function\") {\n      throw new Error(\n        \"The validateTypes decorator can only be applied to methods\"\n      );\n    }\n\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function (...args: unknown[]) {\n      runtimeTypeValidation(finalRuleSet, args);\n      return originalMethod.apply(this, args);\n    };\n  };\n};\n\nexport const validateTypesAsync = (...args: RuleArgument[]): Decorator => {\n  const finalRuleSet = convertRuleArguments(args);\n\n  return (\n    target: unknown,\n    propertyKey: string,\n    descriptor: PropertyDescriptor\n  ) => {\n    if (typeof descriptor.value !== \"function\") {\n      throw new Error(\n        \"The validateTypesAsync decorator can only be applied to methods\"\n      );\n    }\n\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function (...args: unknown[]) {\n      try {\n        runtimeTypeValidation(finalRuleSet, args);\n      } catch (e) {\n        return Promise.reject<Error>(e);\n      }\n\n      return originalMethod.apply(this, args);\n    };\n  };\n};\n\nexport const convertRuleArguments = (\n  args: RuleArgument[]\n): RuleDefinition[][] => {\n  const finalRuleDefinitionSet: RuleDefinition[][] = [];\n\n  for (const arg of args) {\n    finalRuleDefinitionSet.push(convertRuleArgument(arg));\n  }\n\n  return finalRuleDefinitionSet;\n};\n\nexport const convertRuleArgument = (arg: RuleArgument): RuleDefinition[] => {\n  const finalArgumentRuleDefinitions: RuleDefinition[] = [];\n  const declaredRules = Array.isArray(arg) ? arg : [arg];\n\n  for (const rule of declaredRules) {\n    if (typeof rule === \"string\" || typeof rule === \"function\") {\n      finalArgumentRuleDefinitions.push(type(rule));\n      continue;\n    }\n\n    finalArgumentRuleDefinitions.push(rule);\n  }\n\n  return finalArgumentRuleDefinitions;\n};\n\nexport const validateValue = (\n  ruleDefinitions: RuleDefinition[],\n  value: unknown\n): [true] | [false, string, string, string] => {\n  let expectedTypes: string[] = [];\n  let customReceivedType: string | undefined;\n  let isValid = false;\n\n  for (const definition of ruleDefinitions) {\n    for (const check of definition.checks) {\n      const [checkPassed, typeDescription, receivedType] = check(value);\n      isValid = isValid || checkPassed;\n\n      if (!customReceivedType && receivedType) {\n        customReceivedType = receivedType;\n      }\n\n      if (typeDescription) {\n        expectedTypes =\n          typeof typeDescription === \"string\"\n            ? [...expectedTypes, typeDescription]\n            : [...expectedTypes, ...typeDescription];\n      }\n    }\n  }\n\n  if (isValid) {\n    return [true];\n  }\n\n  const receivedType = customReceivedType || stringifyReceivedType(value);\n  const lastIndex = expectedTypes.length - 1;\n  const expectedTypesString =\n    lastIndex > 0\n      ? `${expectedTypes.slice(0, lastIndex).join(\", \")} or ${\n          expectedTypes[lastIndex]\n        }`\n      : expectedTypes.join(\", \");\n\n  return [false, receivedType, expectedTypesString, lastIndex > 1 ? \";\" : \",\"];\n};\n","import {\n  convertRuleArgument,\n  RuleArgument,\n  RuleDefinition,\n  validateValue,\n} from \"../type-validator\";\nimport { custom } from \"./custom\";\n\nexport const objectSchema = (\n  name: string,\n  schema: Record<string, RuleArgument>\n): RuleDefinition =>\n  custom((object) => {\n    if (\n      typeof object !== \"object\" ||\n      object === null ||\n      Array.isArray(object)\n    ) {\n      return [false, `valid ${name} (should be a pure object)`];\n    }\n\n    for (const [key, rules] of Object.entries(schema)) {\n      const [isValid, received, expected] = validateValue(\n        convertRuleArgument(rules),\n        (object as Record<string, unknown>)[key]\n      );\n\n      if (!isValid) {\n        return [\n          false,\n          `valid ${name} (key \"${key}\" should be ${expected})`,\n          `malformed ${name} (key \"${key}\" is ${received})`,\n        ];\n      }\n    }\n\n    return [true];\n  });\n","import {\n  convertRuleArgument,\n  RuleArgument,\n  RuleDefinition,\n  validateValue,\n} from \"../type-validator\";\nimport { custom } from \"./custom\";\n\nexport const array = (name: string, rules: RuleArgument): RuleDefinition =>\n  custom((value) => {\n    if (!Array.isArray(value)) {\n      return [false, `an array of ${name}`];\n    }\n\n    for (const [key, valueOfKey] of value.entries()) {\n      const [isValid, received, expected] = validateValue(\n        convertRuleArgument(rules),\n        valueOfKey\n      );\n\n      if (!isValid) {\n        return [\n          false,\n          `a valid array of ${name} (index ${key} should be ${expected})`,\n          `malformed array of ${name} (index ${key} is ${received})`,\n        ];\n      }\n    }\n\n    return [true];\n  });\n"]},"metadata":{},"sourceType":"script"}
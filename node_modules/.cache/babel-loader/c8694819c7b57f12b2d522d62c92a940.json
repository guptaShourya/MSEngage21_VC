{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GrayscaleProcessor = void 0;\n\nvar Processor_1 = require(\"../Processor\");\n/**\n * @private\n * The [[GrayscaleProcessor]] is a [[Processor]] which applies\n * a grayscale transform to a frame.\n */\n\n\nvar GrayscaleProcessor =\n/** @class */\nfunction (_super) {\n  __extends(GrayscaleProcessor, _super);\n\n  function GrayscaleProcessor() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Applies a grayscale transform to the input frame and draw the results to an output frame.\n   * @param inputFrameBuffer - The source of the input frame to process.\n   * @param outputFrameBuffer - The output frame buffer to use to draw the processed frame.\n   */\n\n\n  GrayscaleProcessor.prototype.processFrame = function (inputFrameBuffer, outputFrameBuffer) {\n    var context = outputFrameBuffer.getContext('2d');\n\n    if (context) {\n      context.filter = 'grayscale(100%)';\n      context.drawImage(inputFrameBuffer, 0, 0, inputFrameBuffer.width, inputFrameBuffer.height);\n    }\n  };\n\n  return GrayscaleProcessor;\n}(Processor_1.Processor);\n\nexports.GrayscaleProcessor = GrayscaleProcessor;","map":{"version":3,"sources":["../../../lib/processors/grayscale/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAEA;;;;AAIG;;;AACH,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;;AAAxC,WAAA,kBAAA,GAAA;;AAcC;AAZC;;;;AAIG;;;AACH,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,gBAAb,EAAgD,iBAAhD,EAAoF;AAClF,QAAM,OAAO,GAAG,iBAAiB,CAAC,UAAlB,CAA6B,IAA7B,CAAhB;;AACA,QAAI,OAAJ,EAAa;AACX,MAAA,OAAO,CAAC,MAAR,GAAiB,iBAAjB;AACA,MAAA,OAAO,CAAC,SAAR,CAAkB,gBAAlB,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,gBAAgB,CAAC,KAA3D,EAAkE,gBAAgB,CAAC,MAAnF;AACD;AACF,GAND;;AAOF,SAAA,kBAAA;AAAC,CAdD,CAAwC,WAAA,CAAA,SAAxC,CAAA;;AAAa,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourcesContent":["import { Processor } from '../Processor';\n\n/**\n * @private\n * The [[GrayscaleProcessor]] is a [[Processor]] which applies\n * a grayscale transform to a frame.\n */\nexport class GrayscaleProcessor extends Processor {\n\n  /**\n   * Applies a grayscale transform to the input frame and draw the results to an output frame.\n   * @param inputFrameBuffer - The source of the input frame to process.\n   * @param outputFrameBuffer - The output frame buffer to use to draw the processed frame.\n   */\n  processFrame(inputFrameBuffer: OffscreenCanvas, outputFrameBuffer: HTMLCanvasElement): void {\n    const context = outputFrameBuffer.getContext('2d');\n    if (context) {\n      context.filter = 'grayscale(100%)';\n      context.drawImage(inputFrameBuffer, 0, 0, inputFrameBuffer.width, inputFrameBuffer.height);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentSum } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImplCPU } from '../kernel_utils/shared';\nexport function sparseSegmentSum(args) {\n  const inputs = args.inputs,\n        backend = args.backend;\n  const data = inputs.data,\n        indices = inputs.indices,\n        segmentIds = inputs.segmentIds;\n\n  if (data.shape.length < 1) {\n    throw new Error(\"Data should be at least 1 dimensional but received scalar\");\n  }\n\n  if (indices.shape.length !== 1) {\n    throw new Error(\"Indices should be a vector but received shape\\n             \".concat(indices.shape));\n  }\n\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(\"Segment ids should be a vector but received shape\\n             \".concat(segmentIds.shape));\n  }\n\n  const $data = backend.readSync(data.dataId);\n  const $indices = backend.readSync(indices.dataId);\n  const $segmentIds = backend.readSync(segmentIds.dataId);\n\n  const _sparseSegmentReducti = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds),\n        _sparseSegmentReducti2 = _slicedToArray(_sparseSegmentReducti, 2),\n        outputData = _sparseSegmentReducti2[0],\n        outputDataShape = _sparseSegmentReducti2[1];\n\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport const sparseSegmentSumConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentSum\n};","map":{"version":3,"sources":["../../src/kernels/SparseSegmentSum.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,gBAAlC,QAAyG,uBAAzG;AAGA,SAAQ,6BAAR,QAA4C,wBAA5C;AAEA,OAAM,SAAU,gBAAV,CACF,IADE,EAC+D;AAAA,QAE5D,MAF4D,GAEzC,IAFyC,CAE5D,MAF4D;AAAA,QAEpD,OAFoD,GAEzC,IAFyC,CAEpD,OAFoD;AAAA,QAG5D,IAH4D,GAG/B,MAH+B,CAG5D,IAH4D;AAAA,QAGtD,OAHsD,GAG/B,MAH+B,CAGtD,OAHsD;AAAA,QAG7C,UAH6C,GAG/B,MAH+B,CAG7C,UAH6C;;AAInE,MAAI,IAAI,CAAC,KAAL,CAAW,MAAX,GAAoB,CAAxB,EAA2B;AACzB,UAAM,IAAI,KAAJ,6DAAN;AAED;;AACD,MAAI,OAAO,CAAC,KAAR,CAAc,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,UAAM,IAAI,KAAJ,uEACK,OAAO,CAAC,KADb,EAAN;AAED;;AACD,MAAI,UAAU,CAAC,KAAX,CAAiB,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,UAAM,IAAI,KAAJ,2EACK,UAAU,CAAC,KADhB,EAAN;AAED;;AAED,QAAM,KAAK,GAAG,OAAO,CAAC,QAAR,CAAiB,IAAI,CAAC,MAAtB,CAAd;AACA,QAAM,QAAQ,GAAG,OAAO,CAAC,QAAR,CAAiB,OAAO,CAAC,MAAzB,CAAjB;AACA,QAAM,WAAW,GAAG,OAAO,CAAC,QAAR,CAAiB,UAAU,CAAC,MAA5B,CAApB;;AAnBmE,gCAqB7B,6BAA6B,CAC/D,KAD+D,EACxD,IAAI,CAAC,KADmD,EAC5C,IAAI,CAAC,KADuC,EAChC,QADgC,EACtB,WADsB,CArBA;AAAA;AAAA,QAqB5D,UArB4D;AAAA,QAqBhD,eArBgD;;AAuBnE,SAAO,OAAO,CAAC,cAAR,CAAuB,eAAvB,EAAwC,IAAI,CAAC,KAA7C,EAAoD,UAApD,CAAP;AACD;AAED,OAAO,MAAM,sBAAsB,GAAiB;AAClD,EAAA,UAAU,EAAE,gBADsC;AAElD,EAAA,WAAW,EAAE,OAFqC;AAGlD,EAAA,UAAU,EAAE;AAHsC,CAA7C","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentSum as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @classdesc A Media represents a metadata information for the media upload\n * @property {String} sid - The server-assigned unique identifier for Media\n * @property {String} serviceSid - Service instance id which Media belongs/uploaded to\n * @property {Date} dateCreated - When the Media was created\n * @property {Date} dateUpdated - When the Media was updated\n * @property {Number} size - Size of media, bytes\n * @property {String} contentType - content type of media\n * @property {String} fileName - file name, if present, null otherwise\n */\n\nvar Media = /*#__PURE__*/function () {\n  function Media(config, network, data) {\n    _classCallCheck(this, Media);\n\n    this.config = config;\n    this.network = network;\n\n    this._update(data);\n  }\n\n  _createClass(Media, [{\n    key: \"getContentUrl\",\n\n    /**\n     * Returns direct content URL to uploaded binary\n     * @public\n     * @returns {Promise<string>}\n     */\n    value: function () {\n      var _getContentUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.network.get(\"\".concat(this.config.baseUrl, \"/\").concat(this.sid));\n\n              case 2:\n                response = _context.sent;\n\n                this._update(response.body);\n\n                return _context.abrupt(\"return\", Promise.resolve(this.state.contentDirectUrl));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getContentUrl() {\n        return _getContentUrl.apply(this, arguments);\n      }\n\n      return getContentUrl;\n    }()\n  }, {\n    key: \"_update\",\n    value: function _update(data) {\n      this.state = {\n        sid: data.sid,\n        serviceSid: data.service_sid,\n        channelSid: data.channel_sid,\n        messageSid: data.message_sid,\n        dateCreated: data.date_created ? new Date(data.date_created) : null,\n        dateUpdated: data.date_updated ? new Date(data.date_updated) : null,\n        size: data.size,\n        contentType: data.content_type,\n        url: data.url,\n        contentUrl: data.links.content,\n        contentDirectUrl: data.links.content_direct_temporary,\n        filename: data.filename ? data.filename : null\n      };\n    }\n  }, {\n    key: \"sid\",\n    get: function get() {\n      return this.state.sid;\n    }\n  }, {\n    key: \"serviceSid\",\n    get: function get() {\n      return this.state.serviceSid;\n    }\n  }, {\n    key: \"dateCreated\",\n    get: function get() {\n      return this.state.dateCreated;\n    }\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.state.dateUpdated;\n    }\n  }, {\n    key: \"contentType\",\n    get: function get() {\n      return this.state.contentType;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.state.size;\n    }\n  }, {\n    key: \"fileName\",\n    get: function get() {\n      return this.state.filename;\n    }\n  }]);\n\n  return Media;\n}();\n\nexports.Media = Media;","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio-mcs-client/lib/media.js"],"names":["Object","defineProperty","exports","value","Media","config","network","data","_update","get","baseUrl","sid","response","body","Promise","resolve","state","contentDirectUrl","serviceSid","service_sid","channelSid","channel_sid","messageSid","message_sid","dateCreated","date_created","Date","dateUpdated","date_updated","size","contentType","content_type","url","contentUrl","links","content","content_direct_temporary","filename"],"mappings":"AAAA;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,K;AACF,iBAAYC,MAAZ,EAAoBC,OAApB,EAA6BC,IAA7B,EAAmC;AAAA;;AAC/B,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;;AACA,SAAKE,OAAL,CAAaD,IAAb;AACH;;;;;AAQD;AACJ;AACA;AACA;AACA;;;;;;;;;uBAE6B,KAAKD,OAAL,CAAaG,GAAb,WAAoB,KAAKJ,MAAL,CAAYK,OAAhC,cAA2C,KAAKC,GAAhD,E;;;AAAjBC,gBAAAA,Q;;AACJ,qBAAKJ,OAAL,CAAaI,QAAQ,CAACC,IAAtB;;iDACOC,OAAO,CAACC,OAAR,CAAgB,KAAKC,KAAL,CAAWC,gBAA3B,C;;;;;;;;;;;;;;;;;;4BAEHV,I,EAAM;AACV,WAAKS,KAAL,GAAa;AACTL,QAAAA,GAAG,EAAEJ,IAAI,CAACI,GADD;AAETO,QAAAA,UAAU,EAAEX,IAAI,CAACY,WAFR;AAGTC,QAAAA,UAAU,EAAEb,IAAI,CAACc,WAHR;AAITC,QAAAA,UAAU,EAAEf,IAAI,CAACgB,WAJR;AAKTC,QAAAA,WAAW,EAAEjB,IAAI,CAACkB,YAAL,GAAoB,IAAIC,IAAJ,CAASnB,IAAI,CAACkB,YAAd,CAApB,GAAkD,IALtD;AAMTE,QAAAA,WAAW,EAAEpB,IAAI,CAACqB,YAAL,GAAoB,IAAIF,IAAJ,CAASnB,IAAI,CAACqB,YAAd,CAApB,GAAkD,IANtD;AAOTC,QAAAA,IAAI,EAAEtB,IAAI,CAACsB,IAPF;AAQTC,QAAAA,WAAW,EAAEvB,IAAI,CAACwB,YART;AASTC,QAAAA,GAAG,EAAEzB,IAAI,CAACyB,GATD;AAUTC,QAAAA,UAAU,EAAE1B,IAAI,CAAC2B,KAAL,CAAWC,OAVd;AAWTlB,QAAAA,gBAAgB,EAAEV,IAAI,CAAC2B,KAAL,CAAWE,wBAXpB;AAYTC,QAAAA,QAAQ,EAAE9B,IAAI,CAAC8B,QAAL,GAAgB9B,IAAI,CAAC8B,QAArB,GAAgC;AAZjC,OAAb;AAcH;;;wBAhCS;AAAE,aAAO,KAAKrB,KAAL,CAAWL,GAAlB;AAAwB;;;wBACnB;AAAE,aAAO,KAAKK,KAAL,CAAWE,UAAlB;AAA+B;;;wBAChC;AAAE,aAAO,KAAKF,KAAL,CAAWQ,WAAlB;AAAgC;;;wBAClC;AAAE,aAAO,KAAKR,KAAL,CAAWW,WAAlB;AAAgC;;;wBAClC;AAAE,aAAO,KAAKX,KAAL,CAAWc,WAAlB;AAAgC;;;wBACzC;AAAE,aAAO,KAAKd,KAAL,CAAWa,IAAlB;AAAyB;;;wBACvB;AAAE,aAAO,KAAKb,KAAL,CAAWqB,QAAlB;AAA6B;;;;;;AA4BlDnC,OAAO,CAACE,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @classdesc A Media represents a metadata information for the media upload\n * @property {String} sid - The server-assigned unique identifier for Media\n * @property {String} serviceSid - Service instance id which Media belongs/uploaded to\n * @property {Date} dateCreated - When the Media was created\n * @property {Date} dateUpdated - When the Media was updated\n * @property {Number} size - Size of media, bytes\n * @property {String} contentType - content type of media\n * @property {String} fileName - file name, if present, null otherwise\n */\nclass Media {\n    constructor(config, network, data) {\n        this.config = config;\n        this.network = network;\n        this._update(data);\n    }\n    get sid() { return this.state.sid; }\n    get serviceSid() { return this.state.serviceSid; }\n    get dateCreated() { return this.state.dateCreated; }\n    get dateUpdated() { return this.state.dateUpdated; }\n    get contentType() { return this.state.contentType; }\n    get size() { return this.state.size; }\n    get fileName() { return this.state.filename; }\n    /**\n     * Returns direct content URL to uploaded binary\n     * @public\n     * @returns {Promise<string>}\n     */\n    async getContentUrl() {\n        let response = await this.network.get(`${this.config.baseUrl}/${this.sid}`);\n        this._update(response.body);\n        return Promise.resolve(this.state.contentDirectUrl);\n    }\n    _update(data) {\n        this.state = {\n            sid: data.sid,\n            serviceSid: data.service_sid,\n            channelSid: data.channel_sid,\n            messageSid: data.message_sid,\n            dateCreated: data.date_created ? new Date(data.date_created) : null,\n            dateUpdated: data.date_updated ? new Date(data.date_updated) : null,\n            size: data.size,\n            contentType: data.content_type,\n            url: data.url,\n            contentUrl: data.links.content,\n            contentDirectUrl: data.links.content_direct_temporary,\n            filename: data.filename ? data.filename : null\n        };\n    }\n}\nexports.Media = Media;\n"]},"metadata":{},"sourceType":"script"}
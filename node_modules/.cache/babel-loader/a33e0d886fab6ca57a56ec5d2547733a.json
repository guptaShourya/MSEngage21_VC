{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/RoomHeader.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport CallEndIcon from '@material-ui/icons/CallEndTwoTone';\nimport VideocamIcon from '@material-ui/icons/VideocamTwoTone';\nimport VideocamOffIcon from '@material-ui/icons/VideocamOffTwoTone';\nimport MicIcon from '@material-ui/icons/MicTwoTone';\nimport MicOffIcon from '@material-ui/icons/MicOffTwoTone';\nimport GroupAddIcon from '@material-ui/icons/GroupAddTwoTone';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport ScreenShareTwoToneIcon from '@material-ui/icons/ScreenShareTwoTone';\nimport CancelPresentationTwoToneIcon from '@material-ui/icons/CancelPresentationTwoTone';\nimport TextChat from './TextChat';\n\nconst RoomHeader = ({\n  handleLogout,\n  room,\n  roomName,\n  test\n}) => {\n  _s();\n\n  // state variables - used to swtich microphone and camera on/off\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        isMic = _useState2[0],\n        setIsMic = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isCamera = _useState4[0],\n        setIsCamera = _useState4[1]; // state variable - to open/close dialog box\n\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isOpen = _useState6[0],\n        setOpen = _useState6[1]; // state variable - to toggle screen share\n\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isScreenShared = _useState8[0],\n        setIsScreenShared = _useState8[1];\n\n  var screenTrack; // method to handle switch on/off\n\n  const switchOnOff = media => event => {\n    // for microphone\n    if (media === 'Mic') {\n      if (isMic) {\n        // to mute the mic\n        room.localParticipant.audioTracks.forEach(publication => {\n          publication.track.disable();\n        });\n      } else {\n        // to unmute the mic\n        room.localParticipant.audioTracks.forEach(publication => {\n          publication.track.enable();\n        });\n      } // toggle to current state\n\n\n      setIsMic(!isMic);\n    } else {\n      // for camera\n      if (isCamera) {\n        //to turn off videostream\n        room.localParticipant.videoTracks.forEach(publication => {\n          publication.track.disable();\n        });\n      } else {\n        // to turn on videostream\n        room.localParticipant.videoTracks.forEach(publication => {\n          publication.track.enable();\n        });\n      } // toggle to current state\n\n\n      setIsCamera(!isCamera);\n    }\n  }; // methods - open / close the dialog box\n\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  }; // method - copy text (roomName) to clipboard and close the dialog box\n\n\n  const copyText = () => {\n    navigator.clipboard.writeText(roomName);\n    setOpen(false);\n  }; // removes any existing screen share\n\n\n  const removeAllChildren = () => {\n    let screen_tag = document.getElementById('screen');\n\n    while (screen_tag.lastElementChild) {\n      screen_tag.removeChild(screen_tag.lastElementChild);\n    }\n  }; // publishes screen to all participants\n\n\n  room.on(\"trackSubscribed\", track => {\n    if (track.name === 'screen_5139') {\n      removeAllChildren();\n      let screen_tag = document.getElementById('screen');\n      screen_tag.appendChild(track.attach());\n    }\n  }); // unpublishes screen from all participants\n\n  room.on(\"trackUnsubscribed\", track => {\n    if (track.name === 'screen_5139') {\n      removeAllChildren();\n    }\n  }); // method - enables/disables screen sharing\n\n  const handleShareScreen = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _require, LocalVideoTrack, stream;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (isScreenShared) {\n              _context.next = 9;\n              break;\n            }\n\n            _require = require('twilio-video'), LocalVideoTrack = _require.LocalVideoTrack;\n            _context.next = 4;\n            return navigator.mediaDevices.getDisplayMedia();\n\n          case 4:\n            stream = _context.sent;\n            // open prompt to select the screen to share\n            screenTrack = new LocalVideoTrack(stream.getTracks()[0], {\n              name: \"screen_5139\"\n            }); // publish the stream to room\n\n            room.localParticipant.publishTrack(screenTrack).then(track => {\n              document.getElementById('screen').appendChild(track.track.attach());\n            });\n            _context.next = 12;\n            break;\n\n          case 9:\n            // select the video track on which screen is present\n            Array.from(room.localParticipant.videoTracks.values()).map(publication => publication.track)[1].stop(); // unpublish track\n\n            room.localParticipant.unpublishTrack(Array.from(room.localParticipant.videoTracks.values()).map(publication => publication.track)[1]);\n            removeAllChildren();\n\n          case 12:\n            setIsScreenShared(!isScreenShared);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n\n    return function handleShareScreen() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"toolbar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbarDiv\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: switchOnOff(\"Cam\"),\n        children: isCamera ? /*#__PURE__*/_jsxDEV(VideocamIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(VideocamOffIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 37\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbarDiv\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: switchOnOff(\"Mic\"),\n        children: isMic ? /*#__PURE__*/_jsxDEV(MicIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 20\n        }, this) : /*#__PURE__*/_jsxDEV(MicOffIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 31\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbarDiv\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        style: {\n          backgroundColor: \"#ff484e\"\n        },\n        children: /*#__PURE__*/_jsxDEV(CallEndIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbarDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleOpen,\n        style: {\n          background: \"#00be5d\"\n        },\n        children: /*#__PURE__*/_jsxDEV(GroupAddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: isOpen,\n        onClose: handleClose,\n        fullWidth: true,\n        maxWidth: \"sm\",\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"Invite others to join you\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: [\"Share the room name (\", /*#__PURE__*/_jsxDEV(\"q\", {\n            children: roomName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 68\n          }, this), \") with others who you wish to invite\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: copyText,\n          autoFocus: true,\n          children: \"Copy room name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbarDiv\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleShareScreen,\n        children: isScreenShared ? /*#__PURE__*/_jsxDEV(CancelPresentationTwoToneIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(ScreenShareTwoToneIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 62\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextChat, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 7\n  }, this);\n};\n\n_s(RoomHeader, \"EQuBpnMmYQkL3jEHUG3qeYCSX0M=\");\n\n_c = RoomHeader;\nexport default RoomHeader;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoomHeader\");","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/RoomHeader.js"],"names":["React","useState","CallEndIcon","VideocamIcon","VideocamOffIcon","MicIcon","MicOffIcon","GroupAddIcon","Dialog","DialogTitle","Button","ScreenShareTwoToneIcon","CancelPresentationTwoToneIcon","TextChat","RoomHeader","handleLogout","room","roomName","test","isMic","setIsMic","isCamera","setIsCamera","isOpen","setOpen","isScreenShared","setIsScreenShared","screenTrack","switchOnOff","media","event","localParticipant","audioTracks","forEach","publication","track","disable","enable","videoTracks","handleOpen","handleClose","copyText","navigator","clipboard","writeText","removeAllChildren","screen_tag","document","getElementById","lastElementChild","removeChild","on","name","appendChild","attach","handleShareScreen","require","LocalVideoTrack","mediaDevices","getDisplayMedia","stream","getTracks","publishTrack","then","Array","from","values","map","stop","unpublishTrack","backgroundColor","background","textAlign"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport CallEndIcon from '@material-ui/icons/CallEndTwoTone';\nimport VideocamIcon from '@material-ui/icons/VideocamTwoTone';\nimport VideocamOffIcon from '@material-ui/icons/VideocamOffTwoTone';\nimport MicIcon from '@material-ui/icons/MicTwoTone';\nimport MicOffIcon from '@material-ui/icons/MicOffTwoTone';\nimport GroupAddIcon from '@material-ui/icons/GroupAddTwoTone';\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Button from '@material-ui/core/Button';\nimport ScreenShareTwoToneIcon from '@material-ui/icons/ScreenShareTwoTone';\nimport CancelPresentationTwoToneIcon from '@material-ui/icons/CancelPresentationTwoTone';\nimport TextChat from './TextChat';\n\nconst RoomHeader = ({handleLogout, room, roomName, test}) => {\n\n    // state variables - used to swtich microphone and camera on/off\n    const [isMic, setIsMic] = useState(true);\n    const [isCamera, setIsCamera] = useState(true);\n\n    // state variable - to open/close dialog box\n    const [isOpen, setOpen] = useState(false); \n\n    // state variable - to toggle screen share\n    const [isScreenShared, setIsScreenShared] = useState(false);\n    var screenTrack;\n    \n\n    // method to handle switch on/off\n    const switchOnOff = (media) => (event) => {\n      // for microphone\n      if(media === 'Mic'){\n        if(isMic){ // to mute the mic\n          room.localParticipant.audioTracks.forEach(publication => {\n            publication.track.disable();\n          });        \n        }else{ // to unmute the mic\n          room.localParticipant.audioTracks.forEach(publication => {\n            publication.track.enable();\n          });\n        }\n        // toggle to current state\n        setIsMic(!isMic);\n      }else{\n        // for camera\n        if(isCamera){ //to turn off videostream\n          room.localParticipant.videoTracks.forEach(publication => {\n            publication.track.disable();\n          });\n        }else{ // to turn on videostream\n          room.localParticipant.videoTracks.forEach(publication => {\n            publication.track.enable();\n          });\n        }\n        // toggle to current state\n        setIsCamera(!isCamera);\n      }\n    }\n\n    // methods - open / close the dialog box\n    const handleOpen = () => {\n      setOpen(true);\n    }\n    const handleClose = () =>{\n      setOpen(false);\n    }\n\n    // method - copy text (roomName) to clipboard and close the dialog box\n    const copyText = () => {\n      navigator.clipboard.writeText(roomName);\n      setOpen(false);\n    };\n\n    // removes any existing screen share\n    const removeAllChildren = () => {\n      let screen_tag = document.getElementById('screen');\n        while(screen_tag.lastElementChild){\n          screen_tag.removeChild(screen_tag.lastElementChild);\n        }\n    }\n\n    // publishes screen to all participants\n    room.on(\"trackSubscribed\", (track)=>{\n      if(track.name === 'screen_5139'){\n        removeAllChildren();\n        let screen_tag = document.getElementById('screen')\n        screen_tag.appendChild(track.attach());\n      }\n    });\n\n    // unpublishes screen from all participants\n    room.on(\"trackUnsubscribed\", (track)=>{\n      if(track.name === 'screen_5139'){\n        removeAllChildren();\n      }\n    });\n\n    // method - enables/disables screen sharing\n    const handleShareScreen = async () => {\n    if(!isScreenShared){\n      const { LocalVideoTrack } = require('twilio-video');\n      const stream = await navigator.mediaDevices.getDisplayMedia(); // open prompt to select the screen to share\n      screenTrack = new LocalVideoTrack(stream.getTracks()[0], {name : \"screen_5139\"});\n      // publish the stream to room\n      room.localParticipant.publishTrack(screenTrack).then((track)=>{\n        document.getElementById('screen').appendChild(track.track.attach());\n      });\n    }else{\n      // select the video track on which screen is present\n      Array.from(room.localParticipant.videoTracks.values()).map(publication => publication.track)[1].stop();\n      // unpublish track\n      room.localParticipant.unpublishTrack(Array.from(room.localParticipant.videoTracks.values())\n      .map(publication => publication.track)[1]);\n\n      removeAllChildren();\n    }\n    setIsScreenShared(!isScreenShared);\n  }\n  \n    return(\n      <div id = \"toolbar\">\n\n        {/* video camera icon */}\n        <div className = 'toolbarDiv'>\n          <button onClick = {switchOnOff(\"Cam\")}>\n          {isCamera?<VideocamIcon/>:<VideocamOffIcon/>}\n          </button>\n        </div>\n\n        {/* microphone icon */}\n        <div className = 'toolbarDiv'>\n          <button onClick = {switchOnOff(\"Mic\")}>\n            {isMic?<MicIcon/>:<MicOffIcon/>}\n          </button>\n        </div>\n\n        {/* End call icon */}\n        <div className = 'toolbarDiv'>\n          <button onClick = {handleLogout} style = {{backgroundColor:\"#ff484e\"}}>\n            <CallEndIcon/>\n          </button>\n        </div>\n\n        {/* Add others icon */}\n          <div className = 'toolbarDiv'>\n            <button onClick = {handleOpen} style = {{background: \"#00be5d\"}}>\n              <GroupAddIcon/>\n            </button>\n\n          {/* Dialog box */}\n          <Dialog open = {isOpen} onClose = {handleClose} fullWidth = {true} maxWidth = {\"sm\"}>\n          <DialogTitle>Invite others to join you</DialogTitle>\n          <p style = {{textAlign : 'center'}}>Share the room name (<q>{roomName}</q>) with others who you wish to invite</p>\n            <Button onClick={copyText} autoFocus>\n\t\t\t        Copy room name\n\t\t        </Button>\n          </Dialog>\n        </div>\n\n        {/* Screen Sharing icon */}\n        <div className = 'toolbarDiv'>\n          <button onClick = {handleShareScreen}>\n            {isScreenShared?<CancelPresentationTwoToneIcon/>:<ScreenShareTwoToneIcon/>}\n          </button>\n        </div>\n        <TextChat/>\n        {/* <TextChat></TextChat> */}\n\n      </div>\n  );\n}\nexport default RoomHeader;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GaussianBlurBackgroundProcessor = void 0;\n\nvar BackgroundProcessor_1 = require(\"./BackgroundProcessor\");\n\nvar constants_1 = require(\"../../constants\");\n/**\n * The GaussianBlurBackgroundProcessor, when added to a VideoTrack,\n * applies a gaussian blur filter on the background in each video frame\n * and leaves the foreground (person(s)) untouched. Each instance of\n * GaussianBlurBackgroundProcessor should be added to only one VideoTrack\n * at a time to prevent overlapping of image data from multiple VideoTracks.\n *\n * @example\n *\n * ```ts\n * import { createLocalVideoTrack } from 'twilio-video';\n * import { GaussianBlurBackgroundProcessor } from '@twilio/video-processors';\n *\n * const blurBackground = new GaussianBlurBackgroundProcessor({\n *   assetsPath: 'https://my-server-path/assets'\n * });\n *\n * blurBackground.loadModel().then(() => {\n *   createLocalVideoTrack({\n *     width: 640,\n *     height: 480,\n *     frameRate: 24\n *   }).then(track => {\n *     track.addProcessor(blurBackground);\n *   });\n * });\n * ```\n */\n\n\nvar GaussianBlurBackgroundProcessor =\n/** @class */\nfunction (_super) {\n  __extends(GaussianBlurBackgroundProcessor, _super);\n  /**\n   * Construct a GaussianBlurBackgroundProcessor. Default values will be used for\n   * any missing properties in [[GaussianBlurBackgroundProcessorOptions]], and\n   * invalid properties will be ignored.\n   */\n\n\n  function GaussianBlurBackgroundProcessor(options) {\n    var _this = _super.call(this, options) || this;\n\n    _this._blurFilterRadius = constants_1.BLUR_FILTER_RADIUS; // tslint:disable-next-line no-unused-variable\n\n    _this._name = 'GaussianBlurBackgroundProcessor';\n    _this.blurFilterRadius = options.blurFilterRadius;\n    return _this;\n  }\n\n  Object.defineProperty(GaussianBlurBackgroundProcessor.prototype, \"blurFilterRadius\", {\n    /**\n     * The current background blur filter radius in pixels.\n     */\n    get: function get() {\n      return this._blurFilterRadius;\n    },\n\n    /**\n     * Set a new background blur filter radius in pixels.\n     */\n    set: function set(radius) {\n      if (!radius) {\n        console.warn(\"Valid blur filter radius not found. Using \" + constants_1.BLUR_FILTER_RADIUS + \" as default.\");\n        radius = constants_1.BLUR_FILTER_RADIUS;\n      }\n\n      this._blurFilterRadius = radius;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  GaussianBlurBackgroundProcessor.prototype._setBackground = function (inputFrame) {\n    this._outputContext.filter = \"blur(\" + this._blurFilterRadius + \"px)\";\n\n    this._outputContext.drawImage(inputFrame, 0, 0);\n  };\n\n  return GaussianBlurBackgroundProcessor;\n}(BackgroundProcessor_1.BackgroundProcessor);\n\nexports.GaussianBlurBackgroundProcessor = GaussianBlurBackgroundProcessor;","map":{"version":3,"sources":["../../../lib/processors/background/GaussianBlurBackgroundProcessor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,qBAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BG;;;AACH,IAAA,+BAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqD,EAAA,SAAA,CAAA,+BAAA,EAAA,MAAA,CAAA;AAMnD;;;;AAIG;;;AACH,WAAA,+BAAA,CAAY,OAAZ,EAA2D;AAA3D,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,KAAc,IADhB;;AATQ,IAAA,KAAA,CAAA,iBAAA,GAA4B,WAAA,CAAA,kBAA5B,CASmD,CAR3D;;AACiB,IAAA,KAAA,CAAA,KAAA,GAAgB,iCAAhB;AASf,IAAA,KAAI,CAAC,gBAAL,GAAwB,OAAO,CAAC,gBAAhC;;AACD;;AAKD,EAAA,MAAA,CAAA,cAAA,CAAI,+BAAA,CAAA,SAAJ,EAAI,kBAAJ,EAAoB;AAHpB;;AAEG;SACH,eAAA;AACE,aAAO,KAAK,iBAAZ;AACD,KAFmB;;AAIpB;;AAEG;SACH,aAAqB,MAArB,EAAmC;AACjC,UAAI,CAAC,MAAL,EAAa;AACX,QAAA,OAAO,CAAC,IAAR,CAAa,+CAA6C,WAAA,CAAA,kBAA7C,GAA+D,cAA5E;AACA,QAAA,MAAM,GAAG,WAAA,CAAA,kBAAT;AACD;;AACD,WAAK,iBAAL,GAAyB,MAAzB;AACD,KAbmB;qBAAA;;AAAA,GAApB;;AAeU,EAAA,+BAAA,CAAA,SAAA,CAAA,cAAA,GAAV,UAAyB,UAAzB,EAAoD;AAClD,SAAK,cAAL,CAAoB,MAApB,GAA6B,UAAQ,KAAK,iBAAb,GAA8B,KAA3D;;AACA,SAAK,cAAL,CAAoB,SAApB,CAA8B,UAA9B,EAA0C,CAA1C,EAA6C,CAA7C;AACD,GAHS;;AAIZ,SAAA,+BAAA;AAAC,CAtCD,CAAqD,qBAAA,CAAA,mBAArD,CAAA;;AAAa,OAAA,CAAA,+BAAA,GAAA,+BAAA","sourcesContent":["import { BackgroundProcessor, BackgroundProcessorOptions } from './BackgroundProcessor';\nimport { BLUR_FILTER_RADIUS } from '../../constants';\n\n/**\n * Options passed to [[GaussianBlurBackgroundProcessor]] constructor.\n */\nexport interface GaussianBlurBackgroundProcessorOptions extends BackgroundProcessorOptions {\n  /**\n   * The background blur filter radius to use in pixels.\n   * @default\n   * ```html\n   * 15\n   * ```\n   */\n  blurFilterRadius?: number;\n}\n\n/**\n * The GaussianBlurBackgroundProcessor, when added to a VideoTrack,\n * applies a gaussian blur filter on the background in each video frame\n * and leaves the foreground (person(s)) untouched. Each instance of\n * GaussianBlurBackgroundProcessor should be added to only one VideoTrack\n * at a time to prevent overlapping of image data from multiple VideoTracks.\n *\n * @example\n *\n * ```ts\n * import { createLocalVideoTrack } from 'twilio-video';\n * import { GaussianBlurBackgroundProcessor } from '@twilio/video-processors';\n *\n * const blurBackground = new GaussianBlurBackgroundProcessor({\n *   assetsPath: 'https://my-server-path/assets'\n * });\n *\n * blurBackground.loadModel().then(() => {\n *   createLocalVideoTrack({\n *     width: 640,\n *     height: 480,\n *     frameRate: 24\n *   }).then(track => {\n *     track.addProcessor(blurBackground);\n *   });\n * });\n * ```\n */\nexport class GaussianBlurBackgroundProcessor extends BackgroundProcessor {\n\n  private _blurFilterRadius: number = BLUR_FILTER_RADIUS;\n  // tslint:disable-next-line no-unused-variable\n  private readonly _name: string = 'GaussianBlurBackgroundProcessor';\n\n  /**\n   * Construct a GaussianBlurBackgroundProcessor. Default values will be used for\n   * any missing properties in [[GaussianBlurBackgroundProcessorOptions]], and\n   * invalid properties will be ignored.\n   */\n  constructor(options: GaussianBlurBackgroundProcessorOptions) {\n    super(options);\n    this.blurFilterRadius = options.blurFilterRadius!;\n  }\n\n  /**\n   * The current background blur filter radius in pixels.\n   */\n  get blurFilterRadius(): number {\n    return this._blurFilterRadius;\n  }\n\n  /**\n   * Set a new background blur filter radius in pixels.\n   */\n  set blurFilterRadius(radius: number) {\n    if (!radius) {\n      console.warn(`Valid blur filter radius not found. Using ${BLUR_FILTER_RADIUS} as default.`);\n      radius = BLUR_FILTER_RADIUS;\n    }\n    this._blurFilterRadius = radius;\n  }\n\n  protected _setBackground(inputFrame: OffscreenCanvas): void {\n    this._outputContext.filter = `blur(${this._blurFilterRadius}px)`;\n    this._outputContext.drawImage(inputFrame, 0, 0);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}
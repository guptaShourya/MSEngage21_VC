{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/twilio-video-react-hooks-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/shouryagupta/Desktop/MS Engage 21/twilio-video-react-hooks-master/src/Room.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Participant from \"./Participant\";\nimport RoomHeader from \"./RoomHeader\";\nimport DialogBox from \"./DialogBox\";\nimport AddBoxIcon from '@material-ui/icons/AddBox'; // Rooms.js - connects to Twilio video services\n\nconst Room = ({\n  roomName,\n  room,\n  handleLogout\n}) => {\n  _s();\n\n  // State Variables - list of participants in the chat\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        participants = _useState2[0],\n        setParticipants = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        addOthers = _useState4[0],\n        setAddOthers = _useState4[1];\n\n  useEffect(() => {\n    // Methods to connect & disconnect a participant\n    const participantConnected = participant => {\n      setParticipants(prevParticipants => [...prevParticipants, participant]);\n    };\n\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants => prevParticipants.filter(p => p !== participant));\n    }; // Connects / Disconnect once the component is rendered\n\n\n    room.on(\"participantConnected\", participantConnected);\n    room.on(\"participantDisconnected\", participantDisconnected);\n    room.participants.forEach(participantConnected); // Remove the eventlisteners once unmounted\n\n    return () => {\n      room.off(\"participantConnected\", participantConnected);\n      room.off(\"participantDisconnected\", participantDisconnected);\n    };\n  }, [room]);\n  const remoteParticipants = participants.map(participant => /*#__PURE__*/_jsxDEV(Participant, {\n    participant: participant\n  }, participant.sid, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this));\n  document.title = \"ROOM - \" + roomName;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Room: \", roomName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"local-participant\",\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap'\n      },\n      children: [room ? /*#__PURE__*/_jsxDEV(Participant, {\n        participant: room.localParticipant\n      }, room.localParticipant.sid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this) : \"\", remoteParticipants]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Room, \"omD2mDSokIyRguLp/cxUYBup5qk=\");\n\n_c = Room;\nexport default Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/twilio-video-react-hooks-master/src/Room.js"],"names":["React","useEffect","useState","Participant","RoomHeader","DialogBox","AddBoxIcon","Room","roomName","room","handleLogout","participants","setParticipants","addOthers","setAddOthers","participantConnected","participant","prevParticipants","participantDisconnected","filter","p","on","forEach","off","remoteParticipants","map","sid","document","title","display","flexWrap","localParticipant"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,2BAAvB,C,CAEA;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA;AAAlB,CAAD,KAAsC;AAAA;;AAEjD;AAFiD,oBAGTR,QAAQ,CAAC,EAAD,CAHC;AAAA;AAAA,QAG1CS,YAH0C;AAAA,QAG5BC,eAH4B;;AAAA,qBAIfV,QAAQ,CAAC,IAAD,CAJO;AAAA;AAAA,QAI1CW,SAJ0C;AAAA,QAI/BC,YAJ+B;;AAMjDb,EAAAA,SAAS,CAAC,MAAM;AAEd;AACA,UAAMc,oBAAoB,GAAIC,WAAD,IAAiB;AAC5CJ,MAAAA,eAAe,CAAEK,gBAAD,IAAsB,CAAC,GAAGA,gBAAJ,EAAsBD,WAAtB,CAAvB,CAAf;AACD,KAFD;;AAIA,UAAME,uBAAuB,GAAIF,WAAD,IAAiB;AAC/CJ,MAAAA,eAAe,CAAEK,gBAAD,IACdA,gBAAgB,CAACE,MAAjB,CAAyBC,CAAD,IAAOA,CAAC,KAAKJ,WAArC,CADa,CAAf;AAGD,KAJD,CAPc,CAad;;;AACAP,IAAAA,IAAI,CAACY,EAAL,CAAQ,sBAAR,EAAgCN,oBAAhC;AACAN,IAAAA,IAAI,CAACY,EAAL,CAAQ,yBAAR,EAAmCH,uBAAnC;AACAT,IAAAA,IAAI,CAACE,YAAL,CAAkBW,OAAlB,CAA0BP,oBAA1B,EAhBc,CAkBd;;AACA,WAAO,MAAM;AACXN,MAAAA,IAAI,CAACc,GAAL,CAAS,sBAAT,EAAiCR,oBAAjC;AACAN,MAAAA,IAAI,CAACc,GAAL,CAAS,yBAAT,EAAoCL,uBAApC;AACD,KAHD;AAID,GAvBQ,EAuBN,CAACT,IAAD,CAvBM,CAAT;AAyBA,QAAMe,kBAAkB,GAAGb,YAAY,CAACc,GAAb,CAAkBT,WAAD,iBAC1C,QAAC,WAAD;AAAmC,IAAA,WAAW,EAAEA;AAAhD,KAAkBA,WAAW,CAACU,GAA9B;AAAA;AAAA;AAAA;AAAA,UADyB,CAA3B;AAIAC,EAAAA,QAAQ,CAACC,KAAT,GAAiB,YAAYpB,QAA7B;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACG;AAAA,2BAAWA,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,eAIE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAmC,MAAA,KAAK,EAAI;AAACqB,QAAAA,OAAO,EAAC,MAAT;AAAiBC,QAAAA,QAAQ,EAAC;AAA1B,OAA5C;AAAA,iBACGrB,IAAI,gBACH,QAAC,WAAD;AAEE,QAAA,WAAW,EAAEA,IAAI,CAACsB;AAFpB,SACOtB,IAAI,CAACsB,gBAAL,CAAsBL,GAD7B;AAAA;AAAA;AAAA;AAAA,cADG,GAMH,EAPJ,EASGF,kBATH;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CA1DD;;GAAMjB,I;;KAAAA,I;AA4DN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Participant from \"./Participant\";\nimport RoomHeader from \"./RoomHeader\";\nimport DialogBox from \"./DialogBox\";\nimport AddBoxIcon from '@material-ui/icons/AddBox';\n\n// Rooms.js - connects to Twilio video services\n\nconst Room = ({ roomName, room, handleLogout }) => {\n\n  // State Variables - list of participants in the chat\n  const [participants, setParticipants] = useState([]);\n  const [addOthers, setAddOthers] = useState(true);\n\n  useEffect(() => {\n\n    // Methods to connect & disconnect a participant\n    const participantConnected = (participant) => {\n      setParticipants((prevParticipants) => [...prevParticipants, participant]);\n    };\n\n    const participantDisconnected = (participant) => {\n      setParticipants((prevParticipants) =>\n        prevParticipants.filter((p) => p !== participant)\n      );\n    };\n\n    // Connects / Disconnect once the component is rendered\n    room.on(\"participantConnected\", participantConnected);\n    room.on(\"participantDisconnected\", participantDisconnected);\n    room.participants.forEach(participantConnected);\n\n    // Remove the eventlisteners once unmounted\n    return () => {\n      room.off(\"participantConnected\", participantConnected);\n      room.off(\"participantDisconnected\", participantDisconnected);\n    };\n  }, [room]);\n\n  const remoteParticipants = participants.map((participant) => (\n    <Participant key={participant.sid} participant={participant} />\n  ));\n\n  document.title = \"ROOM - \" + roomName;\n  \n  return (\n    <div className=\"room\">\n       <h2>Room: {roomName}</h2>\n      {/*{addOthers && <DialogBox roomName = {roomName}/>}\n      <button onClick={handleLogout}>Leave</button> */}\n      <div className=\"local-participant\" style = {{display:'flex', flexWrap:'wrap'}}>\n        {room ? (\n          <Participant\n            key={room.localParticipant.sid}\n            participant={room.localParticipant}\n          />\n        ) : (\n          \"\"\n        )}\n        {remoteParticipants}\n      </div>\n      {/* <h3>{remoteParticipants.length!==0 ? \"Participants\" : \"\"}</h3> */}\n      {/* <div className=\"remote-participants\" style = {{display : 'flex'}}>{remoteParticipants}</div> */}\n    </div>\n\n  );\n};\n\nexport default Room;\n"]},"metadata":{},"sourceType":"module"}
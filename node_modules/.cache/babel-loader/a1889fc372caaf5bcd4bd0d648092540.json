{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ReduceProgram {\n  constructor(reduceInfo, reduceType) {\n    this.variableNames = ['x'];\n    const windowSize = reduceInfo.windowSize,\n          batchSize = reduceInfo.batchSize,\n          inSize = reduceInfo.inSize,\n          outSize = reduceInfo.outSize;\n    this.outputShape = [batchSize, outSize];\n    let initializationValue = '0.0';\n    let compareOp = \"\";\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = \"min\";\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = \"max\";\n    }\n\n    let returnValue = \"\".concat(reduceType, \"(\").concat(reduceType, \"(\").concat(reduceType, \"(\") + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = \"sumValue\";\n    } else if (reduceType === 'prod') {\n      returnValue = \"prodValue\";\n    } else if (reduceType === 'all') {\n      returnValue = \"allValue\";\n    } else if (reduceType === 'any') {\n      returnValue = \"anyValue\";\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n    let updateSnippet = \"\\n      if (\".concat(reduceType === 'sum', \") {\\n        sumValue += dot(values, ones);\\n      } else if (\").concat(reduceType === 'prod', \") {\\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\\n        prodValue *= tmp[0] * tmp[1];\\n      } else {\\n        minMaxValue = \").concat(compareOp, \"(values, minMaxValue);\\n        if (\").concat(reduceType === 'min', \" || \").concat(reduceType === 'max', \") {\\n          minMaxValue = \").concat(compareOp, \"(values, minMaxValue);\\n          bvec4 isNaN = isnan(values);\\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\\n            minMaxValue = vec4(NAN);\\n          }\\n        }\\n      }\\n    \");\n    let vecType = \"vec4\";\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = \"\\n        bool reducedAllValue = all(values);\\n        float floatedReducedAllValue = float(reducedAllValue);\\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\\n      \";\n      vecType = \"bvec4\";\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = \"\\n        bool reducedAnyValue = any(values);\\n        float floatedReducedAnyValue = float(reducedAnyValue);\\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\\n      \";\n      vecType = \"bvec4\";\n    }\n\n    let checkOutOfBounds = '';\n\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = \"\\n        if (inIdx < 0 || inIdx >= \".concat(inSize, \") {\\n          return initializationValue;\\n        }\\n      \");\n    }\n\n    this.userCode = \"\\n      const float initializationValue = \".concat(initializationValue, \";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float getValue(int batch, int inIdx) {\\n        \").concat(checkOutOfBounds, \"\\n        return getX(batch, inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \").concat(windowSize, \";\\n\\n        vec4 minMaxValue = vec4(\").concat(initializationValue, \");\\n        float prodValue = 1.0;\\n        float sumValue = 0.0;\\n        float allValue = 1.0;\\n        float anyValue = 0.0;\\n\\n        for (int i = 0; i < \").concat(windowSizeNearestVec4, \"; i += 4) {\\n          int inIdx = inOffset + i;\\n          \").concat(vecType, \" values = \").concat(vecType, \"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          \").concat(updateSnippet, \"\\n        }\\n\\n        int inIdx = inOffset + \").concat(windowSizeNearestVec4, \";\\n        if (\").concat(windowSizeVec4Remainder === 1, \") {\\n          \").concat(vecType, \" values = \").concat(vecType, \"(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \").concat(updateSnippet, \"\\n        } else if (\").concat(windowSizeVec4Remainder === 2, \") {\\n          \").concat(vecType, \" values = \").concat(vecType, \"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \").concat(updateSnippet, \"\\n        } else if (\").concat(windowSizeVec4Remainder === 3, \") {\\n          \").concat(vecType, \" values = \").concat(vecType, \"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          \").concat(updateSnippet, \"\\n        }\\n        setOutput(\").concat(returnValue, \");\\n      }\\n    \");\n  }\n\n}","map":{"version":3,"sources":["../src/reduce_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAKH,OAAM,MAAO,aAAP,CAAoB;AAKxB,EAAA,WAAA,CACI,UADJ,EAEI,UAFJ,EAEoD;AANpD,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AAMoD,UAC3C,UAD2C,GACD,UADC,CAC3C,UAD2C;AAAA,UAC/B,SAD+B,GACD,UADC,CAC/B,SAD+B;AAAA,UACpB,MADoB,GACD,UADC,CACpB,MADoB;AAAA,UACZ,OADY,GACD,UADC,CACZ,OADY;AAElD,SAAK,WAAL,GAAmB,CAAC,SAAD,EAAY,OAAZ,CAAnB;AAEA,QAAI,mBAAmB,GAAG,KAA1B;AACA,QAAI,SAAS,KAAb;;AAEA,QAAI,UAAU,KAAK,MAAnB,EAA2B;AACzB,MAAA,mBAAmB,GAAG,KAAtB;AACD,KAFD,MAEO,IAAI,UAAU,KAAK,KAAnB,EAA0B;AAC/B;AACA,MAAA,mBAAmB,GAAG,aAAtB;AACA,MAAA,SAAS,QAAT;AACD,KAJM,MAIA,IAAI,UAAU,KAAK,KAAnB,EAA0B;AAC/B;AACA,MAAA,mBAAmB,GAAG,cAAtB;AACA,MAAA,SAAS,QAAT;AACD;;AAED,QAAI,WAAW,GAAG,UAAG,UAAH,cAAiB,UAAjB,cAA+B,UAA/B,SACd,mEADJ;;AAGA,QAAI,UAAU,KAAK,KAAnB,EAA0B;AACxB,MAAA,WAAW,aAAX;AACD,KAFD,MAEO,IAAI,UAAU,KAAK,MAAnB,EAA2B;AAChC,MAAA,WAAW,cAAX;AACD,KAFM,MAEA,IAAI,UAAU,KAAK,KAAnB,EAA0B;AAC/B,MAAA,WAAW,aAAX;AACD,KAFM,MAEA,IAAI,UAAU,KAAK,KAAnB,EAA0B;AAC/B,MAAA,WAAW,aAAX;AACD;;AAED,UAAM,qBAAqB,GAAG,IAAI,CAAC,KAAL,CAAW,UAAU,GAAG,CAAxB,IAA6B,CAA3D;AACA,UAAM,uBAAuB,GAAG,UAAU,GAAG,CAA7C;AAEA,QAAI,aAAa,yBACT,UAAU,KAAK,KADN,2EAGF,UAAU,KAAK,MAHb,4KAOG,SAPH,iDAQP,UAAU,KAAK,KARR,iBAQoB,UAAU,KAAK,KARnC,0CASK,SATL,2MAAjB;AAkBA,QAAI,OAAO,SAAX;;AAEA,QAAI,UAAU,KAAK,KAAnB,EAA0B;AACxB,MAAA,mBAAmB,GAAG,KAAtB;AACA,MAAA,aAAa,uMAAb;AAKA,MAAA,OAAO,UAAP;AACD,KARD,MAQO,IAAI,UAAU,KAAK,KAAnB,EAA0B;AAC/B,MAAA,mBAAmB,GAAG,KAAtB;AACA,MAAA,aAAa,uMAAb;AAKA,MAAA,OAAO,UAAP;AACD;;AAED,QAAI,gBAAgB,GAAG,EAAvB;;AACA,QAAI,MAAM,GAAG,UAAT,GAAsB,CAA1B,EAA6B;AAC3B,MAAA,gBAAgB,iDACc,MADd,kEAAhB;AAKD;;AACD,SAAK,QAAL,uDACsC,mBADtC,2HAKM,gBALN,+NAa8B,UAb9B,kDAe8B,mBAf9B,4KAqB0B,qBArB1B,yEAuBQ,OAvBR,uBAuB4B,OAvB5B,yMA8BQ,aA9BR,2DAiC6B,qBAjC7B,4BAkCU,uBAAuB,KAAK,CAlCtC,4BAmCQ,OAnCR,uBAmC4B,OAnC5B,oLA0CQ,aA1CR,kCA2CiB,uBAAuB,KAAK,CA3C7C,4BA4CQ,OA5CR,uBA4C4B,OA5C5B,2LAmDQ,aAnDR,kCAoDiB,uBAAuB,KAAK,CApD7C,4BAqDQ,OArDR,uBAqD4B,OArD5B,kMA4DQ,aA5DR,4CA8DgB,WA9DhB;AAiED;;AAzJuB","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
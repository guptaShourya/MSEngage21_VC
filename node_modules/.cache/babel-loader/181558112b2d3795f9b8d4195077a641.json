{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar logger_1 = require(\"./utils/logger\");\n\nvar SYNC_DOCUMENT_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.document';\nvar SYNC_LIST_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.list';\nvar SYNC_MAP_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.map';\nvar SYNC_NOTIFICATION_TYPE = 'twilio.sync.event';\n/**\n * @class Router\n * @classdesc Routes all incoming messages to the consumers\n */\n\nvar Router = /*#__PURE__*/function () {\n  function Router(params) {\n    var _this = this;\n\n    _classCallCheck(this, Router);\n\n    this.config = params.config;\n    this.subscriptions = params.subscriptions;\n    this.notifications = params.notifications;\n    this.notifications.subscribe(SYNC_NOTIFICATION_TYPE);\n    this.notifications.subscribe(SYNC_DOCUMENT_NOTIFICATION_TYPE);\n    this.notifications.subscribe(SYNC_LIST_NOTIFICATION_TYPE);\n    this.notifications.subscribe(SYNC_MAP_NOTIFICATION_TYPE);\n    this.notifications.on('message', function (messageType, payload) {\n      return _this.onMessage(messageType, payload);\n    });\n    this.notifications.on('transportReady', function (isConnected) {\n      return _this.onConnectionStateChanged(isConnected);\n    });\n  }\n  /**\n   * Entry point for all incoming messages\n   * @param {String} type - Type of incoming message\n   * @param {Object} message - Message to route\n   */\n\n\n  _createClass(Router, [{\n    key: \"onMessage\",\n    value: function onMessage(type, message) {\n      logger_1.default.trace('Notification type:', type, 'content:', message);\n\n      switch (type) {\n        case SYNC_DOCUMENT_NOTIFICATION_TYPE:\n        case SYNC_LIST_NOTIFICATION_TYPE:\n        case SYNC_MAP_NOTIFICATION_TYPE:\n          this.subscriptions.acceptMessage(message, false);\n          break;\n\n        case SYNC_NOTIFICATION_TYPE:\n          this.subscriptions.acceptMessage(message, true);\n          break;\n      }\n    }\n    /**\n     * Subscribe for events\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(sid, entity) {\n      this.subscriptions.add(sid, entity);\n    }\n    /**\n     * Unsubscribe from events\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(sid) {\n      this.subscriptions.remove(sid);\n    }\n    /**\n     * Handle transport establishing event\n     * If we have any subscriptions - we should check object for modifications\n     */\n\n  }, {\n    key: \"onConnectionStateChanged\",\n    value: function onConnectionStateChanged(isConnected) {\n      this.subscriptions.onConnectionStateChanged(isConnected);\n    }\n  }]);\n\n  return Router;\n}();\n\nexports.Router = Router;\nexports.default = Router;","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio-sync/lib/router.js"],"names":["Object","defineProperty","exports","value","logger_1","require","SYNC_DOCUMENT_NOTIFICATION_TYPE","SYNC_LIST_NOTIFICATION_TYPE","SYNC_MAP_NOTIFICATION_TYPE","SYNC_NOTIFICATION_TYPE","Router","params","config","subscriptions","notifications","subscribe","on","messageType","payload","onMessage","isConnected","onConnectionStateChanged","type","message","default","trace","acceptMessage","sid","entity","add","remove"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,QAAQ,GAAGC,OAAO,CAAC,gBAAD,CAAxB;;AACA,IAAMC,+BAA+B,GAAG,6BAAxC;AACA,IAAMC,2BAA2B,GAAG,yBAApC;AACA,IAAMC,0BAA0B,GAAG,wBAAnC;AACA,IAAMC,sBAAsB,GAAG,mBAA/B;AACA;AACA;AACA;AACA;;IACMC,M;AACF,kBAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAChB,SAAKC,MAAL,GAAcD,MAAM,CAACC,MAArB;AACA,SAAKC,aAAL,GAAqBF,MAAM,CAACE,aAA5B;AACA,SAAKC,aAAL,GAAqBH,MAAM,CAACG,aAA5B;AACA,SAAKA,aAAL,CAAmBC,SAAnB,CAA6BN,sBAA7B;AACA,SAAKK,aAAL,CAAmBC,SAAnB,CAA6BT,+BAA7B;AACA,SAAKQ,aAAL,CAAmBC,SAAnB,CAA6BR,2BAA7B;AACA,SAAKO,aAAL,CAAmBC,SAAnB,CAA6BP,0BAA7B;AACA,SAAKM,aAAL,CAAmBE,EAAnB,CAAsB,SAAtB,EAAiC,UAACC,WAAD,EAAcC,OAAd;AAAA,aAA0B,KAAI,CAACC,SAAL,CAAeF,WAAf,EAA4BC,OAA5B,CAA1B;AAAA,KAAjC;AACA,SAAKJ,aAAL,CAAmBE,EAAnB,CAAsB,gBAAtB,EAAwC,UAAAI,WAAW;AAAA,aAAI,KAAI,CAACC,wBAAL,CAA8BD,WAA9B,CAAJ;AAAA,KAAnD;AACH;AACD;AACJ;AACA;AACA;AACA;;;;;8BACcE,I,EAAMC,O,EAAS;AACrBnB,MAAAA,QAAQ,CAACoB,OAAT,CAAiBC,KAAjB,CAAuB,oBAAvB,EAA6CH,IAA7C,EAAmD,UAAnD,EAA+DC,OAA/D;;AACA,cAAQD,IAAR;AACI,aAAKhB,+BAAL;AACA,aAAKC,2BAAL;AACA,aAAKC,0BAAL;AACI,eAAKK,aAAL,CAAmBa,aAAnB,CAAiCH,OAAjC,EAA0C,KAA1C;AACA;;AACJ,aAAKd,sBAAL;AACI,eAAKI,aAAL,CAAmBa,aAAnB,CAAiCH,OAAjC,EAA0C,IAA1C;AACA;AARR;AAUH;AACD;AACJ;AACA;;;;8BACcI,G,EAAKC,M,EAAQ;AACnB,WAAKf,aAAL,CAAmBgB,GAAnB,CAAuBF,GAAvB,EAA4BC,MAA5B;AACH;AACD;AACJ;AACA;;;;gCACgBD,G,EAAK;AACb,WAAKd,aAAL,CAAmBiB,MAAnB,CAA0BH,GAA1B;AACH;AACD;AACJ;AACA;AACA;;;;6CAC6BP,W,EAAa;AAClC,WAAKP,aAAL,CAAmBQ,wBAAnB,CAA4CD,WAA5C;AACH;;;;;;AAELlB,OAAO,CAACQ,MAAR,GAAiBA,MAAjB;AACAR,OAAO,CAACsB,OAAR,GAAkBd,MAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst logger_1 = require(\"./utils/logger\");\nconst SYNC_DOCUMENT_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.document';\nconst SYNC_LIST_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.list';\nconst SYNC_MAP_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.map';\nconst SYNC_NOTIFICATION_TYPE = 'twilio.sync.event';\n/**\n * @class Router\n * @classdesc Routes all incoming messages to the consumers\n */\nclass Router {\n    constructor(params) {\n        this.config = params.config;\n        this.subscriptions = params.subscriptions;\n        this.notifications = params.notifications;\n        this.notifications.subscribe(SYNC_NOTIFICATION_TYPE);\n        this.notifications.subscribe(SYNC_DOCUMENT_NOTIFICATION_TYPE);\n        this.notifications.subscribe(SYNC_LIST_NOTIFICATION_TYPE);\n        this.notifications.subscribe(SYNC_MAP_NOTIFICATION_TYPE);\n        this.notifications.on('message', (messageType, payload) => this.onMessage(messageType, payload));\n        this.notifications.on('transportReady', isConnected => this.onConnectionStateChanged(isConnected));\n    }\n    /**\n     * Entry point for all incoming messages\n     * @param {String} type - Type of incoming message\n     * @param {Object} message - Message to route\n     */\n    onMessage(type, message) {\n        logger_1.default.trace('Notification type:', type, 'content:', message);\n        switch (type) {\n            case SYNC_DOCUMENT_NOTIFICATION_TYPE:\n            case SYNC_LIST_NOTIFICATION_TYPE:\n            case SYNC_MAP_NOTIFICATION_TYPE:\n                this.subscriptions.acceptMessage(message, false);\n                break;\n            case SYNC_NOTIFICATION_TYPE:\n                this.subscriptions.acceptMessage(message, true);\n                break;\n        }\n    }\n    /**\n     * Subscribe for events\n     */\n    subscribe(sid, entity) {\n        this.subscriptions.add(sid, entity);\n    }\n    /**\n     * Unsubscribe from events\n     */\n    unsubscribe(sid) {\n        this.subscriptions.remove(sid);\n    }\n    /**\n     * Handle transport establishing event\n     * If we have any subscriptions - we should check object for modifications\n     */\n    onConnectionStateChanged(isConnected) {\n        this.subscriptions.onConnectionStateChanged(isConnected);\n    }\n}\nexports.Router = Router;\nexports.default = Router;\n"]},"metadata":{},"sourceType":"script"}
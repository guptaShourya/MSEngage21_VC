{"ast":null,"code":"import _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Neg } from '@tensorflow/tfjs-core';\nimport { negImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nconst NEG = \"return -x;\"; // This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\n\nexport function neg(args) {\n  const inputs = args.inputs,\n        backend = args.backend;\n  const x = inputs.x;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n\n    const _negImplCPU = negImplCPU(xData.values, x.shape, x.dtype),\n          _negImplCPU2 = _slicedToArray(_negImplCPU, 2),\n          outValues = _negImplCPU2[0],\n          newShape = _negImplCPU2[1];\n\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program;\n\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const negConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg\n};","map":{"version":3,"sources":["../../src/kernels/Neg.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,GAAR,EAAuC,GAAvC,QAAoF,uBAApF;AAEA,SAAQ,UAAR,QAAyB,wBAAzB;AACA,SAAQ,cAAR,QAA6B,gBAA7B;AACA,SAAQ,oBAAR,QAAmC,uBAAnC;AAEA,MAAM,GAAG,eAAT,C,CAEA;AACA;;AACA,OAAM,SAAU,GAAV,CAAc,IAAd,EAAkE;AAAA,QAE/D,MAF+D,GAE5C,IAF4C,CAE/D,MAF+D;AAAA,QAEvD,OAFuD,GAE5C,IAF4C,CAEvD,OAFuD;AAAA,QAG/D,CAH+D,GAG1D,MAH0D,CAG/D,CAH+D;;AAKtE,MAAI,OAAO,CAAC,kBAAR,CAA2B,CAAC,CAAD,CAA3B,CAAJ,EAAqC;AACnC,UAAM,KAAK,GAAG,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAoB,CAAC,CAAC,MAAtB,CAAd;;AADmC,wBAG/B,UAAU,CAAC,KAAK,CAAC,MAAP,EAA6B,CAAC,CAAC,KAA/B,EAAsC,CAAC,CAAC,KAAxC,CAHqB;AAAA;AAAA,UAE5B,SAF4B;AAAA,UAEjB,QAFiB;;AAInC,WAAO,OAAO,CAAC,cAAR,CAAuB,QAAvB,EAAiC,CAAC,CAAC,KAAnC,EAA0C,SAA1C,CAAP;AACD;;AAED,MAAI,OAAJ;;AACA,MAAI,GAAG,GAAG,OAAN,CAAc,6BAAd,CAAJ,EAAkD;AAChD,IAAA,OAAO,GAAG,IAAI,oBAAJ,CAAyB,CAAC,CAAC,KAA3B,EAAkC,GAAlC,CAAV;AACD,GAFD,MAEO;AACL,IAAA,OAAO,GAAG,IAAI,cAAJ,CAAmB,CAAC,CAAC,KAArB,EAA4B,GAA5B,CAAV;AACD;;AAED,SAAO,OAAO,CAAC,eAAR,CAAwB,OAAxB,EAAiC,CAAC,CAAD,CAAjC,EAAsC,CAAC,CAAC,KAAxC,CAAP;AACD;AAED,OAAO,MAAM,SAAS,GAAiB;AACrC,EAAA,UAAU,EAAE,GADyB;AAErC,EAAA,WAAW,EAAE,OAFwB;AAGrC,EAAA,UAAU,EAAE;AAHyB,CAAhC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {negImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst NEG = `return -x;`;\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
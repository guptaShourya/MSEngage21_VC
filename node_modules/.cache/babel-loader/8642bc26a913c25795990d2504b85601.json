{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar WebhookList;\nvar WebhookPage;\nvar WebhookInstance;\nvar WebhookContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the WebhookList\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList\n *\n * @param {Twilio.Chat.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the Channel Webhook resource is associated with\n * @param {string} channelSid -\n *          The SID of the Channel the Channel Webhook resource belongs to\n */\n\n/* jshint ignore:end */\n\nWebhookList = function WebhookList(version, serviceSid, channelSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function webhooks\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext}\n   */\n\n  /* jshint ignore:end */\n  function WebhookListInstance(sid) {\n    return WebhookListInstance.get(sid);\n  }\n\n  WebhookListInstance._version = version; // Path Solution\n\n  WebhookListInstance._solution = {\n    serviceSid: serviceSid,\n    channelSid: channelSid\n  };\n  WebhookListInstance._uri = \"/Services/\".concat(serviceSid, \"/Channels/\").concat(channelSid, \"/Webhooks\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams WebhookInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  WebhookListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists WebhookInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WebhookListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of WebhookInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WebhookListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WebhookPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of WebhookInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WebhookListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WebhookPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a WebhookInstance\n   *\n   * @function create\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {object} opts - Options for request\n   * @param {webhook.type} opts.type - The type of webhook\n   * @param {string} [opts.configuration.url] - The URL of the webhook to call\n   * @param {webhook.method} [opts.configuration.method] -\n   *          The HTTP method used to call `configuration.url`\n   * @param {string|list} [opts.configuration.filters] -\n   *          The events that cause us to call the Channel Webhook\n   * @param {string|list} [opts.configuration.triggers] -\n   *          A string that will cause us to call the webhook when it is found in a message body\n   * @param {string} [opts.configuration.flowSid] -\n   *          The SID of the Studio Flow to call when an event occurs\n   * @param {number} [opts.configuration.retryCount] -\n   *          The number of times to retry the webhook if the first attempt fails\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed WebhookInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  WebhookListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.type)) {\n      throw new Error('Required parameter \"opts.type\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Type': _.get(opts, 'type'),\n      'Configuration.Url': _.get(opts, 'configuration.url'),\n      'Configuration.Method': _.get(opts, 'configuration.method'),\n      'Configuration.Filters': serialize.map(_.get(opts, 'configuration.filters'), function (e) {\n        return e;\n      }),\n      'Configuration.Triggers': serialize.map(_.get(opts, 'configuration.triggers'), function (e) {\n        return e;\n      }),\n      'Configuration.FlowSid': _.get(opts, 'configuration.flowSid'),\n      'Configuration.RetryCount': _.get(opts, 'configuration.retryCount')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WebhookInstance(this._version, payload, this._solution.serviceSid, this._solution.channelSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a webhook\n   *\n   * @function get\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {string} sid - The SID of the Channel Webhook resource to fetch\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  WebhookListInstance.get = function get(sid) {\n    return new WebhookContext(this._version, this._solution.serviceSid, this._solution.channelSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  WebhookListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  WebhookListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return WebhookListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WebhookPage\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WebhookSolution} solution - Path solution\n *\n * @returns WebhookPage\n */\n\n/* jshint ignore:end */\n\n\nWebhookPage = function WebhookPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(WebhookPage.prototype, Page.prototype);\n\nWebhookPage.prototype.constructor = WebhookPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of WebhookInstance\n *\n * @function getInstance\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookPage#\n *\n * @param {WebhookPayload} payload - Payload response from the API\n *\n * @returns WebhookInstance\n */\n\n/* jshint ignore:end */\n\nWebhookPage.prototype.getInstance = function getInstance(payload) {\n  return new WebhookInstance(this._version, payload, this._solution.serviceSid, this._solution.channelSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWebhookPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWebhookPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WebhookContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the Channel Webhook resource is associated with\n * @property {string} channelSid -\n *          The SID of the Channel the Channel Webhook resource belongs to\n * @property {string} type - The type of webhook\n * @property {string} url - The absolute URL of the Channel Webhook resource\n * @property {object} configuration -\n *          The JSON string that describes the configuration object for the channel webhook\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n *\n * @param {V2} version - Version of the resource\n * @param {WebhookPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the Channel Webhook resource is associated with\n * @param {sid} channelSid -\n *          The SID of the Channel the Channel Webhook resource belongs to\n * @param {sid} sid - The SID of the Channel Webhook resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nWebhookInstance = function WebhookInstance(version, payload, serviceSid, channelSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.channelSid = payload.channel_sid; // jshint ignore:line\n\n  this.type = payload.type; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.configuration = payload.configuration; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    channelSid: channelSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(WebhookInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new WebhookContext(this._version, this._solution.serviceSid, this._solution.channelSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a WebhookInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n\n/* jshint ignore:end */\n\nWebhookInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a WebhookInstance\n *\n * @function update\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.configuration.url] - The URL of the webhook to call\n * @param {webhook.method} [opts.configuration.method] -\n *          The HTTP method used to call `configuration.url`\n * @param {string|list} [opts.configuration.filters] -\n *          The events that cause us to call the Channel Webhook\n * @param {string|list} [opts.configuration.triggers] -\n *          A string that will cause us to call the webhook when it is found in a message body\n * @param {string} [opts.configuration.flowSid] -\n *          The SID of the Studio Flow to call when an event occurs\n * @param {number} [opts.configuration.retryCount] -\n *          The number of times to retry the webhook if the first attempt fails\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n\n/* jshint ignore:end */\n\n\nWebhookInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a WebhookInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n\n/* jshint ignore:end */\n\n\nWebhookInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWebhookInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWebhookInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WebhookContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the Service with the Channel to fetch the Webhook resource from\n * @param {sid_like} channelSid -\n *          The SID of the Channel the resource to fetch belongs to\n * @param {sid} sid - The SID of the Channel Webhook resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nWebhookContext = function WebhookContext(version, serviceSid, channelSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    channelSid: channelSid,\n    sid: sid\n  };\n  this._uri = \"/Services/\".concat(serviceSid, \"/Channels/\").concat(channelSid, \"/Webhooks/\").concat(sid);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a WebhookInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n\n/* jshint ignore:end */\n\n\nWebhookContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WebhookInstance(this._version, payload, this._solution.serviceSid, this._solution.channelSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a WebhookInstance\n *\n * @function update\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.configuration.url] - The URL of the webhook to call\n * @param {webhook.method} [opts.configuration.method] -\n *          The HTTP method used to call `configuration.url`\n * @param {string|list} [opts.configuration.filters] -\n *          The events that cause us to call the Channel Webhook\n * @param {string|list} [opts.configuration.triggers] -\n *          A string that will cause us to call the webhook when it is found in a message body\n * @param {string} [opts.configuration.flowSid] -\n *          The SID of the Studio Flow to call when an event occurs\n * @param {number} [opts.configuration.retryCount] -\n *          The number of times to retry the webhook if the first attempt fails\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n\n/* jshint ignore:end */\n\n\nWebhookContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Configuration.Url': _.get(opts, 'configuration.url'),\n    'Configuration.Method': _.get(opts, 'configuration.method'),\n    'Configuration.Filters': serialize.map(_.get(opts, 'configuration.filters'), function (e) {\n      return e;\n    }),\n    'Configuration.Triggers': serialize.map(_.get(opts, 'configuration.triggers'), function (e) {\n      return e;\n    }),\n    'Configuration.FlowSid': _.get(opts, 'configuration.flowSid'),\n    'Configuration.RetryCount': _.get(opts, 'configuration.retryCount')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WebhookInstance(this._version, payload, this._solution.serviceSid, this._solution.channelSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a WebhookInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n\n/* jshint ignore:end */\n\n\nWebhookContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWebhookContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nWebhookContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  WebhookList: WebhookList,\n  WebhookPage: WebhookPage,\n  WebhookInstance: WebhookInstance,\n  WebhookContext: WebhookContext\n};","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio/lib/rest/chat/v2/service/channel/webhook.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","WebhookList","WebhookPage","WebhookInstance","WebhookContext","version","serviceSid","channelSid","WebhookListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","type","map","e","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","channel_sid","url","configuration","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar WebhookList;\nvar WebhookPage;\nvar WebhookInstance;\nvar WebhookContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the WebhookList\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList\n *\n * @param {Twilio.Chat.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the Channel Webhook resource is associated with\n * @param {string} channelSid -\n *          The SID of the Channel the Channel Webhook resource belongs to\n */\n/* jshint ignore:end */\nWebhookList = function WebhookList(version, serviceSid, channelSid) {\n  /* jshint ignore:start */\n  /**\n   * @function webhooks\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext}\n   */\n  /* jshint ignore:end */\n  function WebhookListInstance(sid) {\n    return WebhookListInstance.get(sid);\n  }\n\n  WebhookListInstance._version = version;\n  // Path Solution\n  WebhookListInstance._solution = {serviceSid: serviceSid, channelSid: channelSid};\n  WebhookListInstance._uri = `/Services/${serviceSid}/Channels/${channelSid}/Webhooks`;\n  /* jshint ignore:start */\n  /**\n   * Streams WebhookInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists WebhookInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of WebhookInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WebhookPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of WebhookInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WebhookPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a WebhookInstance\n   *\n   * @function create\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {object} opts - Options for request\n   * @param {webhook.type} opts.type - The type of webhook\n   * @param {string} [opts.configuration.url] - The URL of the webhook to call\n   * @param {webhook.method} [opts.configuration.method] -\n   *          The HTTP method used to call `configuration.url`\n   * @param {string|list} [opts.configuration.filters] -\n   *          The events that cause us to call the Channel Webhook\n   * @param {string|list} [opts.configuration.triggers] -\n   *          A string that will cause us to call the webhook when it is found in a message body\n   * @param {string} [opts.configuration.flowSid] -\n   *          The SID of the Studio Flow to call when an event occurs\n   * @param {number} [opts.configuration.retryCount] -\n   *          The number of times to retry the webhook if the first attempt fails\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed WebhookInstance\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.type)) {\n      throw new Error('Required parameter \"opts.type\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Type': _.get(opts, 'type'),\n      'Configuration.Url': _.get(opts, 'configuration.url'),\n      'Configuration.Method': _.get(opts, 'configuration.method'),\n      'Configuration.Filters': serialize.map(_.get(opts, 'configuration.filters'), function(e) { return e; }),\n      'Configuration.Triggers': serialize.map(_.get(opts, 'configuration.triggers'), function(e) { return e; }),\n      'Configuration.FlowSid': _.get(opts, 'configuration.flowSid'),\n      'Configuration.RetryCount': _.get(opts, 'configuration.retryCount')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WebhookInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.channelSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a webhook\n   *\n   * @function get\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @param {string} sid - The SID of the Channel Webhook resource to fetch\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext}\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.get = function get(sid) {\n    return new WebhookContext(this._version, this._solution.serviceSid, this._solution.channelSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  WebhookListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  WebhookListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return WebhookListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WebhookPage\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WebhookSolution} solution - Path solution\n *\n * @returns WebhookPage\n */\n/* jshint ignore:end */\nWebhookPage = function WebhookPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(WebhookPage.prototype, Page.prototype);\nWebhookPage.prototype.constructor = WebhookPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of WebhookInstance\n *\n * @function getInstance\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookPage#\n *\n * @param {WebhookPayload} payload - Payload response from the API\n *\n * @returns WebhookInstance\n */\n/* jshint ignore:end */\nWebhookPage.prototype.getInstance = function getInstance(payload) {\n  return new WebhookInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.channelSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWebhookPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nWebhookPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WebhookContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the Channel Webhook resource is associated with\n * @property {string} channelSid -\n *          The SID of the Channel the Channel Webhook resource belongs to\n * @property {string} type - The type of webhook\n * @property {string} url - The absolute URL of the Channel Webhook resource\n * @property {object} configuration -\n *          The JSON string that describes the configuration object for the channel webhook\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n *\n * @param {V2} version - Version of the resource\n * @param {WebhookPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the Channel Webhook resource is associated with\n * @param {sid} channelSid -\n *          The SID of the Channel the Channel Webhook resource belongs to\n * @param {sid} sid - The SID of the Channel Webhook resource to fetch\n */\n/* jshint ignore:end */\nWebhookInstance = function WebhookInstance(version, payload, serviceSid,\n                                            channelSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.channelSid = payload.channel_sid; // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.configuration = payload.configuration; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, channelSid: channelSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(WebhookInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new WebhookContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.channelSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a WebhookInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a WebhookInstance\n *\n * @function update\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.configuration.url] - The URL of the webhook to call\n * @param {webhook.method} [opts.configuration.method] -\n *          The HTTP method used to call `configuration.url`\n * @param {string|list} [opts.configuration.filters] -\n *          The events that cause us to call the Channel Webhook\n * @param {string|list} [opts.configuration.triggers] -\n *          A string that will cause us to call the webhook when it is found in a message body\n * @param {string} [opts.configuration.flowSid] -\n *          The SID of the Studio Flow to call when an event occurs\n * @param {number} [opts.configuration.retryCount] -\n *          The number of times to retry the webhook if the first attempt fails\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a WebhookInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWebhookInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nWebhookInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WebhookContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the Service with the Channel to fetch the Webhook resource from\n * @param {sid_like} channelSid -\n *          The SID of the Channel the resource to fetch belongs to\n * @param {sid} sid - The SID of the Channel Webhook resource to fetch\n */\n/* jshint ignore:end */\nWebhookContext = function WebhookContext(version, serviceSid, channelSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, channelSid: channelSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Channels/${channelSid}/Webhooks/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a WebhookInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new WebhookInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.channelSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a WebhookInstance\n *\n * @function update\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.configuration.url] - The URL of the webhook to call\n * @param {webhook.method} [opts.configuration.method] -\n *          The HTTP method used to call `configuration.url`\n * @param {string|list} [opts.configuration.filters] -\n *          The events that cause us to call the Channel Webhook\n * @param {string|list} [opts.configuration.triggers] -\n *          A string that will cause us to call the webhook when it is found in a message body\n * @param {string} [opts.configuration.flowSid] -\n *          The SID of the Studio Flow to call when an event occurs\n * @param {number} [opts.configuration.retryCount] -\n *          The number of times to retry the webhook if the first attempt fails\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Configuration.Url': _.get(opts, 'configuration.url'),\n    'Configuration.Method': _.get(opts, 'configuration.method'),\n    'Configuration.Filters': serialize.map(_.get(opts, 'configuration.filters'), function(e) { return e; }),\n    'Configuration.Triggers': serialize.map(_.get(opts, 'configuration.triggers'), function(e) { return e; }),\n    'Configuration.FlowSid': _.get(opts, 'configuration.flowSid'),\n    'Configuration.RetryCount': _.get(opts, 'configuration.retryCount')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new WebhookInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.channelSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a WebhookInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WebhookInstance\n */\n/* jshint ignore:end */\nWebhookContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWebhookContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nWebhookContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  WebhookList: WebhookList,\n  WebhookPage: WebhookPage,\n  WebhookInstance: WebhookInstance,\n  WebhookContext: WebhookContext\n};\n"]},"metadata":{},"sourceType":"script"}
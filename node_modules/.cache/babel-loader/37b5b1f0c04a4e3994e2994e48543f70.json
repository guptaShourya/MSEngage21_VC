{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tidy, util } from '@tensorflow/tfjs-core';\nimport { getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName } from '../operations/executors/utils';\nimport { executeOp } from '../operations/operation_executor';\nimport { ExecutionContext } from './execution_context';\nimport { getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow } from './model_analysis';\nexport class GraphExecutor {\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  constructor(graph, parent) {\n    this.graph = graph;\n    this.parent = parent;\n    this.compiledMap = new Map();\n    this._weightMap = {};\n    this.SEPERATOR = ',';\n    this._functions = {};\n    this._functionExecutorMap = {};\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._initNodes = graph.initNodes;\n    this._signature = graph.signature;\n    this._functions = graph.functions; // create sub-graph executors\n\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(name => {\n        this._functionExecutorMap[name] = new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n\n  get weightIds() {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n\n  get functionExecutorMap() {\n    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;\n  }\n\n  get weightMap() {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n\n  set weightMap(weightMap) {\n    const weightIds = Object.keys(weightMap).map(key => weightMap[key].map(tensor => tensor.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n  /**\n   * Set `ResourceManager` shared by executors of a model.\n   * @param resourceManager: `ResourceManager` of the `GraphModel`.\n   */\n\n\n  set resourceManager(resourceManager) {\n    this._resourceManager = resourceManager;\n  }\n\n  get inputs() {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ? node.attrParams['shape'].value : undefined,\n        dtype: node.attrParams['dtype'] ? node.attrParams['dtype'].value : undefined\n      };\n    });\n  }\n\n  get outputs() {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ? node.attrParams['shape'].value : undefined,\n        dtype: node.attrParams['dtype'] ? node.attrParams['dtype'].value : undefined\n      };\n    });\n  }\n\n  get inputNodes() {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes() {\n    return this._outputs.map(node => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? \"\".concat(name, \":\").concat(node.defaultOutput) : name;\n    });\n  }\n\n  get functions() {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {});\n  }\n\n  getCompilationKey(inputs, outputs) {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' + sortedOutputs.join(this.SEPERATOR);\n  }\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n\n\n  compile(inputs, outputs) {\n    const executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n    const missingInputs = executionInfo.missingInputs,\n          dynamicNode = executionInfo.dynamicNode,\n          syncInputs = executionInfo.syncInputs;\n\n    if (dynamicNode != null) {\n      throw new Error(\"This execution contains the node '\".concat(dynamicNode.name, \"', which has \") + \"the dynamic op '\".concat(dynamicNode.op, \"'. Please use \") + \"model.executeAsync() instead. Alternatively, to avoid the \" + \"dynamic ops, specify the inputs [\".concat(syncInputs, \"]\"));\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\"Cannot compute the outputs [\".concat(outNames, \"] from the provided inputs \") + \"[\".concat(inNames, \"]. Missing the following inputs: [\").concat(missingInputs, \"]\"));\n    }\n\n    return getNodesInTopologicalOrder(this.graph, this.weightMap, executionInfo);\n  }\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model, if\n   * no outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   */\n\n\n  execute(inputs, outputs) {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes = names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]); // If no outputs are specified, then use the default outputs of the model.\n\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes); // Do nothing if the compiled graph cache contains the input.\n\n    let orderedNodes = this.compiledMap.get(compilationKey);\n\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n\n    const tensorArrayMap = {};\n    const tensorListMap = {};\n    return tidy(() => {\n      const context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap);\n      const tensorsMap = Object.assign({}, this.weightMap);\n      Object.keys(inputs).forEach(name => {\n        const _parseNodeName = parseNodeName(name),\n              _parseNodeName2 = _slicedToArray(_parseNodeName, 2),\n              nodeName = _parseNodeName2[0],\n              index = _parseNodeName2[1];\n\n        const tensors = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount = {};\n\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n\n        if (!tensorsMap[node.name]) {\n          const tensors = executeOp(node, tensorsMap, context, this._resourceManager);\n\n          if (util.isPromise(tensors)) {\n            throw new Error(\"The execution of the op '\".concat(node.op, \"' returned a promise. \") + \"Please use model.executeAsync() instead.\");\n          }\n\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(node.name, node, tensorsMap, context, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount);\n        }\n      } // dispose the context for the root executor\n\n\n      if (this.parent == null) {\n        context.dispose(tensorsToKeep);\n      }\n\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  getFrozenTensorIds(tensorMap) {\n    const ids = [].concat.apply([], Object.keys(tensorMap).map(key => tensorMap[key]).map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n\n  checkTensorForDisposal(nodeName, node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] = (intermediateTensorConsumerCount[tensor.id] || 0) + node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors = getTensorsForCurrentContenxt(input.name, tensorMap, context);\n\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensor.kept && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n\n\n  executeAsync(inputs, outputs) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", _this._executeAsync(inputs, outputs));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Optional. Flag for executing a function.\n   * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n   * function execution.\n   * @param tensorArrayMap Optinal global TensorList map by id. Used for\n   * function execution.\n   */\n\n\n  _executeAsync(inputs, outputs, isFunctionExecution = false, tensorArrayMap = {}, tensorListMap = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var context, tensorMap, results, outputIds, inputIds, keepIds;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!isFunctionExecution) {\n              inputs = _this2.mapInputs(inputs);\n\n              _this2.checkInputs(inputs);\n\n              _this2.checkInputShapeAndType(inputs);\n\n              outputs = _this2.mapOutputs(outputs);\n\n              _this2.checkOutputs(outputs);\n            }\n\n            context = new ExecutionContext(_this2.weightMap, tensorArrayMap, tensorListMap, _this2.functionExecutorMap); // Graph with control flow op requires runtime evaluation of the execution\n            // order, while without control flow the execution order is pre-determined\n            // in the compile method.\n\n            _context2.next = 4;\n            return _this2.executeWithControlFlow(inputs, context, outputs, isFunctionExecution);\n\n          case 4:\n            tensorMap = _context2.sent;\n            results = outputs.map(name => getTensor(name, tensorMap, context)); // dispose all the intermediate tensors\n\n            outputIds = results.map(t => t.id);\n            inputIds = Object.keys(inputs).map(name => inputs[name].id);\n            keepIds = new Set([...outputIds, ...inputIds, ..._this2.weightIds]);\n            Object.keys(tensorMap).forEach(key => {\n              const tensorArray = tensorMap[key];\n              tensorArray.forEach(tensor => {\n                if (tensor && !tensor.kept && !tensor.isDisposed && !keepIds.has(tensor.id)) {\n                  tensor.dispose();\n                }\n              });\n            }); // dispose the context for the root executor\n\n            if (_this2.parent == null) {\n              context.dispose(keepIds);\n            }\n\n            return _context2.abrupt(\"return\", results);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))();\n  }\n\n  executeFunctionAsync(inputs, tensorArrayMap, tensorListMap) {\n    var _this3 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var mappedInputs;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            mappedInputs = inputs.reduce((map, tensor, index) => {\n              map[_this3.inputs[index].name] = tensor;\n              return map;\n            }, {});\n            return _context3.abrupt(\"return\", _this3._executeAsync(mappedInputs, _this3.outputNodes, true, tensorArrayMap, tensorListMap));\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }))();\n  }\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   * @param outputNames Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Flag for executing a function.\n   */\n\n\n  executeWithControlFlow(inputs, context, outputNames, isFunctionExecution) {\n    var _this4 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var names, inputNodes, outputNodeNames, outputNodes, _getExecutionSubgraph, usedNodes, missingInputs, dynamicNode, syncInputs, stack, tensorsMap, intermediateTensorConsumerCount, tensorsToKeep, added, promises, missingOutputs, alternativeMsg;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            names = Object.keys(inputs);\n            inputNodes = names.map(name => _this4.graph.nodes[parseNodeName(name)[0]]);\n            outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n            outputNodes = outputNodeNames.map(name => _this4.graph.nodes[name]); // If no outputs are specified, then use the default outputs of the model.\n\n            if (outputNodes.length === 0) {\n              outputNodes = _this4._outputs;\n            }\n\n            _getExecutionSubgraph = getExecutionSubgraph(inputs, outputNodes, _this4.weightMap, _this4._initNodes), usedNodes = _getExecutionSubgraph.usedNodes, missingInputs = _getExecutionSubgraph.missingInputs, dynamicNode = _getExecutionSubgraph.dynamicNode, syncInputs = _getExecutionSubgraph.syncInputs; // First nodes to execute include inputNodes, weights, and initNodes.\n\n            stack = [...inputNodes, ..._this4.graph.weights, ...(_this4._initNodes || [])].map(node => {\n              return {\n                node,\n                contexts: context.currentContext\n              };\n            });\n            tensorsMap = Object.assign({}, _this4.weightMap);\n            Object.keys(inputs).forEach(name => {\n              const _parseNodeName3 = parseNodeName(name),\n                    _parseNodeName4 = _slicedToArray(_parseNodeName3, 2),\n                    nodeName = _parseNodeName4[0],\n                    index = _parseNodeName4[1];\n\n              const tensors = [];\n              tensors[index] = inputs[name];\n              tensorsMap[nodeName] = tensors;\n            });\n            intermediateTensorConsumerCount = {};\n            tensorsToKeep = _this4.getFrozenTensorIds(tensorsMap);\n            added = {};\n\n          case 12:\n            if (!(stack.length > 0)) {\n              _context4.next = 18;\n              break;\n            }\n\n            promises = _this4.processStack(inputNodes, stack, context, tensorsMap, added, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount, usedNodes);\n            _context4.next = 16;\n            return Promise.all(promises);\n\n          case 16:\n            _context4.next = 12;\n            break;\n\n          case 18:\n            if (dynamicNode == null && !isFunctionExecution) {\n              console.warn(\"This model execution did not contain any nodes with control flow \" + \"or dynamic output shapes. You can use model.execute() instead.\");\n            }\n\n            missingOutputs = outputNodes.filter(node => !isControlFlow(node) && !getTensor(node.name, tensorsMap, context)).map(node => node.name);\n\n            if (!(missingOutputs.length > 0)) {\n              _context4.next = 24;\n              break;\n            }\n\n            alternativeMsg = '';\n\n            if (dynamicNode != null) {\n              alternativeMsg = \"Alternatively, to avoid the dynamic ops, use model.execute() \" + \"and specify the inputs [\".concat(syncInputs, \"]\");\n            }\n\n            throw new Error(\"Cannot compute the outputs [\".concat(missingOutputs, \"] from the provided \") + \"inputs [\".concat(names, \"]. Consider providing the following inputs: \") + \"[\".concat(missingInputs, \"]. \").concat(alternativeMsg));\n\n          case 24:\n            return _context4.abrupt(\"return\", tensorsMap);\n\n          case 25:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }))();\n  }\n\n  processStack(inputNodes, stack, context, tensorMap, added, tensorsToKeep, outputNames, intermediateTensorConsumerCount, usedNodes) {\n    const promises = [];\n\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = ''; // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n\n      if (item.node.op === 'Enter' && getParamValue('isConstant', item.node, tensorMap, context)) {\n        var _getNodeNameAndIndex = getNodeNameAndIndex(item.node.name, context);\n\n        var _getNodeNameAndIndex2 = _slicedToArray(_getNodeNameAndIndex, 1);\n\n        nodeName = _getNodeNameAndIndex2[0];\n      } // only process nodes that are not in the tensorMap yet, this include\n      // inputNodes and internal initNodes.\n\n\n      if (tensorMap[item.node.name] == null) {\n        const tensors = executeOp(item.node, tensorMap, context, this._resourceManager);\n\n        if (!nodeName) {\n          var _getNodeNameAndIndex3 = getNodeNameAndIndex(item.node.name, context);\n\n          var _getNodeNameAndIndex4 = _slicedToArray(_getNodeNameAndIndex3, 1);\n\n          nodeName = _getNodeNameAndIndex4[0];\n        }\n\n        const currentContext = context.currentContext;\n\n        if (util.isPromise(tensors)) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n\n    return promises;\n  }\n\n  processChildNodes(node, stack, context, tensorMap, added, usedNodes) {\n    node.children.forEach(childNode => {\n      const _getNodeNameAndIndex5 = getNodeNameAndIndex(childNode.name, context),\n            _getNodeNameAndIndex6 = _slicedToArray(_getNodeNameAndIndex5, 1),\n            nodeName = _getNodeNameAndIndex6[0];\n\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      } // Merge op can be pushed if any of its inputs has value.\n\n\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n          return !!getTensor(name, tensorMap, context);\n        })) {\n          added[nodeName] = true;\n          stack.push({\n            contexts: context.currentContext,\n            node: childNode\n          });\n        }\n      } else // Otherwise all inputs must to have value.\n        if (childNode.inputNames.every(name => {\n          return !!getTensor(name, tensorMap, context);\n        })) {\n          added[nodeName] = true;\n          stack.push({\n            contexts: context.currentContext,\n            node: childNode\n          });\n        }\n    });\n  }\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n\n\n  dispose() {\n    Object.keys(this.weightMap).forEach(key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  checkInputShapeAndType(inputs) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n\n      const _parseNodeName5 = parseNodeName(name),\n            _parseNodeName6 = _slicedToArray(_parseNodeName5, 1),\n            nodeName = _parseNodeName6[0];\n\n      const node = this.graph.nodes[nodeName];\n\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value;\n        const match = shape.length === input.shape.length && input.shape.every((dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(match, () => \"The shape of dict['\".concat(node.name, \"'] provided in \") + \"model.execute(dict) must be [\".concat(shape, \"], but was \") + \"[\".concat(input.shape, \"]\"));\n      }\n\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(input.dtype === node.attrParams['dtype'].value, () => \"The dtype of dict['\".concat(node.name, \"'] provided in \") + \"model.execute(dict) must be \" + \"\".concat(node.attrParams['dtype'].value, \", but was \").concat(input.dtype));\n      }\n    });\n  }\n\n  mapInputs(inputs) {\n    const result = {};\n\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null && this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n\n    return result;\n  }\n\n  checkInputs(inputs) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const _parseNodeName7 = parseNodeName(name),\n            _parseNodeName8 = _slicedToArray(_parseNodeName7, 1),\n            nodeName = _parseNodeName8[0];\n\n      return this.graph.nodes[nodeName] == null;\n    });\n\n    if (notInGraph.length > 0) {\n      throw new Error(\"The dict provided in model.execute(dict) has \" + \"keys: [\".concat(notInGraph, \"] that are not part of graph\"));\n    }\n  }\n\n  mapOutputs(outputs) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null && this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n\n      return name;\n    }, {});\n  }\n\n  checkOutputs(outputs) {\n    outputs.forEach(name => {\n      const _parseNodeName9 = parseNodeName(name),\n            _parseNodeName10 = _slicedToArray(_parseNodeName9, 1),\n            normalizedName = _parseNodeName10[0];\n\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(\"The output '\".concat(name, \"' is not found in the graph\"));\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/executor/graph_executor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {ISignatureDef} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo, TensorListMap} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\nimport {ResourceManager} from './resource_manager';\nimport {FunctionExecutor} from './types';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor implements FunctionExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private _weightIds: number[];\n  private _signature: ISignatureDef;\n  private _inputs: Node[];\n  private _outputs: Node[];\n  private _initNodes: Node[];  // Internal init nodes to start initialization.\n  private SEPERATOR = ',';\n  private _functions: {[key: string]: Graph} = {};\n  private _functionExecutorMap: {[key: string]: FunctionExecutor} = {};\n  private _resourceManager: ResourceManager;\n\n  get weightIds(): number[] {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n\n  get functionExecutorMap(): {[key: string]: FunctionExecutor} {\n    return this.parent ? this.parent.functionExecutorMap :\n                         this._functionExecutorMap;\n  }\n\n  get weightMap(): NamedTensorsMap {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n\n  /**\n   * Set `ResourceManager` shared by executors of a model.\n   * @param resourceManager: `ResourceManager` of the `GraphModel`.\n   */\n  set resourceManager(resourceManager: ResourceManager) {\n    this._resourceManager = resourceManager;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this._outputs.map((node) => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;\n    });\n  }\n\n  get functions(): {[key: string]: ISignatureDef} {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {} as {[key: string]: ISignatureDef});\n  }\n\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  constructor(private graph: Graph, private parent?: GraphExecutor) {\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._initNodes = graph.initNodes;\n    this._signature = graph.signature;\n    this._functions = graph.functions;\n    // create sub-graph executors\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(name => {\n        this._functionExecutorMap[name] =\n            new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo =\n        getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model, if\n   * no outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   */\n  execute(inputs: NamedTensorMap, outputs?: string[]): Tensor[] {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n\n    const tensorArrayMap: TensorArrayMap = {};\n    const tensorListMap: TensorListMap = {};\n\n    return tidy(() => {\n      const context = new ExecutionContext(\n          this.weightMap, tensorArrayMap, tensorListMap,\n          this.functionExecutorMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors: Tensor[] = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors =\n              executeOp(node, tensorsMap, context, this._resourceManager) as\n              Tensor[];\n          if (util.isPromise(tensors)) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep,\n              outputNodeNames, intermediateTensorConsumerCount);\n        }\n      }\n      // dispose the context for the root executor\n      if (this.parent == null) {\n        context.dispose(tensorsToKeep);\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensor.kept && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs?: string[]):\n      Promise<Tensor[]> {\n    return this._executeAsync(inputs, outputs);\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Optional. Flag for executing a function.\n   * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n   * function execution.\n   * @param tensorArrayMap Optinal global TensorList map by id. Used for\n   * function execution.\n   */\n  private async _executeAsync(\n      inputs: NamedTensorMap, outputs?: string[], isFunctionExecution = false,\n      tensorArrayMap: TensorArrayMap = {},\n      tensorListMap: TensorListMap = {}): Promise<Tensor[]> {\n    if (!isFunctionExecution) {\n      inputs = this.mapInputs(inputs);\n      this.checkInputs(inputs);\n      this.checkInputShapeAndType(inputs);\n      outputs = this.mapOutputs(outputs);\n      this.checkOutputs(outputs);\n    }\n\n    const context = new ExecutionContext(\n        this.weightMap, tensorArrayMap, tensorListMap,\n        this.functionExecutorMap);\n\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorMap = await this.executeWithControlFlow(\n        inputs, context, outputs, isFunctionExecution);\n    const results = outputs.map(name => getTensor(name, tensorMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = results.map(t => t.id);\n    const inputIds = Object.keys(inputs).map(name => inputs[name].id);\n    const keepIds =\n        new Set<number>([...outputIds, ...inputIds, ...this.weightIds]);\n    Object.keys(tensorMap).forEach(key => {\n      const tensorArray = tensorMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.kept && !tensor.isDisposed &&\n            !keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n    });\n    // dispose the context for the root executor\n    if (this.parent == null) {\n      context.dispose(keepIds);\n    }\n\n    return results;\n  }\n\n  async executeFunctionAsync(\n      inputs: Tensor[], tensorArrayMap: TensorArrayMap,\n      tensorListMap: TensorListMap): Promise<Tensor[]> {\n    const mappedInputs = inputs.reduce((map, tensor, index) => {\n      map[this.inputs[index].name] = tensor;\n      return map;\n    }, {} as NamedTensorMap);\n\n    return this._executeAsync(\n        mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n  }\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   * @param outputNames Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Flag for executing a function.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext, outputNames?: string[],\n      isFunctionExecution?: boolean): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(\n            inputs, outputNodes, this.weightMap, this._initNodes);\n\n    // First nodes to execute include inputNodes, weights, and initNodes.\n    const stack: NodeWithContexts[] = [\n      ...inputNodes, ...this.graph.weights, ...(this._initNodes || [])\n    ].map(node => {\n      return {node, contexts: context.currentContext};\n    });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors: Tensor[] = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNodeNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null && !isFunctionExecution) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not in the tensorMap yet, this include\n      // inputNodes and internal initNodes.\n      if (tensorMap[item.node.name] == null) {\n        const tensors =\n            executeOp(item.node, tensorMap, context, this._resourceManager);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (util.isPromise(tensors)) {\n          promises.push((tensors as Promise<Tensor[]>).then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors as Tensor[];\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName, ] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private mapInputs(inputs: NamedTensorMap) {\n    const result: NamedTensorMap = {};\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null &&\n          this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private mapOutputs(outputs: string[]) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null &&\n          this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
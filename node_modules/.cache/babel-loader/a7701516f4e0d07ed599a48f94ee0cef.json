{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar EngagementContextList = require('./engagement/engagementContext').EngagementContextList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar StepList = require('./engagement/step').StepList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar EngagementList;\nvar EngagementPage;\nvar EngagementInstance;\nvar EngagementContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the EngagementList\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementList\n *\n * @param {Twilio.Studio.V1} version - Version of the resource\n * @param {string} flowSid - The SID of the Flow\n */\n\n/* jshint ignore:end */\n\nEngagementList = function EngagementList(version, flowSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function engagements\n   * @memberof Twilio.Studio.V1.FlowContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext}\n   */\n\n  /* jshint ignore:end */\n  function EngagementListInstance(sid) {\n    return EngagementListInstance.get(sid);\n  }\n\n  EngagementListInstance._version = version; // Path Solution\n\n  EngagementListInstance._solution = {\n    flowSid: flowSid\n  };\n  EngagementListInstance._uri = \"/Flows/\".concat(flowSid, \"/Engagements\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams EngagementInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  EngagementListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists EngagementInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EngagementListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of EngagementInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EngagementListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EngagementPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of EngagementInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EngagementListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EngagementPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a EngagementInstance\n   *\n   * @function create\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to -\n   *          The Contact phone number to start a Studio Flow Engagement\n   * @param {string} opts.from -\n   *          The Twilio phone number to send messages or initiate calls from during the Flow Engagement\n   * @param {object} [opts.parameters] -\n   *          A JSON string we will add to your flow's context and that you can access as variables inside your flow\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed EngagementInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  EngagementListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n\n    if (_.isUndefined(opts.from)) {\n      throw new Error('Required parameter \"opts.from\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'Parameters': serialize.object(_.get(opts, 'parameters'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EngagementInstance(this._version, payload, this._solution.flowSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a engagement\n   *\n   * @function get\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementList#\n   *\n   * @param {string} sid - The SID of the Engagement resource to fetch\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  EngagementListInstance.get = function get(sid) {\n    return new EngagementContext(this._version, this._solution.flowSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  EngagementListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  EngagementListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return EngagementListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EngagementPage\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EngagementSolution} solution - Path solution\n *\n * @returns EngagementPage\n */\n\n/* jshint ignore:end */\n\n\nEngagementPage = function EngagementPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(EngagementPage.prototype, Page.prototype);\n\nEngagementPage.prototype.constructor = EngagementPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of EngagementInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V1.FlowContext.EngagementPage#\n *\n * @param {EngagementPayload} payload - Payload response from the API\n *\n * @returns EngagementInstance\n */\n\n/* jshint ignore:end */\n\nEngagementPage.prototype.getInstance = function getInstance(payload) {\n  return new EngagementInstance(this._version, payload, this._solution.flowSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEngagementPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nEngagementPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EngagementContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} flowSid - The SID of the Flow\n * @property {string} contactSid - The SID of the Contact\n * @property {string} contactChannelAddress -\n *          The phone number, SIP address or Client identifier that triggered this Engagement\n * @property {object} context - The current state of the execution flow\n * @property {engagement.status} status - The status of the Engagement\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the Engagement was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the Engagement was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of the Engagement's nested resources\n *\n * @param {V1} version - Version of the resource\n * @param {EngagementPayload} payload - The instance payload\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} sid - The SID of the Engagement resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nEngagementInstance = function EngagementInstance(version, payload, flowSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.flowSid = payload.flow_sid; // jshint ignore:line\n\n  this.contactSid = payload.contact_sid; // jshint ignore:line\n\n  this.contactChannelAddress = payload.contact_channel_address; // jshint ignore:line\n\n  this.context = payload.context; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    flowSid: flowSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(EngagementInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new EngagementContext(this._version, this._solution.flowSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a EngagementInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.EngagementInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EngagementInstance\n */\n\n/* jshint ignore:end */\n\nEngagementInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a EngagementInstance\n *\n * @function remove\n * @memberof Twilio.Studio.V1.FlowContext.EngagementInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EngagementInstance\n */\n\n/* jshint ignore:end */\n\n\nEngagementInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the steps\n *\n * @function steps\n * @memberof Twilio.Studio.V1.FlowContext.EngagementInstance#\n *\n * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepList}\n */\n\n/* jshint ignore:end */\n\n\nEngagementInstance.prototype.steps = function steps() {\n  return this._proxy.steps;\n};\n/* jshint ignore:start */\n\n/**\n * Access the engagementContext\n *\n * @function engagementContext\n * @memberof Twilio.Studio.V1.FlowContext.EngagementInstance#\n *\n * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextList}\n */\n\n/* jshint ignore:end */\n\n\nEngagementInstance.prototype.engagementContext = function engagementContext() {\n  return this._proxy.engagementContext;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEngagementInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nEngagementInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EngagementContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext\n *\n * @property {Twilio.Studio.V1.FlowContext.EngagementContext.StepList} steps -\n *          steps resource\n * @property {Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextList} engagementContext -\n *          engagementContext resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} flowSid - Flow SID\n * @param {sid} sid - The SID of the Engagement resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nEngagementContext = function EngagementContext(version, flowSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    flowSid: flowSid,\n    sid: sid\n  };\n  this._uri = \"/Flows/\".concat(flowSid, \"/Engagements/\").concat(sid); // Dependents\n\n  this._steps = undefined;\n  this._engagementContext = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a EngagementInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EngagementInstance\n */\n\n/* jshint ignore:end */\n\n\nEngagementContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new EngagementInstance(this._version, payload, this._solution.flowSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a EngagementInstance\n *\n * @function remove\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EngagementInstance\n */\n\n/* jshint ignore:end */\n\n\nEngagementContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(EngagementContext.prototype, 'steps', {\n  get: function get() {\n    if (!this._steps) {\n      this._steps = new StepList(this._version, this._solution.flowSid, this._solution.sid);\n    }\n\n    return this._steps;\n  }\n});\nObject.defineProperty(EngagementContext.prototype, 'engagementContext', {\n  get: function get() {\n    if (!this._engagementContext) {\n      this._engagementContext = new EngagementContextList(this._version, this._solution.flowSid, this._solution.sid);\n    }\n\n    return this._engagementContext;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nEngagementContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nEngagementContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  EngagementList: EngagementList,\n  EngagementPage: EngagementPage,\n  EngagementInstance: EngagementInstance,\n  EngagementContext: EngagementContext\n};","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio/lib/rest/studio/v1/flow/engagement.js"],"names":["Q","require","_","util","EngagementContextList","Page","StepList","deserialize","serialize","values","EngagementList","EngagementPage","EngagementInstance","EngagementContext","version","flowSid","EngagementListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","to","from","object","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","flow_sid","contactSid","contact_sid","contactChannelAddress","contact_channel_address","context","status","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","steps","engagementContext","_steps","_engagementContext","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar EngagementContextList = require(\n    './engagement/engagementContext').EngagementContextList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar StepList = require('./engagement/step').StepList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar EngagementList;\nvar EngagementPage;\nvar EngagementInstance;\nvar EngagementContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the EngagementList\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementList\n *\n * @param {Twilio.Studio.V1} version - Version of the resource\n * @param {string} flowSid - The SID of the Flow\n */\n/* jshint ignore:end */\nEngagementList = function EngagementList(version, flowSid) {\n  /* jshint ignore:start */\n  /**\n   * @function engagements\n   * @memberof Twilio.Studio.V1.FlowContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext}\n   */\n  /* jshint ignore:end */\n  function EngagementListInstance(sid) {\n    return EngagementListInstance.get(sid);\n  }\n\n  EngagementListInstance._version = version;\n  // Path Solution\n  EngagementListInstance._solution = {flowSid: flowSid};\n  EngagementListInstance._uri = `/Flows/${flowSid}/Engagements`;\n  /* jshint ignore:start */\n  /**\n   * Streams EngagementInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  EngagementListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists EngagementInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EngagementListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of EngagementInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EngagementListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EngagementPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of EngagementInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EngagementListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EngagementPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a EngagementInstance\n   *\n   * @function create\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to -\n   *          The Contact phone number to start a Studio Flow Engagement\n   * @param {string} opts.from -\n   *          The Twilio phone number to send messages or initiate calls from during the Flow Engagement\n   * @param {object} [opts.parameters] -\n   *          A JSON string we will add to your flow's context and that you can access as variables inside your flow\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed EngagementInstance\n   */\n  /* jshint ignore:end */\n  EngagementListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n    if (_.isUndefined(opts.from)) {\n      throw new Error('Required parameter \"opts.from\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'Parameters': serialize.object(_.get(opts, 'parameters'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EngagementInstance(\n        this._version,\n        payload,\n        this._solution.flowSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a engagement\n   *\n   * @function get\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementList#\n   *\n   * @param {string} sid - The SID of the Engagement resource to fetch\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext}\n   */\n  /* jshint ignore:end */\n  EngagementListInstance.get = function get(sid) {\n    return new EngagementContext(this._version, this._solution.flowSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  EngagementListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  EngagementListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return EngagementListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EngagementPage\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EngagementSolution} solution - Path solution\n *\n * @returns EngagementPage\n */\n/* jshint ignore:end */\nEngagementPage = function EngagementPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(EngagementPage.prototype, Page.prototype);\nEngagementPage.prototype.constructor = EngagementPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of EngagementInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V1.FlowContext.EngagementPage#\n *\n * @param {EngagementPayload} payload - Payload response from the API\n *\n * @returns EngagementInstance\n */\n/* jshint ignore:end */\nEngagementPage.prototype.getInstance = function getInstance(payload) {\n  return new EngagementInstance(this._version, payload, this._solution.flowSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEngagementPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nEngagementPage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EngagementContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} flowSid - The SID of the Flow\n * @property {string} contactSid - The SID of the Contact\n * @property {string} contactChannelAddress -\n *          The phone number, SIP address or Client identifier that triggered this Engagement\n * @property {object} context - The current state of the execution flow\n * @property {engagement.status} status - The status of the Engagement\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the Engagement was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the Engagement was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of the Engagement's nested resources\n *\n * @param {V1} version - Version of the resource\n * @param {EngagementPayload} payload - The instance payload\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} sid - The SID of the Engagement resource to fetch\n */\n/* jshint ignore:end */\nEngagementInstance = function EngagementInstance(version, payload, flowSid, sid)\n                                                  {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.flowSid = payload.flow_sid; // jshint ignore:line\n  this.contactSid = payload.contact_sid; // jshint ignore:line\n  this.contactChannelAddress = payload.contact_channel_address; // jshint ignore:line\n  this.context = payload.context; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {flowSid: flowSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(EngagementInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new EngagementContext(this._version, this._solution.flowSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a EngagementInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.EngagementInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EngagementInstance\n */\n/* jshint ignore:end */\nEngagementInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a EngagementInstance\n *\n * @function remove\n * @memberof Twilio.Studio.V1.FlowContext.EngagementInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EngagementInstance\n */\n/* jshint ignore:end */\nEngagementInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the steps\n *\n * @function steps\n * @memberof Twilio.Studio.V1.FlowContext.EngagementInstance#\n *\n * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepList}\n */\n/* jshint ignore:end */\nEngagementInstance.prototype.steps = function steps() {\n  return this._proxy.steps;\n};\n\n/* jshint ignore:start */\n/**\n * Access the engagementContext\n *\n * @function engagementContext\n * @memberof Twilio.Studio.V1.FlowContext.EngagementInstance#\n *\n * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextList}\n */\n/* jshint ignore:end */\nEngagementInstance.prototype.engagementContext = function engagementContext() {\n  return this._proxy.engagementContext;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEngagementInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nEngagementInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EngagementContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext\n *\n * @property {Twilio.Studio.V1.FlowContext.EngagementContext.StepList} steps -\n *          steps resource\n * @property {Twilio.Studio.V1.FlowContext.EngagementContext.EngagementContextList} engagementContext -\n *          engagementContext resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} flowSid - Flow SID\n * @param {sid} sid - The SID of the Engagement resource to fetch\n */\n/* jshint ignore:end */\nEngagementContext = function EngagementContext(version, flowSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {flowSid: flowSid, sid: sid, };\n  this._uri = `/Flows/${flowSid}/Engagements/${sid}`;\n\n  // Dependents\n  this._steps = undefined;\n  this._engagementContext = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a EngagementInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EngagementInstance\n */\n/* jshint ignore:end */\nEngagementContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new EngagementInstance(\n      this._version,\n      payload,\n      this._solution.flowSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a EngagementInstance\n *\n * @function remove\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EngagementInstance\n */\n/* jshint ignore:end */\nEngagementContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(EngagementContext.prototype,\n  'steps', {\n    get: function() {\n      if (!this._steps) {\n        this._steps = new StepList(this._version, this._solution.flowSid, this._solution.sid);\n      }\n      return this._steps;\n    }\n});\n\nObject.defineProperty(EngagementContext.prototype,\n  'engagementContext', {\n    get: function() {\n      if (!this._engagementContext) {\n        this._engagementContext = new EngagementContextList(\n          this._version,\n          this._solution.flowSid,\n          this._solution.sid\n        );\n      }\n      return this._engagementContext;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEngagementContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nEngagementContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  EngagementList: EngagementList,\n  EngagementPage: EngagementPage,\n  EngagementInstance: EngagementInstance,\n  EngagementContext: EngagementContext\n};\n"]},"metadata":{},"sourceType":"script"}
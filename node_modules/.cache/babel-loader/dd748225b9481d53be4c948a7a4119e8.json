{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/VideoChat_test.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport Video from \"twilio-video\";\nimport Lobby from \"./Lobby\";\nimport Room from \"./Room\";\nimport RoomHeader from \"./toolbar/RoomHeader\"; // child to App.js\n// VideoChat.js handles data about the chat\n\nvar VideoChat_test = function VideoChat_test(_ref) {\n  _s();\n\n  var username = _ref.username,\n      roomName = _ref.roomName;\n\n  // state variables\n  //   const [username, setUsername] = useState(\"\"); //username\n  //   const [roomName, setRoomName] = useState(\"\"); //roomname\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      room = _useState2[0],\n      setRoom = _useState2[1]; //room details\n\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      connecting = _useState4[0],\n      setConnecting = _useState4[1]; //current status\n  //update username on change\n  //   const handleUsernameChange = useCallback((event) => {\n  //     setUsername(event.target.value);\n  //   }, []);\n  //   // update room name on change\n  //   const handleRoomNameChange = useCallback((event) => {\n  //     setRoomName(event.target.value);\n  //   }, []);\n  // Method to send Username & Roomname to the server\n  // And recieve an access token\n\n\n  useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              setConnecting(true); // connecting to Twilio API\n\n              _context.next = 4;\n              return fetch(\"/video/token\", {\n                method: \"POST\",\n                body: JSON.stringify({\n                  identity: username,\n                  room: roomName\n                }),\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              }).then(function (res) {\n                return res.json();\n              });\n\n            case 4:\n              data = _context.sent;\n              // connect to the room using twilio API\n              Video.connect(data.token, {\n                name: roomName,\n                dominantSpeaker: true //enable dominant speaker feature\n\n              }).then(function (room) {\n                setConnecting(false);\n                setRoom(room);\n              }).catch(function (err) {\n                console.error(err);\n                setConnecting(false);\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [roomName, username]); // Ejects the user from the room and puts in the Lobby\n\n  var handleLogout = useCallback(function () {\n    document.title = \"Microsoft Engage 2021\";\n    setRoom(function (prevRoom) {\n      if (prevRoom) {\n        // stop media tracks before disconnecting from room\n        prevRoom.localParticipant.tracks.forEach(function (trackPub) {\n          if (trackPub.track.kind !== 'data') {\n            trackPub.track.stop();\n          }\n        }); // disconnect from room\n\n        prevRoom.disconnect();\n      }\n\n      return null;\n    });\n  }, []);\n  useEffect(function () {\n    if (room) {\n      var tidyUp = function tidyUp(event) {\n        if (event.persisted) {\n          return;\n        }\n\n        if (room) {\n          handleLogout();\n        }\n      };\n\n      window.addEventListener(\"pagehide\", tidyUp);\n      window.addEventListener(\"beforeunload\", tidyUp);\n      return function () {\n        window.removeEventListener(\"pagehide\", tidyUp);\n        window.removeEventListener(\"beforeunload\", tidyUp);\n      };\n    }\n  }, [room, handleLogout]); // if room already exists then render Room.js\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Room, {\n      roomName: roomName,\n      room: room,\n      handleLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_s(VideoChat_test, \"MRBGFL0dd/b2X9jmsthQoP15XAI=\");\n\n_c = VideoChat_test;\nexport default VideoChat_test;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoChat_test\");","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/VideoChat_test.js"],"names":["React","useState","useCallback","useEffect","Video","Lobby","Room","RoomHeader","VideoChat_test","username","roomName","room","setRoom","connecting","setConnecting","event","preventDefault","fetch","method","body","JSON","stringify","identity","headers","then","res","json","data","connect","token","name","dominantSpeaker","catch","err","console","error","handleLogout","document","title","prevRoom","localParticipant","tracks","forEach","trackPub","track","kind","stop","disconnect","tidyUp","persisted","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport Video from \"twilio-video\";\nimport Lobby from \"./Lobby\";\nimport Room from \"./Room\";\nimport RoomHeader from \"./toolbar/RoomHeader\";\n\n// child to App.js\n// VideoChat.js handles data about the chat\n\nconst VideoChat_test = ({username, roomName}) => {\n\n  // state variables\n//   const [username, setUsername] = useState(\"\"); //username\n//   const [roomName, setRoomName] = useState(\"\"); //roomname\n  const [room, setRoom] = useState(null); //room details\n  const [connecting, setConnecting] = useState(false); //current status\n  \n  //update username on change\n//   const handleUsernameChange = useCallback((event) => {\n//     setUsername(event.target.value);\n//   }, []);\n\n//   // update room name on change\n//   const handleRoomNameChange = useCallback((event) => {\n//     setRoomName(event.target.value);\n//   }, []);\n\n  // Method to send Username & Roomname to the server\n  // And recieve an access token\n  useCallback(\n    async (event) => {\n\n      event.preventDefault(); \n      setConnecting(true); // connecting to Twilio API\n\n      const data = await fetch(\"/video/token\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          identity: username,\n          room: roomName,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }).then((res) => res.json());\n\n      // connect to the room using twilio API\n      Video.connect(data.token, {\n        name: roomName,\n        dominantSpeaker : true //enable dominant speaker feature\n      }).then((room) => {\n          setConnecting(false);\n          setRoom(room);\n        }).catch((err) => {\n          console.error(err);\n          setConnecting(false);\n        });\n    },\n    [roomName, username]\n  );\n\n  // Ejects the user from the room and puts in the Lobby\n  const handleLogout = useCallback(() => {\n    document.title = \"Microsoft Engage 2021\"\n    setRoom((prevRoom) => {\n      if (prevRoom) {\n\n        // stop media tracks before disconnecting from room\n        prevRoom.localParticipant.tracks.forEach((trackPub) => {\n          if(trackPub.track.kind !== 'data'){\n            trackPub.track.stop();\n          }\n        });\n        \n        // disconnect from room\n        prevRoom.disconnect();\n      }\n      return null;\n    });\n  }, []);\n\n  useEffect(() => {\n    if (room) {\n      const tidyUp = (event) => {\n        if (event.persisted) {\n          return;\n        }\n        if (room) {\n          handleLogout();\n        }\n      };\n      window.addEventListener(\"pagehide\", tidyUp);\n      window.addEventListener(\"beforeunload\", tidyUp);\n      return () => {\n        window.removeEventListener(\"pagehide\", tidyUp);\n        window.removeEventListener(\"beforeunload\", tidyUp);\n      };\n    }\n  }, [room, handleLogout]);\n\n\n  // if room already exists then render Room.js\n    return (\n      <>\n      <Room roomName={roomName} room={room} handleLogout={handleLogout} />\n      {/* <footer>\n        <RoomHeader handleLogout = {handleLogout} room = {room} roomName = {roomName}/>\n      </footer> */}\n      </>\n    );\n \n};\n\nexport default VideoChat_test;\n"]},"metadata":{},"sourceType":"module"}
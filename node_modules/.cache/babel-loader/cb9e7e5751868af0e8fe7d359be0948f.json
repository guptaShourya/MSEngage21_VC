{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/toolbar/icons/TextChat.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState } from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport ChatIcon from '@material-ui/icons/ChatTwoTone';\nimport ChatBubbleIcon from '@material-ui/icons/ChatBubbleTwoTone';\nimport TextField from '@material-ui/core/TextField';\nimport displayMessage from '../../utils/Message';\nimport { List } from '@material-ui/core';\nimport ChatItem from '../../ChatItem';\n\nvar _require = require('twilio-video'),\n    LocalDataTrack = _require.LocalDataTrack;\n\nvar drawerWidth = 0;\nvar useStyles = makeStyles(function (theme) {\n  return {\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0\n    },\n    drawerPaper: {\n      width: 240,\n      marginRight: 0,\n      borderWidth: 'thick',\n      borderStyle: 'solid',\n      borderColor: 'aquamarine',\n      borderRadius: '10px',\n      height: '88%',\n      position: 'fixed'\n    },\n    drawerHeader: _objectSpread(_objectSpread({\n      display: 'flex',\n      alignItems: 'center',\n      padding: theme.spacing(0, 1),\n      marginRight: 0\n    }, theme.mixins.toolbar), {}, {\n      justifyContent: 'flex-start'\n    }),\n    closeIcon: {\n      background: 'none',\n      border: 'none'\n    }\n  };\n});\n\nvar TextChat = function TextChat(_ref) {\n  _s();\n\n  var room = _ref.room,\n      messages = _ref.messages,\n      sendMessage = _ref.sendMessage;\n  var classes = useStyles();\n  var theme = useTheme();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1]; // text message\n\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      text = _useState4[0],\n      setText = _useState4[1]; // const dataTrack = new LocalDataTrack();\n\n\n  var handleClick = function handleClick() {\n    setIsOpen(!isOpen);\n  }; // // publish data track for in - call text chat\n  // room.localParticipant.publishTrack(dataTrack).catch(() => { });\n  // const dataTrackPublished = {};\n  // dataTrackPublished.promise = new Promise((resolve, reject) => {\n  //   dataTrackPublished.resolve = resolve;\n  //   dataTrackPublished.reject = reject;\n  // });\n  // room.localParticipant.on('trackPublished', publication => {\n  //   if (publication.track === dataTrack) {\n  //     dataTrackPublished.resolve();\n  //   }\n  // });\n  // room.localParticipant.on('trackPublicationFailed', (error, track) => {\n  //   if (track === dataTrack) {\n  //     dataTrackPublished.reject(error);\n  //   }\n  // });\n  // function sendMessage(event) {\n  //   event.preventDefault();\n  //   // display message in chat area\n  //   displayMessage('You', message);\n  //   setMessage('');\n  //   // send message over to other participants\n  //   dataTrackPublished.promise.then(() => dataTrack.send(JSON.stringify({\n  //     author: room.localParticipant.identity,\n  //     data: message\n  //   })));\n  // }\n\n\n  var handleTextChange = useCallback(function (event) {\n    setText(event.target.value);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"toolbarDiv\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      style: {\n        background: \"#21242c\",\n        border: \"#383b43\",\n        borderStyle: \"solid\",\n        borderWidth: \"1px\",\n        padding: \"0.45em\"\n      },\n      children: isOpen ? /*#__PURE__*/_jsxDEV(ChatBubbleIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 19\n      }, _this) : /*#__PURE__*/_jsxDEV(ChatIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 40\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Drawer, {\n      className: classes.drawer,\n      anchor: \"right\",\n      variant: \"persistent\",\n      open: isOpen,\n      classes: {\n        paper: classes.drawerPaper\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.drawerHeader,\n        style: {\n          marginRight: '0%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: handleClick,\n          style: {\n            background: 'none',\n            borderStyle: 'none'\n          },\n          children: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(List, {\n          dense: true,\n          children: messages && messages.map(function (message) {\n            return /*#__PURE__*/_jsxDEV(ChatItem, {\n              message: message,\n              email: room.localParticipant.identity\n            }, message.index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 19\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"center\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          style: styles.textFieldContainer,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            required: true,\n            style: styles.textField,\n            placeholder: \"Enter message\",\n            variant: \"outlined\",\n            multiline: true,\n            rows: 2,\n            value: text,\n            onChange: handleTextChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 15\n        }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            style: styles.sendButton,\n            onClick: sendMessage,\n            children: /*#__PURE__*/_jsxDEV(Send, {\n              style: styles.sendIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 19\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 17\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(TextChat, \"tSD92pjDYLIZCu5WVgV6KTolvl8=\", false, function () {\n  return [useStyles, useTheme];\n});\n\n_c = TextChat;\nexport default TextChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextChat\");","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/toolbar/icons/TextChat.js"],"names":["React","useCallback","useState","Drawer","IconButton","ChevronRightIcon","makeStyles","useTheme","ChatIcon","ChatBubbleIcon","TextField","displayMessage","List","ChatItem","require","LocalDataTrack","drawerWidth","useStyles","theme","drawer","width","flexShrink","drawerPaper","marginRight","borderWidth","borderStyle","borderColor","borderRadius","height","position","drawerHeader","display","alignItems","padding","spacing","mixins","toolbar","justifyContent","closeIcon","background","border","TextChat","room","messages","sendMessage","classes","isOpen","setIsOpen","text","setText","handleClick","handleTextChange","event","target","value","paper","map","message","localParticipant","identity","index","styles","textFieldContainer","textField","sendButton","sendIcon"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport IconButton from '@material-ui/core/IconButton';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport ChatIcon from '@material-ui/icons/ChatTwoTone';\nimport ChatBubbleIcon from '@material-ui/icons/ChatBubbleTwoTone';\nimport TextField from '@material-ui/core/TextField';\nimport displayMessage from '../../utils/Message';\nimport { List } from '@material-ui/core';\nimport ChatItem from '../../ChatItem';\nconst { LocalDataTrack } = require('twilio-video');\n\nconst drawerWidth = 0;\n\nconst useStyles = makeStyles((theme) => ({\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: 240,\n    marginRight: 0,\n    borderWidth: 'thick',\n    borderStyle: 'solid',\n    borderColor: 'aquamarine',\n    borderRadius: '10px',\n    height: '88%',\n    position: 'fixed'\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    marginRight: 0,\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-start',\n  },\n\n  closeIcon: {\n    background: 'none',\n    border: 'none',\n  }\n\n}));\n\n\nconst TextChat = ({ room, messages, sendMessage }) => {\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const [isOpen, setIsOpen] = useState(false);\n\n  // text message\n  const [text, setText] = useState('');\n\n  // const dataTrack = new LocalDataTrack();\n\n  const handleClick = () => {\n    setIsOpen(!isOpen);\n  }\n\n  // // publish data track for in - call text chat\n  // room.localParticipant.publishTrack(dataTrack).catch(() => { });\n\n  // const dataTrackPublished = {};\n\n  // dataTrackPublished.promise = new Promise((resolve, reject) => {\n  //   dataTrackPublished.resolve = resolve;\n  //   dataTrackPublished.reject = reject;\n  // });\n\n  // room.localParticipant.on('trackPublished', publication => {\n  //   if (publication.track === dataTrack) {\n  //     dataTrackPublished.resolve();\n  //   }\n  // });\n\n  // room.localParticipant.on('trackPublicationFailed', (error, track) => {\n  //   if (track === dataTrack) {\n  //     dataTrackPublished.reject(error);\n  //   }\n  // });\n\n  // function sendMessage(event) {\n  //   event.preventDefault();\n  //   // display message in chat area\n  //   displayMessage('You', message);\n  //   setMessage('');\n  //   // send message over to other participants\n  //   dataTrackPublished.promise.then(() => dataTrack.send(JSON.stringify({\n  //     author: room.localParticipant.identity,\n  //     data: message\n  //   })));\n  // }\n\n  const handleTextChange = useCallback((event) => {\n    setText(event.target.value);\n  }\n    , []);\n\n\n  return (\n    <div className='toolbarDiv'>\n      <button\n        onClick={handleClick}\n        style={{\n          background: \"#21242c\",\n          border: \"#383b43\",\n          borderStyle: \"solid\",\n          borderWidth: \"1px\",\n          padding: \"0.45em\"\n        }}\n      >\n        {isOpen ? <ChatBubbleIcon /> : <ChatIcon />}\n      </button>\n      <Drawer\n        className={classes.drawer}\n        anchor='right'\n        variant='persistent'\n        open={isOpen}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader} style={{ marginRight: '0%' }}>\n          <IconButton onClick={handleClick}  style = {{background: 'none', borderStyle: 'none'}}>\n            <ChevronRightIcon/>\n          </IconButton>\n          <p>Chat</p>\n        </div>\n        <div>\n        <List dense={true}>\n              {messages &&\n                messages.map((message) => (\n                  <ChatItem\n                    key={message.index}\n                    message={message}\n                    email={room.localParticipant.identity}\n                  />\n                ))}\n            </List>\n        </div>\n        <Grid\n              container\n              direction=\"row\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item style={styles.textFieldContainer}>\n                <TextField\n                  required\n                  style={styles.textField}\n                  placeholder=\"Enter message\"\n                  variant=\"outlined\"\n                  multiline\n                  rows={2}\n                  value={text}\n                  onChange={handleTextChange}\n                />\n              </Grid>\n              <Grid item>\n                <IconButton\n                  style={styles.sendButton}\n                  onClick={sendMessage}\n                >\n                  <Send style={styles.sendIcon} />\n                </IconButton>\n              </Grid>\n            </Grid>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default TextChat;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV3Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { tensor1d } from '../tensor1d';\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This is the async version of `nonMaxSuppression`\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @return A 1D tensor with the selected box indices.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\n\nfunction nonMaxSuppressionAsync_(_x, _x2, _x3) {\n  return _nonMaxSuppressionAsync_.apply(this, arguments);\n}\n\nfunction _nonMaxSuppressionAsync_() {\n  _nonMaxSuppressionAsync_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(boxes, scores, maxOutputSize, iouThreshold = 0.5, scoreThreshold = Number.NEGATIVE_INFINITY) {\n    var $boxes, $scores, inputs, boxesAndScores, boxesVals, scoresVals, _nonMaxSuppressionV3I, selectedIndices;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n          $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n          inputs = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n          maxOutputSize = inputs.maxOutputSize;\n          iouThreshold = inputs.iouThreshold;\n          scoreThreshold = inputs.scoreThreshold;\n          _context.next = 8;\n          return Promise.all([$boxes.data(), $scores.data()]);\n\n        case 8:\n          boxesAndScores = _context.sent;\n          boxesVals = boxesAndScores[0];\n          scoresVals = boxesAndScores[1]; // We call a cpu based impl directly with the typedarray data  here rather\n          // than a kernel because all kernels are synchronous (and thus cannot await\n          // .data()).\n\n          _nonMaxSuppressionV3I = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold), selectedIndices = _nonMaxSuppressionV3I.selectedIndices;\n\n          if ($boxes !== boxes) {\n            $boxes.dispose();\n          }\n\n          if ($scores !== scores) {\n            $scores.dispose();\n          }\n\n          return _context.abrupt(\"return\", tensor1d(selectedIndices, 'int32'));\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _nonMaxSuppressionAsync_.apply(this, arguments);\n}\n\nexport const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;","map":{"version":3,"sources":["../../../src/ops/image/non_max_suppression_async.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,uBAAR,QAAsC,yCAAtC;AAEA,SAAQ,eAAR,QAA8B,uBAA9B;AAEA,SAAQ,qBAAR,QAAoC,gBAApC;AACA,SAAQ,QAAR,QAAuB,aAAvB;AAEA;;;;;;;;;;;;;;;;;;;AAmBG;;SACY,uB;;;;;sFAAf,iBACI,KADJ,EACgC,MADhC,EAEI,aAFJ,EAE2B,YAAY,GAAG,GAF1C,EAGI,cAAc,GAAG,MAAM,CAAC,iBAH5B;AAAA;;AAAA;AAAA;AAAA;AAIQ,UAAA,MAJR,GAIiB,eAAe,CAAC,KAAD,EAAQ,OAAR,EAAiB,wBAAjB,CAJhC;AAKQ,UAAA,OALR,GAKkB,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,wBAAnB,CALjC;AAOQ,UAAA,MAPR,GAOiB,qBAAqB,CAChC,MADgC,EACxB,OADwB,EACf,aADe,EACA,YADA,EACc,cADd,CAPtC;AASE,UAAA,aAAa,GAAG,MAAM,CAAC,aAAvB;AACA,UAAA,YAAY,GAAG,MAAM,CAAC,YAAtB;AACA,UAAA,cAAc,GAAG,MAAM,CAAC,cAAxB;AAXF;AAAA,iBAa+B,OAAO,CAAC,GAAR,CAAY,CAAC,MAAM,CAAC,IAAP,EAAD,EAAgB,OAAO,CAAC,IAAR,EAAhB,CAAZ,CAb/B;;AAAA;AAaQ,UAAA,cAbR;AAcQ,UAAA,SAdR,GAcoB,cAAc,CAAC,CAAD,CAdlC;AAeQ,UAAA,UAfR,GAeqB,cAAc,CAAC,CAAD,CAfnC,EAiBE;AACA;AACA;;AAnBF,kCAoB4B,uBAAuB,CAC7C,SAD6C,EAClC,UADkC,EACtB,aADsB,EACP,YADO,EACO,cADP,CApBnD,EAoBS,eApBT,yBAoBS,eApBT;;AAsBE,cAAI,MAAM,KAAK,KAAf,EAAsB;AACpB,YAAA,MAAM,CAAC,OAAP;AACD;;AACD,cAAI,OAAO,KAAK,MAAhB,EAAwB;AACtB,YAAA,OAAO,CAAC,OAAR;AACD;;AA3BH,2CA6BS,QAAQ,CAAC,eAAD,EAAkB,OAAlB,CA7BjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgCA,OAAO,MAAM,sBAAsB,GAAG,uBAA/B","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {nonMaxSuppressionV3Impl} from '../../backends/non_max_suppression_impl';\nimport {Tensor1D, Tensor2D} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {tensor1d} from '../tensor1d';\n\n/**\n * Performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This is the async version of `nonMaxSuppression`\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @return A 1D tensor with the selected box indices.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionAsync_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY): Promise<Tensor1D> {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n\n  const inputs = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold);\n  maxOutputSize = inputs.maxOutputSize;\n  iouThreshold = inputs.iouThreshold;\n  scoreThreshold = inputs.scoreThreshold;\n\n  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n  const boxesVals = boxesAndScores[0];\n  const scoresVals = boxesAndScores[1];\n\n  // We call a cpu based impl directly with the typedarray data  here rather\n  // than a kernel because all kernels are synchronous (and thus cannot await\n  // .data()).\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n\n  return tensor1d(selectedIndices, 'int32');\n}\n\nexport const nonMaxSuppressionAsync = nonMaxSuppressionAsync_;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
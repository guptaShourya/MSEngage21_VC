{"ast":null,"code":"import _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringNGrams } from '@tensorflow/tfjs-core';\nimport { stringNGramsImpl } from './StringNGrams_impl';\nexport function stringNGrams(args) {\n  const inputs = args.inputs,\n        backend = args.backend,\n        attrs = args.attrs;\n  const separator = attrs.separator,\n        nGramWidths = attrs.nGramWidths,\n        leftPad = attrs.leftPad,\n        rightPad = attrs.rightPad,\n        padWidth = attrs.padWidth,\n        preserveShortSequences = attrs.preserveShortSequences;\n  const data = inputs.data,\n        dataSplits = inputs.dataSplits;\n  const $data = backend.data.get(data.dataId).values;\n  const $dataSplits = backend.data.get(dataSplits.dataId).values;\n\n  const _stringNGramsImpl = stringNGramsImpl($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences),\n        _stringNGramsImpl2 = _slicedToArray(_stringNGramsImpl, 2),\n        nGrams = _stringNGramsImpl2[0],\n        nGramsSplits = _stringNGramsImpl2[1];\n\n  return [backend.makeTensorInfo([nGrams.length], 'string', nGrams), backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits)];\n}\nexport const stringNGramsConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams\n};","map":{"version":3,"sources":["../../src/kernels/StringNGrams.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,YAAlC,QAAwG,uBAAxG;AAIA,SAAQ,gBAAR,QAA+B,qBAA/B;AAEA,OAAM,SAAU,YAAV,CAAuB,IAAvB,EAIL;AAAA,QACQ,MADR,GACkC,IADlC,CACQ,MADR;AAAA,QACgB,OADhB,GACkC,IADlC,CACgB,OADhB;AAAA,QACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,QAGG,SAHH,GASK,KATL,CAGG,SAHH;AAAA,QAIG,WAJH,GASK,KATL,CAIG,WAJH;AAAA,QAKG,OALH,GASK,KATL,CAKG,OALH;AAAA,QAMG,QANH,GASK,KATL,CAMG,QANH;AAAA,QAOG,QAPH,GASK,KATL,CAOG,QAPH;AAAA,QAQG,sBARH,GASK,KATL,CAQG,sBARH;AAAA,QAUQ,IAVR,GAU4B,MAV5B,CAUQ,IAVR;AAAA,QAUc,UAVd,GAU4B,MAV5B,CAUc,UAVd;AAWC,QAAM,KAAK,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,IAAI,CAAC,MAAtB,EAA8B,MAA5C;AACA,QAAM,WAAW,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,UAAU,CAAC,MAA5B,EAAoC,MAAxD;;AAZD,4BAcgC,gBAAgB,CAC3C,KAD2C,EACpC,WADoC,EACvB,SADuB,EACZ,WADY,EACC,OADD,EACU,QADV,EACoB,QADpB,EAE3C,sBAF2C,CAdhD;AAAA;AAAA,QAcQ,MAdR;AAAA,QAcgB,YAdhB;;AAiBC,SAAO,CACL,OAAO,CAAC,cAAR,CAAuB,CAAC,MAAM,CAAC,MAAR,CAAvB,EAAwC,QAAxC,EAAkD,MAAlD,CADK,EAEL,OAAO,CAAC,cAAR,CAAuB,UAAU,CAAC,KAAlC,EAAyC,OAAzC,EAAkD,YAAlD,CAFK,CAAP;AAID;AAED,OAAO,MAAM,kBAAkB,GAAiB;AAC9C,EAAA,UAAU,EAAE,YADkC;AAE9C,EAAA,WAAW,EAAE,KAFiC;AAG9C,EAAA,UAAU,EAAE;AAHkC,CAAzC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringNGramsImpl} from './StringNGrams_impl';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendCPU,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.data.get(data.dataId).values as Uint8Array[];\n  const $dataSplits = backend.data.get(dataSplits.dataId).values as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImpl(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar ReservationList = require('./task/reservation').ReservationList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar TaskList;\nvar TaskPage;\nvar TaskInstance;\nvar TaskContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid - The SID of the Workspace that contains the Task\n */\n\n/* jshint ignore:end */\n\nTaskList = function TaskList(version, workspaceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function tasks\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext}\n   */\n\n  /* jshint ignore:end */\n  function TaskListInstance(sid) {\n    return TaskListInstance.get(sid);\n  }\n\n  TaskListInstance._version = version; // Path Solution\n\n  TaskListInstance._solution = {\n    workspaceSid: workspaceSid\n  };\n  TaskListInstance._uri = \"/Workspaces/\".concat(workspaceSid, \"/Tasks\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams TaskInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.priority] - The priority value of the Tasks to read\n   * @param {string|list} [opts.assignmentStatus] -\n   *          Returns the list of all Tasks in the Workspace with the specified assignment_status\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Workflow with the Tasks to read\n   * @param {string} [opts.workflowName] -\n   *          The friendly name of the Workflow with the Tasks to read\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue with the Tasks to read\n   * @param {string} [opts.taskQueueName] -\n   *          The friendly_name of the TaskQueue with the Tasks to read\n   * @param {string} [opts.evaluateTaskAttributes] -\n   *          The task attributes of the Tasks to read\n   * @param {string} [opts.ordering] - Controls the order of the Tasks returned\n   * @param {boolean} [opts.hasAddons] - Whether to read Tasks with addons\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  TaskListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists TaskInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.priority] - The priority value of the Tasks to read\n   * @param {string|list} [opts.assignmentStatus] -\n   *          Returns the list of all Tasks in the Workspace with the specified assignment_status\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Workflow with the Tasks to read\n   * @param {string} [opts.workflowName] -\n   *          The friendly name of the Workflow with the Tasks to read\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue with the Tasks to read\n   * @param {string} [opts.taskQueueName] -\n   *          The friendly_name of the TaskQueue with the Tasks to read\n   * @param {string} [opts.evaluateTaskAttributes] -\n   *          The task attributes of the Tasks to read\n   * @param {string} [opts.ordering] - Controls the order of the Tasks returned\n   * @param {boolean} [opts.hasAddons] - Whether to read Tasks with addons\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.priority] - The priority value of the Tasks to read\n   * @param {string|list} [opts.assignmentStatus] -\n   *          Returns the list of all Tasks in the Workspace with the specified assignment_status\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Workflow with the Tasks to read\n   * @param {string} [opts.workflowName] -\n   *          The friendly name of the Workflow with the Tasks to read\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue with the Tasks to read\n   * @param {string} [opts.taskQueueName] -\n   *          The friendly_name of the TaskQueue with the Tasks to read\n   * @param {string} [opts.evaluateTaskAttributes] -\n   *          The task attributes of the Tasks to read\n   * @param {string} [opts.ordering] - Controls the order of the Tasks returned\n   * @param {boolean} [opts.hasAddons] - Whether to read Tasks with addons\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Priority': _.get(opts, 'priority'),\n      'AssignmentStatus': serialize.map(_.get(opts, 'assignmentStatus'), function (e) {\n        return e;\n      }),\n      'WorkflowSid': _.get(opts, 'workflowSid'),\n      'WorkflowName': _.get(opts, 'workflowName'),\n      'TaskQueueSid': _.get(opts, 'taskQueueSid'),\n      'TaskQueueName': _.get(opts, 'taskQueueName'),\n      'EvaluateTaskAttributes': _.get(opts, 'evaluateTaskAttributes'),\n      'Ordering': _.get(opts, 'ordering'),\n      'HasAddons': serialize.bool(_.get(opts, 'hasAddons')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a TaskInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.timeout] -\n   *          The amount of time in seconds the task is allowed to live\n   * @param {number} [opts.priority] -\n   *          The priority to assign the new task and override the default\n   * @param {string} [opts.taskChannel] -\n   *          When MultiTasking is enabled specify the TaskChannel by passing either its unique_name or SID\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Workflow that you would like to handle routing for the new Task\n   * @param {string} [opts.attributes] -\n   *          A URL-encoded JSON string describing the attributes of the task\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TaskInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Timeout': _.get(opts, 'timeout'),\n      'Priority': _.get(opts, 'priority'),\n      'TaskChannel': _.get(opts, 'taskChannel'),\n      'WorkflowSid': _.get(opts, 'workflowSid'),\n      'Attributes': _.get(opts, 'attributes')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a task\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {string} sid - The SID of the resource to fetch\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.get = function get(sid) {\n    return new TaskContext(this._version, this._solution.workspaceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TaskListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TaskListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskSolution} solution - Path solution\n *\n * @returns TaskPage\n */\n\n/* jshint ignore:end */\n\n\nTaskPage = function TaskPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TaskPage.prototype, Page.prototype);\n\nTaskPage.prototype.constructor = TaskPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of TaskInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskPage#\n *\n * @param {TaskPayload} payload - Payload response from the API\n *\n * @returns TaskInstance\n */\n\n/* jshint ignore:end */\n\nTaskPage.prototype.getInstance = function getInstance(payload) {\n  return new TaskInstance(this._version, payload, this._solution.workspaceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTaskPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTaskPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {number} age - The number of seconds since the Task was created\n * @property {task.status} assignmentStatus -\n *          The current status of the Task's assignment\n * @property {string} attributes -\n *          The JSON string with custom attributes of the work\n * @property {string} addons -\n *          An object that contains the addon data for all installed addons\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {Date} taskQueueEnteredDate -\n *          The ISO 8601 date and time in GMT when the Task entered the TaskQueue.\n * @property {number} priority -\n *          Retrieve the list of all Tasks in the Workspace with the specified priority\n * @property {string} reason - The reason the Task was canceled or completed\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} taskQueueSid - The SID of the TaskQueue\n * @property {string} taskQueueFriendlyName - The friendly name of the TaskQueue\n * @property {string} taskChannelSid - The SID of the TaskChannel\n * @property {string} taskChannelUniqueName - The unique name of the TaskChannel\n * @property {number} timeout -\n *          The amount of time in seconds that the Task is allowed to live\n * @property {string} workflowSid -\n *          The SID of the Workflow that is controlling the Task\n * @property {string} workflowFriendlyName -\n *          The friendly name of the Workflow that is controlling the Task\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the Task\n * @property {string} url - The absolute URL of the Task resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {TaskPayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the Task\n * @param {sid} sid - The SID of the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance = function TaskInstance(version, payload, workspaceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.age = deserialize.integer(payload.age); // jshint ignore:line\n\n  this.assignmentStatus = payload.assignment_status; // jshint ignore:line\n\n  this.attributes = payload.attributes; // jshint ignore:line\n\n  this.addons = payload.addons; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.taskQueueEnteredDate = deserialize.iso8601DateTime(payload.task_queue_entered_date); // jshint ignore:line\n\n  this.priority = deserialize.integer(payload.priority); // jshint ignore:line\n\n  this.reason = payload.reason; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.taskQueueSid = payload.task_queue_sid; // jshint ignore:line\n\n  this.taskQueueFriendlyName = payload.task_queue_friendly_name; // jshint ignore:line\n\n  this.taskChannelSid = payload.task_channel_sid; // jshint ignore:line\n\n  this.taskChannelUniqueName = payload.task_channel_unique_name; // jshint ignore:line\n\n  this.timeout = deserialize.integer(payload.timeout); // jshint ignore:line\n\n  this.workflowSid = payload.workflow_sid; // jshint ignore:line\n\n  this.workflowFriendlyName = payload.workflow_friendly_name; // jshint ignore:line\n\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(TaskInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new TaskContext(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\nTaskInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.attributes] -\n *          The JSON string that describes the custom attributes of the task\n * @param {task.status} [opts.assignmentStatus] - The new status of the task\n * @param {string} [opts.reason] -\n *          The reason that the Task was canceled or complete\n * @param {number} [opts.priority] - The Task's new priority value\n * @param {string} [opts.taskChannel] -\n *          When MultiTasking is enabled, specify the TaskChannel with the task to update\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the reservations\n *\n * @function reservations\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList}\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.reservations = function reservations() {\n  return this._proxy.reservations;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTaskInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTaskInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList} reservations -\n *          reservations resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the Task to fetch\n * @param {sid} sid - The SID of the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nTaskContext = function TaskContext(version, workspaceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid\n  };\n  this._uri = \"/Workspaces/\".concat(workspaceSid, \"/Tasks/\").concat(sid); // Dependents\n\n  this._reservations = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.attributes] -\n *          The JSON string that describes the custom attributes of the task\n * @param {task.status} [opts.assignmentStatus] - The new status of the task\n * @param {string} [opts.reason] -\n *          The reason that the Task was canceled or complete\n * @param {number} [opts.priority] - The Task's new priority value\n * @param {string} [opts.taskChannel] -\n *          When MultiTasking is enabled, specify the TaskChannel with the task to update\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Attributes': _.get(opts, 'attributes'),\n    'AssignmentStatus': _.get(opts, 'assignmentStatus'),\n    'Reason': _.get(opts, 'reason'),\n    'Priority': _.get(opts, 'priority'),\n    'TaskChannel': _.get(opts, 'taskChannel')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TaskContext.prototype, 'reservations', {\n  get: function get() {\n    if (!this._reservations) {\n      this._reservations = new ReservationList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._reservations;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nTaskContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTaskContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TaskList: TaskList,\n  TaskPage: TaskPage,\n  TaskInstance: TaskInstance,\n  TaskContext: TaskContext\n};","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio/lib/rest/taskrouter/v1/workspace/task.js"],"names":["Q","require","_","util","Page","ReservationList","deserialize","serialize","values","TaskList","TaskPage","TaskInstance","TaskContext","version","workspaceSid","TaskListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","map","e","bool","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","age","integer","assignmentStatus","assignment_status","attributes","addons","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","taskQueueEnteredDate","task_queue_entered_date","priority","reason","taskQueueSid","task_queue_sid","taskQueueFriendlyName","task_queue_friendly_name","taskChannelSid","task_channel_sid","taskChannelUniqueName","task_channel_unique_name","timeout","workflowSid","workflow_sid","workflowFriendlyName","workflow_friendly_name","workspace_sid","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","reservations","_reservations","module","exports"],"mappings":"AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAf;AAAuB;;;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;AAA4B;;;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;AAA6B;;;AAC7B,IAAIG,IAAI,GAAGH,OAAO,CAAC,uBAAD,CAAlB;AAA8C;;;AAC9C,IAAII,eAAe,GAAGJ,OAAO,CAAC,oBAAD,CAAP,CAA8BI,eAApD;;AACA,IAAIC,WAAW,GAAGL,OAAO,CACrB,8BADqB,CAAzB;AACsC;;;AACtC,IAAIM,SAAS,GAAGN,OAAO,CAAC,4BAAD,CAAvB;AAAwD;;;AACxD,IAAIO,MAAM,GAAGP,OAAO,CAAC,yBAAD,CAApB;AAAkD;;;AAElD,IAAIQ,QAAJ;AACA,IAAIC,QAAJ;AACA,IAAIC,YAAJ;AACA,IAAIC,WAAJ;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAH,QAAQ,GAAG,SAASA,QAAT,CAAkBI,OAAlB,EAA2BC,YAA3B,EAAyC;AAClD;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;AACA,WAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AAC7B,WAAOD,gBAAgB,CAACE,GAAjB,CAAqBD,GAArB,CAAP;AACD;;AAEDD,EAAAA,gBAAgB,CAACG,QAAjB,GAA4BL,OAA5B,CAfkD,CAgBlD;;AACAE,EAAAA,gBAAgB,CAACI,SAAjB,GAA6B;AAACL,IAAAA,YAAY,EAAEA;AAAf,GAA7B;AACAC,EAAAA,gBAAgB,CAACK,IAAjB,yBAAuCN,YAAvC;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;AACAC,EAAAA,gBAAgB,CAACM,IAAjB,GAAwB,SAASA,IAAT,CAAcC,IAAd,EAAoBC,QAApB,EAA8B;AACpD,QAAIrB,CAAC,CAACsB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AACA,QAAIA,IAAI,CAACC,QAAT,EAAmB;AACjBA,MAAAA,QAAQ,GAAGD,IAAI,CAACC,QAAhB;AACD;;AACD,QAAIrB,CAAC,CAACuB,WAAF,CAAcF,QAAd,CAAJ,EAA6B;AAC3B,YAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAED,QAAIC,IAAI,GAAG,KAAX;AACA,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,eAAe,GAAG,CAAtB;;AACA,QAAIC,MAAM,GAAG,KAAKZ,QAAL,CAAca,UAAd,CAAyB;AACpCC,MAAAA,KAAK,EAAEV,IAAI,CAACU,KADwB;AAEpCC,MAAAA,QAAQ,EAAEX,IAAI,CAACW;AAFqB,KAAzB,CAAb;;AAKA,aAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzBR,MAAAA,IAAI,GAAG,IAAP;;AACA,UAAIzB,CAAC,CAACsB,UAAF,CAAaF,IAAI,CAACK,IAAlB,CAAJ,EAA6B;AAC3BL,QAAAA,IAAI,CAACK,IAAL,CAAUQ,KAAV;AACD;AACF;;AAED,aAASC,aAAT,CAAuBC,EAAvB,EAA2B;AACzB,UAAIC,OAAO,GAAGD,EAAE,EAAhB;;AACA,UAAInC,CAAC,CAACuB,WAAF,CAAca,OAAd,CAAJ,EAA4B;AAC1BJ,QAAAA,UAAU;AACV;AACD;;AAEDI,MAAAA,OAAO,CAACC,IAAR,CAAa,UAASC,IAAT,EAAe;AAC1BtC,QAAAA,CAAC,CAACmB,IAAF,CAAOmB,IAAI,CAACC,SAAZ,EAAuB,UAASC,QAAT,EAAmB;AACxC,cAAIf,IAAI,IAAK,CAACzB,CAAC,CAACuB,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BH,eAAe,IAAIP,IAAI,CAACU,KAAnE,EAA2E;AACzEL,YAAAA,IAAI,GAAG,IAAP;AACA,mBAAO,KAAP;AACD;;AAEDE,UAAAA,eAAe;AACfN,UAAAA,QAAQ,CAACmB,QAAD,EAAWR,UAAX,CAAR;AACD,SARD;;AAUA,YAAKJ,MAAM,CAACa,SAAP,IAAoBb,MAAM,CAACa,SAAP,IAAoBf,WAA7C,EAA2D;AACzDM,UAAAA,UAAU;AACX,SAFD,MAEO,IAAI,CAACP,IAAL,EAAW;AAChBC,UAAAA,WAAW;AACXQ,UAAAA,aAAa,CAAClC,CAAC,CAAC0C,IAAF,CAAOJ,IAAI,CAACK,QAAZ,EAAsBL,IAAtB,CAAD,CAAb;AACD;AACF,OAjBD;AAmBAF,MAAAA,OAAO,CAACQ,KAAR,CAAcZ,UAAd;AACD;;AAEDE,IAAAA,aAAa,CAAClC,CAAC,CAAC0C,IAAF,CAAO,KAAKJ,IAAZ,EAAkB,IAAlB,EAAwBtC,CAAC,CAAC6C,KAAF,CAAQzB,IAAR,EAAcQ,MAAd,CAAxB,CAAD,CAAb;AACD,GA1DD;AA4DA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAf,EAAAA,gBAAgB,CAACiC,IAAjB,GAAwB,SAASA,IAAT,CAAc1B,IAAd,EAAoBC,QAApB,EAA8B;AACpD,QAAIrB,CAAC,CAACsB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,QAAI2B,QAAQ,GAAGjD,CAAC,CAACkD,KAAF,EAAf;AACA,QAAIC,YAAY,GAAG,EAAnB;;AACA7B,IAAAA,IAAI,CAACC,QAAL,GAAgB,UAAS6B,QAAT,EAAmBzB,IAAnB,EAAyB;AACvCwB,MAAAA,YAAY,CAACE,IAAb,CAAkBD,QAAlB;;AAEA,UAAI,CAAClD,CAAC,CAACuB,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BmB,YAAY,CAACG,MAAb,KAAwBhC,IAAI,CAACU,KAA/D,EAAsE;AACpEL,QAAAA,IAAI;AACL;AACF,KAND;;AAQAL,IAAAA,IAAI,CAACK,IAAL,GAAY,UAASQ,KAAT,EAAgB;AAC1B,UAAIjC,CAAC,CAACuB,WAAF,CAAcU,KAAd,CAAJ,EAA0B;AACxBc,QAAAA,QAAQ,CAACM,OAAT,CAAiBJ,YAAjB;AACD,OAFD,MAEO;AACLF,QAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD;AACF,KAND;;AAQA,QAAIjC,CAAC,CAACsB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,MAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,SAAKF,IAAL,CAAUC,IAAV;AACA,WAAO2B,QAAQ,CAACX,OAAhB;AACD,GA9BD;AAgCA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,gBAAgB,CAACyB,IAAjB,GAAwB,SAASA,IAAT,CAAclB,IAAd,EAAoBC,QAApB,EAA8B;AACpD,QAAIrB,CAAC,CAACsB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,QAAI2B,QAAQ,GAAGjD,CAAC,CAACkD,KAAF,EAAf;AACA,QAAIQ,IAAI,GAAGlD,MAAM,CAACmD,EAAP,CAAU;AACnB,kBAAYzD,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,UAAZ,CADO;AAEnB,0BAAoBf,SAAS,CAACqD,GAAV,CAAc1D,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,kBAAZ,CAAd,EAA+C,UAASuC,CAAT,EAAY;AAAE,eAAOA,CAAP;AAAW,OAAxE,CAFD;AAGnB,qBAAe3D,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,aAAZ,CAHI;AAInB,sBAAgBpB,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,cAAZ,CAJG;AAKnB,sBAAgBpB,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,cAAZ,CALG;AAMnB,uBAAiBpB,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,eAAZ,CANE;AAOnB,gCAA0BpB,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,wBAAZ,CAPP;AAQnB,kBAAYpB,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,UAAZ,CARO;AASnB,mBAAaf,SAAS,CAACuD,IAAV,CAAe5D,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,WAAZ,CAAf,CATM;AAUnB,mBAAaA,IAAI,CAACyC,SAVC;AAWnB,cAAQzC,IAAI,CAAC0C,UAXM;AAYnB,kBAAY1C,IAAI,CAACW;AAZE,KAAV,CAAX;;AAeA,QAAIK,OAAO,GAAG,KAAKpB,QAAL,CAAcsB,IAAd,CAAmB;AAACyB,MAAAA,GAAG,EAAE,KAAK7C,IAAX;AAAiB8C,MAAAA,MAAM,EAAE,KAAzB;AAAgCC,MAAAA,MAAM,EAAET;AAAxC,KAAnB,CAAd;;AAEApB,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS6B,OAAT,EAAkB;AACvCnB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI7C,QAAJ,CAAa,KAAKQ,QAAlB,EAA4BkD,OAA5B,EAAqC,KAAKjD,SAA1C,CAAjB;AACD,KAFsB,CAErByB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAN,IAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,MAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,KAFD;;AAIA,QAAIjC,CAAC,CAACsB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,MAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,WAAO0B,QAAQ,CAACX,OAAhB;AACD,GAtCD;AAwCA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,gBAAgB,CAACsD,OAAjB,GAA2B,SAASA,OAAT,CAAiBC,SAAjB,EAA4B/C,QAA5B,EAAsC;AAC/D,QAAI0B,QAAQ,GAAGjD,CAAC,CAACkD,KAAF,EAAf;;AAEA,QAAIZ,OAAO,GAAG,KAAKpB,QAAL,CAAcqD,OAAd,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqC;AAACP,MAAAA,MAAM,EAAE,KAAT;AAAgBD,MAAAA,GAAG,EAAEK;AAArB,KAArC,CAAd;;AAEAhC,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS6B,OAAT,EAAkB;AACvCnB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI7C,QAAJ,CAAa,KAAKQ,QAAlB,EAA4BkD,OAA5B,EAAqC,KAAKjD,SAA1C,CAAjB;AACD,KAFsB,CAErByB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAN,IAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,MAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,KAFD;;AAIA,QAAIjC,CAAC,CAACsB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,MAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,WAAO0B,QAAQ,CAACX,OAAhB;AACD,GAlBD;AAoBA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,gBAAgB,CAAC2D,MAAjB,GAA0B,SAASA,MAAT,CAAgBpD,IAAhB,EAAsBC,QAAtB,EAAgC;AACxD,QAAIrB,CAAC,CAACsB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,QAAI2B,QAAQ,GAAGjD,CAAC,CAACkD,KAAF,EAAf;AACA,QAAIQ,IAAI,GAAGlD,MAAM,CAACmD,EAAP,CAAU;AACnB,iBAAWzD,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,SAAZ,CADQ;AAEnB,kBAAYpB,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,UAAZ,CAFO;AAGnB,qBAAepB,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,aAAZ,CAHI;AAInB,qBAAepB,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,aAAZ,CAJI;AAKnB,oBAAcpB,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,YAAZ;AALK,KAAV,CAAX;;AAQA,QAAIgB,OAAO,GAAG,KAAKpB,QAAL,CAAcwD,MAAd,CAAqB;AAACT,MAAAA,GAAG,EAAE,KAAK7C,IAAX;AAAiB8C,MAAAA,MAAM,EAAE,MAAzB;AAAiCR,MAAAA,IAAI,EAAEA;AAAvC,KAArB,CAAd;;AAEApB,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS6B,OAAT,EAAkB;AACvCnB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,YAAJ,CACf,KAAKO,QADU,EAEfkD,OAFe,EAGf,KAAKjD,SAAL,CAAeL,YAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;AAMD,KAPsB,CAOrB4B,IAPqB,CAOhB,IAPgB,CAAb,CAAV;AASAN,IAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,MAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,KAFD;;AAIA,QAAIjC,CAAC,CAACsB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,MAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,WAAO0B,QAAQ,CAACX,OAAhB;AACD,GApCD;AAsCA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,gBAAgB,CAACE,GAAjB,GAAuB,SAASA,GAAT,CAAaD,GAAb,EAAkB;AACvC,WAAO,IAAIJ,WAAJ,CAAgB,KAAKM,QAArB,EAA+B,KAAKC,SAAL,CAAeL,YAA9C,EAA4DE,GAA5D,CAAP;AACD,GAFD;AAIA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAD,EAAAA,gBAAgB,CAAC4D,MAAjB,GAA0B,SAASA,MAAT,GAAkB;AAC1C,WAAO,KAAKxD,SAAZ;AACD,GAFD;;AAIAJ,EAAAA,gBAAgB,CAACZ,IAAI,CAACyE,OAAL,CAAaC,MAAd,CAAhB,GAAwC,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;AACvE,WAAO5E,IAAI,CAACyE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,GAFD;;AAIA,SAAOhE,gBAAP;AACD,CA7ZD;AAgaA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAL,QAAQ,GAAG,SAASA,QAAT,CAAkBG,OAAlB,EAA2BmE,QAA3B,EAAqCC,QAArC,EAA+C;AACxD;AACA,OAAK9D,SAAL,GAAiB8D,QAAjB;AAEA7E,EAAAA,IAAI,CAAC8E,SAAL,CAAeC,WAAf,CAA2BC,IAA3B,CAAgC,IAAhC,EAAsCvE,OAAtC,EAA+CmE,QAA/C,EAAyD,KAAK7D,SAA9D;AACD,CALD;;AAOAjB,CAAC,CAACmF,MAAF,CAAS3E,QAAQ,CAACwE,SAAlB,EAA6B9E,IAAI,CAAC8E,SAAlC;;AACAxE,QAAQ,CAACwE,SAAT,CAAmBC,WAAnB,GAAiCzE,QAAjC;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,QAAQ,CAACwE,SAAT,CAAmBI,WAAnB,GAAiC,SAASA,WAAT,CAAqBlB,OAArB,EAA8B;AAC7D,SAAO,IAAIzD,YAAJ,CAAiB,KAAKO,QAAtB,EAAgCkD,OAAhC,EAAyC,KAAKjD,SAAL,CAAeL,YAAxD,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,QAAQ,CAACwE,SAAT,CAAmBP,MAAnB,GAA4B,SAASA,MAAT,GAAkB;AAC5C,MAAIY,KAAK,GAAG,EAAZ;;AACArF,EAAAA,CAAC,CAACsF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAACxF,CAAC,CAACyF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAExF,CAAC,CAACsB,UAAF,CAAaiE,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUA7E,QAAQ,CAACwE,SAAT,CAAmB/E,IAAI,CAACyE,OAAL,CAAaC,MAAhC,IAA0C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;AACzE,SAAO5E,IAAI,CAACyE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAFD;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACApE,YAAY,GAAG,SAASA,YAAT,CAAsBE,OAAtB,EAA+BuD,OAA/B,EAAwCtD,YAAxC,EAAsDE,GAAtD,EAA2D;AACxE,OAAKE,QAAL,GAAgBL,OAAhB,CADwE,CAGxE;;AACA,OAAK+E,UAAL,GAAkBxB,OAAO,CAACyB,WAA1B,CAJwE,CAIjC;;AACvC,OAAKC,GAAL,GAAWxF,WAAW,CAACyF,OAAZ,CAAoB3B,OAAO,CAAC0B,GAA5B,CAAX,CALwE,CAK3B;;AAC7C,OAAKE,gBAAL,GAAwB5B,OAAO,CAAC6B,iBAAhC,CANwE,CAMrB;;AACnD,OAAKC,UAAL,GAAkB9B,OAAO,CAAC8B,UAA1B,CAPwE,CAOlC;;AACtC,OAAKC,MAAL,GAAc/B,OAAO,CAAC+B,MAAtB,CARwE,CAQ1C;;AAC9B,OAAKC,WAAL,GAAmB9F,WAAW,CAAC+F,eAAZ,CAA4BjC,OAAO,CAACkC,YAApC,CAAnB,CATwE,CASF;;AACtE,OAAKC,WAAL,GAAmBjG,WAAW,CAAC+F,eAAZ,CAA4BjC,OAAO,CAACoC,YAApC,CAAnB,CAVwE,CAUF;;AACtE,OAAKC,oBAAL,GAA4BnG,WAAW,CAAC+F,eAAZ,CAA4BjC,OAAO,CAACsC,uBAApC,CAA5B,CAXwE,CAWkB;;AAC1F,OAAKC,QAAL,GAAgBrG,WAAW,CAACyF,OAAZ,CAAoB3B,OAAO,CAACuC,QAA5B,CAAhB,CAZwE,CAYjB;;AACvD,OAAKC,MAAL,GAAcxC,OAAO,CAACwC,MAAtB,CAbwE,CAa1C;;AAC9B,OAAK5F,GAAL,GAAWoD,OAAO,CAACpD,GAAnB,CAdwE,CAchD;;AACxB,OAAK6F,YAAL,GAAoBzC,OAAO,CAAC0C,cAA5B,CAfwE,CAe5B;;AAC5C,OAAKC,qBAAL,GAA6B3C,OAAO,CAAC4C,wBAArC,CAhBwE,CAgBT;;AAC/D,OAAKC,cAAL,GAAsB7C,OAAO,CAAC8C,gBAA9B,CAjBwE,CAiBxB;;AAChD,OAAKC,qBAAL,GAA6B/C,OAAO,CAACgD,wBAArC,CAlBwE,CAkBT;;AAC/D,OAAKC,OAAL,GAAe/G,WAAW,CAACyF,OAAZ,CAAoB3B,OAAO,CAACiD,OAA5B,CAAf,CAnBwE,CAmBnB;;AACrD,OAAKC,WAAL,GAAmBlD,OAAO,CAACmD,YAA3B,CApBwE,CAoB/B;;AACzC,OAAKC,oBAAL,GAA4BpD,OAAO,CAACqD,sBAApC,CArBwE,CAqBZ;;AAC5D,OAAK3G,YAAL,GAAoBsD,OAAO,CAACsD,aAA5B,CAtBwE,CAsB7B;;AAC3C,OAAKC,GAAL,GAAWvD,OAAO,CAACuD,GAAnB,CAvBwE,CAuBhD;;AACxB,OAAKC,KAAL,GAAaxD,OAAO,CAACwD,KAArB,CAxBwE,CAwB5C;AAE5B;;AACA,OAAKC,QAAL,GAAgBC,SAAhB;AACA,OAAK3G,SAAL,GAAiB;AAACL,IAAAA,YAAY,EAAEA,YAAf;AAA6BE,IAAAA,GAAG,EAAEA,GAAG,IAAI,KAAKA;AAA9C,GAAjB;AACD,CA7BD;;AA+BA+G,MAAM,CAACC,cAAP,CAAsBrH,YAAY,CAACuE,SAAnC,EACE,QADF,EACY;AACRjE,EAAAA,GAAG,EAAE,eAAW;AACd,QAAI,CAAC,KAAK4G,QAAV,EAAoB;AAClB,WAAKA,QAAL,GAAgB,IAAIjH,WAAJ,CAAgB,KAAKM,QAArB,EAA+B,KAAKC,SAAL,CAAeL,YAA9C,EAA4D,KAAKK,SAAL,CAAeH,GAA3E,CAAhB;AACD;;AAED,WAAO,KAAK6G,QAAZ;AACD;AAPO,CADZ;AAWA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAlH,YAAY,CAACuE,SAAb,CAAuB+C,KAAvB,GAA+B,SAASA,KAAT,CAAe1G,QAAf,EAAyB;AACtD,SAAO,KAAK2G,MAAL,CAAYD,KAAZ,CAAkB1G,QAAlB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,YAAY,CAACuE,SAAb,CAAuBiD,MAAvB,GAAgC,SAASA,MAAT,CAAgB7G,IAAhB,EAAsBC,QAAtB,EAAgC;AAC9D,SAAO,KAAK2G,MAAL,CAAYC,MAAZ,CAAmB7G,IAAnB,EAAyBC,QAAzB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,YAAY,CAACuE,SAAb,CAAuBkD,MAAvB,GAAgC,SAASA,MAAT,CAAgB7G,QAAhB,EAA0B;AACxD,SAAO,KAAK2G,MAAL,CAAYE,MAAZ,CAAmB7G,QAAnB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,YAAY,CAACuE,SAAb,CAAuBmD,YAAvB,GAAsC,SAASA,YAAT,GAAwB;AAC5D,SAAO,KAAKH,MAAL,CAAYG,YAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA1H,YAAY,CAACuE,SAAb,CAAuBP,MAAvB,GAAgC,SAASA,MAAT,GAAkB;AAChD,MAAIY,KAAK,GAAG,EAAZ;;AACArF,EAAAA,CAAC,CAACsF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAACxF,CAAC,CAACyF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAExF,CAAC,CAACsB,UAAF,CAAaiE,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUA5E,YAAY,CAACuE,SAAb,CAAuB/E,IAAI,CAACyE,OAAL,CAAaC,MAApC,IAA8C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;AAC7E,SAAO5E,IAAI,CAACyE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAFD;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAnE,WAAW,GAAG,SAASA,WAAT,CAAqBC,OAArB,EAA8BC,YAA9B,EAA4CE,GAA5C,EAAiD;AAC7D,OAAKE,QAAL,GAAgBL,OAAhB,CAD6D,CAG7D;;AACA,OAAKM,SAAL,GAAiB;AAACL,IAAAA,YAAY,EAAEA,YAAf;AAA6BE,IAAAA,GAAG,EAAEA;AAAlC,GAAjB;AACA,OAAKI,IAAL,yBAA2BN,YAA3B,oBAAiDE,GAAjD,EAL6D,CAO7D;;AACA,OAAKsH,aAAL,GAAqBR,SAArB;AACD,CATD;AAWA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAlH,WAAW,CAACsE,SAAZ,CAAsB+C,KAAtB,GAA8B,SAASA,KAAT,CAAe1G,QAAf,EAAyB;AACrD,MAAI0B,QAAQ,GAAGjD,CAAC,CAACkD,KAAF,EAAf;;AACA,MAAIZ,OAAO,GAAG,KAAKpB,QAAL,CAAc+G,KAAd,CAAoB;AAAChE,IAAAA,GAAG,EAAE,KAAK7C,IAAX;AAAiB8C,IAAAA,MAAM,EAAE;AAAzB,GAApB,CAAd;;AAEA5B,EAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS6B,OAAT,EAAkB;AACvCnB,IAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,YAAJ,CACf,KAAKO,QADU,EAEfkD,OAFe,EAGf,KAAKjD,SAAL,CAAeL,YAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;AAMD,GAPsB,CAOrB4B,IAPqB,CAOhB,IAPgB,CAAb,CAAV;AASAN,EAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,IAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,GAFD;;AAIA,MAAIjC,CAAC,CAACsB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,IAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,SAAO0B,QAAQ,CAACX,OAAhB;AACD,CAtBD;AAwBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA1B,WAAW,CAACsE,SAAZ,CAAsBiD,MAAtB,GAA+B,SAASA,MAAT,CAAgB7G,IAAhB,EAAsBC,QAAtB,EAAgC;AAC7D,MAAIrB,CAAC,CAACsB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,IAAAA,QAAQ,GAAGD,IAAX;AACAA,IAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,MAAI2B,QAAQ,GAAGjD,CAAC,CAACkD,KAAF,EAAf;AACA,MAAIQ,IAAI,GAAGlD,MAAM,CAACmD,EAAP,CAAU;AACnB,kBAAczD,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,YAAZ,CADK;AAEnB,wBAAoBpB,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,kBAAZ,CAFD;AAGnB,cAAUpB,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,QAAZ,CAHS;AAInB,gBAAYpB,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,UAAZ,CAJO;AAKnB,mBAAepB,CAAC,CAACe,GAAF,CAAMK,IAAN,EAAY,aAAZ;AALI,GAAV,CAAX;;AAQA,MAAIgB,OAAO,GAAG,KAAKpB,QAAL,CAAciH,MAAd,CAAqB;AAAClE,IAAAA,GAAG,EAAE,KAAK7C,IAAX;AAAiB8C,IAAAA,MAAM,EAAE,MAAzB;AAAiCR,IAAAA,IAAI,EAAEA;AAAvC,GAArB,CAAd;;AAEApB,EAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS6B,OAAT,EAAkB;AACvCnB,IAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,YAAJ,CACf,KAAKO,QADU,EAEfkD,OAFe,EAGf,KAAKjD,SAAL,CAAeL,YAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;AAMD,GAPsB,CAOrB4B,IAPqB,CAOhB,IAPgB,CAAb,CAAV;AASAN,EAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,IAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,GAFD;;AAIA,MAAIjC,CAAC,CAACsB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,IAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,SAAO0B,QAAQ,CAACX,OAAhB;AACD,CApCD;AAsCA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA1B,WAAW,CAACsE,SAAZ,CAAsBkD,MAAtB,GAA+B,SAASA,MAAT,CAAgB7G,QAAhB,EAA0B;AACvD,MAAI0B,QAAQ,GAAGjD,CAAC,CAACkD,KAAF,EAAf;;AACA,MAAIZ,OAAO,GAAG,KAAKpB,QAAL,CAAckH,MAAd,CAAqB;AAACnE,IAAAA,GAAG,EAAE,KAAK7C,IAAX;AAAiB8C,IAAAA,MAAM,EAAE;AAAzB,GAArB,CAAd;;AAEA5B,EAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS6B,OAAT,EAAkB;AACvCnB,IAAAA,QAAQ,CAACM,OAAT,CAAiBa,OAAjB;AACD,GAFsB,CAErBxB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAN,EAAAA,OAAO,CAACQ,KAAR,CAAc,UAASX,KAAT,EAAgB;AAC5Bc,IAAAA,QAAQ,CAACO,MAAT,CAAgBrB,KAAhB;AACD,GAFD;;AAIA,MAAIjC,CAAC,CAACsB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1B0B,IAAAA,QAAQ,CAACX,OAAT,CAAiBmB,OAAjB,CAAyBlC,QAAzB;AACD;;AAED,SAAO0B,QAAQ,CAACX,OAAhB;AACD,CAjBD;;AAmBAyF,MAAM,CAACC,cAAP,CAAsBpH,WAAW,CAACsE,SAAlC,EACE,cADF,EACkB;AACdjE,EAAAA,GAAG,EAAE,eAAW;AACd,QAAI,CAAC,KAAKqH,aAAV,EAAyB;AACvB,WAAKA,aAAL,GAAqB,IAAIjI,eAAJ,CACnB,KAAKa,QADc,EAEnB,KAAKC,SAAL,CAAeL,YAFI,EAGnB,KAAKK,SAAL,CAAeH,GAHI,CAArB;AAKD;;AACD,WAAO,KAAKsH,aAAZ;AACD;AAVa,CADlB;AAcA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA1H,WAAW,CAACsE,SAAZ,CAAsBP,MAAtB,GAA+B,SAASA,MAAT,GAAkB;AAC/C,SAAO,KAAKxD,SAAZ;AACD,CAFD;;AAIAP,WAAW,CAACsE,SAAZ,CAAsB/E,IAAI,CAACyE,OAAL,CAAaC,MAAnC,IAA6C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;AAC5E,SAAO5E,IAAI,CAACyE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAFD;;AAIAwD,MAAM,CAACC,OAAP,GAAiB;AACf/H,EAAAA,QAAQ,EAAEA,QADK;AAEfC,EAAAA,QAAQ,EAAEA,QAFK;AAGfC,EAAAA,YAAY,EAAEA,YAHC;AAIfC,EAAAA,WAAW,EAAEA;AAJE,CAAjB","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar ReservationList = require('./task/reservation').ReservationList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar TaskList;\nvar TaskPage;\nvar TaskInstance;\nvar TaskContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid - The SID of the Workspace that contains the Task\n */\n/* jshint ignore:end */\nTaskList = function TaskList(version, workspaceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function tasks\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext}\n   */\n  /* jshint ignore:end */\n  function TaskListInstance(sid) {\n    return TaskListInstance.get(sid);\n  }\n\n  TaskListInstance._version = version;\n  // Path Solution\n  TaskListInstance._solution = {workspaceSid: workspaceSid};\n  TaskListInstance._uri = `/Workspaces/${workspaceSid}/Tasks`;\n  /* jshint ignore:start */\n  /**\n   * Streams TaskInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.priority] - The priority value of the Tasks to read\n   * @param {string|list} [opts.assignmentStatus] -\n   *          Returns the list of all Tasks in the Workspace with the specified assignment_status\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Workflow with the Tasks to read\n   * @param {string} [opts.workflowName] -\n   *          The friendly name of the Workflow with the Tasks to read\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue with the Tasks to read\n   * @param {string} [opts.taskQueueName] -\n   *          The friendly_name of the TaskQueue with the Tasks to read\n   * @param {string} [opts.evaluateTaskAttributes] -\n   *          The task attributes of the Tasks to read\n   * @param {string} [opts.ordering] - Controls the order of the Tasks returned\n   * @param {boolean} [opts.hasAddons] - Whether to read Tasks with addons\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TaskListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TaskInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.priority] - The priority value of the Tasks to read\n   * @param {string|list} [opts.assignmentStatus] -\n   *          Returns the list of all Tasks in the Workspace with the specified assignment_status\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Workflow with the Tasks to read\n   * @param {string} [opts.workflowName] -\n   *          The friendly name of the Workflow with the Tasks to read\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue with the Tasks to read\n   * @param {string} [opts.taskQueueName] -\n   *          The friendly_name of the TaskQueue with the Tasks to read\n   * @param {string} [opts.evaluateTaskAttributes] -\n   *          The task attributes of the Tasks to read\n   * @param {string} [opts.ordering] - Controls the order of the Tasks returned\n   * @param {boolean} [opts.hasAddons] - Whether to read Tasks with addons\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.priority] - The priority value of the Tasks to read\n   * @param {string|list} [opts.assignmentStatus] -\n   *          Returns the list of all Tasks in the Workspace with the specified assignment_status\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Workflow with the Tasks to read\n   * @param {string} [opts.workflowName] -\n   *          The friendly name of the Workflow with the Tasks to read\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue with the Tasks to read\n   * @param {string} [opts.taskQueueName] -\n   *          The friendly_name of the TaskQueue with the Tasks to read\n   * @param {string} [opts.evaluateTaskAttributes] -\n   *          The task attributes of the Tasks to read\n   * @param {string} [opts.ordering] - Controls the order of the Tasks returned\n   * @param {boolean} [opts.hasAddons] - Whether to read Tasks with addons\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Priority': _.get(opts, 'priority'),\n      'AssignmentStatus': serialize.map(_.get(opts, 'assignmentStatus'), function(e) { return e; }),\n      'WorkflowSid': _.get(opts, 'workflowSid'),\n      'WorkflowName': _.get(opts, 'workflowName'),\n      'TaskQueueSid': _.get(opts, 'taskQueueSid'),\n      'TaskQueueName': _.get(opts, 'taskQueueName'),\n      'EvaluateTaskAttributes': _.get(opts, 'evaluateTaskAttributes'),\n      'Ordering': _.get(opts, 'ordering'),\n      'HasAddons': serialize.bool(_.get(opts, 'hasAddons')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TaskInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a TaskInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.timeout] -\n   *          The amount of time in seconds the task is allowed to live\n   * @param {number} [opts.priority] -\n   *          The priority to assign the new task and override the default\n   * @param {string} [opts.taskChannel] -\n   *          When MultiTasking is enabled specify the TaskChannel by passing either its unique_name or SID\n   * @param {string} [opts.workflowSid] -\n   *          The SID of the Workflow that you would like to handle routing for the new Task\n   * @param {string} [opts.attributes] -\n   *          A URL-encoded JSON string describing the attributes of the task\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TaskInstance\n   */\n  /* jshint ignore:end */\n  TaskListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Timeout': _.get(opts, 'timeout'),\n      'Priority': _.get(opts, 'priority'),\n      'TaskChannel': _.get(opts, 'taskChannel'),\n      'WorkflowSid': _.get(opts, 'workflowSid'),\n      'Attributes': _.get(opts, 'attributes')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskInstance(\n        this._version,\n        payload,\n        this._solution.workspaceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a task\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @param {string} sid - The SID of the resource to fetch\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext}\n   */\n  /* jshint ignore:end */\n  TaskListInstance.get = function get(sid) {\n    return new TaskContext(this._version, this._solution.workspaceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TaskListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TaskListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TaskListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskSolution} solution - Path solution\n *\n * @returns TaskPage\n */\n/* jshint ignore:end */\nTaskPage = function TaskPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TaskPage.prototype, Page.prototype);\nTaskPage.prototype.constructor = TaskPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TaskInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskPage#\n *\n * @param {TaskPayload} payload - Payload response from the API\n *\n * @returns TaskInstance\n */\n/* jshint ignore:end */\nTaskPage.prototype.getInstance = function getInstance(payload) {\n  return new TaskInstance(this._version, payload, this._solution.workspaceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTaskPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {number} age - The number of seconds since the Task was created\n * @property {task.status} assignmentStatus -\n *          The current status of the Task's assignment\n * @property {string} attributes -\n *          The JSON string with custom attributes of the work\n * @property {string} addons -\n *          An object that contains the addon data for all installed addons\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {Date} taskQueueEnteredDate -\n *          The ISO 8601 date and time in GMT when the Task entered the TaskQueue.\n * @property {number} priority -\n *          Retrieve the list of all Tasks in the Workspace with the specified priority\n * @property {string} reason - The reason the Task was canceled or completed\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} taskQueueSid - The SID of the TaskQueue\n * @property {string} taskQueueFriendlyName - The friendly name of the TaskQueue\n * @property {string} taskChannelSid - The SID of the TaskChannel\n * @property {string} taskChannelUniqueName - The unique name of the TaskChannel\n * @property {number} timeout -\n *          The amount of time in seconds that the Task is allowed to live\n * @property {string} workflowSid -\n *          The SID of the Workflow that is controlling the Task\n * @property {string} workflowFriendlyName -\n *          The friendly name of the Workflow that is controlling the Task\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the Task\n * @property {string} url - The absolute URL of the Task resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {TaskPayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the Task\n * @param {sid} sid - The SID of the resource to fetch\n */\n/* jshint ignore:end */\nTaskInstance = function TaskInstance(version, payload, workspaceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.age = deserialize.integer(payload.age); // jshint ignore:line\n  this.assignmentStatus = payload.assignment_status; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.addons = payload.addons; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.taskQueueEnteredDate = deserialize.iso8601DateTime(payload.task_queue_entered_date); // jshint ignore:line\n  this.priority = deserialize.integer(payload.priority); // jshint ignore:line\n  this.reason = payload.reason; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.taskQueueSid = payload.task_queue_sid; // jshint ignore:line\n  this.taskQueueFriendlyName = payload.task_queue_friendly_name; // jshint ignore:line\n  this.taskChannelSid = payload.task_channel_sid; // jshint ignore:line\n  this.taskChannelUniqueName = payload.task_channel_unique_name; // jshint ignore:line\n  this.timeout = deserialize.integer(payload.timeout); // jshint ignore:line\n  this.workflowSid = payload.workflow_sid; // jshint ignore:line\n  this.workflowFriendlyName = payload.workflow_friendly_name; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {workspaceSid: workspaceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(TaskInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new TaskContext(this._version, this._solution.workspaceSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.attributes] -\n *          The JSON string that describes the custom attributes of the task\n * @param {task.status} [opts.assignmentStatus] - The new status of the task\n * @param {string} [opts.reason] -\n *          The reason that the Task was canceled or complete\n * @param {number} [opts.priority] - The Task's new priority value\n * @param {string} [opts.taskChannel] -\n *          When MultiTasking is enabled, specify the TaskChannel with the task to update\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the reservations\n *\n * @function reservations\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList}\n */\n/* jshint ignore:end */\nTaskInstance.prototype.reservations = function reservations() {\n  return this._proxy.reservations;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTaskInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskContext.ReservationList} reservations -\n *          reservations resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the Task to fetch\n * @param {sid} sid - The SID of the resource to fetch\n */\n/* jshint ignore:end */\nTaskContext = function TaskContext(version, workspaceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {workspaceSid: workspaceSid, sid: sid, };\n  this._uri = `/Workspaces/${workspaceSid}/Tasks/${sid}`;\n\n  // Dependents\n  this._reservations = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TaskInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TaskInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.attributes] -\n *          The JSON string that describes the custom attributes of the task\n * @param {task.status} [opts.assignmentStatus] - The new status of the task\n * @param {string} [opts.reason] -\n *          The reason that the Task was canceled or complete\n * @param {number} [opts.priority] - The Task's new priority value\n * @param {string} [opts.taskChannel] -\n *          When MultiTasking is enabled, specify the TaskChannel with the task to update\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Attributes': _.get(opts, 'attributes'),\n    'AssignmentStatus': _.get(opts, 'assignmentStatus'),\n    'Reason': _.get(opts, 'reason'),\n    'Priority': _.get(opts, 'priority'),\n    'TaskChannel': _.get(opts, 'taskChannel')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TaskInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskInstance\n */\n/* jshint ignore:end */\nTaskContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TaskContext.prototype,\n  'reservations', {\n    get: function() {\n      if (!this._reservations) {\n        this._reservations = new ReservationList(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n      return this._reservations;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTaskContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TaskList: TaskList,\n  TaskPage: TaskPage,\n  TaskInstance: TaskInstance,\n  TaskContext: TaskContext\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentSum } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImpl } from './SparseSegmentReduction_impl';\nexport function sparseSegmentSum(args) {\n  const inputs = args.inputs,\n        backend = args.backend;\n  const data = inputs.data,\n        indices = inputs.indices,\n        segmentIds = inputs.segmentIds;\n\n  if (data.shape.length < 1) {\n    throw new Error(\"Data should be at least 1 dimensional but received scalar\");\n  }\n\n  if (indices.shape.length !== 1) {\n    throw new Error(\"Indices should be a vector but received shape\\n         \".concat(indices.shape));\n  }\n\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(\"Segment ids should be a vector but received shape\\n         \".concat(segmentIds.shape));\n  }\n\n  const $data = backend.data.get(data.dataId).values;\n  const $indices = backend.data.get(indices.dataId).values;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values;\n\n  const _sparseSegmentReducti = sparseSegmentReductionImpl($data, data.shape, data.dtype, $indices, $segmentIds),\n        _sparseSegmentReducti2 = _slicedToArray(_sparseSegmentReducti, 2),\n        outputData = _sparseSegmentReducti2[0],\n        outputDataShape = _sparseSegmentReducti2[1];\n\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport const sparseSegmentSumConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentSum\n};","map":{"version":3,"sources":["../../src/kernels/SparseSegmentSum.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAsB,gBAAtB,QAA6F,uBAA7F;AAIA,SAAQ,0BAAR,QAAyC,+BAAzC;AAEA,OAAM,SAAU,gBAAV,CACF,IADE,EAC6D;AAAA,QAE1D,MAF0D,GAEvC,IAFuC,CAE1D,MAF0D;AAAA,QAElD,OAFkD,GAEvC,IAFuC,CAElD,OAFkD;AAAA,QAG1D,IAH0D,GAG7B,MAH6B,CAG1D,IAH0D;AAAA,QAGpD,OAHoD,GAG7B,MAH6B,CAGpD,OAHoD;AAAA,QAG3C,UAH2C,GAG7B,MAH6B,CAG3C,UAH2C;;AAIjE,MAAI,IAAI,CAAC,KAAL,CAAW,MAAX,GAAoB,CAAxB,EAA2B;AACzB,UAAM,IAAI,KAAJ,6DAAN;AAED;;AACD,MAAI,OAAO,CAAC,KAAR,CAAc,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,UAAM,IAAI,KAAJ,mEACC,OAAO,CAAC,KADT,EAAN;AAED;;AACD,MAAI,UAAU,CAAC,KAAX,CAAiB,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,UAAM,IAAI,KAAJ,uEACC,UAAU,CAAC,KADZ,EAAN;AAED;;AAED,QAAM,KAAK,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,IAAI,CAAC,MAAtB,EAA8B,MAA5C;AACA,QAAM,QAAQ,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,OAAO,CAAC,MAAzB,EAAiC,MAAlD;AACA,QAAM,WAAW,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,UAAU,CAAC,MAA5B,EAAoC,MAAxD;;AAnBiE,gCAqB3B,0BAA0B,CAC5D,KAD4D,EACrD,IAAI,CAAC,KADgD,EACzC,IAAI,CAAC,KADoC,EAC7B,QAD6B,EACnB,WADmB,CArBC;AAAA;AAAA,QAqB1D,UArB0D;AAAA,QAqB9C,eArB8C;;AAuBjE,SAAO,OAAO,CAAC,cAAR,CAAuB,eAAvB,EAAwC,IAAI,CAAC,KAA7C,EAAoD,UAApD,CAAP;AACD;AAED,OAAO,MAAM,sBAAsB,GAAiB;AAClD,EAAA,UAAU,EAAE,gBADsC;AAElD,EAAA,WAAW,EAAE,KAFqC;AAGlD,EAAA,UAAU,EAAE;AAHsC,CAA7C","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n         ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n         ${segmentIds.shape}`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentSum,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { gather } from './gather';\nimport { reshape } from './reshape';\nimport { squeeze } from './squeeze';\nimport { whereAsync } from './where_async';\n/**\n * Apply boolean mask to tensor.\n *\n * ```js\n * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n * const mask = tf.tensor1d([1, 0, 1], 'bool');\n * const result = await tf.booleanMaskAsync(tensor, mask);\n * result.print();\n * ```\n *\n * @param tensor N-D tensor.\n * @param mask K-D boolean tensor, K <= N and K must be known statically.\n * @param axis A 0-D int Tensor representing the axis in tensor to mask from.\n *     By default, axis is 0 which will mask from the first dimension.\n *     Otherwise K + axis <= N.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\n\nfunction booleanMaskAsync_(_x, _x2, _x3) {\n  return _booleanMaskAsync_.apply(this, arguments);\n}\n\nfunction _booleanMaskAsync_() {\n  _booleanMaskAsync_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tensor, mask, axis) {\n    var $tensor, $mask, axisFrom, maskDim, tensorShape, leadingSize, i, targetTensorShape, reshapedTensor, reshapedMask, positivePositions, indices, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          $tensor = convertToTensor(tensor, 'tensor', 'boolMask');\n          $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');\n          axisFrom = axis == null ? 0 : axis;\n          maskDim = $mask.rank;\n          tensorShape = $tensor.shape;\n          util.assert(maskDim > 0, () => 'mask cannot be scalar');\n          util.assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, \"mask's shape must match the first K dimensions of tensor's shape,\");\n          leadingSize = 1;\n\n          for (i = axisFrom; i < axisFrom + maskDim; i++) {\n            leadingSize *= tensorShape[i];\n          }\n\n          targetTensorShape = tensorShape.slice(0, axisFrom).concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n          reshapedTensor = reshape($tensor, targetTensorShape);\n          reshapedMask = reshape($mask, [-1]);\n          _context.next = 14;\n          return whereAsync(reshapedMask);\n\n        case 14:\n          positivePositions = _context.sent;\n          indices = squeeze(positivePositions, [1]);\n          res = gather(reshapedTensor, indices, axisFrom); // Ensure no memory leak.\n\n          if (tensor !== $tensor) {\n            $tensor.dispose();\n          }\n\n          if (mask !== $mask) {\n            $mask.dispose();\n          }\n\n          indices.dispose();\n          reshapedTensor.dispose();\n          reshapedMask.dispose();\n          positivePositions.dispose();\n          return _context.abrupt(\"return\", res);\n\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _booleanMaskAsync_.apply(this, arguments);\n}\n\nexport const booleanMaskAsync = booleanMaskAsync_;","map":{"version":3,"sources":["../../src/ops/boolean_mask.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,MAAR,QAAqB,UAArB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AACA,SAAQ,UAAR,QAAyB,eAAzB;AAEA;;;;;;;;;;;;;;;;;AAiBG;;SACY,iB;;;;;gFAAf,iBACI,MADJ,EAC+B,IAD/B,EAEI,IAFJ;AAAA;AAAA;AAAA;AAAA;AAGQ,UAAA,OAHR,GAGkB,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,UAAnB,CAHjC;AAIQ,UAAA,KAJR,GAIgB,eAAe,CAAC,IAAD,EAAO,MAAP,EAAe,UAAf,EAA2B,MAA3B,CAJ/B;AAMQ,UAAA,QANR,GAMmB,IAAI,IAAI,IAAR,GAAe,CAAf,GAAmB,IANtC;AAOQ,UAAA,OAPR,GAOkB,KAAK,CAAC,IAPxB;AAQQ,UAAA,WARR,GAQsB,OAAO,CAAC,KAR9B;AAUE,UAAA,IAAI,CAAC,MAAL,CAAY,OAAO,GAAG,CAAtB,EAAyB,MAAM,uBAA/B;AACA,UAAA,IAAI,CAAC,iBAAL,CACI,WAAW,CAAC,KAAZ,CAAkB,QAAlB,EAA4B,QAAQ,GAAG,OAAvC,CADJ,EACqD,KAAK,CAAC,KAD3D;AAII,UAAA,WAfN,GAeoB,CAfpB;;AAgBE,eAAS,CAAT,GAAa,QAAb,EAAuB,CAAC,GAAG,QAAQ,GAAG,OAAtC,EAA+C,CAAC,EAAhD,EAAoD;AAClD,YAAA,WAAW,IAAI,WAAW,CAAC,CAAD,CAA1B;AACD;;AACK,UAAA,iBAnBR,GAoBM,WAAW,CAAC,KAAZ,CAAkB,CAAlB,EAAqB,QAArB,EACK,MADL,CACY,CAAC,WAAD,CADZ,EAC2B,WAAW,CAAC,KAAZ,CAAkB,QAAQ,GAAG,OAA7B,CAD3B,CApBN;AAsBQ,UAAA,cAtBR,GAsByB,OAAO,CAAC,OAAD,EAAU,iBAAV,CAtBhC;AAuBQ,UAAA,YAvBR,GAuBuB,OAAO,CAAC,KAAD,EAAQ,CAAC,CAAC,CAAF,CAAR,CAvB9B;AAAA;AAAA,iBAwBkC,UAAU,CAAC,YAAD,CAxB5C;;AAAA;AAwBQ,UAAA,iBAxBR;AAyBQ,UAAA,OAzBR,GAyBkB,OAAO,CAAC,iBAAD,EAAoB,CAAC,CAAD,CAApB,CAzBzB;AA2BQ,UAAA,GA3BR,GA2Bc,MAAM,CAAC,cAAD,EAAiB,OAAjB,EAA0B,QAA1B,CA3BpB,EA6BE;;AACA,cAAI,MAAM,KAAK,OAAf,EAAwB;AACtB,YAAA,OAAO,CAAC,OAAR;AACD;;AACD,cAAI,IAAI,KAAK,KAAb,EAAoB;AAClB,YAAA,KAAK,CAAC,OAAN;AACD;;AACD,UAAA,OAAO,CAAC,OAAR;AACA,UAAA,cAAc,CAAC,OAAf;AACA,UAAA,YAAY,CAAC,OAAb;AACA,UAAA,iBAAiB,CAAC,OAAlB;AAvCF,2CAyCS,GAzCT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA4CA,OAAO,MAAM,gBAAgB,GAAG,iBAAzB","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {gather} from './gather';\nimport {reshape} from './reshape';\nimport {squeeze} from './squeeze';\nimport {whereAsync} from './where_async';\n\n/**\n * Apply boolean mask to tensor.\n *\n * ```js\n * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n * const mask = tf.tensor1d([1, 0, 1], 'bool');\n * const result = await tf.booleanMaskAsync(tensor, mask);\n * result.print();\n * ```\n *\n * @param tensor N-D tensor.\n * @param mask K-D boolean tensor, K <= N and K must be known statically.\n * @param axis A 0-D int Tensor representing the axis in tensor to mask from.\n *     By default, axis is 0 which will mask from the first dimension.\n *     Otherwise K + axis <= N.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nasync function booleanMaskAsync_(\n    tensor: Tensor|TensorLike, mask: Tensor|TensorLike,\n    axis?: number): Promise<Tensor> {\n  const $tensor = convertToTensor(tensor, 'tensor', 'boolMask');\n  const $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');\n\n  const axisFrom = axis == null ? 0 : axis;\n  const maskDim = $mask.rank;\n  const tensorShape = $tensor.shape;\n\n  util.assert(maskDim > 0, () => 'mask cannot be scalar');\n  util.assertShapesMatch(\n      tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape,\n      `mask's shape must match the first K dimensions of tensor's shape,`);\n\n  let leadingSize = 1;\n  for (let i = axisFrom; i < axisFrom + maskDim; i++) {\n    leadingSize *= tensorShape[i];\n  }\n  const targetTensorShape =\n      tensorShape.slice(0, axisFrom)\n          .concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n  const reshapedTensor = reshape($tensor, targetTensorShape);\n  const reshapedMask = reshape($mask, [-1]);\n  const positivePositions = await whereAsync(reshapedMask);\n  const indices = squeeze(positivePositions, [1]);\n\n  const res = gather(reshapedTensor, indices, axisFrom);\n\n  // Ensure no memory leak.\n  if (tensor !== $tensor) {\n    $tensor.dispose();\n  }\n  if (mask !== $mask) {\n    $mask.dispose();\n  }\n  indices.dispose();\n  reshapedTensor.dispose();\n  reshapedMask.dispose();\n  positivePositions.dispose();\n\n  return res;\n}\n\nexport const booleanMaskAsync = booleanMaskAsync_;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar ParticipantList = require('./room/roomParticipant').ParticipantList;\n\nvar RecordingRulesList = require('./room/roomRecordingRule').RecordingRulesList;\n\nvar RoomRecordingList = require('./room/recording').RoomRecordingList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar RoomList;\nvar RoomPage;\nvar RoomInstance;\nvar RoomContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the RoomList\n *\n * @constructor Twilio.Video.V1.RoomList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nRoomList = function RoomList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function rooms\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext}\n   */\n\n  /* jshint ignore:end */\n  function RoomListInstance(sid) {\n    return RoomListInstance.get(sid);\n  }\n\n  RoomListInstance._version = version; // Path Solution\n\n  RoomListInstance._solution = {};\n  RoomListInstance._uri = \"/Rooms\";\n  /* jshint ignore:start */\n\n  /**\n   * create a RoomInstance\n   *\n   * @function create\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enableTurn] -\n   *          Enable Twilio's Network Traversal TURN service\n   * @param {room.room_type} [opts.type] - The type of room\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string} [opts.statusCallback] -\n   *          The URL to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call status_callback\n   * @param {number} [opts.maxParticipants] -\n   *          The maximum number of concurrent Participants allowed in the room\n   * @param {boolean} [opts.recordParticipantsOnConnect] -\n   *          Whether to start recording when Participants connect\n   * @param {room.video_codec|list} [opts.videoCodecs] -\n   *          An array of the video codecs that are supported when publishing a track in the room\n   * @param {string} [opts.mediaRegion] -\n   *          The region for the media server in Group Rooms\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed RoomInstance\n   */\n\n  /* jshint ignore:end */\n\n  RoomListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'EnableTurn': serialize.bool(_.get(opts, 'enableTurn')),\n      'Type': _.get(opts, 'type'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'MaxParticipants': _.get(opts, 'maxParticipants'),\n      'RecordParticipantsOnConnect': serialize.bool(_.get(opts, 'recordParticipantsOnConnect')),\n      'VideoCodecs': serialize.map(_.get(opts, 'videoCodecs'), function (e) {\n        return e;\n      }),\n      'MediaRegion': _.get(opts, 'mediaRegion')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams RoomInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists RoomInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a room\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.RoomContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.get = function get(sid) {\n    return new RoomContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  RoomListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return RoomListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RoomPage\n *\n * @constructor Twilio.Video.V1.RoomPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RoomSolution} solution - Path solution\n *\n * @returns RoomPage\n */\n\n/* jshint ignore:end */\n\n\nRoomPage = function RoomPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(RoomPage.prototype, Page.prototype);\n\nRoomPage.prototype.constructor = RoomPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of RoomInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomPage#\n *\n * @param {RoomPayload} payload - Payload response from the API\n *\n * @returns RoomInstance\n */\n\n/* jshint ignore:end */\n\nRoomPage.prototype.getInstance = function getInstance(payload) {\n  return new RoomInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nRoomPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nRoomPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RoomContext\n *\n * @constructor Twilio.Video.V1.RoomInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {room.room_status} status - The status of the room\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {boolean} enableTurn - Enable Twilio's Network Traversal TURN service\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} statusCallback -\n *          The URL to send status information to your application\n * @property {string} statusCallbackMethod -\n *          The HTTP method we use to call status_callback\n * @property {Date} endTime - The UTC end time of the room in UTC ISO 8601 format\n * @property {number} duration - The duration of the room in seconds\n * @property {room.room_type} type - The type of room\n * @property {number} maxParticipants -\n *          The maximum number of concurrent Participants allowed in the room\n * @property {boolean} recordParticipantsOnConnect -\n *          Whether to start recording when Participants connect\n * @property {room.video_codec} videoCodecs -\n *          An array of the video codecs that are supported when publishing a track in the room\n * @property {string} mediaRegion - The region for the media server in Group Rooms\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {RoomPayload} payload - The instance payload\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nRoomInstance = function RoomInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.enableTurn = payload.enable_turn; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n\n  this.endTime = deserialize.iso8601DateTime(payload.end_time); // jshint ignore:line\n\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n\n  this.type = payload.type; // jshint ignore:line\n\n  this.maxParticipants = deserialize.integer(payload.max_participants); // jshint ignore:line\n\n  this.recordParticipantsOnConnect = payload.record_participants_on_connect; // jshint ignore:line\n\n  this.videoCodecs = payload.video_codecs; // jshint ignore:line\n\n  this.mediaRegion = payload.media_region; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(RoomInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new RoomContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n\n/* jshint ignore:end */\n\nRoomInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a RoomInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @param {object} opts - Options for request\n * @param {room.room_status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n\n/* jshint ignore:end */\n\n\nRoomInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.RoomRecordingList}\n */\n\n/* jshint ignore:end */\n\n\nRoomInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n/* jshint ignore:start */\n\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantList}\n */\n\n/* jshint ignore:end */\n\n\nRoomInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n/* jshint ignore:start */\n\n/**\n * Access the recordingRules\n *\n * @function recordingRules\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.RecordingRulesList}\n */\n\n/* jshint ignore:end */\n\n\nRoomInstance.prototype.recordingRules = function recordingRules() {\n  return this._proxy.recordingRules;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nRoomInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nRoomInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RoomContext\n *\n * @constructor Twilio.Video.V1.RoomContext\n *\n * @property {Twilio.Video.V1.RoomContext.RoomRecordingList} recordings -\n *          recordings resource\n * @property {Twilio.Video.V1.RoomContext.ParticipantList} participants -\n *          participants resource\n * @property {Twilio.Video.V1.RoomContext.RecordingRulesList} recordingRules -\n *          recordingRules resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nRoomContext = function RoomContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = \"/Rooms/\".concat(sid); // Dependents\n\n  this._recordings = undefined;\n  this._participants = undefined;\n  this._recordingRules = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n\n/* jshint ignore:end */\n\n\nRoomContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a RoomInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @param {object} opts - Options for request\n * @param {room.room_status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n\n/* jshint ignore:end */\n\n\nRoomContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts.status)) {\n    throw new Error('Required parameter \"opts.status\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(RoomContext.prototype, 'recordings', {\n  get: function get() {\n    if (!this._recordings) {\n      this._recordings = new RoomRecordingList(this._version, this._solution.sid);\n    }\n\n    return this._recordings;\n  }\n});\nObject.defineProperty(RoomContext.prototype, 'participants', {\n  get: function get() {\n    if (!this._participants) {\n      this._participants = new ParticipantList(this._version, this._solution.sid);\n    }\n\n    return this._participants;\n  }\n});\nObject.defineProperty(RoomContext.prototype, 'recordingRules', {\n  get: function get() {\n    if (!this._recordingRules) {\n      this._recordingRules = new RecordingRulesList(this._version, this._solution.sid);\n    }\n\n    return this._recordingRules;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nRoomContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nRoomContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  RoomList: RoomList,\n  RoomPage: RoomPage,\n  RoomInstance: RoomInstance,\n  RoomContext: RoomContext\n};","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio/lib/rest/video/v1/room.js"],"names":["Q","require","_","util","Page","ParticipantList","RecordingRulesList","RoomRecordingList","deserialize","serialize","values","RoomList","RoomPage","RoomInstance","RoomContext","version","RoomListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","bool","map","e","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","pageLimit","nextPage","merge","list","allResources","resource","push","length","iso8601DateTime","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","status","dateCreated","date_created","dateUpdated","date_updated","accountSid","account_sid","enableTurn","enable_turn","uniqueName","unique_name","statusCallback","status_callback","statusCallbackMethod","status_callback_method","endTime","end_time","duration","integer","type","maxParticipants","max_participants","recordParticipantsOnConnect","record_participants_on_connect","videoCodecs","video_codecs","mediaRegion","media_region","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","recordings","participants","recordingRules","_recordings","_participants","_recordingRules","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar ParticipantList = require('./room/roomParticipant').ParticipantList;\nvar RecordingRulesList = require('./room/roomRecordingRule').RecordingRulesList;\nvar RoomRecordingList = require('./room/recording').RoomRecordingList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar RoomList;\nvar RoomPage;\nvar RoomInstance;\nvar RoomContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomList\n *\n * @constructor Twilio.Video.V1.RoomList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nRoomList = function RoomList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function rooms\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext}\n   */\n  /* jshint ignore:end */\n  function RoomListInstance(sid) {\n    return RoomListInstance.get(sid);\n  }\n\n  RoomListInstance._version = version;\n  // Path Solution\n  RoomListInstance._solution = {};\n  RoomListInstance._uri = `/Rooms`;\n  /* jshint ignore:start */\n  /**\n   * create a RoomInstance\n   *\n   * @function create\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enableTurn] -\n   *          Enable Twilio's Network Traversal TURN service\n   * @param {room.room_type} [opts.type] - The type of room\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {string} [opts.statusCallback] -\n   *          The URL to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call status_callback\n   * @param {number} [opts.maxParticipants] -\n   *          The maximum number of concurrent Participants allowed in the room\n   * @param {boolean} [opts.recordParticipantsOnConnect] -\n   *          Whether to start recording when Participants connect\n   * @param {room.video_codec|list} [opts.videoCodecs] -\n   *          An array of the video codecs that are supported when publishing a track in the room\n   * @param {string} [opts.mediaRegion] -\n   *          The region for the media server in Group Rooms\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed RoomInstance\n   */\n  /* jshint ignore:end */\n  RoomListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'EnableTurn': serialize.bool(_.get(opts, 'enableTurn')),\n      'Type': _.get(opts, 'type'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'MaxParticipants': _.get(opts, 'maxParticipants'),\n      'RecordParticipantsOnConnect': serialize.bool(_.get(opts, 'recordParticipantsOnConnect')),\n      'VideoCodecs': serialize.map(_.get(opts, 'videoCodecs'), function(e) { return e; }),\n      'MediaRegion': _.get(opts, 'mediaRegion')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams RoomInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  RoomListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists RoomInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room.room_status} [opts.status] - Read only the rooms with this status\n   * @param {string} [opts.uniqueName] - Read only rooms with this unique_name\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only rooms that started on or after this date, given as YYYY-MM-DD\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only rooms that started before this date, given as YYYY-MM-DD\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of RoomInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RoomPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a room\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.RoomContext}\n   */\n  /* jshint ignore:end */\n  RoomListInstance.get = function get(sid) {\n    return new RoomContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  RoomListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  RoomListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return RoomListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomPage\n *\n * @constructor Twilio.Video.V1.RoomPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RoomSolution} solution - Path solution\n *\n * @returns RoomPage\n */\n/* jshint ignore:end */\nRoomPage = function RoomPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(RoomPage.prototype, Page.prototype);\nRoomPage.prototype.constructor = RoomPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of RoomInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomPage#\n *\n * @param {RoomPayload} payload - Payload response from the API\n *\n * @returns RoomInstance\n */\n/* jshint ignore:end */\nRoomPage.prototype.getInstance = function getInstance(payload) {\n  return new RoomInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRoomPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomContext\n *\n * @constructor Twilio.Video.V1.RoomInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {room.room_status} status - The status of the room\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {boolean} enableTurn - Enable Twilio's Network Traversal TURN service\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} statusCallback -\n *          The URL to send status information to your application\n * @property {string} statusCallbackMethod -\n *          The HTTP method we use to call status_callback\n * @property {Date} endTime - The UTC end time of the room in UTC ISO 8601 format\n * @property {number} duration - The duration of the room in seconds\n * @property {room.room_type} type - The type of room\n * @property {number} maxParticipants -\n *          The maximum number of concurrent Participants allowed in the room\n * @property {boolean} recordParticipantsOnConnect -\n *          Whether to start recording when Participants connect\n * @property {room.video_codec} videoCodecs -\n *          An array of the video codecs that are supported when publishing a track in the room\n * @property {string} mediaRegion - The region for the media server in Group Rooms\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {RoomPayload} payload - The instance payload\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nRoomInstance = function RoomInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.enableTurn = payload.enable_turn; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n  this.endTime = deserialize.iso8601DateTime(payload.end_time); // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.maxParticipants = deserialize.integer(payload.max_participants); // jshint ignore:line\n  this.recordParticipantsOnConnect = payload.record_participants_on_connect; // jshint ignore:line\n  this.videoCodecs = payload.video_codecs; // jshint ignore:line\n  this.mediaRegion = payload.media_region; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(RoomInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new RoomContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a RoomInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @param {object} opts - Options for request\n * @param {room.room_status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.RoomRecordingList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n\n/* jshint ignore:start */\n/**\n * Access the participants\n *\n * @function participants\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.ParticipantList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.participants = function participants() {\n  return this._proxy.participants;\n};\n\n/* jshint ignore:start */\n/**\n * Access the recordingRules\n *\n * @function recordingRules\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns {Twilio.Video.V1.RoomContext.RecordingRulesList}\n */\n/* jshint ignore:end */\nRoomInstance.prototype.recordingRules = function recordingRules() {\n  return this._proxy.recordingRules;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRoomInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomContext\n *\n * @constructor Twilio.Video.V1.RoomContext\n *\n * @property {Twilio.Video.V1.RoomContext.RoomRecordingList} recordings -\n *          recordings resource\n * @property {Twilio.Video.V1.RoomContext.ParticipantList} participants -\n *          participants resource\n * @property {Twilio.Video.V1.RoomContext.RecordingRulesList} recordingRules -\n *          recordingRules resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nRoomContext = function RoomContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Rooms/${sid}`;\n\n  // Dependents\n  this._recordings = undefined;\n  this._participants = undefined;\n  this._recordingRules = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a RoomInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a RoomInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @param {object} opts - Options for request\n * @param {room.room_status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomInstance\n */\n/* jshint ignore:end */\nRoomContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.status)) {\n    throw new Error('Required parameter \"opts.status\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'Status': _.get(opts, 'status')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new RoomInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(RoomContext.prototype,\n  'recordings', {\n    get: function() {\n      if (!this._recordings) {\n        this._recordings = new RoomRecordingList(this._version, this._solution.sid);\n      }\n      return this._recordings;\n    }\n});\n\nObject.defineProperty(RoomContext.prototype,\n  'participants', {\n    get: function() {\n      if (!this._participants) {\n        this._participants = new ParticipantList(this._version, this._solution.sid);\n      }\n      return this._participants;\n    }\n});\n\nObject.defineProperty(RoomContext.prototype,\n  'recordingRules', {\n    get: function() {\n      if (!this._recordingRules) {\n        this._recordingRules = new RecordingRulesList(this._version, this._solution.sid);\n      }\n      return this._recordingRules;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nRoomContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  RoomList: RoomList,\n  RoomPage: RoomPage,\n  RoomInstance: RoomInstance,\n  RoomContext: RoomContext\n};\n"]},"metadata":{},"sourceType":"script"}
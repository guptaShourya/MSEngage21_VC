{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/VideoChat_test.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport Video from \"twilio-video\";\nimport Lobby from \"./Lobby\";\nimport Room from \"./Room\";\nimport RoomHeader from \"./toolbar/RoomHeader\";\nimport DisplayPreview from \"./DisplayPreview\"; // child to App.js\n// VideoChat.js handles data about the chat\n\nvar VideoChat = function VideoChat(props) {\n  _s();\n\n  // state variables\n  var _useState = useState(props.username),\n      _useState2 = _slicedToArray(_useState, 2),\n      username = _useState2[0],\n      setUsername = _useState2[1]; //username\n\n\n  var _useState3 = useState(props.roomName),\n      _useState4 = _slicedToArray(_useState3, 2),\n      roomName = _useState4[0],\n      setRoomName = _useState4[1]; //roomname\n\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      room = _useState6[0],\n      setRoom = _useState6[1]; //room details\n\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      connecting = _useState8[0],\n      setConnecting = _useState8[1]; //current status\n\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      disconnect = _useState10[0],\n      setDisconnect = _useState10[1];\n\n  var _useState11 = useState(true),\n      _useState12 = _slicedToArray(_useState11, 2),\n      video = _useState12[0],\n      setVideo = _useState12[1];\n\n  var _useState13 = useState(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      audio = _useState14[0],\n      setAudio = _useState14[1]; //update username on change\n\n\n  var handleUsernameChange = useCallback(function (event) {\n    setUsername(event.target.value);\n  }, []); // update room name on change\n\n  var handleRoomNameChange = useCallback(function (event) {\n    setRoomName(event.target.value);\n  }, []); // Method to send Username & Roomname to the server\n  // And recieve an access token\n\n  var handleSubmit = useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              setConnecting(true); // connecting to Twilio API\n\n              _context.next = 4;\n              return fetch(\"/video/token\", {\n                method: \"POST\",\n                body: JSON.stringify({\n                  identity: username,\n                  room: roomName\n                }),\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              }).then(function (res) {\n                return res.json();\n              });\n\n            case 4:\n              data = _context.sent;\n              // connect to the room using twilio API\n              Video.connect(data.token, {\n                name: roomName,\n                dominantSpeaker: true //enable dominant speaker feature\n\n              }).then(function (room) {\n                setConnecting(false);\n                setRoom(room);\n              }).catch(function (err) {\n                console.error(err);\n                setConnecting(false);\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [roomName, username]); // Ejects the user from the room and puts in the Lobby\n\n  var handleLogout = useCallback(function (event) {\n    event.preventDefault();\n    document.title = \"Microsoft Engage 2021\";\n    setRoom(function (prevRoom) {\n      if (prevRoom) {\n        // stop media tracks before disconnecting from room\n        prevRoom.localParticipant.tracks.forEach(function (trackPub) {\n          if (trackPub.track.kind !== 'data') {\n            trackPub.track.stop();\n\n            if (trackPub.track.kind === 'video') {\n              console.log(\"CALLED\");\n              trackPub.unpublish();\n            }\n          }\n        }); // disconnect from room\n\n        prevRoom.disconnect();\n      }\n\n      return null;\n    });\n    setDisconnect(true);\n  }, []);\n  useEffect(function () {\n    if (room) {\n      var tidyUp = function tidyUp(event) {\n        if (event.persisted) {\n          return;\n        }\n\n        if (room) {\n          handleLogout();\n        }\n      };\n\n      window.addEventListener(\"pagehide\", tidyUp);\n      window.addEventListener(\"beforeunload\", tidyUp);\n      return function () {\n        window.removeEventListener(\"pagehide\", tidyUp);\n        window.removeEventListener(\"beforeunload\", tidyUp);\n      };\n    }\n  }, [room, handleLogout]);\n  var render; // if room already exists then render Room.js\n\n  if (room) {\n    render = /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: \"1200px\"\n      },\n      id: \"room\",\n      children: [/*#__PURE__*/_jsxDEV(Room, {\n        roomName: roomName,\n        room: room,\n        handleLogout: handleLogout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        children: /*#__PURE__*/_jsxDEV(RoomHeader, {\n          handleLogout: handleLogout,\n          room: room,\n          roomName: roomName,\n          messages: props.messages,\n          sendMessage: props.sendMessage,\n          audio: audio,\n          video: video\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, _this);\n  } else if (disconnect) {\n    props.setIsVideo(false);\n    render = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 16\n    }, _this);\n  } else {\n    // If room doesnt exists then render Lobby.js\n    render = /*#__PURE__*/_jsxDEV(DisplayPreview, {\n      handleSubmit: handleSubmit,\n      connecting: connecting,\n      setConnecting: setConnecting,\n      setAudio: setAudio,\n      setVideo: setVideo,\n      audio: audio,\n      video: video\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, _this);\n  }\n\n  return render;\n};\n\n_s(VideoChat, \"R4wUBw3YEZbu6q7G3OlM/VayuP4=\");\n\n_c = VideoChat;\nexport default VideoChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoChat\");","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/VideoChat_test.js"],"names":["React","useState","useCallback","useEffect","Video","Lobby","Room","RoomHeader","DisplayPreview","VideoChat","props","username","setUsername","roomName","setRoomName","room","setRoom","connecting","setConnecting","disconnect","setDisconnect","video","setVideo","audio","setAudio","handleUsernameChange","event","target","value","handleRoomNameChange","handleSubmit","preventDefault","fetch","method","body","JSON","stringify","identity","headers","then","res","json","data","connect","token","name","dominantSpeaker","catch","err","console","error","handleLogout","document","title","prevRoom","localParticipant","tracks","forEach","trackPub","track","kind","stop","log","unpublish","tidyUp","persisted","window","addEventListener","removeEventListener","render","maxWidth","messages","sendMessage","setIsVideo"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\nimport Video from \"twilio-video\";\nimport Lobby from \"./Lobby\";\nimport Room from \"./Room\";\nimport RoomHeader from \"./toolbar/RoomHeader\";\nimport DisplayPreview from \"./DisplayPreview\";\n// child to App.js\n// VideoChat.js handles data about the chat\n\nconst VideoChat = (props) => {\n\n  // state variables\n  const [username, setUsername] = useState(props.username); //username\n  const [roomName, setRoomName] = useState(props.roomName); //roomname\n  const [room, setRoom] = useState(null); //room details\n  const [connecting, setConnecting] = useState(false); //current status\n  const [disconnect, setDisconnect] = useState(false);\n  const [video, setVideo] = useState(true);\n  const [audio, setAudio] = useState(true);\n  \n  //update username on change\n  const handleUsernameChange = useCallback((event) => {\n    setUsername(event.target.value);\n  }, []);\n\n  // update room name on change\n  const handleRoomNameChange = useCallback((event) => {\n    setRoomName(event.target.value);\n  }, []);\n\n  // Method to send Username & Roomname to the server\n  // And recieve an access token\n  const handleSubmit = useCallback(\n    async (event) => {\n\n      event.preventDefault(); \n      setConnecting(true); // connecting to Twilio API\n\n      const data = await fetch(\"/video/token\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          identity: username,\n          room: roomName,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }).then((res) => res.json());\n\n      // connect to the room using twilio API\n      Video.connect(data.token, {\n        name: roomName,\n        dominantSpeaker : true, //enable dominant speaker feature\n      }).then((room) => {\n          setConnecting(false);\n          setRoom(room);\n        }).catch((err) => {\n          console.error(err);\n          setConnecting(false);\n        });\n    },\n    [roomName, username]\n  );\n\n  // Ejects the user from the room and puts in the Lobby\n  const handleLogout = useCallback((event) => {\n    event.preventDefault();\n    document.title = \"Microsoft Engage 2021\"\n    setRoom((prevRoom) => {\n      if (prevRoom) {\n\n        // stop media tracks before disconnecting from room\n        prevRoom.localParticipant.tracks.forEach((trackPub) => {\n          if(trackPub.track.kind !== 'data'){\n            trackPub.track.stop();\n            if(trackPub.track.kind === 'video'){\n                console.log(\"CALLED\");\n                trackPub.unpublish();\n            }\n          }\n        });\n        \n        // disconnect from room\n        prevRoom.disconnect();\n      }\n      return null;\n    });\n    setDisconnect(true);\n  }, []);\n\n  useEffect(() => {\n    if (room) {\n      const tidyUp = (event) => {\n        if (event.persisted) {\n          return;\n        }\n        if (room) {\n          handleLogout();\n        }\n      };\n      window.addEventListener(\"pagehide\", tidyUp);\n      window.addEventListener(\"beforeunload\", tidyUp);\n      return () => {\n        window.removeEventListener(\"pagehide\", tidyUp);\n        window.removeEventListener(\"beforeunload\", tidyUp);\n      };\n    }\n  }, [room, handleLogout]);\n\n  let render;\n\n  // if room already exists then render Room.js\n  if (room) {\n    render = (\n      <div style = {{maxWidth : \"1200px\"}} id = 'room'>\n      <Room roomName={roomName} room={room} handleLogout={handleLogout} />\n      <footer>\n        <RoomHeader handleLogout = {handleLogout} room = {room} roomName = {roomName} \n          messages = {props.messages} sendMessage = {props.sendMessage} audio = {audio} video = {video}/>\n      </footer>\n      </div>\n    );\n  } else if(disconnect){ \n      props.setIsVideo(false);\n      render = <div></div>\n  }else{\n      // If room doesnt exists then render Lobby.js\n    render = (\n        <DisplayPreview handleSubmit = {handleSubmit} connecting = {connecting} setConnecting = {setConnecting}\n         setAudio = {setAudio} setVideo = {setVideo} audio = {audio} video = {video}/>\n      );\n  }\n  return render;\n};\n\nexport default VideoChat;\n"]},"metadata":{},"sourceType":"module"}
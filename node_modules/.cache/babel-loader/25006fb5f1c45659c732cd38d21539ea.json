{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar DeploymentList;\nvar DeploymentPage;\nvar DeploymentInstance;\nvar DeploymentContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the DeploymentList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList\n *\n * @param {Twilio.Serverless.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the Deployment resource is associated with\n * @param {string} environmentSid - The SID of the Environment for the Deployment\n */\n\n/* jshint ignore:end */\n\nDeploymentList = function DeploymentList(version, serviceSid, environmentSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function deployments\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentContext}\n   */\n\n  /* jshint ignore:end */\n  function DeploymentListInstance(sid) {\n    return DeploymentListInstance.get(sid);\n  }\n\n  DeploymentListInstance._version = version; // Path Solution\n\n  DeploymentListInstance._solution = {\n    serviceSid: serviceSid,\n    environmentSid: environmentSid\n  };\n  DeploymentListInstance._uri = \"/Services/\".concat(serviceSid, \"/Environments/\").concat(environmentSid, \"/Deployments\");\n  /* jshint ignore:start */\n\n  /**\n   * Streams DeploymentInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  DeploymentListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (limits.pageLimit && limits.pageLimit <= currentPage) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists DeploymentInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DeploymentListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of DeploymentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DeploymentListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DeploymentPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of DeploymentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DeploymentListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DeploymentPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a DeploymentInstance\n   *\n   * @function create\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.buildSid] - The SID of the Build for the Deployment\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed DeploymentInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  DeploymentListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'BuildSid': _.get(opts, 'buildSid')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DeploymentInstance(this._version, payload, this._solution.serviceSid, this._solution.environmentSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a deployment\n   *\n   * @function get\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList#\n   *\n   * @param {string} sid - The SID that identifies the Deployment resource to fetch\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  DeploymentListInstance.get = function get(sid) {\n    return new DeploymentContext(this._version, this._solution.serviceSid, this._solution.environmentSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  DeploymentListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  DeploymentListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return DeploymentListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DeploymentPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DeploymentSolution} solution - Path solution\n *\n * @returns DeploymentPage\n */\n\n/* jshint ignore:end */\n\n\nDeploymentPage = function DeploymentPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(DeploymentPage.prototype, Page.prototype);\n\nDeploymentPage.prototype.constructor = DeploymentPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of DeploymentInstance\n *\n * @function getInstance\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentPage#\n *\n * @param {DeploymentPayload} payload - Payload response from the API\n *\n * @returns DeploymentInstance\n */\n\n/* jshint ignore:end */\n\nDeploymentPage.prototype.getInstance = function getInstance(payload) {\n  return new DeploymentInstance(this._version, payload, this._solution.serviceSid, this._solution.environmentSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nDeploymentPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nDeploymentPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DeploymentContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentInstance\n *\n * @property {string} sid -\n *          The unique string that identifies the Deployment resource\n * @property {string} accountSid -\n *          The SID of the Account that created the Deployment resource\n * @property {string} serviceSid -\n *          The SID of the Service that the Deployment resource is associated with\n * @property {string} environmentSid -\n *          The SID of the Environment for the Deployment\n * @property {string} buildSid - The SID of the Build for the deployment\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the Deployment resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the Deployment resource was last updated\n * @property {string} url - The absolute URL of the Deployment resource\n *\n * @param {V1} version - Version of the resource\n * @param {DeploymentPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the Deployment resource is associated with\n * @param {sid} environmentSid - The SID of the Environment for the Deployment\n * @param {sid} sid - The SID that identifies the Deployment resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nDeploymentInstance = function DeploymentInstance(version, payload, serviceSid, environmentSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.environmentSid = payload.environment_sid; // jshint ignore:line\n\n  this.buildSid = payload.build_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    environmentSid: environmentSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(DeploymentInstance.prototype, '_proxy', {\n  get: function get() {\n    if (!this._context) {\n      this._context = new DeploymentContext(this._version, this._solution.serviceSid, this._solution.environmentSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a DeploymentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n\n/* jshint ignore:end */\n\nDeploymentInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nDeploymentInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nDeploymentInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DeploymentContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid -\n *          The SID of the Service to fetch the Deployment resource from\n * @param {sid} environmentSid -\n *          The SID of the Environment used by the Deployment to fetch\n * @param {sid} sid - The SID that identifies the Deployment resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nDeploymentContext = function DeploymentContext(version, serviceSid, environmentSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    environmentSid: environmentSid,\n    sid: sid\n  };\n  this._uri = \"/Services/\".concat(serviceSid, \"/Environments/\").concat(environmentSid, \"/Deployments/\").concat(sid);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a DeploymentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n\n/* jshint ignore:end */\n\n\nDeploymentContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new DeploymentInstance(this._version, payload, this._solution.serviceSid, this._solution.environmentSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nDeploymentContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nDeploymentContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  DeploymentList: DeploymentList,\n  DeploymentPage: DeploymentPage,\n  DeploymentInstance: DeploymentInstance,\n  DeploymentContext: DeploymentContext\n};","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio/lib/rest/serverless/v1/service/environment/deployment.js"],"names":["Q","require","_","util","Page","deserialize","values","DeploymentList","DeploymentPage","DeploymentInstance","DeploymentContext","version","serviceSid","environmentSid","DeploymentListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","pageLimit","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","environment_sid","buildSid","build_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar DeploymentList;\nvar DeploymentPage;\nvar DeploymentInstance;\nvar DeploymentContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the DeploymentList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList\n *\n * @param {Twilio.Serverless.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the Deployment resource is associated with\n * @param {string} environmentSid - The SID of the Environment for the Deployment\n */\n/* jshint ignore:end */\nDeploymentList = function DeploymentList(version, serviceSid, environmentSid) {\n  /* jshint ignore:start */\n  /**\n   * @function deployments\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentContext}\n   */\n  /* jshint ignore:end */\n  function DeploymentListInstance(sid) {\n    return DeploymentListInstance.get(sid);\n  }\n\n  DeploymentListInstance._version = version;\n  // Path Solution\n  DeploymentListInstance._solution = {serviceSid: serviceSid, environmentSid: environmentSid};\n  DeploymentListInstance._uri = `/Services/${serviceSid}/Environments/${environmentSid}/Deployments`;\n  /* jshint ignore:start */\n  /**\n   * Streams DeploymentInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if ((limits.pageLimit && limits.pageLimit <= currentPage)) {\n          onComplete();\n        } else if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists DeploymentInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of DeploymentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DeploymentPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of DeploymentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DeploymentPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a DeploymentInstance\n   *\n   * @function create\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.buildSid] - The SID of the Build for the Deployment\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed DeploymentInstance\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({'BuildSid': _.get(opts, 'buildSid')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DeploymentInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.environmentSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a deployment\n   *\n   * @function get\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList#\n   *\n   * @param {string} sid - The SID that identifies the Deployment resource to fetch\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentContext}\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.get = function get(sid) {\n    return new DeploymentContext(\n      this._version,\n      this._solution.serviceSid,\n      this._solution.environmentSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  DeploymentListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  DeploymentListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return DeploymentListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DeploymentPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DeploymentSolution} solution - Path solution\n *\n * @returns DeploymentPage\n */\n/* jshint ignore:end */\nDeploymentPage = function DeploymentPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(DeploymentPage.prototype, Page.prototype);\nDeploymentPage.prototype.constructor = DeploymentPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of DeploymentInstance\n *\n * @function getInstance\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentPage#\n *\n * @param {DeploymentPayload} payload - Payload response from the API\n *\n * @returns DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentPage.prototype.getInstance = function getInstance(payload) {\n  return new DeploymentInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.environmentSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeploymentPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nDeploymentPage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DeploymentContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentInstance\n *\n * @property {string} sid -\n *          The unique string that identifies the Deployment resource\n * @property {string} accountSid -\n *          The SID of the Account that created the Deployment resource\n * @property {string} serviceSid -\n *          The SID of the Service that the Deployment resource is associated with\n * @property {string} environmentSid -\n *          The SID of the Environment for the Deployment\n * @property {string} buildSid - The SID of the Build for the deployment\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the Deployment resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the Deployment resource was last updated\n * @property {string} url - The absolute URL of the Deployment resource\n *\n * @param {V1} version - Version of the resource\n * @param {DeploymentPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the Deployment resource is associated with\n * @param {sid} environmentSid - The SID of the Environment for the Deployment\n * @param {sid} sid - The SID that identifies the Deployment resource to fetch\n */\n/* jshint ignore:end */\nDeploymentInstance = function DeploymentInstance(version, payload, serviceSid,\n                                                  environmentSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.environmentSid = payload.environment_sid; // jshint ignore:line\n  this.buildSid = payload.build_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, environmentSid: environmentSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(DeploymentInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new DeploymentContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.environmentSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a DeploymentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeploymentInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nDeploymentInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DeploymentContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid -\n *          The SID of the Service to fetch the Deployment resource from\n * @param {sid} environmentSid -\n *          The SID of the Environment used by the Deployment to fetch\n * @param {sid} sid - The SID that identifies the Deployment resource to fetch\n */\n/* jshint ignore:end */\nDeploymentContext = function DeploymentContext(version, serviceSid,\n                                                environmentSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, environmentSid: environmentSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Environments/${environmentSid}/Deployments/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a DeploymentInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeploymentInstance\n */\n/* jshint ignore:end */\nDeploymentContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new DeploymentInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.environmentSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.DeploymentContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeploymentContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nDeploymentContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  DeploymentList: DeploymentList,\n  DeploymentPage: DeploymentPage,\n  DeploymentInstance: DeploymentInstance,\n  DeploymentContext: DeploymentContext\n};\n"]},"metadata":{},"sourceType":"script"}
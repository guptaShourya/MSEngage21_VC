{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { scatterImpl } from './Scatter_impl';\nexport function scatterNd(args) {\n  const inputs = args.inputs,\n        backend = args.backend,\n        attrs = args.attrs;\n  const indices = inputs.indices,\n        updates = inputs.updates;\n  const shape = attrs.shape;\n\n  const _backend_util$calcula = backend_util.calculateShapes(updates, indices, shape),\n        sliceRank = _backend_util$calcula.sliceRank,\n        numUpdates = _backend_util$calcula.numUpdates,\n        sliceSize = _backend_util$calcula.sliceSize,\n        strides = _backend_util$calcula.strides,\n        outputSize = _backend_util$calcula.outputSize;\n\n  const sumDupeIndices = true;\n  const indicesBuf = backend.bufferSync(indices);\n  const updatesBuf = backend.bufferSync(updates);\n  const outBuf = scatterImpl(indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, 0\n  /* defaultValue */\n  , sumDupeIndices);\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\nexport const scatterNdConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd\n};","map":{"version":3,"sources":["../../src/kernels/ScatterNd.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAgD,SAAhD,QAA6G,uBAA7G;AAGA,SAAQ,WAAR,QAA0B,gBAA1B;AAEA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAIL;AAAA,QACQ,MADR,GACkC,IADlC,CACQ,MADR;AAAA,QACgB,OADhB,GACkC,IADlC,CACgB,OADhB;AAAA,QACyB,KADzB,GACkC,IADlC,CACyB,KADzB;AAAA,QAEQ,OAFR,GAE4B,MAF5B,CAEQ,OAFR;AAAA,QAEiB,OAFjB,GAE4B,MAF5B,CAEiB,OAFjB;AAAA,QAGQ,KAHR,GAGiB,KAHjB,CAGQ,KAHR;;AAAA,gCAMK,YAAY,CAAC,eAAb,CAA6B,OAA7B,EAAsC,OAAtC,EAA+C,KAA/C,CANL;AAAA,QAKQ,SALR,yBAKQ,SALR;AAAA,QAKmB,UALnB,yBAKmB,UALnB;AAAA,QAK+B,SAL/B,yBAK+B,SAL/B;AAAA,QAK0C,OAL1C,yBAK0C,OAL1C;AAAA,QAKmD,UALnD,yBAKmD,UALnD;;AAOC,QAAM,cAAc,GAAG,IAAvB;AAEA,QAAM,UAAU,GAAG,OAAO,CAAC,UAAR,CAAmB,OAAnB,CAAnB;AACA,QAAM,UAAU,GAAG,OAAO,CAAC,UAAR,CAAmB,OAAnB,CAAnB;AAEA,QAAM,MAAM,GAAG,WAAW,CACtB,UADsB,EACV,UADU,EACE,KADF,EACS,UADT,EACqB,SADrB,EACgC,UADhC,EAEtB,SAFsB,EAEX,OAFW,EAEF;AAAE;AAFA,IAEoB,cAFpB,CAA1B;AAIA,SAAO,OAAO,CAAC,cAAR,CAAuB,KAAvB,EAA8B,MAAM,CAAC,KAArC,EAA4C,MAAM,CAAC,MAAnD,CAAP;AACD;AAED,OAAO,MAAM,eAAe,GAAiB;AAC3C,EAAA,UAAU,EAAE,SAD+B;AAE3C,EAAA,WAAW,EAAE,KAF8B;AAG3C,EAAA,UAAU,EAAE;AAH+B,CAAtC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync(indices);\n  const updatesBuf = backend.bufferSync(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
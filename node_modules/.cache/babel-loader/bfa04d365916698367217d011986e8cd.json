{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/RoomHeader.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport CallEndIcon from '@material-ui/icons/CallEndTwoTone';\nimport MicIcon from '@material-ui/icons/MicTwoTone';\nimport MicOffIcon from '@material-ui/icons/MicOffTwoTone';\nimport GroupAddIcon from '@material-ui/icons/GroupAddTwoTone';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport ScreenShareTwoToneIcon from '@material-ui/icons/ScreenShareTwoTone';\nimport CancelPresentationTwoToneIcon from '@material-ui/icons/CancelPresentationTwoTone';\nimport TextChat from './TextChat';\nimport Blur from './Blur';\nimport switchOnOff from './ToggleMedia';\nimport CameraButton from './CameraButton';\n\nvar RoomHeader = function RoomHeader(_ref) {\n  _s();\n\n  var handleLogout = _ref.handleLogout,\n      room = _ref.room,\n      roomName = _ref.roomName,\n      test = _ref.test;\n\n  // state variables - used to swtich microphone and camera on/off\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isMic = _useState2[0],\n      setIsMic = _useState2[1]; // state variable - to open/close dialog box\n\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isOpen = _useState4[0],\n      setOpen = _useState4[1]; // state variable - to toggle screen share\n\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isScreenShared = _useState6[0],\n      setIsScreenShared = _useState6[1];\n\n  var screenTrack; // methods - open / close the dialog box\n\n  var handleOpen = function handleOpen() {\n    setOpen(true);\n  };\n\n  var handleClose = function handleClose() {\n    setOpen(false);\n  }; // method - copy text (roomName) to clipboard and close the dialog box\n\n\n  var copyText = function copyText() {\n    navigator.clipboard.writeText(roomName);\n    setOpen(false);\n  }; // removes any existing screen share\n\n\n  var removeAllChildren = function removeAllChildren() {\n    var screen_tag = document.getElementById('screen');\n\n    while (screen_tag.lastElementChild) {\n      screen_tag.removeChild(screen_tag.lastElementChild);\n    }\n  }; // publishes screen to all participants\n\n\n  room.on(\"trackSubscribed\", function (track) {\n    if (track.name === 'screen_5139') {\n      removeAllChildren();\n      var screen_tag = document.getElementById('screen');\n      screen_tag.appendChild(track.attach());\n    }\n  }); // unpublishes screen from all participants\n\n  room.on(\"trackUnsubscribed\", function (track) {\n    if (track.name === 'screen_5139') {\n      removeAllChildren();\n    }\n  }); // method - enables/disables screen sharing\n\n  var handleShareScreen = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _require, LocalVideoTrack, stream;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (isScreenShared) {\n                _context.next = 9;\n                break;\n              }\n\n              _require = require('twilio-video'), LocalVideoTrack = _require.LocalVideoTrack;\n              _context.next = 4;\n              return navigator.mediaDevices.getDisplayMedia();\n\n            case 4:\n              stream = _context.sent;\n              // open prompt to select the screen to share\n              screenTrack = new LocalVideoTrack(stream.getTracks()[0], {\n                name: \"screen_5139\"\n              }); // publish the stream to room\n\n              room.localParticipant.publishTrack(screenTrack).then(function (track) {\n                document.getElementById('screen').appendChild(track.track.attach());\n              });\n              _context.next = 12;\n              break;\n\n            case 9:\n              // select the video track on which screen is present\n              Array.from(room.localParticipant.videoTracks.values()).map(function (publication) {\n                return publication.track;\n              })[1].stop(); // unpublish track\n\n              room.localParticipant.unpublishTrack(Array.from(room.localParticipant.videoTracks.values()).map(function (publication) {\n                return publication.track;\n              })[1]);\n              removeAllChildren();\n\n            case 12:\n              setIsScreenShared(!isScreenShared);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleShareScreen() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"toolbar\",\n    children: [/*#__PURE__*/_jsxDEV(CameraButton, {\n      room: room\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbarDiv\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: switchOnOff(\"Mic\"),\n        children: isMic ? /*#__PURE__*/_jsxDEV(MicIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 20\n        }, _this) : /*#__PURE__*/_jsxDEV(MicOffIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 31\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbarDiv\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        style: {\n          backgroundColor: \"#ff484e\"\n        },\n        children: /*#__PURE__*/_jsxDEV(CallEndIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbarDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleOpen,\n        style: {\n          background: \"#00be5d\"\n        },\n        children: /*#__PURE__*/_jsxDEV(GroupAddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: isOpen,\n        onClose: handleClose,\n        fullWidth: true,\n        maxWidth: \"sm\",\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: \"Invite others to join you\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: [\"Share the room name (\", /*#__PURE__*/_jsxDEV(\"q\", {\n            children: roomName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 68\n          }, _this), \") with others who you wish to invite\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: copyText,\n          autoFocus: true,\n          children: \"Copy room name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbarDiv\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleShareScreen,\n        children: isScreenShared ? /*#__PURE__*/_jsxDEV(CancelPresentationTwoToneIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 29\n        }, _this) : /*#__PURE__*/_jsxDEV(ScreenShareTwoToneIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 62\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(TextChat, {\n      room: room\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(Blur, {\n      participant: room.localParticipant\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 7\n  }, _this);\n};\n\n_s(RoomHeader, \"kIihgv22CpQVky5mwEEPDL2ZXj0=\");\n\n_c = RoomHeader;\nexport default RoomHeader;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoomHeader\");","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/src/RoomHeader.js"],"names":["React","useState","CallEndIcon","MicIcon","MicOffIcon","GroupAddIcon","Dialog","DialogTitle","Button","ScreenShareTwoToneIcon","CancelPresentationTwoToneIcon","TextChat","Blur","switchOnOff","CameraButton","RoomHeader","handleLogout","room","roomName","test","isMic","setIsMic","isOpen","setOpen","isScreenShared","setIsScreenShared","screenTrack","handleOpen","handleClose","copyText","navigator","clipboard","writeText","removeAllChildren","screen_tag","document","getElementById","lastElementChild","removeChild","on","track","name","appendChild","attach","handleShareScreen","require","LocalVideoTrack","mediaDevices","getDisplayMedia","stream","getTracks","localParticipant","publishTrack","then","Array","from","videoTracks","values","map","publication","stop","unpublishTrack","backgroundColor","background","textAlign"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport CallEndIcon from '@material-ui/icons/CallEndTwoTone';\nimport MicIcon from '@material-ui/icons/MicTwoTone';\nimport MicOffIcon from '@material-ui/icons/MicOffTwoTone';\nimport GroupAddIcon from '@material-ui/icons/GroupAddTwoTone';\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Button from '@material-ui/core/Button';\nimport ScreenShareTwoToneIcon from '@material-ui/icons/ScreenShareTwoTone';\nimport CancelPresentationTwoToneIcon from '@material-ui/icons/CancelPresentationTwoTone';\nimport TextChat from './TextChat';\nimport Blur from './Blur';\nimport switchOnOff from './ToggleMedia';\nimport CameraButton from './CameraButton';\n\nconst RoomHeader = ({handleLogout, room, roomName, test}) => {\n\n    // state variables - used to swtich microphone and camera on/off\n    const [isMic, setIsMic] = useState(true);\n\n    // state variable - to open/close dialog box\n    const [isOpen, setOpen] = useState(false); \n\n    // state variable - to toggle screen share\n    const [isScreenShared, setIsScreenShared] = useState(false);\n    var screenTrack;\n\n    // methods - open / close the dialog box\n    const handleOpen = () => {\n      setOpen(true);\n    }\n    const handleClose = () =>{\n      setOpen(false);\n    }\n\n    // method - copy text (roomName) to clipboard and close the dialog box\n    const copyText = () => {\n      navigator.clipboard.writeText(roomName);\n      setOpen(false);\n    };\n\n    // removes any existing screen share\n    const removeAllChildren = () => {\n      let screen_tag = document.getElementById('screen');\n        while(screen_tag.lastElementChild){\n          screen_tag.removeChild(screen_tag.lastElementChild);\n        }\n    }\n\n    // publishes screen to all participants\n    room.on(\"trackSubscribed\", (track)=>{\n      if(track.name === 'screen_5139'){\n        removeAllChildren();\n        let screen_tag = document.getElementById('screen')\n        screen_tag.appendChild(track.attach());\n      }\n    });\n\n    // unpublishes screen from all participants\n    room.on(\"trackUnsubscribed\", (track)=>{\n      if(track.name === 'screen_5139'){\n        removeAllChildren();\n      }\n    });\n\n    // method - enables/disables screen sharing\n    const handleShareScreen = async () => {\n    if(!isScreenShared){\n      const { LocalVideoTrack } = require('twilio-video');\n      const stream = await navigator.mediaDevices.getDisplayMedia(); // open prompt to select the screen to share\n      screenTrack = new LocalVideoTrack(stream.getTracks()[0], {name : \"screen_5139\"});\n      // publish the stream to room\n      room.localParticipant.publishTrack(screenTrack).then((track)=>{\n        document.getElementById('screen').appendChild(track.track.attach());\n      });\n    }else{\n      // select the video track on which screen is present\n      Array.from(room.localParticipant.videoTracks.values()).map(publication => publication.track)[1].stop();\n      // unpublish track\n      room.localParticipant.unpublishTrack(Array.from(room.localParticipant.videoTracks.values())\n      .map(publication => publication.track)[1]);\n\n      removeAllChildren();\n    }\n    setIsScreenShared(!isScreenShared);\n  }\n  \n    return(\n      <div id = \"toolbar\">\n\n        {/* Camera button */}\n        <CameraButton room = {room}/>\n        \n        {/* microphone icon */}\n        <div className = 'toolbarDiv'>\n          <button onClick = {switchOnOff(\"Mic\")}>\n            {isMic?<MicIcon/>:<MicOffIcon/>}\n          </button>\n        </div>\n\n        {/* End call icon */}\n        <div className = 'toolbarDiv'>\n          <button onClick = {handleLogout} style = {{backgroundColor:\"#ff484e\"}}>\n            <CallEndIcon/>\n          </button>\n        </div>\n\n        {/* Add others icon */}\n          <div className = 'toolbarDiv'>\n            <button onClick = {handleOpen} style = {{background: \"#00be5d\"}}>\n              <GroupAddIcon/>\n            </button>\n\n          {/* Dialog box */}\n          <Dialog open = {isOpen} onClose = {handleClose} fullWidth = {true} maxWidth = {\"sm\"}>\n          <DialogTitle>Invite others to join you</DialogTitle>\n          <p style = {{textAlign : 'center'}}>Share the room name (<q>{roomName}</q>) with others who you wish to invite</p>\n            <Button onClick={copyText} autoFocus>\n\t\t\t        Copy room name\n\t\t        </Button>\n          </Dialog>\n        </div>\n\n        {/* Screen Sharing icon */}\n        <div className = 'toolbarDiv'>\n          <button onClick = {handleShareScreen}>\n            {isScreenShared?<CancelPresentationTwoToneIcon/>:<ScreenShareTwoToneIcon/>}\n          </button>\n        </div>\n        <TextChat room = {room}/>\n        {/* <TextChat></TextChat> */}\n\n        <Blur participant = {room.localParticipant}/>\n      </div>\n  );\n}\nexport default RoomHeader;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transport = void 0;\n\nvar transporterror_1 = require(\"./transporterror\");\n\nvar XHR = global['XMLHttpRequest'] || require('xmlhttprequest').XMLHttpRequest;\n\nfunction parseResponseHeaders(headerString) {\n  if (!headerString) {\n    return {};\n  }\n\n  return headerString.split(\"\\r\\n\").map(function (el) {\n    return el.split(\": \");\n  }).filter(function (el) {\n    return el.length === 2 && el[1].length > 0;\n  }).reduce(function (prev, curr) {\n    prev[curr[0]] = curr[1];\n    return prev;\n  }, {});\n}\n\nfunction extractBody(xhr) {\n  var contentType = xhr.getResponseHeader('Content-Type');\n\n  if (!contentType || contentType.indexOf('application/json') !== 0 || xhr.responseText.length === 0) {\n    return xhr.responseText;\n  }\n\n  try {\n    return JSON.parse(xhr.responseText);\n  } catch (e) {\n    return xhr.responseText;\n  }\n}\n\nfunction adaptHttpResponse(response) {\n  try {\n    response.body = JSON.parse(response.body);\n  } catch (e) {} // eslint-disable-line no-empty\n\n\n  return response;\n}\n/**\n * Provides generic network interface\n */\n\n\nvar Transport = /*#__PURE__*/function () {\n  function Transport() {\n    _classCallCheck(this, Transport);\n  }\n\n  _createClass(Transport, [{\n    key: \"get\",\n\n    /**\n     * Make a GET request by given URL\n     */\n    value: function get(url, headers) {\n      return Transport.request('GET', url, headers);\n    }\n    /**\n     * Make a POST request by given URL\n     */\n\n  }, {\n    key: \"post\",\n    value: function post(url, headers, body) {\n      return Transport.request('POST', url, headers, body);\n    }\n  }], [{\n    key: \"request\",\n    value: function request(method, url, headers, body) {\n      return new Promise(function (resolve, reject) {\n        var xhr = new XHR();\n        xhr.open(method, url, true);\n\n        xhr.onreadystatechange = function onreadystatechange() {\n          if (xhr.readyState !== 4) {\n            return;\n          }\n\n          var headers = parseResponseHeaders(xhr.getAllResponseHeaders());\n          var body = extractBody(xhr);\n\n          if (200 <= xhr.status && xhr.status < 300) {\n            resolve({\n              status: xhr.status,\n              headers: headers,\n              body: body\n            });\n          } else {\n            var status = xhr.statusText && xhr.statusText.code ? xhr.statusText.code : 'NONE';\n            var bodyRepresentation;\n\n            if (typeof body === 'string') {\n              bodyRepresentation = body && body.split('\\n', 2).length === 1 ? body : '';\n            } else {\n              bodyRepresentation = JSON.stringify(body);\n            }\n\n            var message = \"\".concat(xhr.status, \": [\").concat(status, \"] \").concat(bodyRepresentation);\n            reject(new transporterror_1.TransportError(message, xhr.status, body, status, headers));\n          }\n        };\n\n        for (var headerName in headers) {\n          xhr.setRequestHeader(headerName, headers[headerName]);\n\n          if (headerName === 'Content-Type' && headers[headerName] === 'application/json') {\n            body = JSON.stringify(body);\n          }\n        }\n\n        xhr.send(body);\n      });\n    }\n  }]);\n\n  return Transport;\n}();\n\nexports.Transport = Transport;","map":{"version":3,"sources":["/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/twilio-chat/node_modules/twilio-mcs-client/lib/services/transport.js"],"names":["Object","defineProperty","exports","value","Transport","transporterror_1","require","XHR","global","XMLHttpRequest","parseResponseHeaders","headerString","split","map","el","filter","length","reduce","prev","curr","extractBody","xhr","contentType","getResponseHeader","indexOf","responseText","JSON","parse","e","adaptHttpResponse","response","body","url","headers","request","method","Promise","resolve","reject","open","onreadystatechange","readyState","getAllResponseHeaders","status","statusText","code","bodyRepresentation","stringify","message","TransportError","headerName","setRequestHeader","send"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transport = void 0;\nconst transporterror_1 = require(\"./transporterror\");\nconst XHR = global['XMLHttpRequest'] || require('xmlhttprequest').XMLHttpRequest;\nfunction parseResponseHeaders(headerString) {\n    if (!headerString) {\n        return {};\n    }\n    return headerString\n        .split('\\u000d\\u000a')\n        .map(el => el.split('\\u003a\\u0020'))\n        .filter(el => el.length === 2 && el[1].length > 0)\n        .reduce((prev, curr) => {\n        prev[curr[0]] = curr[1];\n        return prev;\n    }, {});\n}\nfunction extractBody(xhr) {\n    const contentType = xhr.getResponseHeader('Content-Type');\n    if (!contentType || contentType.indexOf('application/json') !== 0 || xhr.responseText.length === 0) {\n        return xhr.responseText;\n    }\n    try {\n        return JSON.parse(xhr.responseText);\n    }\n    catch (e) {\n        return xhr.responseText;\n    }\n}\nfunction adaptHttpResponse(response) {\n    try {\n        response.body = JSON.parse(response.body);\n    }\n    catch (e) {\n    } // eslint-disable-line no-empty\n    return response;\n}\n/**\n * Provides generic network interface\n */\nclass Transport {\n    constructor() {\n    }\n    static request(method, url, headers, body) {\n        return new Promise((resolve, reject) => {\n            let xhr = new XHR();\n            xhr.open(method, url, true);\n            xhr.onreadystatechange = function onreadystatechange() {\n                if (xhr.readyState !== 4) {\n                    return;\n                }\n                const headers = parseResponseHeaders(xhr.getAllResponseHeaders());\n                const body = extractBody(xhr);\n                if (200 <= xhr.status && xhr.status < 300) {\n                    resolve({ status: xhr.status, headers, body });\n                }\n                else {\n                    const status = xhr.statusText && xhr.statusText.code ? xhr.statusText.code : 'NONE';\n                    let bodyRepresentation;\n                    if (typeof body === 'string') {\n                        bodyRepresentation = body && body.split('\\n', 2).length === 1\n                            ? body\n                            : '';\n                    }\n                    else {\n                        bodyRepresentation = JSON.stringify(body);\n                    }\n                    const message = `${xhr.status}: [${status}] ${bodyRepresentation}`;\n                    reject(new transporterror_1.TransportError(message, xhr.status, body, status, headers));\n                }\n            };\n            for (let headerName in headers) {\n                xhr.setRequestHeader(headerName, headers[headerName]);\n                if (headerName === 'Content-Type' && headers[headerName] === 'application/json') {\n                    body = JSON.stringify(body);\n                }\n            }\n            xhr.send(body);\n        });\n    }\n    /**\n     * Make a GET request by given URL\n     */\n    get(url, headers) {\n        return Transport.request('GET', url, headers);\n    }\n    /**\n     * Make a POST request by given URL\n     */\n    post(url, headers, body) {\n        return Transport.request('POST', url, headers, body);\n    }\n}\nexports.Transport = Transport;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _slicedToArray from \"/Users/shouryagupta/Desktop/MS Engage 21/MSEngage21_VC/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { prodImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function prod(args) {\n  const inputs = args.inputs,\n        backend = args.backend,\n        attrs = args.attrs;\n  const x = inputs.x;\n  const axis = attrs.axis,\n        keepDims = attrs.keepDims;\n  const xRank = x.shape.length;\n  const toDispose = [];\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n\n  if (permutedAxes != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n  let res;\n\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values;\n\n    const _prodImplCPU = prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes),\n          outVals = _prodImplCPU.outVals,\n          outShape = _prodImplCPU.outShape,\n          outDtype = _prodImplCPU.outDtype;\n\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const _backend_util$compute = backend_util.computeOutAndReduceShapes(permutedX.shape, axes),\n          _backend_util$compute2 = _slicedToArray(_backend_util$compute, 2),\n          outShape = _backend_util$compute2[0],\n          reduceShape = _backend_util$compute2[1];\n\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({\n      inputs: {\n        x: permutedX\n      },\n      backend,\n      attrs: {\n        shape: [-1, inSize]\n      }\n    });\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({\n      inputs: {\n        x: res\n      },\n      backend,\n      attrs: {\n        shape: newShape\n      }\n    });\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\nexport const prodConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod\n};","map":{"version":3,"sources":["../../src/kernels/Prod.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {prodImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendWebGL, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values as TypedArray;\n    const {outVals, outShape, outDtype} =\n        prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({inputs: {x: res}, backend, attrs: {shape: newShape}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return res;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
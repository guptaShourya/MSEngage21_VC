"use strict";

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.Members = void 0;
var events_1 = require("events");
var member_1 = require("../member");
var logger_1 = require("../logger");
var log = logger_1.Logger.scope('Members');
/**
 * @classdesc Represents the collection of members for the channel
 * @fires Members#memberJoined
 * @fires Members#memberLeft
 * @fires Members#memberUpdated
 */

var Members = function (_events_1$EventEmitte) {
    (0, _inherits3.default)(Members, _events_1$EventEmitte);

    function Members(channel, members, links, configuration, services) {
        (0, _classCallCheck3.default)(this, Members);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Members.__proto__ || (0, _getPrototypeOf2.default)(Members)).call(this));

        _this.channel = channel;
        _this.members = members;
        _this.links = links;
        _this.configuration = configuration;
        _this.services = services;
        return _this;
    }

    (0, _createClass3.default)(Members, [{
        key: "unsubscribe",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var entity;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (!this.rosterEntityPromise) {
                                    _context.next = 6;
                                    break;
                                }

                                _context.next = 3;
                                return this.rosterEntityPromise;

                            case 3:
                                entity = _context.sent;

                                entity.close();
                                this.rosterEntityPromise = null;

                            case 6:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function unsubscribe() {
                return _ref.apply(this, arguments);
            }

            return unsubscribe;
        }()
    }, {
        key: "subscribe",
        value: function subscribe(rosterObjectName) {
            var _this2 = this;

            return this.rosterEntityPromise = this.rosterEntityPromise || this.services.syncClient.map({ id: rosterObjectName, mode: 'open_existing' }).then(function (rosterMap) {
                rosterMap.on('itemAdded', function (args) {
                    log.debug(_this2.channel.sid + ' itemAdded: ' + args.item.key);
                    _this2.upsertMember(args.item.key, args.item.data).then(function (member) {
                        _this2.emit('memberJoined', member);
                    });
                });
                rosterMap.on('itemRemoved', function (args) {
                    log.debug(_this2.channel.sid + ' itemRemoved: ' + args.key);
                    var memberSid = args.key;
                    if (!_this2.members.has(memberSid)) {
                        return;
                    }
                    var leftMember = _this2.members.get(memberSid);
                    _this2.members.delete(memberSid);
                    _this2.emit('memberLeft', leftMember);
                });
                rosterMap.on('itemUpdated', function (args) {
                    log.debug(_this2.channel.sid + ' itemUpdated: ' + args.item.key);
                    _this2.upsertMember(args.item.key, args.item.data);
                });
                var membersPromises = [];
                var that = _this2;
                var rosterMapHandler = function rosterMapHandler(paginator) {
                    paginator.items.forEach(function (item) {
                        membersPromises.push(that.upsertMember(item.key, item.data));
                    });
                    return paginator.hasNextPage ? paginator.nextPage().then(rosterMapHandler) : null;
                };
                return rosterMap.getItems().then(rosterMapHandler).then(function () {
                    return _promise2.default.all(membersPromises);
                }).then(function () {
                    return rosterMap;
                });
            }).catch(function (err) {
                _this2.rosterEntityPromise = null;
                if (_this2.services.syncClient.connectionState != 'disconnected') {
                    log.error('Failed to get roster object for channel', _this2.channel.sid, err);
                }
                log.debug('ERROR: Failed to get roster object for channel', _this2.channel.sid, err);
                throw err;
            });
        }
    }, {
        key: "upsertMember",
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(memberSid, data) {
                var _this3 = this;

                var member, links;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                member = this.members.get(memberSid);

                                if (!member) {
                                    _context2.next = 3;
                                    break;
                                }

                                return _context2.abrupt("return", member._update(data));

                            case 3:
                                links = {
                                    self: this.links.participants + "/" + memberSid
                                };

                                member = new member_1.Member(data, memberSid, this.channel, links, this.services);
                                this.members.set(memberSid, member);
                                member.on('updated', function (args) {
                                    return _this3.emit('memberUpdated', args);
                                });
                                return _context2.abrupt("return", member);

                            case 8:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function upsertMember(_x, _x2) {
                return _ref2.apply(this, arguments);
            }

            return upsertMember;
        }()
        /**
         * @returns {Promise<Array<Member>>} returns list of members {@see Member}
         */

    }, {
        key: "getMembers",
        value: function getMembers() {
            var _this4 = this;

            return this.rosterEntityPromise.then(function () {
                var members = [];
                _this4.members.forEach(function (member) {
                    return members.push(member);
                });
                return members;
            });
        }
        /**
         * Get member by SID from channel
         * @returns {Promise<Member>}
         */

    }, {
        key: "getMemberBySid",
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(memberSid) {
                var _this5 = this;

                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                return _context3.abrupt("return", this.rosterEntityPromise.then(function () {
                                    var member = _this5.members.get(memberSid);
                                    if (!member) {
                                        throw new Error('Member with SID ' + memberSid + ' was not found');
                                    }
                                    return member;
                                }));

                            case 1:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function getMemberBySid(_x3) {
                return _ref3.apply(this, arguments);
            }

            return getMemberBySid;
        }()
        /**
         * Get member by identity from channel
         * @returns {Promise<Member>}
         */

    }, {
        key: "getMemberByIdentity",
        value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(identity) {
                var _this6 = this;

                var foundMember;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                foundMember = null;
                                return _context4.abrupt("return", this.rosterEntityPromise.then(function () {
                                    _this6.members.forEach(function (member) {
                                        if (member.identity === identity) {
                                            foundMember = member;
                                        }
                                    });
                                    if (!foundMember) {
                                        throw new Error('Member with identity ' + identity + ' was not found');
                                    }
                                    return foundMember;
                                }));

                            case 2:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function getMemberByIdentity(_x4) {
                return _ref4.apply(this, arguments);
            }

            return getMemberByIdentity;
        }()
        /**
         * Add user to the channel
         * @returns {Promise<any>}
         */

    }, {
        key: "add",
        value: function () {
            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(identity) {
                return _regenerator2.default.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                _context5.next = 2;
                                return this.services.commandExecutor.mutateResource('post', this.links.participants, {
                                    identity: identity
                                });

                            case 2:
                                return _context5.abrupt("return", _context5.sent);

                            case 3:
                            case "end":
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function add(_x5) {
                return _ref5.apply(this, arguments);
            }

            return add;
        }()
        /**
         * Invites user to the channel
         * User can choose either to join or not
         * @returns {Promise<any>}
         */

    }, {
        key: "invite",
        value: function () {
            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(identity) {
                return _regenerator2.default.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                _context6.next = 2;
                                return this.services.commandExecutor.mutateResource('post', this.channel.links.invites, {
                                    identity: identity
                                });

                            case 2:
                                return _context6.abrupt("return", _context6.sent);

                            case 3:
                            case "end":
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));

            function invite(_x6) {
                return _ref6.apply(this, arguments);
            }

            return invite;
        }()
        /**
         * Remove member from channel
         * @returns {Promise<any>}
         */

    }, {
        key: "remove",
        value: function () {
            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(identity) {
                return _regenerator2.default.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                _context7.next = 2;
                                return this.services.commandExecutor.mutateResource('delete', this.links.participants + "/" + identity);

                            case 2:
                                return _context7.abrupt("return", _context7.sent);

                            case 3:
                            case "end":
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));

            function remove(_x7) {
                return _ref7.apply(this, arguments);
            }

            return remove;
        }()
    }]);
    return Members;
}(events_1.EventEmitter);

exports.Members = Members;
/**
 * Fired when member joined channel
 * @event Members#memberJoined
 * @type {Member}
 */
/**
 * Fired when member left channel
 * @event Members#memberLeft
 * @type {Member}
 */
/**
 * Fired when member updated
 * @event Members#memberUpdated
 * @type {Object}
 * @property {Member} member - Updated Member
 * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons
 */
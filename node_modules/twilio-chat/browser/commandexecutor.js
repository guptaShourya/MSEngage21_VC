"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _entries = require("babel-runtime/core-js/object/entries");

var _entries2 = _interopRequireDefault(_entries);

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandExecutor = void 0;
var uuid_1 = require("uuid");
var operation_retrier_1 = require("operation-retrier");
var trimSlashes = function trimSlashes(url) {
    return url.replace(/(^\/+|\/+$)/g, '');
};
var isMutationConflictResponse = function isMutationConflictResponse(response) {
    return response.status.code === 202;
};

var CommandExecutor = function () {
    function CommandExecutor(_serviceUrl, _services, _productId) {
        (0, _classCallCheck3.default)(this, CommandExecutor);

        this._serviceUrl = _serviceUrl;
        this._services = _services;
        this._productId = _productId;
    }

    (0, _createClass3.default)(CommandExecutor, [{
        key: "_preProcessUrl",
        value: function _preProcessUrl(url) {
            var trimmedUrl = trimSlashes(url);
            if (/^https?:\/\//.test(url)) {
                return trimmedUrl;
            }
            return trimSlashes(this._serviceUrl) + "/" + trimmedUrl;
        }
    }, {
        key: "_makeRequest",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(method, url, requestBody, headers) {
                var preProcessedUrl, finalHeaders, response, getUrl;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                preProcessedUrl = this._preProcessUrl(url);
                                finalHeaders = (0, _assign2.default)({ 'Content-Type': 'application/json; charset=utf-8' }, headers || {});
                                response = void 0;
                                _context.t0 = method;
                                _context.next = _context.t0 === 'get' ? 6 : _context.t0 === 'post' ? 12 : _context.t0 === 'delete' ? 16 : 20;
                                break;

                            case 6:
                                getUrl = preProcessedUrl;

                                if (requestBody) {
                                    getUrl += '?' + (0, _entries2.default)(requestBody).map(function (entry) {
                                        return entry.map(encodeURIComponent).join('=');
                                    }).join('&');
                                }
                                _context.next = 10;
                                return this._services.transport.get(getUrl, finalHeaders, this._productId);

                            case 10:
                                response = _context.sent;
                                return _context.abrupt("break", 20);

                            case 12:
                                _context.next = 14;
                                return this._services.transport.post(preProcessedUrl, finalHeaders, (0, _stringify2.default)(requestBody), this._productId);

                            case 14:
                                response = _context.sent;
                                return _context.abrupt("break", 20);

                            case 16:
                                _context.next = 18;
                                return this._services.transport.delete(preProcessedUrl, finalHeaders, this._productId);

                            case 18:
                                response = _context.sent;
                                return _context.abrupt("break", 20);

                            case 20:
                                if (!(response.status.code < 200 || response.status.code >= 300)) {
                                    _context.next = 22;
                                    break;
                                }

                                throw new Error("Request responded with a non-success code " + response.status.code);

                            case 22:
                                return _context.abrupt("return", response);

                            case 23:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function _makeRequest(_x, _x2, _x3, _x4) {
                return _ref.apply(this, arguments);
            }

            return _makeRequest;
        }()
    }, {
        key: "fetchResource",
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(url, requestBody) {
                var _this = this;

                var maxAttemptsCount, result;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                maxAttemptsCount = 6;
                                result = void 0;
                                _context2.prev = 2;
                                _context2.next = 5;
                                return new operation_retrier_1.Retrier({ min: 50, max: 1600, maxAttemptsCount: maxAttemptsCount }).run(function () {
                                    return _this._makeRequest('get', url, requestBody);
                                });

                            case 5:
                                result = _context2.sent;
                                _context2.next = 11;
                                break;

                            case 8:
                                _context2.prev = 8;
                                _context2.t0 = _context2["catch"](2);
                                throw new Error("Fetch resource from \"" + url + "\" failed.");

                            case 11:
                                return _context2.abrupt("return", result.body);

                            case 12:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this, [[2, 8]]);
            }));

            function fetchResource(_x5, _x6) {
                return _ref2.apply(this, arguments);
            }

            return fetchResource;
        }()
    }, {
        key: "mutateResource",
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(method, url, requestBody) {
                var result;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return this._makeRequest(method, url, requestBody, {
                                    'X-Twilio-Mutation-Id': uuid_1.v4()
                                });

                            case 2:
                                result = _context3.sent;

                                if (!isMutationConflictResponse(result)) {
                                    _context3.next = 7;
                                    break;
                                }

                                _context3.next = 6;
                                return this.fetchResource(result.body.resource_url);

                            case 6:
                                return _context3.abrupt("return", _context3.sent);

                            case 7:
                                return _context3.abrupt("return", result.body);

                            case 8:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function mutateResource(_x7, _x8, _x9) {
                return _ref3.apply(this, arguments);
            }

            return mutateResource;
        }()
    }]);
    return CommandExecutor;
}();

exports.CommandExecutor = CommandExecutor;
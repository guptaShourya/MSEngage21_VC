{"version":3,"file":"browser.js","sources":["../node_modules/tslib/tslib.es6.js","../src/logger.ts","../src/configuration.ts","../src/services/network.ts","../src/interfaces/notificationtypes.ts","../src/util/index.ts","../src/restpaginator.ts","../src/synclistdescriptor.ts","../src/synclist.ts","../src/interfaces/responsecodes.ts","../src/sessionerror.ts","../src/util/deferred.ts","../src/session.ts","../src/participant.ts","../src/data/participants.ts","../src/media.ts","../src/aggregateddeliveryreceipt.ts","../src/detaileddeliveryreceipt.ts","../src/message.ts","../src/data/messages.ts","../src/conversation.ts","../src/data/conversations.ts","../src/user.ts","../src/data/users.ts","../src/services/typingindicator.ts","../src/services/readhorizon.ts","../src/pushnotification.ts","../src/client.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || from);\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import * as loglevelLog from 'loglevel';\n\nfunction prepareLine(prefix, args) {\n  return [`${new Date().toISOString()} Conversations ${prefix}:`].concat(Array.from(args));\n}\n\nconst log: loglevelLog.Logger = loglevelLog.getLogger('twilio-conversations'); // twilio-conversations is used by Flex SDK. Please DO NOT change\n\nclass Logger {\n  private prefix: string = '';\n\n  private constructor(prefix: string) {\n    this.prefix = prefix !== null && prefix !== undefined && prefix.length > 0\n      ? prefix + ' '\n      : '';\n  }\n\n  static scope(prefix: string): Logger {\n    return new Logger(prefix);\n  }\n\n  setLevel(level: any) {\n    log.setLevel(level);\n  }\n\n  static setLevel(level: any) {\n    log.setLevel(level);\n  }\n\n  trace(...args) { log.trace.apply(null, prepareLine(this.prefix + 'T', args)); }\n\n  debug(...args) { log.debug.apply(null, prepareLine(this.prefix + 'D', args)); }\n\n  info(...args) { log.info.apply(null, prepareLine(this.prefix + 'I', args)); }\n\n  warn(...args) { log.warn.apply(null, prepareLine(this.prefix + 'W', args)); }\n\n  error(...args) { log.error.apply(null, prepareLine(this.prefix + 'E', args)); }\n\n  static trace(...args) { log.trace.apply(null, prepareLine('T', args)); }\n\n  static debug(...args) { log.debug.apply(null, prepareLine('D', args)); }\n\n  static info(...args) { log.info.apply(null, prepareLine('I', args)); }\n\n  static warn(...args) { log.warn.apply(null, prepareLine('W', args)); }\n\n  static error(...args) { log.error.apply(null, prepareLine('E', args)); }\n\n}\n\nexport { Logger };\n","const TYPING_PATH = '/v1/typing';\nconst TYPING_TIMEOUT = 5;\nconst HTTP_CACHE_LIFETIME = 'PT5S';\nconst CONSUMPTION_HORIZON_SENDING_INTERVAL = 'PT5S';\nconst USER_INFOS_TO_SUBSCRIBE = 100;\n\nconst MINIMUM_RETRY_DELAY = 1000;\nconst MAXIMUM_RETRY_DELAY = 4000;\nconst MAXIMUM_ATTEMPTS_COUNT = 3;\nconst RETRY_WHEN_THROTTLED = true;\n\nclass Configuration {\n  token: string;\n  public readonly typingIndicatorTimeoutOverride?: number;\n  public readonly httpCacheIntervalOverride?: string;\n  public readonly consumptionReportIntervalOverride?: number;\n  public readonly userInfosToSubscribeOverride?: number;\n  public readonly retryWhenThrottledOverride?: boolean;\n  public readonly backoffConfigOverride?: any;\n  public readonly typingIndicatorUri: string;\n  public readonly productId: string;\n  private baseUrl: string;\n  private region: string;\n\n  constructor(options: any) {\n    options = options || {};\n    let constructorOptions = options.Chat || options.IPMessaging || options || {};\n    this.region = constructorOptions.region || options.region;\n    this.baseUrl = constructorOptions.apiUri || constructorOptions.typingUri ||\n      ((!this.region || this.region === 'us1') ? 'https://aim.twilio.com' : `https://aim.${this.region}.twilio.com`);\n    this.typingIndicatorUri = this.baseUrl + TYPING_PATH;\n    this.typingIndicatorTimeoutOverride = constructorOptions.typingIndicatorTimeoutOverride;\n    this.httpCacheIntervalOverride = constructorOptions.httpCacheIntervalOverride;\n    this.consumptionReportIntervalOverride = constructorOptions.consumptionReportIntervalOverride;\n    this.userInfosToSubscribeOverride = constructorOptions.userInfosToSubscribeOverride;\n    this.retryWhenThrottledOverride = constructorOptions.retryWhenThrottledOverride;\n    this.backoffConfigOverride = constructorOptions.backoffConfigOverride;\n    this.productId = options.productId;\n  }\n\n  public get typingIndicatorTimeoutDefault(): number { return TYPING_TIMEOUT * 1000; }\n\n  public get httpCacheIntervalDefault(): string { return HTTP_CACHE_LIFETIME; }\n\n  public get consumptionReportIntervalDefault(): string { return CONSUMPTION_HORIZON_SENDING_INTERVAL; }\n\n  public get userInfosToSubscribeDefault(): number { return USER_INFOS_TO_SUBSCRIBE; }\n\n  public get retryWhenThrottledDefault(): boolean { return RETRY_WHEN_THROTTLED; }\n\n  public get backoffConfigDefault(): any {\n    return {\n      min: MINIMUM_RETRY_DELAY,\n      max: MAXIMUM_RETRY_DELAY,\n      maxAttemptsCount: MAXIMUM_ATTEMPTS_COUNT\n    };\n  }\n}\n\nexport { Configuration };\n","import { Retrier } from 'operation-retrier';\nimport { Session } from '../session';\nimport { Transport } from '../interfaces/transport';\n\ninterface CacheEntry {\n  response: Object;\n  timestamp: number;\n}\n\nexport interface NetworkServices {\n  session: Session;\n  transport: Transport;\n}\n\nclass Network {\n  private readonly config: any;\n  private readonly services: NetworkServices;\n  private cacheLifetime: number;\n\n  private readonly cache: Map<string, CacheEntry>;\n  private timer: any;\n\n  constructor(config, services) {\n    this.config = config;\n    this.services = services;\n    this.cache = new Map<string, CacheEntry>();\n    this.cacheLifetime = 0;\n    this.services.session.getHttpCacheInterval().then(seconds => {\n      this.cacheLifetime = seconds * 1000;\n      this.cleanupCache();\n    });\n  }\n\n  private backoffConfig() {\n    return Object.assign(this.config.backoffConfigDefault, this.config.backoffConfigOverride);\n  }\n\n  private retryWhenThrottled(): boolean {\n    if (typeof this.config.retryWhenThrottledOverride !== 'undefined') { return this.config.retryWhenThrottledOverride; }\n    if (typeof this.config.retryWhenThrottledDefault !== 'undefined') { return this.config.retryWhenThrottledDefault; }\n    return false;\n  }\n\n  private isExpired(timestamp: number): boolean {\n    return !this.cacheLifetime || (Date.now() - timestamp) > this.cacheLifetime;\n  }\n\n  private cleanupCache() {\n    for (let [k, v] of this.cache) {\n      if (this.isExpired(v.timestamp)) {\n        this.cache.delete(k);\n      }\n    }\n\n    if (this.cache.size === 0) {\n      clearInterval(this.timer);\n    }\n  }\n\n  pokeTimer() {\n    this.timer = this.timer || setInterval(() => this.cleanupCache(), this.cacheLifetime * 2);\n  }\n\n  private executeWithRetry(request, retryWhenThrottled = false): Promise<any> {\n    return new Promise((resolve, reject) => {\n      let codesToRetryOn = [502, 503, 504];\n      if (retryWhenThrottled) {\n        codesToRetryOn.push(429);\n      }\n\n      let retrier = new Retrier(this.backoffConfig());\n      retrier.on('attempt', () => {\n        request()\n          .then(result => retrier.succeeded(result))\n          .catch(err => {\n            if (codesToRetryOn.indexOf(err.status) > -1) {\n              retrier.failed(err);\n            } else if (err.message === 'Twilsock disconnected') {\n              // Ugly hack. We must make a proper exceptions for twilsock\n              retrier.failed(err);\n            } else {\n              // Fatal error\n              retrier.removeAllListeners();\n              retrier.cancel();\n              reject(err);\n            }\n          });\n      });\n\n      retrier.on('succeeded', result => { resolve(result); });\n      retrier.on('cancelled', err => reject(err));\n      retrier.on('failed', err => reject(err));\n\n      retrier.start();\n    });\n  }\n\n  async get(url: string) {\n    let cacheEntry = this.cache.get(url);\n    if (cacheEntry && !this.isExpired(cacheEntry.timestamp)) {\n      return cacheEntry.response;\n    }\n\n    const headers = {};\n    let response = await this.executeWithRetry(\n      () => this.services.transport.get(url, headers, this.config.productId), this.retryWhenThrottled());\n    this.cache.set(url, { response, timestamp: Date.now() });\n    this.pokeTimer();\n    return response;\n  }\n}\n\nexport { Network };\n","class NotificationTypes {\n  static readonly TYPING_INDICATOR = 'twilio.ipmsg.typing_indicator';\n  static readonly NEW_MESSAGE = 'twilio.conversations.new_message';\n  static readonly ADDED_TO_CONVERSATION = 'twilio.conversations.added_to_conversation';\n  // static readonly INVITED_TO_CHANNEL = 'twilio.channel.invited_to_channel';\n  static readonly REMOVED_FROM_CONVERSATION = 'twilio.conversations.removed_from_conversation';\n  static readonly CONSUMPTION_UPDATE = 'twilio.channel.consumption_update';\n}\n\nexport { NotificationTypes };","import * as JsonDiff from 'rfc6902';\nimport { Logger } from '../logger';\n\n/**\n * Checks if objects are equal\n */\nfunction isDeepEqual(o1: Object, o2: Object): boolean {\n  return JsonDiff.createPatch(o1, o2).length === 0;\n}\n\n/**\n * Deep-clone an object. Note that this does not work on object containing\n * functions.\n * @param {object} obj - the object to deep-clone\n * @returns {object}\n */\nfunction deepClone<T>(obj: T): T {\n  return JSON.parse(JSON.stringify(obj)) as T;\n}\n\nfunction parseToNumber(value) {\n  if (typeof value !== 'undefined' && !isNaN(Number(value))) {\n    return Number(value);\n  }\n  return null;\n}\n\n// timeString cannot be typed `string` because in member.ts\n// call to parseTime(data.lastReadTimestamp) uses number not a string for timestamp.\nfunction parseTime(timeString): Date {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction parseAttributes(rawAttributes, warningMessage: string, log: Logger): Object {\n  let attributes = {};\n  if (rawAttributes) {\n    try {\n      attributes = JSON.parse(rawAttributes);\n    } catch (e) {\n      log.warn(warningMessage, e);\n    }\n  }\n\n  return attributes;\n}\n\n/**\n * Construct URI with query parameters\n */\nclass UriBuilder {\n  private base: string;\n  private args: string[];\n  private paths: string[];\n\n  constructor(base: string) {\n    this.base = base.replace(/\\/$/, '');\n    this.args = [];\n    this.paths = [];\n  }\n\n  public arg(name: string, value: any): UriBuilder {\n    if (typeof value !== 'undefined') {\n      this.args.push(encodeURIComponent(name) + '=' + encodeURIComponent(value));\n    }\n    return this;\n  }\n\n  public path(name: string): UriBuilder {\n    this.paths.push(encodeURIComponent(name));\n    return this;\n  }\n\n  public build(): string {\n    let result = this.base;\n    if (this.paths.length) {\n      result += '/' + this.paths.join('/');\n    }\n\n    if (this.args.length) {\n      result += '?' + this.args.join('&');\n    }\n    return result;\n  }\n}\n\nexport { isDeepEqual, deepClone, UriBuilder, parseToNumber, parseTime, parseAttributes };\n","'use strict';\nimport { Paginator } from './interfaces/paginator';\n\ninterface PaginatorState {\n  source: any;\n  nextToken: any;\n  prevToken: any;\n  items: any;\n}\n\n/**\n * @class Paginator\n * @classdesc Pagination helper class\n *\n * @property {Array} items Array of elements on current page\n * @property {boolean} hasNextPage Indicates the existence of next page\n * @property {boolean} hasPrevPage Indicates the existence of previous page\n */\nclass RestPaginator<T> implements Paginator<T> {\n  private state: PaginatorState;\n\n  public get hasNextPage(): boolean { return !!this.state.nextToken; }\n\n  public get hasPrevPage(): boolean { return !!this.state.prevToken; }\n\n  public get items(): Array<T> { return this.state.items; }\n\n  /*\n  * @constructor\n  * @param {Array} items Array of element for current page\n  * @param {Object} params\n  * @private\n  */\n  constructor(items, source, prevToken, nextToken) {\n\n    this.state = {\n      prevToken,\n      nextToken,\n      source,\n      items\n    };\n  }\n\n  nextPage(): Promise<RestPaginator<T>> {\n    return this.hasNextPage ? this.state.source(this.state.nextToken) : Promise.reject(new Error('No next page'));\n  }\n\n  prevPage(): Promise<RestPaginator<T>> {\n    return this.hasPrevPage ? this.state.source(this.state.prevToken) : Promise.reject(new Error('No previous page'));\n  }\n}\n\nexport { RestPaginator };\n","/**\n * Contains sync list item information.\n *\n * @property {string} channel_sid Conversation sid\n * @property {string} conversation Conversation entity name\n * @property {string} messages Conversation messages entity name\n * @property {string} roster Conversation roster entity name\n * @property {Number} lastReadMessageIndex Index of the last Message the User has read in this Conversation\n\n */\nimport { Conversation } from './conversation';\n\nclass SyncListDescriptor {\n\n  public readonly channel_sid: string;\n  public readonly status: string;\n  public readonly channel: string;\n  public readonly messages: string;\n  public readonly roster: string;\n  public readonly lastConsumedMessageIndex: number | null;\n  public readonly notificationLevel: Conversation.NotificationLevel;\n  public readonly descriptor: any;\n\n  /**\n   * @param {Object} descriptor - sync list descriptor data object\n   * @private\n   */\n  constructor(descriptor) {\n    this.channel_sid = descriptor.channel_sid;\n    this.status = descriptor.status;\n    this.channel = descriptor.channel;\n    this.messages = descriptor.messages;\n    this.roster = descriptor.roster;\n    this.lastConsumedMessageIndex = descriptor.last_consumed_message_index;\n    this.notificationLevel = descriptor.notification_level;\n    this.descriptor = descriptor;\n  }\n}\n\nexport { SyncListDescriptor };\n","import { Network } from './services/network';\nimport { Session } from './session';\nimport { UriBuilder } from './util/index';\nimport { RestPaginator } from './restpaginator';\nimport { SyncListDescriptor } from './synclistdescriptor';\n\nexport interface SyncListServices {\n  session: Session;\n  network: Network;\n}\n\n/**\n * Provides async pagination interface for sync list\n *\n * @property {Network} network Network transport\n * @property {string} syncListUrl Url to the sync list endpoint\n */\nclass SyncList {\n\n  private readonly services: SyncListServices;\n\n  /**\n   * @param {SyncListServices} services - services needed for SyncList service\n   * @private\n   */\n  constructor(services: SyncListServices) {\n    this.services = services;\n  }\n\n  public async getPage(args?): Promise<RestPaginator<SyncListDescriptor>> {\n    args = args || {};\n    let links = await this.services.session.getSessionLinks();\n    const url = new UriBuilder(links.syncListUrl).arg('PageToken', args.pageToken).build();\n    let response = await this.services.network.get(url);\n    return new RestPaginator<SyncListDescriptor>(response.body.channels.map(x => new SyncListDescriptor(x))\n      , pageToken => this.getPage({ pageToken })\n      , response.body.meta.previous_token\n      , response.body.meta.next_token);\n  }\n}\n\nexport { SyncList };\n","class ResponseCodes {\n  static readonly HTTP_200_OK = 200;\n  static readonly HTTP_400_BAD_REQUEST = 400;\n  static readonly HTTP_404_NOT_FOUND = 404;\n  static readonly ACCESS_FORBIDDEN_FOR_IDENTITY = 54007;\n  static readonly LIST_NOT_FOUND = 54150;\n}\n\nexport { ResponseCodes };","/**\n * @class\n * @classdesc Exception type for service-side errors.\n *\n * @property {Number} code - Error code\n * @property {String} message - Error description\n */\nclass SessionError extends Error {\n\n  public code: number;\n\n  constructor(message: string, code: number) {\n    super();\n\n    this.name = this.constructor.name;\n    this.message = message;\n    this.code = code;\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = (new Error()).stack;\n    }\n  }\n}\n\nexport { SessionError };\n","class Deferred<T> {\n  private _promise: Promise<T>;\n  private _resolve;\n  private _reject;\n\n  public current: T;\n\n  constructor() {\n    this._promise = new Promise<T>((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  public get promise(): Promise<T> { return this._promise; }\n\n  update(value: T) {\n    this._resolve(value);\n  }\n\n  set(value: T) {\n    this.current = value;\n    this._resolve(value);\n  }\n\n  fail(e) {\n    this._reject(e);\n  }\n}\n\nexport { Deferred };\n","import * as uuid from 'uuid';\nimport * as platform from 'platform';\nimport { ResponseCodes } from './interfaces/responsecodes';\n\nimport { Logger } from './logger';\nimport { Configuration } from './configuration';\n\nimport { SessionError } from './sessionerror';\nimport { Deferred } from './util/deferred';\nimport { SyncClient } from 'twilio-sync';\nimport { parse as parseDuration, toSeconds } from 'iso8601-duration';\nimport { version } from '../package.json';\n\nconst SDK_VERSION = version;\nconst SESSION_PURPOSE = 'com.twilio.rtd.ipmsg';\n\nconst log = Logger.scope('Session');\n\nclass Command {\n  resolve: any;\n  reject: any;\n  commandId: any;\n  request: any;\n}\n\ninterface SessionLinks {\n  publicChannelsUrl: string;\n  myChannelsUrl: string;\n  typingUrl: string;\n  syncListUrl: string;\n  usersUrl: string;\n  mediaServiceUrl: string;\n  messagesReceiptsUrl: string;\n}\n\ninterface ImmutableSessionInfo {\n  identity: string;\n  links: SessionLinks;\n\n  userInfo: string;\n  channels: string;\n  myChannels: string;\n  userInfosToSubscribe: number;\n}\n\nexport interface SessionServices {\n  syncClient: SyncClient;\n}\n\nfunction hasAllPropertiesSet(obj: Object, properties: string[]): boolean {\n  return !(properties.some(prop => !obj.hasOwnProperty(prop)));\n}\n\n/**\n *  Constructs the instance of Session\n *\n *  @classdesc Provides the interface to send the command to the server\n *  It is reliable, which means that it tracks the command object state\n *  and waits the answer from the server.\n */\nclass Session {\n  public readonly services: SessionServices;\n\n  private endpointPlatform: string;\n  private config: any;\n\n  private pendingCommands: Map<string, Command>;\n  private sessionStreamPromise: any;\n\n  private readonly sessionInfo: Deferred<ImmutableSessionInfo>;\n  private currentContext: any;\n\n  constructor(services: SessionServices, config: Configuration) {\n    let platformInfo = typeof navigator !== 'undefined' ?\n      platform.parse(navigator.userAgent) : platform;\n\n    this.services = services;\n    this.config = config;\n\n    this.sessionInfo = new Deferred<ImmutableSessionInfo>();\n    this.currentContext = {};\n\n    this.pendingCommands = new Map();\n    this.sessionStreamPromise = null;\n\n    this.endpointPlatform = [\n      'JS',\n      SDK_VERSION,\n      platformInfo.os,\n      platformInfo.name,\n      platformInfo.version\n    ].join('|');\n  }\n\n  public get identity(): string { return this.sessionInfo.current.identity; }\n\n  public get reachabilityEnabled(): boolean { return this.currentContext.reachabilityEnabled; }\n\n  private handleContextUpdate(updatedContext: any) {\n    log.info('Session context updated');\n    log.debug('new session context:', updatedContext);\n\n    this.currentContext = updatedContext;\n\n    if (!hasAllPropertiesSet(updatedContext, ['identity', 'userInfo', 'links', 'myChannels', 'channels'])) {\n      return; // not enough data to proceed, wait\n    }\n\n    log.info('new session context accepted');\n    this.sessionInfo.set(updatedContext);\n  }\n\n  initialize(): Promise<Session> {\n    let context = {\n      type: 'IpMsgSession',\n      apiVersion: '4',\n      endpointPlatform: this.endpointPlatform\n    };\n\n    this.sessionStreamPromise = this.services.syncClient.list({ purpose: SESSION_PURPOSE, context })\n                                    .then(list => {\n                                      log.info('Session created', list.sid);\n                                      list.on('itemAdded', args => this.processCommandResponse(args.item));\n                                      list.on('itemUpdated', args => this.processCommandResponse(args.item));\n                                      list.on('contextUpdated', args => this.handleContextUpdate(args.context));\n                                      return list;\n                                    }).catch(function(err) {\n        log.error('Failed to create session', err);\n        throw err;\n      });\n\n    return this.sessionStreamPromise;\n  }\n\n  /**\n   * Sends the command to the server\n   * @returns Promise the promise, which is being fulfilled only when service will reply\n   */\n  addCommand(action: string, params: any): Promise<any> {\n    return this.processCommand(action, params);\n  }\n\n  /**\n   * @private\n   */\n  private processCommand(action, params, createSessionIfNotFound = true) {\n    let command = new Command();\n    command.request = params;\n    command.request.action = action;\n    command.commandId = uuid.v4();\n\n    log.info('Adding command: ', action, command.commandId);\n    log.debug('command arguments:', params, createSessionIfNotFound);\n\n    return new Promise((resolve, reject) => {\n      this.sessionStreamPromise.then(list => {\n        this.pendingCommands.set(command.commandId,\n          { resolve, reject, commandId: command.commandId, request: command.request });\n        return list.push(command);\n      })\n          .then(() => log.debug('Command accepted by server', command.commandId))\n          .catch(err => {\n            this.pendingCommands.delete(command.commandId);\n            log.error('Failed to add a command to the session', err);\n            if ((err.code == ResponseCodes.ACCESS_FORBIDDEN_FOR_IDENTITY || err.code === ResponseCodes.LIST_NOT_FOUND) && createSessionIfNotFound) {\n              log.info('recreating session...');\n              this.initialize();\n              resolve(this.processCommand(action, params, false)); // second attempt\n            } else {\n              reject(new Error('Can\\'t add command: ' + err.message));\n            }\n          });\n    });\n  }\n\n  /**\n   * @private\n   */\n  private processCommandResponse(entity) {\n    if (entity.data.hasOwnProperty('response') &&\n      entity.data.hasOwnProperty('commandId') &&\n      this.pendingCommands.has(entity.data.commandId)\n    ) {\n      const data = entity.data;\n      const commandId = data.commandId;\n      if (data.response.status === ResponseCodes.HTTP_200_OK) {\n        log.debug('Command succeeded: ', data);\n        let resolve = this.pendingCommands.get(commandId).resolve;\n        this.pendingCommands.delete(commandId);\n        resolve(data.response);\n      } else {\n        log.error('Command failed: ', data);\n        let reject = this.pendingCommands.get(commandId).reject;\n        this.pendingCommands.delete(commandId);\n        reject(new SessionError(data.response.statusText, data.response.status));\n      }\n    }\n  }\n\n  private getSessionContext(): any {\n    return this.sessionStreamPromise\n               .then(stream => stream.getContext());\n  }\n\n  async getSessionLinks(): Promise<SessionLinks> {\n    let info = await this.sessionInfo.promise;\n    return {\n      publicChannelsUrl: this.config.baseUrl + info.links.publicChannelsUrl as string,\n      myChannelsUrl: this.config.baseUrl + info.links.myChannelsUrl as string,\n      typingUrl: this.config.baseUrl + info.links.typingUrl as string,\n      syncListUrl: this.config.baseUrl + info.links.syncListUrl as string,\n      usersUrl: this.config.baseUrl + info.links.usersUrl as string,\n      mediaServiceUrl: info.links.mediaServiceUrl as string,\n      messagesReceiptsUrl: this.config.baseUrl + info.links.messagesReceiptsUrl as string\n    };\n  }\n\n  async getConversationsId(): Promise<string> {\n    let info = await this.sessionInfo.promise;\n    return info.channels;\n  }\n\n  async getMyConversationsId(): Promise<string> {\n    let info = await this.sessionInfo.promise;\n    return info.myChannels;\n  }\n\n  async getMaxUserInfosToSubscribe(): Promise<number> {\n    let info = await this.sessionInfo.promise;\n    return this.config.userInfosToSubscribeOverride\n      || info.userInfosToSubscribe\n      || this.config.userInfosToSubscribeDefault;\n  }\n\n  getUsersData() {\n    return this.sessionInfo.promise.then(info => ({\n      user: info.userInfo,\n      identity: info.identity\n    }));\n  }\n\n  async getConsumptionReportInterval(): Promise<number> {\n    let context = await this.getSessionContext();\n    let consumptionIntervalToUse = this.config.consumptionReportIntervalOverride\n      || context.consumptionReportInterval\n      || this.config.consumptionReportIntervalDefault;\n\n    try {\n      return toSeconds(parseDuration(consumptionIntervalToUse));\n    } catch (e) {\n      log.error(\n        'Failed to parse consumption report interval', consumptionIntervalToUse,\n        'using default value', this.config.consumptionReportIntervalDefault\n      );\n      return toSeconds(parseDuration(this.config.consumptionReportIntervalDefault));\n    }\n  }\n\n  async getHttpCacheInterval(): Promise<number> {\n    let context = await this.getSessionContext();\n    let cacheIntervalToUse = this.config.httpCacheIntervalOverride\n      || context.httpCacheInterval\n      || this.config.httpCacheIntervalDefault;\n\n    try {\n      return toSeconds(parseDuration(cacheIntervalToUse));\n    } catch (e) {\n      log.error(\n        'Failed to parse cache interval', cacheIntervalToUse,\n        'using default value', this.config.httpCacheIntervalDefault\n      );\n      return toSeconds(parseDuration(this.config.httpCacheIntervalDefault));\n    }\n  }\n}\n\nexport { SessionLinks, Session };\n","import { EventEmitter } from 'events';\nimport { Users } from './data/users';\nimport { User } from './user';\nimport { isDeepEqual, parseTime, parseAttributes } from './util';\nimport { Logger } from './logger';\nimport { Session } from './session';\nimport { Conversation } from './conversation';\nimport { validateTypesAsync, literal } from 'twilio-sdk-type-validator';\n\nconst log = Logger.scope('Participant');\n\ninterface ParticipantDescriptor {\n  attributes?: Object;\n  dateCreated: any;\n  dateUpdated: any;\n  identity: string;\n  roleSid?: string;\n  lastConsumedMessageIndex: number;\n  lastConsumptionTimestamp: number;\n  type: Participant.Type;\n  userInfo: string;\n}\n\ninterface ParticipantState {\n  attributes: any;\n  dateCreated: Date;\n  dateUpdated: Date;\n  identity: string;\n  isTyping: boolean;\n  lastReadMessageIndex: number | null;\n  lastReadTimestamp: Date;\n  roleSid: string;\n  sid: string;\n  type: Participant.Type;\n  typingTimeout: any;\n  userInfo: string;\n}\n\nexport interface ParticipantServices {\n  users: Users;\n  session: Session;\n}\n\nnamespace Participant {\n  export type UpdateReason = 'attributes' | 'dateCreated' | 'dateUpdated' | 'roleSid' | 'lastReadMessageIndex' | 'lastReadTimestamp';\n\n  export type Type = 'chat' | 'sms' | 'whatsapp';\n\n  export interface UpdatedEventArgs {\n    participant: Participant;\n    updateReasons: Participant.UpdateReason[];\n  }\n}\n\n/**\n * @classdesc A Participant represents a remote Client in a Conversation.\n * @property {any} attributes - Object with custom attributes for Participant\n * @property {Conversation} conversation - The Conversation the remote Client is a Participant of\n * @property {Date} dateCreated - The Date this Participant was created\n * @property {Date} dateUpdated - The Date this Participant was last updated\n * @property {String} identity - The identity of the remote Client\n * @property {Boolean} isTyping - Whether or not this Participant is currently typing\n   * @property {Number|null} lastReadMessageIndex - Latest read Message index by this Participant.\n * Note that just retrieving messages on a client endpoint does not mean that messages are read,\n * please consider reading about [Read Horizon feature]{@link https://www.twilio.com/docs/api/chat/guides/consumption-horizon}\n * to find out how to mark messages as read.\n * @property {Date} lastReadTimestamp - Date when Participant has updated his read horizon\n * @property {String} sid - The server-assigned unique identifier for the Participant\n * @property {Participant#Type} type - The type of Participant\n * @fires Participant#typingEnded\n * @fires Participant#typingStarted\n * @fires Participant#updated\n */\nclass Participant extends EventEmitter {\n  private state: ParticipantState;\n  private services: ParticipantServices;\n  public readonly conversation: Conversation;\n\n  public get sid(): string { return this.state.sid; }\n\n  public get attributes(): Object { return this.state.attributes; }\n\n  public get dateCreated(): Date { return this.state.dateCreated; }\n\n  public get dateUpdated(): Date { return this.state.dateUpdated; }\n\n  public get identity(): string { return this.state.identity; }\n\n  public get isTyping(): boolean { return this.state.isTyping; }\n\n  public get lastReadMessageIndex(): number | null { return this.state.lastReadMessageIndex; }\n\n  public get lastReadTimestamp(): Date { return this.state.lastReadTimestamp; }\n\n  public get roleSid(): string { return this.state.roleSid; }\n\n  public get type(): Participant.Type { return this.state.type; }\n\n  /**\n   * The update reason for <code>updated</code> event emitted on Participant\n   * @typedef {('attributes' | 'dateCreated' | 'dateUpdated' | 'roleSid' |\n    'lastReadMessageIndex' | 'lastReadTimestamp')} Participant#UpdateReason\n   */\n\n  /**\n   * The type of Participant\n   * @typedef {('chat' | 'sms' | 'whatsapp')} Participant#Type\n   */\n\n  constructor(services: ParticipantServices, conversation: Conversation, data: ParticipantDescriptor, sid: string) {\n    super();\n\n    this.conversation = conversation;\n    this.services = services;\n    this.state = {\n      attributes: parseAttributes(data.attributes,\n        'Retrieved malformed attributes from the server for participant: ' + sid,\n        log),\n      dateCreated: data.dateCreated ? parseTime(data.dateCreated) : null,\n      dateUpdated: data.dateCreated ? parseTime(data.dateUpdated) : null,\n      sid: sid,\n      typingTimeout: null,\n      isTyping: false,\n      identity: data.identity || null,\n      roleSid: data.roleSid || null,\n      lastReadMessageIndex: Number.isInteger(data.lastConsumedMessageIndex) ? data.lastConsumedMessageIndex : null,\n      lastReadTimestamp: data.lastConsumptionTimestamp ? parseTime(data.lastConsumptionTimestamp) : null,\n      type: data.type || 'chat',\n      userInfo: data.userInfo\n    };\n\n    if (!data.identity && !data.type) {\n      throw new Error('Received invalid Participant object from server: Missing identity or type of Participant.');\n    }\n  }\n\n  /**\n   * Private method used to start or reset the typing indicator timeout (with event emitting)\n   * @private\n   */\n  _startTyping(timeout) {\n    clearTimeout(this.state.typingTimeout);\n\n    this.state.isTyping = true;\n    this.emit('typingStarted', this);\n    this.conversation.emit('typingStarted', this);\n\n    this.state.typingTimeout = setTimeout(() => this._endTyping(), timeout);\n    return this;\n  }\n\n  /**\n   * Private method function used to stop typing indicator (with event emitting)\n   * @private\n   */\n  _endTyping() {\n    if (!this.state.typingTimeout) { return; }\n\n    this.state.isTyping = false;\n    this.emit('typingEnded', this);\n    this.conversation.emit('typingEnded', this);\n\n    clearInterval(this.state.typingTimeout);\n    this.state.typingTimeout = null;\n  }\n\n  /**\n   * Private method function used update local object's property roleSid with new value\n   * @private\n   */\n  _update(data) {\n    let updateReasons: Participant.UpdateReason[] = [];\n\n    let updateAttributes =\n      parseAttributes(\n        data.attributes,\n        'Retrieved malformed attributes from the server for participant: ' + this.state.sid,\n        log);\n\n    if (data.attributes && !isDeepEqual(this.state.attributes, updateAttributes)) {\n      this.state.attributes = updateAttributes;\n      updateReasons.push('attributes');\n    }\n\n    let updatedDateUpdated = parseTime(data.dateUpdated);\n    if (data.dateUpdated &&\n      updatedDateUpdated.getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {\n      this.state.dateUpdated = updatedDateUpdated;\n      updateReasons.push('dateUpdated');\n    }\n\n    let updatedDateCreated = parseTime(data.dateCreated);\n    if (data.dateCreated &&\n      updatedDateCreated.getTime() !== (this.state.dateCreated && this.state.dateCreated.getTime())) {\n      this.state.dateCreated = updatedDateCreated;\n      updateReasons.push('dateCreated');\n    }\n\n    if (data.roleSid && this.state.roleSid !== data.roleSid) {\n      this.state.roleSid = data.roleSid;\n      updateReasons.push('roleSid');\n    }\n\n    if ((Number.isInteger(data.lastConsumedMessageIndex) || data.lastConsumedMessageIndex === null)\n      && this.state.lastReadMessageIndex !== data.lastConsumedMessageIndex) {\n      this.state.lastReadMessageIndex = data.lastConsumedMessageIndex;\n      updateReasons.push('lastReadMessageIndex');\n    }\n\n    if (data.lastConsumptionTimestamp) {\n      let lastReadTimestamp = new Date(data.lastConsumptionTimestamp);\n      if (!this.state.lastReadTimestamp ||\n        this.state.lastReadTimestamp.getTime() !== lastReadTimestamp.getTime()) {\n        this.state.lastReadTimestamp = lastReadTimestamp;\n        updateReasons.push('lastReadTimestamp');\n      }\n    }\n\n    if (updateReasons.length > 0) {\n      this.emit('updated', { participant: this, updateReasons: updateReasons });\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets User for this participant and subscribes to it. Supported only for <code>chat</code> type of Participants\n   * @returns {Promise<User>}\n   */\n  async getUser(): Promise<User> {\n    if (this.type != 'chat') {\n      throw new Error('Getting User is not supported for this Participant type: ' + this.type);\n    }\n\n    return this.services.users.getUser(this.state.identity, this.state.userInfo);\n  }\n\n  /**\n   * Remove Participant from the Conversation.\n   * @returns {Promise<void>}\n   */\n  async remove() {\n    return this.conversation.removeParticipant(this);\n  }\n\n  /**\n   * Edit participant attributes.\n   * @param {any} attributes new attributes for Participant.\n   * @returns {Promise<Participant>}\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  async updateAttributes(attributes: any): Promise<Participant> {\n    await this.services.session.addCommand('editMemberAttributes', {\n      channelSid: this.conversation.sid,\n      memberSid: this.sid,\n      attributes: JSON.stringify(attributes)\n    });\n\n    return this;\n  }\n}\n\nexport { ParticipantDescriptor, Participant };\n\n/**\n * Fired when Participant started to type.\n * @event Participant#typingStarted\n * @type {Participant}\n */\n\n/**\n * Fired when Participant ended to type.\n * @event Participant#typingEnded\n * @type {Participant}\n */\n\n/**\n * Fired when Participant's fields has been updated.\n * @event Participant#updated\n * @type {Object}\n * @property {Participant} participant - Updated Participant\n * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons\n */\n","import { EventEmitter } from 'events';\nimport { ParticipantDescriptor, Participant } from '../participant';\nimport { Logger } from '../logger';\n\nimport { Conversation } from '../conversation';\n\nimport { SyncMap, SyncClient } from 'twilio-sync';\nimport { Users } from './users';\nimport { Session } from '../session';\nimport { SessionError } from '../sessionerror';\n\nconst log = Logger.scope('Participants');\n\nexport interface ParticipantsServices {\n  session: Session;\n  syncClient: SyncClient;\n  users: Users;\n}\n\n/**\n * @classdesc Represents the collection of participants for the conversation\n * @fires Participants#participantJoined\n * @fires Participants#participantLeft\n * @fires Participants#participantUpdated\n */\nclass Participants extends EventEmitter {\n\n  services: ParticipantsServices;\n  rosterEntityPromise: Promise<SyncMap>;\n\n  public readonly conversation: Conversation;\n  public readonly participants: Map<string, Participant>;\n\n  constructor(conversation: Conversation, services: ParticipantsServices, participants: Map<string, Participant>) {\n    super();\n    this.services = services;\n    this.conversation = conversation;\n    this.participants = participants;\n  }\n\n  async unsubscribe(): Promise<void> {\n    if (this.rosterEntityPromise) {\n      let entity = await this.rosterEntityPromise;\n      entity.close();\n      this.rosterEntityPromise = null;\n    }\n  }\n\n  subscribe(rosterObjectName: string) {\n    return this.rosterEntityPromise = this.rosterEntityPromise\n      || this.services.syncClient.map({ id: rosterObjectName, mode: 'open_existing' })\n             .then(rosterMap => {\n               rosterMap.on('itemAdded', args => {\n                 log.debug(this.conversation.sid + ' itemAdded: ' + args.item.key);\n                 this.upsertParticipant(args.item.key, args.item.data)\n                     .then(participant => {\n                       this.emit('participantJoined', participant);\n                     });\n               });\n\n               rosterMap.on('itemRemoved', args => {\n                 log.debug(this.conversation.sid + ' itemRemoved: ' + args.key);\n                 let participantSid = args.key;\n                 if (!this.participants.has(participantSid)) {\n                   return;\n                 }\n                 let leftParticipant = this.participants.get(participantSid);\n                 this.participants.delete(participantSid);\n                 this.emit('participantLeft', leftParticipant);\n               });\n\n               rosterMap.on('itemUpdated', args => {\n                 log.debug(this.conversation.sid + ' itemUpdated: ' + args.item.key);\n                 this.upsertParticipant(args.item.key, args.item.data);\n               });\n\n               let participantsPromises = [];\n               let that = this;\n               const rosterMapHandler = function(paginator) {\n                 paginator.items.forEach(item => { participantsPromises.push(that.upsertParticipant(item.key, item.data)); });\n                 return paginator.hasNextPage ? paginator.nextPage().then(rosterMapHandler) : null;\n               };\n\n               return rosterMap\n                 .getItems()\n                 .then(rosterMapHandler)\n                 .then(() => Promise.all(participantsPromises))\n                 .then(() => rosterMap);\n             })\n             .catch(err => {\n               this.rosterEntityPromise = null;\n               if (this.services.syncClient.connectionState != 'disconnected') {\n                 log.error('Failed to get roster object for conversation', this.conversation.sid, err);\n               }\n               log.debug('ERROR: Failed to get roster object for conversation', this.conversation.sid, err);\n               throw err;\n             });\n  }\n\n  async upsertParticipant(participantSid: string, data: ParticipantDescriptor): Promise<Participant> {\n    let participant = this.participants.get(participantSid);\n    if (participant) {\n      return participant._update(data);\n    }\n\n    participant = new Participant(this.services, this.conversation, data, participantSid);\n    this.participants.set(participantSid, participant);\n    participant.on('updated', (args: Participant.UpdatedEventArgs) => this.emit('participantUpdated', args));\n    return participant;\n  }\n\n  /**\n   * @returns {Promise<Array<Participant>>} returns list of participants {@see Participant}\n   */\n  getParticipants(): Promise<Array<Participant>> {\n    return this.rosterEntityPromise.then(() => {\n      let participants = [];\n      this.participants.forEach(participant => participants.push(participant));\n      return participants;\n    });\n  }\n\n  /**\n   * Get participant by SID from conversation\n   * @returns {Promise<Participant>}\n   */\n  async getParticipantBySid(participantSid: string): Promise<Participant> {\n    return this.rosterEntityPromise.then(() => {\n      let participant = this.participants.get(participantSid);\n      if (!participant) {\n        throw new Error('Participant with SID ' + participantSid + ' was not found');\n      }\n      return participant;\n    });\n  }\n\n  /**\n   * Get participant by identity from conversation\n   * @returns {Promise<Participant>}\n   */\n  async getParticipantByIdentity(identity: string): Promise<Participant> {\n    let foundParticipant = null;\n    return this.rosterEntityPromise.then(() => {\n      this.participants.forEach(participant => {\n        if (participant.identity === identity) {\n          foundParticipant = participant;\n        }\n      });\n      if (!foundParticipant) {\n        throw new Error('Participant with identity ' + identity + ' was not found');\n      }\n      return foundParticipant;\n    });\n  }\n\n  /**\n   * Add a chat participant to the conversation\n   * @returns {Promise<any>}\n   */\n  add(identity: string, attributes: any): Promise<any> {\n    return this.services.session.addCommand('addMemberV2', {\n      channelSid: this.conversation.sid,\n      attributes: JSON.stringify(attributes),\n      username: identity\n    });\n  }\n\n  /**\n   * Add a non-chat participant to the conversation.\n   *\n   * @param proxyAddress\n   * @param address\n   * @param attributes\n   * @returns {Promise<any>}\n   */\n  addNonChatParticipant(proxyAddress: string, address: string, attributes: Record<string, any> = {}): Promise<any> {\n    return this.services.session.addCommand('addNonChatParticipant', {\n      conversationSid: this.conversation.sid,\n      proxyAddress,\n      attributes: JSON.stringify(attributes),\n      address\n    });\n  }\n\n  /**\n   * Invites user to the conversation\n   * User can choose either to join or not\n   * @returns {Promise<any>}\n   */\n  invite(identity: string): Promise<any> {\n    return this.services.session.addCommand('inviteMember', {\n      channelSid: this.conversation.sid,\n      username: identity\n    });\n  }\n\n  /**\n   * Remove participant from conversation by Identity\n   * @returns {Promise<any>}\n   */\n  removeByIdentity(identity: string): Promise<any> {\n    return this.services.session.addCommand('removeMember', {\n      channelSid: this.conversation.sid,\n      username: identity\n    });\n  }\n\n  /**\n   * Remove participant from conversation by sid\n   * @returns {Promise<any>}\n   */\n  removeBySid(sid: string): Promise<any> {\n    return this.services.session.addCommand('removeMember', {\n      channelSid: this.conversation.sid,\n      memberSid: sid\n    });\n  }\n}\n\nexport { Participants };\n\n/**\n * Fired when participant joined conversation\n * @event Participants#participantJoined\n * @type {Participant}\n */\n\n/**\n * Fired when participant left conversation\n * @event Participants#participantLeft\n * @type {Participant}\n */\n\n/**\n * Fired when participant updated\n * @event Participants#participantUpdated\n * @type {Object}\n * @property {Participant} participant - Updated Participant\n * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons\n */\n","import { McsClient, McsMedia } from 'twilio-mcs-client';\n\nexport interface MediaState {\n  sid: string;\n  filename?: string;\n  contentType: string;\n  size: number;\n}\n\nexport interface MediaServices {\n  mcsClient: McsClient;\n}\n\n/**\n * @classdesc A Media represents a media information for Message in a Conversation.\n * @property {String} contentType - content type of media\n * @property {String} sid - The server-assigned unique identifier for Media\n * @property {Number} size - Size of media, bytes\n * @property {String} [filename] - file name if present, null otherwise\n */\nclass Media {\n\n  private state: MediaState;\n  private services: MediaServices;\n  private mcsMedia: McsMedia = null;\n\n  constructor(data: MediaState, services: MediaServices) {\n\n    this.services = services;\n\n    this.state = {\n      sid: data.sid,\n      filename: data.filename,\n      contentType: data.contentType,\n      size: data.size\n    };\n  }\n\n  public get sid(): string { return this.state.sid; }\n\n  public get filename(): string {return this.state.filename; }\n\n  public get contentType(): string { return this.state.contentType; }\n\n  public get size(): number {return this.state.size; }\n\n  /**\n   * Returns direct content URL for the media.\n   *\n   * This URL is impermanent, it will expire in several minutes and cannot be cached.\n   * If the URL becomes expired, you need to request a new one.\n   * Each call to this function produces a new temporary URL.\n   *\n   * @returns {Promise<String>}\n   */\n  public async getContentTemporaryUrl() {\n    if (!this.mcsMedia) {\n      if (this.services.mcsClient) {\n        this.mcsMedia = await this.services.mcsClient.get(this.state.sid);\n      } else {\n        throw new Error('Media Content Service is unavailable');\n      }\n    }\n    return this.mcsMedia.getContentUrl();\n  }\n}\n\nexport { Media };\n","namespace AggregatedDeliveryReceipt {\n  export type DeliveryAmount = 'none' | 'some' | 'all';\n\n  export interface AggregatedDeliveryDescriptor {\n    total: number;\n    delivered: DeliveryAmount;\n    failed: DeliveryAmount;\n    read: DeliveryAmount;\n    sent: DeliveryAmount;\n    undelivered: DeliveryAmount;\n  }\n}\n\n/**\n * @classdesc Contains aggregated information about a {@link Message}'s delivery statuses across all {@link Participant}s\n * of a {@link Conversation}.\n *\n * At any moment during delivering message to a {@link Participant} the message can have zero or more of following\n * delivery statuses:\n *\n * <ul><li>\n * Message considered as <b>sent</b> to a participant, if the nearest upstream carrier accepted the message.\n * </li><li>\n * Message considered as <b>delivered</b> to a participant, if Twilio has received confirmation of message\n * delivery from the upstream carrier, and, where available, the destination handset.\n * </li><li>\n * Message considered as <b>undelivered</b> to a participant, if Twilio has received a delivery receipt\n * indicating that the message was not delivered. This can happen for many reasons including carrier content\n * filtering and the availability of the destination handset.\n * </li><li>\n * Message considered as <b>read</b> by a participant, if the message has been delivered and opened by the\n * recipient in the conversation. The recipient must have enabled read receipts.\n * </li><li>\n * Message considered as <b>failed</b> to be delivered to a participant if the message could not be sent.\n * This can happen for various reasons including queue overflows, account suspensions and media\n * errors (in the case of MMS for instance).\n *</li></ul>\n *\n * {@link AggregatedDeliveryReceipt} class contains aggregated value {@link AggregatedDeliveryReceipt#DeliveryAmount} for each delivery status.\n *\n * @property {number} total - Maximum number of delivery events expected for the message\n * @property {AggregatedDeliveryReceipt#DeliveryAmount} sent - Amount of participants that have <b>sent</b> delivery status for the message.\n * @property {AggregatedDeliveryReceipt#DeliveryAmount} delivered - Amount of participants that have <b>delivered</b> delivery status\n *   for the message.\n * @property {AggregatedDeliveryReceipt#DeliveryAmount} read - Amount of participants that have <b>read</b> delivery status for the message.\n * @property {AggregatedDeliveryReceipt#DeliveryAmount} undelivered - Amount of participants that have <b>undelivered</b> delivery status\n *   for the message.\n * @property {AggregatedDeliveryReceipt#DeliveryAmount} failed - Amount of participants that have <b>failed</b> delivery status for the message.\n */\nclass AggregatedDeliveryReceipt {\n\n  private state: AggregatedDeliveryReceipt.AggregatedDeliveryDescriptor;\n\n  /**\n   * Signifies amount of participants which have the status for the message.\n   * @typedef {('none'|'some'|'all')} AggregatedDeliveryReceipt#DeliveryAmount\n   */\n\n  constructor(data: AggregatedDeliveryReceipt.AggregatedDeliveryDescriptor) {\n    this.state = data;\n  }\n\n  /**\n   * @return Maximum number of delivery events expected for the message.\n   */\n  public get total(): number {\n    return this.state.total;\n  }\n\n  /**\n   * Message considered as <b>sent</b> to a participant, if the nearest upstream carrier accepted the message.\n   *\n   * @return {@link DeliveryAmount} of participants that have <b>sent</b> delivery status for the message.\n   */\n  public get sent(): AggregatedDeliveryReceipt.DeliveryAmount {\n    return this.state.sent;\n  }\n\n  /**\n   * Message considered as <b>delivered</b> to a participant, if Twilio has received confirmation of message\n   * delivery from the upstream carrier, and, where available, the destination handset.\n   *\n   * @return {@link DeliveryAmount} of participants that have <b>delivered</b> delivery status for the message.\n   */\n  public get delivered(): AggregatedDeliveryReceipt.DeliveryAmount {\n    return this.state.delivered;\n  }\n\n  /**\n   * Message considered as <b>read</b> by a participant, if the message has been delivered and opened by the\n   * recipient in the conversation. The recipient must have enabled read receipts.\n   *\n   * @return {@link DeliveryAmount} of participants that have <b>read</b> delivery status for the message.\n   */\n  public get read(): AggregatedDeliveryReceipt.DeliveryAmount {\n    return this.state.read;\n  }\n\n  /**\n   * Message considered as <b>undelivered</b> to a participant, if Twilio has received a delivery receipt\n   * indicating that the message was not delivered. This can happen for many reasons including carrier content\n   * filtering and the availability of the destination handset.\n   *\n   * @return {@link DeliveryAmount} of participants that have <b>undelivered</b> delivery status for the message.\n   */\n  public get undelivered(): AggregatedDeliveryReceipt.DeliveryAmount {\n    return this.state.undelivered;\n  }\n\n  /**\n   * Message considered as <b>failed</b> to be delivered to a participant if the message could not be sent.\n   * This can happen for various reasons including queue overflows, account suspensions and media\n   * errors (in the case of MMS for instance). Twilio does not charge you for failed messages.\n   *\n   * @return {@link DeliveryAmount} of participants that have <b>failed</b> delivery status for the message.\n   */\n  public get failed(): AggregatedDeliveryReceipt.DeliveryAmount {\n    return this.state.failed;\n  }\n\n  _update(data: AggregatedDeliveryReceipt.AggregatedDeliveryDescriptor): void {\n    this.state = data;\n  }\n\n  _isEquals(data: AggregatedDeliveryReceipt.AggregatedDeliveryDescriptor): boolean {\n    const isTotalSame = this.total === data.total;\n    const isSentSame = this.sent === data.sent;\n    const isDeliveredSame = this.delivered === data.delivered;\n    const isReadSame = this.read === data.read;\n    const isUndeliveredSame = this.undelivered === data.undelivered;\n    const isFailedSame = this.failed === data.failed;\n\n    return isTotalSame && isSentSame && isDeliveredSame && isReadSame && isUndeliveredSame && isFailedSame;\n  }\n}\n\nexport { AggregatedDeliveryReceipt };\n","namespace DetailedDeliveryReceipt {\n  export type Status  = 'sent' | 'delivered' | 'failed' | 'read' | 'undelivered' | 'queued';\n\n  export interface Descriptor {\n    sid: string;\n    message_sid: string;\n    conversation_sid: string;\n    channel_message_sid: string;\n    participant_sid: string;\n    status: Status;\n    error_code: number | null;\n    date_created: string;\n    date_updated: string;\n  }\n}\n\n/**\n * @classdesc Represents a delivery receipt of a {@link Message}.\n *\n * @property {String} sid - The unique identifier for Delivery Receipt\n * @property {String} messageSid - The unique identifier for Conversation Message\n * @property {String} conversationSid - The unique identifier for Conversation\n * @property {String} channelMessageSid - The unique identifier for the ‘channel’ message e.g WAxx for Whatsapp, SMxx for SMS\n * @property {String} participantSid - Participant's unique identifier\n * @property {DetailedDeliveryReceipt#Status} status - Message delivery status\n * @property {number | null} errorCode - Numeric error code mapped from Status callback code. Information about the error codes can be found\n * <a href=\"https://www.twilio.com/docs/sms/api/message-resource#delivery-related-errors\">here</a>.\n * @property {String} dateCreated - When Delivery Receipt was created\n * @property {String} dateUpdated - When Delivery Receipt was updated\n */\nexport class DetailedDeliveryReceipt {\n  sid: string;\n  messageSid: string;\n  conversationSid: string;\n  channelMessageSid: string;\n  participantSid: string;\n  status: DetailedDeliveryReceipt.Status;\n  errorCode: number | null;\n  dateCreated: string;\n  dateUpdated: string;\n\n  /**\n   * Signifies the message delivery status.\n   * @typedef {('sent'|'delivered'|'failed'|'read'|'undelivered'|'queued')} DetailedDeliveryReceipt#Status\n   */\n\n  constructor(descriptor: DetailedDeliveryReceipt.Descriptor) {\n    this.sid = descriptor.sid;\n    this.messageSid = descriptor.message_sid;\n    this.conversationSid = descriptor.conversation_sid;\n    this.channelMessageSid = descriptor.channel_message_sid;\n    this.participantSid = descriptor.participant_sid;\n    this.status = descriptor.status || 'queued';\n    this.errorCode = descriptor.error_code || 0;\n    this.dateCreated = descriptor.date_created;\n    this.dateUpdated = descriptor.date_updated;\n  }\n}\n","import { EventEmitter } from 'events';\nimport { isDeepEqual, parseAttributes, UriBuilder } from './util';\nimport { Logger } from './logger';\n\nimport { Conversation } from './conversation';\nimport { Session } from './session';\nimport { McsClient } from 'twilio-mcs-client';\nimport { Media } from './media';\nimport { Participant } from './participant';\nimport { AggregatedDeliveryReceipt } from './aggregateddeliveryreceipt';\nimport { validateTypesAsync, literal } from 'twilio-sdk-type-validator';\nimport { Network } from './services/network';\nimport { RestPaginator } from './restpaginator';\nimport { DetailedDeliveryReceipt } from './detaileddeliveryreceipt';\nimport { Paginator } from './interfaces/paginator';\n\nconst log = Logger.scope('Message');\n\nnamespace Message {\n  export type Type = 'text' | 'media';\n}\n\ninterface MessageState {\n  sid: string;\n  index: number;\n  author?: string;\n  subject?: string;\n  body: string;\n  dateUpdated: Date;\n  lastUpdatedBy: string;\n  attributes: Object;\n  timestamp: Date;\n  type: Message.Type;\n  media?: Media;\n  participantSid?: string;\n  aggregatedDeliveryReceipt?: AggregatedDeliveryReceipt;\n}\n\nexport interface MessageServices {\n  session: Session;\n  mcsClient: McsClient;\n  network: Network;\n}\n\nnamespace Message {\n  export type UpdateReason = 'body' | 'lastUpdatedBy' | 'dateCreated' | 'dateUpdated' | 'attributes' | 'author' |\n    'deliveryReceipt' | 'subject';\n\n  export interface UpdatedEventArgs {\n    message: Message;\n    updateReasons: Message.UpdateReason[];\n  }\n}\n\n/**\n * @classdesc A Message represents a Message in a Conversation.\n * @property {String} author - The name of the user that sent Message\n * @property {String|null} subject - Message subject. Used only in email conversations\n * @property {String} body - The body of the Message. Is null if Message is Media Message\n * @property {any} attributes - Message custom attributes\n * @property {Conversation} conversation - Conversation Message belongs to\n * @property {Date} dateCreated - When Message was created\n * @property {Date} dateUpdated - When Message was updated\n * @property {Number} index - Index of Message in the Conversation's messages list\n *  By design of the conversations system the message indices may have arbitrary gaps between them,\n *  that does not necessarily mean they were deleted or otherwise modified - just that\n *  messages may have non-contiguous indices even if they are sent immediately one after another.\n *\n *  Trying to use indices for some calculations is going to be unreliable.\n *\n *  To calculate the number of unread messages it is better to use the read horizon API.\n *  See {@link Conversation#getUnreadMessagesCount} for details.\n *\n * @property {String} lastUpdatedBy - Identity of the last user that updated Message\n * @property {Media} media - Contains Media information (if present)\n * @property {String} participantSid - Authoring Participant's server-assigned unique identifier\n * @property {String} sid - The server-assigned unique identifier for Message\n * @property {'text' | 'media'} type - Type of message: 'text' or 'media'\n * @property {AggregatedDeliveryReceipt | null} aggregatedDeliveryReceipt - Aggregated information about\n *   Message delivery statuses across all {@link Participant}s of a {@link Conversation}.\n * @fires Message#updated\n */\nclass Message extends EventEmitter {\n\n  public readonly conversation: Conversation;\n  private services: MessageServices;\n  private state: MessageState;\n\n  /**\n   * The update reason for <code>updated</code> event emitted on Message\n   * @typedef {('body' | 'lastUpdatedBy' | 'dateCreated' | 'dateUpdated' | 'attributes' | 'author' |\n   *   'deliveryReceipt' | 'subject')} Message#UpdateReason\n   */\n\n  constructor(conversation: Conversation, services: MessageServices, index: number, data: any) {\n    super();\n\n    this.conversation = conversation;\n    this.services = services;\n\n    this.state = {\n      sid: data.sid,\n      index: index,\n      author: data.author == null ? null : data.author,\n      subject: data.subject == null ? null : data.subject,\n      body: data.text,\n      timestamp: data.timestamp ? new Date(data.timestamp) : null,\n      dateUpdated: data.dateUpdated ? new Date(data.dateUpdated) : null,\n      lastUpdatedBy: data.lastUpdatedBy ? data.lastUpdatedBy : null,\n      attributes: parseAttributes(data.attributes, `Got malformed attributes for the message ${data.sid}`, log),\n      type: data.type ? data.type : 'text',\n      media: (data.type && data.type === 'media' && data.media)\n        ? new Media(data.media, this.services) : null,\n      participantSid: data.memberSid == null ? null : data.memberSid,\n      aggregatedDeliveryReceipt: data.delivery ? new AggregatedDeliveryReceipt(data.delivery) : null\n    };\n  }\n\n  public get sid(): string { return this.state.sid; }\n\n  public get author(): string { return this.state.author; }\n\n  public get subject(): string | null { return this.state.subject; }\n\n  public get body(): string {\n    if (this.type === 'media') { return null; }\n    return this.state.body;\n  }\n\n  public get dateUpdated(): Date { return this.state.dateUpdated; }\n\n  public get index(): number { return this.state.index; }\n\n  public get lastUpdatedBy(): string { return this.state.lastUpdatedBy; }\n\n  public get dateCreated(): Date { return this.state.timestamp; }\n\n  public get attributes(): Object { return this.state.attributes; }\n\n  public get type(): Message.Type { return this.state.type; }\n\n  public get media(): Media { return this.state.media; }\n\n  public get participantSid(): string { return this.state.participantSid; }\n\n  public get aggregatedDeliveryReceipt(): AggregatedDeliveryReceipt | null { return this.state.aggregatedDeliveryReceipt; }\n\n  _update(data) {\n    let updateReasons: Message.UpdateReason[] = [];\n\n    if ((data.text || ((typeof data.text) === 'string')) && data.text !== this.state.body) {\n      this.state.body = data.text;\n      updateReasons.push('body');\n    }\n\n    if (data.subject && data.subject !== this.state.subject) {\n      this.state.subject = data.subject;\n      updateReasons.push('subject');\n    }\n\n    if (data.lastUpdatedBy && data.lastUpdatedBy !== this.state.lastUpdatedBy) {\n      this.state.lastUpdatedBy = data.lastUpdatedBy;\n      updateReasons.push('lastUpdatedBy');\n    }\n\n    if (data.author && data.author !== this.state.author) {\n      this.state.author = data.author;\n      updateReasons.push('author');\n    }\n\n    if (data.dateUpdated &&\n      new Date(data.dateUpdated).getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {\n      this.state.dateUpdated = new Date(data.dateUpdated);\n      updateReasons.push('dateUpdated');\n    }\n\n    if (data.timestamp &&\n      new Date(data.timestamp).getTime() !== (this.state.timestamp && this.state.timestamp.getTime())) {\n      this.state.timestamp = new Date(data.timestamp);\n      updateReasons.push('dateCreated');\n    }\n\n    let updatedAttributes = parseAttributes(data.attributes, `Got malformed attributes for the message ${this.sid}`, log);\n    if (!isDeepEqual(this.state.attributes, updatedAttributes)) {\n      this.state.attributes = updatedAttributes;\n      updateReasons.push('attributes');\n    }\n\n    let updatedAggregatedDelivery = data.delivery;\n    let currentAggregatedDelivery = this.state.aggregatedDeliveryReceipt;\n    let isUpdatedAggregateDeliveryValid = !!updatedAggregatedDelivery && !!updatedAggregatedDelivery.total &&\n      !!updatedAggregatedDelivery.delivered && !!updatedAggregatedDelivery.failed && !!updatedAggregatedDelivery.read &&\n      !!updatedAggregatedDelivery.sent && !!updatedAggregatedDelivery.undelivered;\n    if (isUpdatedAggregateDeliveryValid) {\n      if (!currentAggregatedDelivery) {\n        this.state.aggregatedDeliveryReceipt = new AggregatedDeliveryReceipt(updatedAggregatedDelivery);\n        updateReasons.push('deliveryReceipt');\n      } else if (!currentAggregatedDelivery._isEquals(updatedAggregatedDelivery)) {\n        currentAggregatedDelivery._update(updatedAggregatedDelivery);\n        updateReasons.push('deliveryReceipt');\n      }\n    }\n\n    if (updateReasons.length > 0) {\n      this.emit('updated', { message: this, updateReasons: updateReasons });\n    }\n  }\n\n  /**\n   * Get Participant who is author of the Message\n   * @returns {Promise<Participant>}\n   */\n  async getParticipant(): Promise<Participant> {\n    let participant: Participant = null;\n    if (this.state.participantSid) {\n      participant = await this.conversation.getParticipantBySid(this.participantSid)\n        .catch(() => {\n          log.debug('Participant with sid \"' + this.participantSid + '\" not found for message ' + this.sid);\n          return null;\n        });\n    }\n    if (!participant && this.state.author) {\n      participant = await this.conversation.getParticipantByIdentity(this.state.author)\n        .catch(() => {\n          log.debug('Participant with identity \"' + this.author + '\" not found for message ' + this.sid);\n          return null;\n        });\n    }\n    if (participant) {\n      return participant;\n    }\n    let errorMesage = 'Participant with ';\n    if (this.state.participantSid) {\n      errorMesage += 'SID \\'' + this.state.participantSid + '\\' ';\n    }\n    if (this.state.author) {\n      if (this.state.participantSid) {\n        errorMesage += 'or ';\n      }\n      errorMesage += 'identity \\'' + this.state.author + '\\' ';\n    }\n    if (errorMesage === 'Participant with ') {\n      errorMesage = 'Participant ';\n    }\n    errorMesage += 'was not found';\n    throw new Error(errorMesage);\n  }\n\n  /**\n   * Get delivery receipts of the message\n   * @returns {Promise<DetailedDeliveryReceipt[]>}\n   */\n  async getDetailedDeliveryReceipts(): Promise<DetailedDeliveryReceipt[]> {\n    let paginator: Paginator<DetailedDeliveryReceipt> = await this._getDetailedDeliveryReceiptsPaginator();\n    let detailedDeliveryReceipts: DetailedDeliveryReceipt[] = [];\n\n    while (true) {\n      detailedDeliveryReceipts = [...detailedDeliveryReceipts, ...paginator.items];\n\n      if (!paginator.hasNextPage) {\n        break;\n      }\n\n      paginator = await paginator.nextPage();\n    }\n\n    return detailedDeliveryReceipts;\n  }\n\n  /**\n   * Remove the Message.\n   * @returns {Promise<Message>}\n   */\n  async remove(): Promise<Message> {\n    await this.services.session.addCommand('deleteMessage', {\n      channelSid: this.conversation.sid,\n      messageIdx: this.index.toString()\n    });\n    return this;\n  }\n\n  /**\n   * Edit message body.\n   * @param {String} body - new body of Message.\n   * @returns {Promise<Message>}\n   */\n  @validateTypesAsync('string')\n  async updateBody(body: string): Promise<Message> {\n    await this.services.session.addCommand('editMessage', {\n      channelSid: this.conversation.sid,\n      messageIdx: this.index.toString(),\n      text: body\n    });\n\n    return this;\n  }\n\n  /**\n   * Edit message attributes.\n   * @param {any} attributes new attributes for Message.\n   * @returns {Promise<Message>}\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  async updateAttributes(attributes: any): Promise<Message> {\n    await this.services.session.addCommand('editMessageAttributes', {\n      channelSid: this.conversation.sid,\n      messageIdx: this.index,\n      attributes: JSON.stringify(attributes)\n    });\n\n    return this;\n  }\n\n  private async _getDetailedDeliveryReceiptsPaginator(options?: {\n    pageToken?: string,\n    pageSize?: number\n  }): Promise<Paginator<DetailedDeliveryReceipt>> {\n    let links = await this.services.session.getSessionLinks();\n    let messagesReceiptsUrl = links.messagesReceiptsUrl.replace('%s', this.conversation.sid).replace('%s', this.sid);\n    let url = new UriBuilder(messagesReceiptsUrl).arg('PageToken', options?.pageToken).arg('PageSize', options?.pageSize).build();\n    let response = await this.services.network.get(url);\n\n    return new RestPaginator<DetailedDeliveryReceipt>(response.body.delivery_receipts.map(x => new DetailedDeliveryReceipt(x))\n      , (pageToken, pageSize) => this._getDetailedDeliveryReceiptsPaginator({ pageToken, pageSize })\n      , response.body.meta.previous_token\n      , response.body.meta.next_token);\n  }\n}\n\nexport { Message };\n\n/**\n * Fired when the Message's properties or body has been updated.\n * @event Message#updated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n","import { EventEmitter } from 'events';\nimport { Logger } from '../logger';\n\nimport { Message } from '../message';\nimport { Conversation } from '../conversation';\n\nimport { SyncList, SyncClient } from 'twilio-sync';\nimport { SyncPaginator } from '../syncpaginator';\n\nimport { Session } from '../session';\nimport { McsClient, McsMedia } from 'twilio-mcs-client';\nimport { Network } from '../services/network';\n\nconst log = Logger.scope('Messages');\n\nexport interface MessagesServices {\n  session: Session;\n  mcsClient: McsClient;\n  network: Network;\n  syncClient: SyncClient;\n}\n\n/**\n * Represents the collection of messages in a conversation\n */\nclass Messages extends EventEmitter {\n  private readonly services: MessagesServices;\n  private readonly messagesByIndex: Map<number, Message>;\n  private messagesListPromise: Promise<SyncList>;\n\n  public readonly conversation: Conversation;\n\n  constructor(conversation: Conversation, services: MessagesServices) {\n    super();\n\n    this.conversation = conversation;\n    this.services = services;\n\n    this.messagesByIndex = new Map();\n    this.messagesListPromise = null;\n  }\n\n  /**\n   * Subscribe to the Messages Event Stream\n   * @param {String} name - The name of Sync object for the Messages resource.\n   * @returns {Promise}\n   */\n  subscribe(name: string) {\n    return this.messagesListPromise =\n      this.messagesListPromise ||\n      this.services.syncClient.list({ id: name, mode: 'open_existing' })\n          .then(list => {\n\n            list.on('itemAdded', args => {\n              log.debug(this.conversation.sid + ' itemAdded: ' + args.item.index);\n              let message = new Message(this.conversation, this.services, args.item.index, args.item.data);\n              if (this.messagesByIndex.has(message.index)) {\n                log.debug('Message arrived, but already known and ignored', this.conversation.sid, message.index);\n                return;\n              }\n\n              this.messagesByIndex.set(message.index, message);\n              message.on('updated',\n                (args: Message.UpdatedEventArgs) => this.emit('messageUpdated', args));\n              this.emit('messageAdded', message);\n            });\n\n            list.on('itemRemoved', args => {\n              log.debug(this.conversation.sid + ' itemRemoved: ' + args.index);\n              let index = args.index;\n              if (this.messagesByIndex.has(index)) {\n                let message = this.messagesByIndex.get(index);\n                this.messagesByIndex.delete(message.index);\n                message.removeAllListeners('updated');\n                this.emit('messageRemoved', message);\n              }\n            });\n\n            list.on('itemUpdated', args => {\n              log.debug(this.conversation.sid + ' itemUpdated: ' + args.item.index);\n              let message = this.messagesByIndex.get(args.item.index);\n              if (message) {\n                message._update(args.item.data);\n              }\n            });\n\n            return list;\n          })\n          .catch(err => {\n            this.messagesListPromise = null;\n            if (this.services.syncClient.connectionState != 'disconnected') {\n              log.error('Failed to get messages object for conversation', this.conversation.sid, err);\n            }\n            log.debug('ERROR: Failed to get messages object for conversation', this.conversation.sid, err);\n            throw err;\n          });\n  }\n\n  async unsubscribe() {\n    if (this.messagesListPromise) {\n      let entity = await this.messagesListPromise;\n      entity.close();\n      this.messagesListPromise = null;\n    }\n  }\n\n  /**\n   * Send Message to the conversation\n   * @param {String} message - Message to post\n   * @param {any} attributes Message attributes\n   * @param {Conversation.SendEmailOptions} emailOptions Options that modify E-mail integration behaviors.\n   * @returns Returns promise which can fail\n   */\n  async send(message: string, attributes: any = {}, emailOptions?: Conversation.SendEmailOptions) {\n    log.debug('Sending text message', message, attributes, emailOptions);\n\n    return this.services.session.addCommand('sendMessage', {\n      channelSid: this.conversation.sid,\n      text: message,\n      attributes: JSON.stringify(attributes),\n      subject: emailOptions?.subject,\n    });\n  }\n\n  /**\n   * Send Media Message to the conversation\n   * @param {FormData | Conversation#SendMediaOptions} mediaContent - Media content to post\n   * @param {any} attributes Message attributes\n   * @returns Returns promise which can fail\n   */\n  async sendMedia(mediaContent: FormData | Conversation.SendMediaOptions, attributes: any = {}, emailOptions?: Conversation.SendEmailOptions) {\n    log.debug('Sending media message', mediaContent, attributes, emailOptions);\n\n    let media: McsMedia;\n    if (typeof FormData !== 'undefined'  && (mediaContent instanceof FormData)) {\n      log.debug('Sending media message as FormData', mediaContent, attributes);\n      media = await this.services.mcsClient.postFormData(mediaContent);\n    } else {\n      log.debug('Sending media message as SendMediaOptions', mediaContent, attributes);\n      let mediaOptions = mediaContent as Conversation.SendMediaOptions;\n      if (!mediaOptions.contentType || !mediaOptions.media) {\n        throw new Error('Media content <Conversation#SendMediaOptions> must contain non-empty contentType and media');\n      }\n      media = await this.services.mcsClient.post(mediaOptions.contentType, mediaOptions.media);\n    }\n    // emailOptions are currently ignored for media messages.\n    return this.services.session.addCommand('sendMediaMessage', {\n      channelSid: this.conversation.sid,\n      mediaSid: media.sid,\n      attributes: JSON.stringify(attributes)\n    });\n  }\n\n  /**\n   * Returns messages from conversation using paginator interface\n   * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.\n   * @param {String} [anchor] Most early message id which is already known, or 'end' by default\n   * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default\n   * @returns {Promise<Paginator<Message>>} last page of messages by default\n   */\n  getMessages(pageSize, anchor, direction) {\n    anchor = (typeof anchor !== 'undefined') ? anchor : 'end';\n    direction = direction || 'backwards';\n    return this._getMessages(pageSize, anchor, direction);\n  }\n\n  private wrapPaginator(order, page, op) {\n    // We should swap next and prev page here, because of misfit of Sync and Chat paging conceptions\n    let shouldReverse = order === 'desc';\n\n    let np = () => page.nextPage().then(x => this.wrapPaginator(order, x, op));\n    let pp = () => page.prevPage().then(x => this.wrapPaginator(order, x, op));\n\n    return op(page.items).then(items => ({\n      items: items.sort((x, y) => { return x.index - y.index; }),\n      hasPrevPage: shouldReverse ? page.hasNextPage : page.hasPrevPage,\n      hasNextPage: shouldReverse ? page.hasPrevPage : page.hasNextPage,\n      prevPage: shouldReverse ? np : pp,\n      nextPage: shouldReverse ? pp : np\n    }));\n  }\n\n  private _upsertMessage(index: number, value: string) {\n    let cachedMessage = this.messagesByIndex.get(index);\n    if (cachedMessage) {\n      return cachedMessage;\n    }\n\n    let message = new Message(this.conversation, this.services, index, value);\n    this.messagesByIndex.set(message.index, message);\n    message.on('updated',\n      (args: Message.UpdatedEventArgs) => this.emit('messageUpdated', args));\n    return message;\n  }\n\n  /**\n   * Returns last messages from conversation\n   * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.\n   * @param {String} [anchor] Most early message id which is already known, or 'end' by default\n   * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default\n   * @returns {Promise<SyncPaginator<Message>>} last page of messages by default\n   * @private\n   */\n  private _getMessages(pageSize, anchor, direction): Promise<SyncPaginator<Message>> {\n    anchor = (typeof anchor !== 'undefined') ? anchor : 'end';\n    pageSize = pageSize || 30;\n    let order = direction === 'backwards' ? 'desc' : 'asc';\n\n    return this.messagesListPromise\n               .then(messagesList => messagesList.getItems({\n                 from: anchor !== 'end' ? anchor : void (0),\n                 pageSize,\n                 order\n               }))\n               .then(page => this.wrapPaginator(order, page\n                 , items => Promise.all(items.map(item => this._upsertMessage(item.index, item.data))))\n               );\n  }\n}\n\nexport { Messages };\n","import { EventEmitter } from 'events';\nimport { Logger } from './logger';\n\nimport { Participants } from './data/participants';\nimport { Participant } from './participant';\nimport { Messages } from './data/messages';\nimport { Message } from './message';\n\nimport { UriBuilder, isDeepEqual, parseToNumber } from './util';\nimport { Users } from './data/users';\nimport { Paginator } from './interfaces/paginator';\nimport { Conversations } from './data/conversations';\nimport { McsClient } from 'twilio-mcs-client';\n\nimport { SyncClient } from 'twilio-sync';\nimport { Session } from './session';\nimport { ReadHorizon } from './services/readhorizon';\nimport { TypingIndicator } from './services/typingindicator';\nimport { Network } from './services/network';\nimport { validateTypesAsync, custom, literal, nonEmptyString, nonNegativeInteger, objectSchema } from 'twilio-sdk-type-validator';\n\nconst log = Logger.scope('Conversation');\n\nconst fieldMappings = {\n  lastMessage: 'lastMessage',\n  attributes: 'attributes',\n  createdBy: 'createdBy',\n  dateCreated: 'dateCreated',\n  dateUpdated: 'dateUpdated',\n  friendlyName: 'friendlyName',\n  lastConsumedMessageIndex: 'lastConsumedMessageIndex',\n  notificationLevel: 'notificationLevel',\n  sid: 'sid',\n  status: 'status',\n  uniqueName: 'uniqueName',\n  state: 'state'\n};\n\nfunction parseTime(timeString) {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport interface ConversationServices {\n  session: Session;\n  users: Users;\n  typingIndicator: TypingIndicator;\n  readHorizon: ReadHorizon;\n  network: Network;\n  mcsClient: McsClient;\n  syncClient: SyncClient;\n}\n\ninterface ConversationState {\n  uniqueName: string;\n  status: Conversation.Status;\n  attributes: any;\n  createdBy?: string;\n  dateCreated: Date;\n  dateUpdated: Date;\n  friendlyName?: string;\n  lastReadMessageIndex: number | null;\n  lastMessage?: Conversation.LastMessage;\n  notificationLevel?: Conversation.NotificationLevel;\n  state?: Conversation.State;\n}\n\ninterface ConversationDescriptor {\n  channel: string;\n  entityName: string;\n  uniqueName: string;\n  attributes: any;\n  createdBy?: string;\n  friendlyName?: string;\n  lastConsumedMessageIndex: number;\n  dateCreated: any;\n  dateUpdated: any;\n  notificationLevel?: Conversation.NotificationLevel;\n}\n\nnamespace Conversation {\n  export type UpdateReason = 'attributes' | 'createdBy' | 'dateCreated' | 'dateUpdated' |\n    'friendlyName' | 'lastReadMessageIndex' | 'state' | 'status' | 'uniqueName' | 'lastMessage' | 'notificationLevel';\n\n  export type Status = 'notParticipating' | 'joined';\n\n  export type NotificationLevel = 'default' | 'muted';\n\n  export type State = {\n    current: 'active' | 'inactive' | 'closed',\n    dateUpdated: Date\n  } | undefined;\n\n  export interface UpdatedEventArgs {\n    conversation: Conversation;\n    updateReasons: Conversation.UpdateReason[];\n  }\n\n  export interface SendMediaOptions {\n    contentType: string;\n    media: string | Buffer;\n  }\n\n  export interface SendEmailOptions {\n    subject?: string;\n  }\n\n  export interface LastMessage {\n    index?: number;\n    dateCreated?: Date;\n  }\n}\n\n/**\n * @classdesc A Conversation represents communication between multiple Conversations Clients\n * @property {any} attributes - The Conversation's custom attributes\n * @property {String} createdBy - The identity of the User that created this Conversation\n * @property {Date} dateCreated - The Date this Conversation was created\n * @property {Date} dateUpdated - The Date this Conversation was last updated\n * @property {String} [friendlyName] - The Conversation's name\n * @property {Number|null} lastReadMessageIndex - Index of the last Message the User has read in this Conversation\n * @property {Conversation#LastMessage} lastMessage - Last Message sent to this Conversation\n * @property {Conversation#NotificationLevel} notificationLevel - User Notification level for this Conversation\n * @property {String} sid - The Conversation's unique system identifier\n * @property {Conversation#Status} status - The Conversation's status\n * @property {Conversation#State} state - The Conversation's state\n * @property {String} uniqueName - The Conversation's unique name\n * @fires Conversation#participantJoined\n * @fires Conversation#participantLeft\n * @fires Conversation#participantUpdated\n * @fires Conversation#messageAdded\n * @fires Conversation#messageRemoved\n * @fires Conversation#messageUpdated\n * @fires Conversation#typingEnded\n * @fires Conversation#typingStarted\n * @fires Conversation#updated\n * @fires Conversation#removed\n */\nclass Conversation extends EventEmitter {\n  public readonly sid: string;\n\n  private services: ConversationServices;\n  private channelState: ConversationState;\n  private statusSource: Conversations.DataSource;\n\n  private entityPromise: Promise<any>;\n  private entityName: string;\n  private entity: any;\n  private messagesEntity: any;\n  private participantsEntity: Participants;\n  private participants: any;\n\n  /**\n   * These options can be passed to {@link Conversation#sendMessage}.\n   * @typedef {Object} Conversation#SendMediaOptions\n   * @property {String} contentType - content type of media\n   * @property {String | Buffer} media - content to post\n   */\n\n  /**\n   * These options can be passed to {@link Conversation#sendMessage}.\n   * @typedef {Object} Conversation#SendEmailOptions\n   * @property {String} subject - subject for the message. Ignored for media messages.\n   */\n\n  /**\n   * The update reason for <code>updated</code> event emitted on Conversation\n   * @typedef {('attributes' | 'createdBy' | 'dateCreated' | 'dateUpdated' |\n    'friendlyName' | 'lastReadMessageIndex' | 'state' | 'status' | 'uniqueName' | 'lastMessage' |\n    'notificationLevel' )} Conversation#UpdateReason\n   */\n\n  /**\n   * The status of the Conversation, relative to the Client: whether the Conversation has been <code>joined</code> or the Client is\n   * <code>notParticipating</code> in the Conversation.\n   * @typedef {('notParticipating' | 'joined')} Conversation#Status\n   */\n\n  /**\n   * The User's Notification level for Conversation, determines whether the currently logged-in User will receive\n   * pushes for events in this Conversation. Can be either <code>muted</code> or <code>default</code>,\n   * where <code>default</code> defers to global Service push configuration.\n   * @typedef {('default' | 'muted')} Conversation#NotificationLevel\n   */\n\n  /**\n   * The Conversation's state.\n   * @typedef {Object} Conversation#State\n   * @property {('active' | 'inactive' | 'closed')} current - the current state\n   * @property {Date} dateUpdated - date at which the latest conversation state update happened\n   */\n\n  constructor(services: ConversationServices, descriptor: ConversationDescriptor, sid: string) {\n    super();\n\n    let attributes = descriptor.attributes || {};\n    let createdBy = descriptor.createdBy;\n    let dateCreated = parseTime(descriptor.dateCreated);\n    let dateUpdated = parseTime(descriptor.dateUpdated);\n    let friendlyName = descriptor.friendlyName || null;\n    let lastReadMessageIndex =\n      Number.isInteger(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;\n    let uniqueName = descriptor.uniqueName || null;\n\n    try {\n      JSON.stringify(attributes);\n    } catch (e) {\n      throw new Error('Attributes must be a valid JSON object.');\n    }\n\n    this.services = services;\n\n    this.sid = sid;\n    this.entityName = descriptor.channel;\n    this.channelState = {\n      uniqueName,\n      status: 'notParticipating',\n      attributes,\n      createdBy,\n      dateCreated,\n      dateUpdated,\n      friendlyName,\n      lastReadMessageIndex: lastReadMessageIndex\n    };\n\n    if (descriptor.notificationLevel) {\n      this.channelState.notificationLevel = descriptor.notificationLevel;\n    }\n\n    this.participants = new Map();\n    this.participantsEntity = new Participants(this, this.services, this.participants);\n    this.participantsEntity.on('participantJoined', this.emit.bind(this, 'participantJoined'));\n    this.participantsEntity.on('participantLeft', this.emit.bind(this, 'participantLeft'));\n    this.participantsEntity.on('participantUpdated',\n      (args: Participant.UpdatedEventArgs) => this.emit('participantUpdated', args));\n\n    this.messagesEntity = new Messages(this, services);\n    this.messagesEntity.on('messageAdded', message => this._onMessageAdded(message));\n    this.messagesEntity.on('messageUpdated',\n      (args: Message.UpdatedEventArgs) => this.emit('messageUpdated', args));\n    this.messagesEntity.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n  }\n\n  public get uniqueName(): string { return this.channelState.uniqueName; }\n\n  public get status(): Conversation.Status { return this.channelState.status; }\n\n  public get friendlyName(): string { return this.channelState.friendlyName; }\n\n  public get dateUpdated(): any { return this.channelState.dateUpdated; }\n\n  public get dateCreated(): any { return this.channelState.dateCreated; }\n\n  public get createdBy(): string { return this.channelState.createdBy; }\n\n  public get attributes(): Object { return this.channelState.attributes; }\n\n  public get lastReadMessageIndex(): number | null { return this.channelState.lastReadMessageIndex; }\n\n  public get lastMessage(): Conversation.LastMessage { return this.channelState.lastMessage; }\n\n  public get notificationLevel(): Conversation.NotificationLevel { return this.channelState.notificationLevel; }\n\n  public get state(): Conversation.State { return this.channelState.state; }\n\n  /**\n   * The Conversation's last message's information.\n   * @typedef {Object} Conversation#LastMessage\n   * @property {Number} index - Message's index\n   * @property {Date} dateCreated - Message's creation date\n   */\n\n  /**\n   * Load and Subscribe to this Conversation and do not subscribe to its Participants and Messages.\n   * This or _subscribeStreams will need to be called before any events on Conversation will fire.\n   * @returns {Promise}\n   * @private\n   */\n  _subscribe() {\n    if (this.entityPromise) { return this.entityPromise; }\n\n    return this.entityPromise = this.entityPromise ||\n      this.services.syncClient.document({ id: this.entityName, mode: 'open_existing' })\n        .then(entity => {\n          this.entity = entity;\n          this.entity.on('updated', args => { this._update(args.data); });\n          this.entity.on('removed', () => this.emit('removed', this));\n          this._update(this.entity.data);\n          return entity;\n        })\n        .catch(err => {\n          this.entity = null;\n          this.entityPromise = null;\n          if (this.services.syncClient.connectionState != 'disconnected') {\n            log.error('Failed to get conversation object', err);\n          }\n          log.debug('ERROR: Failed to get conversation object', err);\n          throw err;\n        });\n  }\n\n  /**\n   * Load the attributes of this Conversation and instantiate its Participants and Messages.\n   * This or _subscribe will need to be called before any events on Conversation will fire.\n   * This will need to be called before any events on Participants or Messages will fire\n   * @returns {Promise}\n   * @private\n   */\n  async _subscribeStreams() {\n    try {\n      await this._subscribe();\n      log.trace('_subscribeStreams, this.entity.data=', this.entity.data);\n      const messagesObjectName = this.entity.data.messages;\n      const rosterObjectName = this.entity.data.roster;\n      await Promise.all([\n        this.messagesEntity.subscribe(messagesObjectName),\n        this.participantsEntity.subscribe(rosterObjectName)\n      ]);\n    } catch (err) {\n      if (this.services.syncClient.connectionState !== 'disconnected') {\n        log.error('Failed to subscribe on conversation objects', this.sid, err);\n      }\n      log.debug('ERROR: Failed to subscribe on conversation objects', this.sid, err);\n      throw err;\n    }\n  }\n\n  /**\n   * Stop listening for and firing events on this Conversation.\n   * @returns {Promise}\n   * @private\n   */\n  async _unsubscribe() {\n    if (this.entity) {\n      await this.entity.close();\n      this.entity = null;\n      this.entityPromise = null;\n    }\n\n    return Promise.all([\n      this.participantsEntity.unsubscribe(),\n      this.messagesEntity.unsubscribe()\n    ]);\n  }\n\n  /**\n   * Set conversation status\n   * @private\n   */\n  _setStatus(status: Conversation.Status, source: Conversations.DataSource) {\n    this.statusSource = source;\n\n    if (this.channelState.status === status) { return; }\n\n    this.channelState.status = status;\n\n    if (status === 'joined') {\n      this._subscribeStreams()\n        .catch(err => {\n          log.debug('ERROR while setting conversation status ' + status, err);\n          if (this.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        });\n    } else if (this.entityPromise) {\n      this._unsubscribe().catch(err => {\n        log.debug('ERROR while setting conversation status ' + status, err);\n        if (this.services.syncClient.connectionState !== 'disconnected') {\n          throw err;\n        }\n      });\n    }\n  }\n\n  /**\n   * If conversation's status update source\n   * @private\n   * @return {Conversations.DataSource}\n   */\n  _statusSource(): Conversations.DataSource {\n    return this.statusSource;\n  }\n\n  private static preprocessUpdate(update, conversationSid) {\n    try {\n      if (typeof update.attributes === 'string') {\n        update.attributes = JSON.parse(update.attributes);\n      } else if (update.attributes) {\n        JSON.stringify(update.attributes);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed attributes from the server for conversation: ' + conversationSid);\n      update.attributes = {};\n    }\n\n    try {\n      if (update.dateCreated) {\n        update.dateCreated = new Date(update.dateCreated);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed dateCreated from the server for conversation: ' + conversationSid);\n      delete update.dateCreated;\n    }\n\n    try {\n      if (update.dateUpdated) {\n        update.dateUpdated = new Date(update.dateUpdated);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed dateUpdated from the server for conversation: ' + conversationSid);\n      delete update.dateUpdated;\n    }\n\n    try {\n      if (update.lastMessage && update.lastMessage.timestamp) {\n        update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n      }\n    } catch (e) {\n      log.warn('Retrieved malformed lastMessage.timestamp from the server for conversation: ' + conversationSid);\n      delete update.lastMessage.timestamp;\n    }\n  }\n\n  /**\n   * Updates local conversation object with new values\n   * @private\n   */\n  _update(update) {\n    log.trace('_update', update);\n\n    Conversation.preprocessUpdate(update, this.sid);\n    const updateReasons = new Set<Conversation.UpdateReason>();\n\n    for (const key of Object.keys(update)) {\n      const localKey = fieldMappings[key];\n\n      if (!localKey) {\n        continue;\n      }\n\n      switch (localKey) {\n        case fieldMappings.status:\n          if (!update.status || update.status === 'unknown'\n            || this.channelState.status === update.status) {\n            break;\n          }\n\n          this.channelState.status = update.status;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.attributes:\n          if (isDeepEqual(this.channelState.attributes, update.attributes)) {\n            break;\n          }\n\n          this.channelState.attributes = update.attributes;\n          updateReasons.add(localKey);\n\n          break;\n        case fieldMappings.lastConsumedMessageIndex:\n          if (update.lastConsumedMessageIndex === undefined\n            || update.lastConsumedMessageIndex === this.channelState.lastReadMessageIndex) {\n            break;\n          }\n\n          this.channelState.lastReadMessageIndex = update.lastConsumedMessageIndex;\n          updateReasons.add('lastReadMessageIndex');\n\n          break;\n        case fieldMappings.lastMessage:\n          if (this.channelState.lastMessage && !update.lastMessage) {\n            delete this.channelState.lastMessage;\n            updateReasons.add(localKey);\n\n            break;\n          }\n\n          this.channelState.lastMessage = this.channelState.lastMessage || {};\n\n          if (update.lastMessage?.index !== undefined\n            && update.lastMessage.index !== this.channelState.lastMessage.index) {\n            this.channelState.lastMessage.index = update.lastMessage.index;\n            updateReasons.add(localKey);\n          }\n\n          if (update.lastMessage?.timestamp !== undefined\n            && this.channelState.lastMessage?.dateCreated?.getTime() !== update.lastMessage.timestamp.getTime()) {\n            this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;\n            updateReasons.add(localKey);\n          }\n\n          if (isDeepEqual(this.channelState.lastMessage, {})) {\n            delete this.channelState.lastMessage;\n          }\n\n          break;\n        case fieldMappings.state:\n          const state = update.state || undefined;\n\n          if (state !== undefined) {\n            state.dateUpdated = new Date(state.dateUpdated);\n          }\n\n          if (isDeepEqual(this.channelState.state, state)) {\n            break;\n          }\n\n          this.channelState.state = state;\n          updateReasons.add(localKey);\n\n          break;\n        default:\n          const isDate = update[key] instanceof Date;\n          const keysMatchAsDates = isDate && this.channelState[localKey]?.getTime() === update[key].getTime();\n          const keysMatchAsNonDates = !isDate && this[localKey] === update[key];\n\n          if (keysMatchAsDates || keysMatchAsNonDates) {\n            break;\n          }\n\n          this.channelState[localKey] = update[key];\n          updateReasons.add(localKey);\n      }\n    }\n\n    if (updateReasons.size > 0) {\n      this.emit('updated', { conversation: this, updateReasons: [...updateReasons] });\n    }\n  }\n\n  /**\n   * @private\n   */\n  private _onMessageAdded(message) {\n    for (let participant of this.participants.values()) {\n      if (participant.identity === message.author) {\n        participant._endTyping();\n        break;\n      }\n    }\n    this.emit('messageAdded', message);\n  }\n\n  /**\n   * Add a participant to the Conversation by its Identity.\n   * @param {String} identity - Identity of the Client to add\n   * @param {any} [attributes] Attributes to be attached to the participant\n   * @returns {Promise<void>}\n   */\n  @validateTypesAsync(\n    nonEmptyString,\n    ['undefined', 'string', 'number', 'boolean', 'object', literal(null)]\n  )\n  async add(identity: string, attributes?: any): Promise<void> {\n    return this.participantsEntity.add(identity, attributes);\n  }\n\n  /**\n   * Add a non-chat participant to the Conversation.\n   *\n   * @param {String} proxyAddress Proxy (Twilio) address of the participant\n   * @param {String} address User address of the participant\n   * @param {any} [attributes] Attributes to be attached to the participant\n   * @returns {Promise<void>}\n   */\n  @validateTypesAsync(nonEmptyString, nonEmptyString, ['undefined', 'object'])\n  async addNonChatParticipant(proxyAddress: string, address: string, attributes: Record<string, any> = {}) {\n    return this.participantsEntity.addNonChatParticipant(proxyAddress, address, attributes);\n  }\n\n  /**\n   * Advance Conversation's last read Message index to current read horizon.\n   * Rejects if User is not Participant of Conversation.\n   * Last read Message index is updated only if new index value is higher than previous.\n   * @param {Number} index - Message index to advance to as last read\n   * @returns {Promise<number>} resulting unread messages count in the conversation\n   */\n  @validateTypesAsync(nonNegativeInteger)\n  async advanceLastReadMessageIndex(index: number): Promise<number> {\n    await this._subscribeStreams();\n    return this.services.readHorizon.advanceLastReadMessageIndexForConversation(this.sid, index, this.lastReadMessageIndex);\n  }\n\n  /**\n   * Delete the Conversation and unsubscribe from its events.\n   * @returns {Promise<Conversation>}\n   */\n  async delete(): Promise<Conversation> {\n    await this.services.session.addCommand('destroyChannel', {\n      channelSid: this.sid\n    });\n    return this;\n  }\n\n  /**\n   * Get the custom attributes of this Conversation.\n   * @returns {Promise<any>} attributes of this Conversation\n   */\n  async getAttributes(): Promise<any> {\n    await this._subscribe();\n    return this.attributes;\n  }\n\n  /**\n   * Returns messages from conversation using paginator interface.\n   * @param {Number} [pageSize=30] Number of messages to return in single chunk\n   * @param {Number} [anchor] - Index of newest Message to fetch. From the end by default\n   * @param {('backwards'|'forward')} [direction=backwards] - Query direction. By default it query backwards\n   *                                                          from newer to older. 'forward' will query in opposite direction\n   * @returns {Promise<Paginator<Message>>} page of messages\n   */\n  @validateTypesAsync(\n    ['undefined', nonNegativeInteger],\n    ['undefined', nonNegativeInteger],\n    ['undefined', literal('backwards', 'forward')]\n  )\n  async getMessages(pageSize?: number, anchor?: number, direction?: 'backwards' | 'forward'): Promise<Paginator<Message>> {\n    await this._subscribeStreams();\n    return this.messagesEntity.getMessages(pageSize, anchor, direction);\n  }\n\n  /**\n   * Get a list of all Participants joined to this Conversation.\n   * @returns {Promise<Participant[]>}\n   */\n  async getParticipants(): Promise<Participant[]> {\n    await this._subscribeStreams();\n    return this.participantsEntity.getParticipants();\n  }\n\n  /**\n   * Get conversation participants count.\n   * <br/>\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also possibly be incorrect for a few seconds. The Conversation system does not\n   * provide real time events for counter values changes.\n   * <br/>\n   * So this is quite useful for any UI badges, but is not recommended\n   * to build any core application logic based on these counters being accurate in real time.\n   * @returns {Promise<number>}\n   */\n  async getParticipantsCount(): Promise<number> {\n    let links = await this.services.session.getSessionLinks();\n    let url = new UriBuilder(links.publicChannelsUrl).path(this.sid).build();\n    let response = await this.services.network.get(url);\n    return response.body.members_count;\n  }\n\n  /**\n   * Get a Participant by its SID.\n   * @param {String} participantSid - Participant sid\n   * @returns {Promise<Participant>}\n   */\n  @validateTypesAsync(nonEmptyString)\n  async getParticipantBySid(participantSid: string): Promise<Participant> {\n    return this.participantsEntity.getParticipantBySid(participantSid);\n  }\n\n  /**\n   * Get a Participant by its identity.\n   * @param {String} identity - Participant identity\n   * @returns {Promise<Participant>}\n   */\n  @validateTypesAsync(nonEmptyString)\n  async getParticipantByIdentity(identity: string): Promise<Participant> {\n    return this.participantsEntity.getParticipantByIdentity(identity);\n  }\n\n  /**\n   * Get total message count in a conversation.\n   * <br/>\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also possibly be incorrect for a few seconds. The Conversations system does not\n   * provide real time events for counter values changes.\n   * <br/>\n   * So this is quite useful for any UI badges, but is not recommended\n   * to build any core application logic based on these counters being accurate in real time.\n   * @returns {Promise<number>}\n   */\n  async getMessagesCount(): Promise<number> {\n    let links = await this.services.session.getSessionLinks();\n    let url = new UriBuilder(links.publicChannelsUrl).path(this.sid).build();\n    let response = await this.services.network.get(url);\n    return response.body.messages_count;\n  }\n\n  /**\n   * Get unread messages count for the User if they are a Participant of this Conversation.\n   * Rejects if the User is not a Participant of the Conversation.\n   * <br/>\n   * Use this method to obtain the number of unread messages together with\n   * updateLastReadMessageIndex() instead of relying on the\n   * Message indices which may have gaps. See Message.index for details.\n   * <br/>\n   * This method is semi-realtime. This means that this data will be eventually correct,\n   * but will also possibly be incorrect for a few seconds. The Chat system does not\n   * provide real time events for counter values changes.\n   * <br/>\n   * This is quite useful for any “unread messages count” badges, but is not recommended\n   * to build any core application logic based on these counters being accurate in real time.\n   * @returns {Promise<number|null>}\n   */\n  async getUnreadMessagesCount(): Promise<number | null> {\n    let links = await this.services.session.getSessionLinks();\n    let url = new UriBuilder(links.myChannelsUrl).arg('ChannelSid', this.sid).build();\n    let response = await this.services.network.get(url);\n    if (response.body.channels.length && response.body.channels[0].channel_sid == this.sid) {\n      if ((typeof response.body.channels[0].unread_messages_count !== 'undefined') && response.body.channels[0].unread_messages_count != null) {\n        return response.body.channels[0].unread_messages_count;\n      }\n      return null;\n    }\n\n    throw new Error('Conversation is not in user conversations list');\n  }\n\n  /**\n   * Join the Conversation and subscribe to its events.\n   * @returns {Promise<Conversation>}\n   */\n  async join(): Promise<Conversation> {\n    await this.services.session.addCommand('joinChannelV2', { channelSid: this.sid });\n    return this;\n  }\n\n  /**\n   * Leave the Conversation.\n   * @returns {Promise<Conversation>}\n   */\n  async leave(): Promise<Conversation> {\n    if (this.channelState.status === 'joined') {\n      await this.services.session.addCommand('leaveChannel', { channelSid: this.sid });\n    }\n\n    return this;\n  }\n\n  /**\n   * Remove a Participant from the Conversation. When a string is passed as the argument, it will assume that the string is an identity.\n   * @param {String|Participant} participant - identity or participant object to remove\n   * @returns {Promise<void>}\n   */\n  @validateTypesAsync([nonEmptyString, Participant])\n  async removeParticipant(participant: string | Participant): Promise<void> {\n    if (participant instanceof Participant) {\n      await this.participantsEntity.removeBySid(participant.sid);\n      return;\n    }\n\n    await this.participantsEntity.removeByIdentity(participant as string);\n  }\n\n  /**\n   * Send a Message in the Conversation.\n   * @param {String|FormData|Conversation#SendMediaOptions|null} message - The message body for text message,\n   * FormData or MediaOptions for media content. Sending FormData supported only with browser engine\n   * @param {any} [messageAttributes] - attributes for the message\n   * @param {Conversation#SendEmailOptions} [emailOptions] - email options for the message\n   * @returns {Promise<number>} new Message's index in the Conversation's messages list\n   */\n  @validateTypesAsync(\n    [\n      'string',\n      literal(null),\n      // Wrapping it into a custom rule is necessary because the FormData class is not available on initialization.\n      custom((value) => [value instanceof FormData, 'an instance of FormData']),\n      objectSchema('media options', {\n        contentType: nonEmptyString,\n        media: custom((value) => {\n          let isValid = (typeof value === 'string' && value.length > 0) || value instanceof Uint8Array || value instanceof ArrayBuffer;\n\n          if (typeof Blob === 'function') {\n            isValid = isValid || value instanceof Blob;\n          }\n\n          return [\n            isValid,\n            'a non-empty string, an instance of Buffer or an instance of Blob'\n          ];\n        })\n      })\n    ],\n    ['undefined', 'string', 'number', 'boolean', 'object', literal(null)],\n    ['undefined', literal(null), objectSchema('email attributes', {\n      subject: [nonEmptyString, 'undefined']\n    })]\n  )\n  async sendMessage(message: string | FormData | Conversation.SendMediaOptions | null, messageAttributes?: any,\n                    emailOptions?: Conversation.SendEmailOptions): Promise<number> {\n    if (typeof message === 'string' || message === null) {\n      let response = await this.messagesEntity.send(message, messageAttributes, emailOptions);\n      return parseToNumber(response.messageId);\n    }\n\n    let response = await this.messagesEntity.sendMedia(message, messageAttributes, emailOptions);\n    return parseToNumber(response.messageId);\n  }\n\n  /**\n   * Set last read Conversation's Message index to last known Message's index in this Conversation.\n   * @returns {Promise<number>} resulting unread messages count in the conversation\n   */\n  async setAllMessagesRead(): Promise<number> {\n    await this._subscribeStreams();\n\n    let messagesPage = await this.getMessages(1);\n\n    if (messagesPage.items.length > 0) {\n      return this.advanceLastReadMessageIndex(messagesPage.items[0].index);\n    }\n\n    return Promise.resolve(0);\n  }\n\n  /**\n   * Set all messages in the conversation unread.\n   * @returns {Promise<number>} resulting unread messages count in the conversation\n   */\n  async setAllMessagesUnread(): Promise<number> {\n    await this._subscribeStreams();\n    return this.services.readHorizon.updateLastReadMessageIndexForConversation(this.sid, null);\n  }\n\n  /**\n   * Set User Notification level for this conversation.\n   * @param {Conversation#NotificationLevel} notificationLevel - The new user notification level\n   * @returns {Promise<void>}\n   */\n  @validateTypesAsync(literal('default', 'muted'))\n  async setUserNotificationLevel(notificationLevel: Conversation.NotificationLevel): Promise<void> {\n    await this.services.session.addCommand('editNotificationLevel', { channelSid: this.sid, notificationLevel: notificationLevel });\n  }\n\n  /**\n   * Send a notification to the server indicating that this Client is currently typing in this Conversation.\n   * Typing ended notification is sent after a while automatically, but by calling again this method you ensure typing ended is not received.\n   * @returns {Promise<void>}\n   */\n  typing(): Promise<void> {\n    return this.services.typingIndicator.send(this.sid);\n  }\n\n  /**\n   * Update the Conversation's attributes.\n   * @param {any} attributes - The new attributes object\n   * @returns {Promise<Conversation>}\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  async updateAttributes(attributes: any): Promise<Conversation> {\n    await this.services.session.addCommand('editAttributes', {\n      channelSid: this.sid,\n      attributes: JSON.stringify(attributes)\n    });\n\n    return this;\n  }\n\n  /**\n   * Update the Conversation's friendlyName.\n   * @param {String|null} name - The new Conversation friendlyName\n   * @returns {Promise<Conversation>}\n   */\n  @validateTypesAsync(['string', literal(null)])\n  async updateFriendlyName(name: string | null): Promise<Conversation> {\n    if (this.channelState.friendlyName !== name) {\n      await this.services.session.addCommand('editFriendlyName', {\n        channelSid: this.sid,\n        friendlyName: name\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Set Conversation's last read Message index to current read horizon.\n   * @param {Number|null} index - Message index to set as last read.\n   * If null provided, then the behavior is identical to {@link Conversation#setAllMessagesUnread}\n   * @returns {Promise<number>} resulting unread messages count in the conversation\n   */\n  @validateTypesAsync([literal(null), nonNegativeInteger])\n  async updateLastReadMessageIndex(index: number | null): Promise<number> {\n    await this._subscribeStreams();\n    return this.services.readHorizon.updateLastReadMessageIndexForConversation(this.sid, index);\n  }\n\n  /**\n   * Update the Conversation's unique name.\n   * @param {String|null} uniqueName - New unique name for the Conversation. Setting unique name to null removes it.\n   * @returns {Promise<Conversation>}\n   */\n  @validateTypesAsync(['string', literal(null)])\n  async updateUniqueName(uniqueName: string | null): Promise<Conversation> {\n    if (this.channelState.uniqueName !== uniqueName) {\n      if (!uniqueName) {\n        uniqueName = '';\n      }\n\n      await this.services.session.addCommand('editUniqueName', {\n        channelSid: this.sid,\n        uniqueName: uniqueName\n      });\n    }\n\n    return this;\n  }\n}\n\nexport { ConversationDescriptor, Conversation };\n\n/**\n * Fired when a Participant has joined the Conversation.\n * @event Conversation#participantJoined\n * @type {Participant}\n */\n/**\n * Fired when a Participant has left the Conversation.\n * @event Conversation#participantLeft\n * @type {Participant}\n */\n/**\n * Fired when a Participant's fields has been updated.\n * @event Conversation#participantUpdated\n * @type {Object}\n * @property {Participant} participant - Updated Participant\n * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons\n */\n/**\n * Fired when a new Message has been added to the Conversation.\n * @event Conversation#messageAdded\n * @type {Message}\n */\n/**\n * Fired when Message is removed from Conversation's message list.\n * @event Conversation#messageRemoved\n * @type {Message}\n */\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Conversation#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n/**\n * Fired when a Participant has stopped typing.\n * @event Conversation#typingEnded\n * @type {Participant}\n */\n/**\n * Fired when a Participant has started typing.\n * @event Conversation#typingStarted\n * @type {Participant}\n */\n/**\n * Fired when a Conversation's attributes or metadata have been updated.\n * @event Conversation#updated\n * @type {Object}\n * @property {Conversation} conversation - Updated Conversation\n * @property {Conversation#UpdateReason[]} updateReasons - Array of Conversation's updated event reasons\n */\n/**\n * Fired when the Conversation was destroyed or currently logged in User has left private Conversation\n * @event Conversation#removed\n * @type {Conversation}\n */\n","import { EventEmitter } from 'events';\nimport { Logger } from '../logger';\nimport { Conversation } from '../conversation';\n\nimport { SyncMap, SyncClient } from 'twilio-sync';\nimport { Session } from '../session';\nimport { SyncList } from '../synclist';\nimport { Users } from './users';\nimport { Network } from '../services/network';\nimport { TypingIndicator } from '../services/typingindicator';\nimport { ReadHorizon } from '../services/readhorizon';\nimport { McsClient } from 'twilio-mcs-client';\nimport { Deferred } from '../util/deferred';\nimport { Participant } from '../participant';\nimport { Message } from '../message';\nimport { isDeepEqual, parseAttributes, parseTime, UriBuilder } from '../util';\n\nconst log = Logger.scope('Conversations');\n\nexport interface ConversationsServices {\n  session: Session;\n  syncClient: SyncClient;\n  syncList: SyncList;\n  users: Users;\n  typingIndicator: TypingIndicator;\n  readHorizon: ReadHorizon;\n  network: Network;\n  mcsClient: McsClient;\n}\n\n/**\n * Represents conversations collection\n * {@see Conversation}\n */\nclass Conversations extends EventEmitter {\n\n  private services: ConversationsServices;\n  public readonly conversations: Map<string, Conversation>;\n  private readonly thumbstones: Set<string>; // sids\n  private syncListFetched: boolean;\n  public readonly syncListRead: Deferred<boolean>;\n\n  constructor(services: ConversationsServices) {\n    super();\n    this.services = services;\n    this.conversations = new Map<string, Conversation>();\n    this.thumbstones = new Set<string>();\n    this.syncListFetched = false;\n    this.syncListRead = new Deferred<boolean>();\n  }\n\n  private getMap(): Promise<SyncMap> {\n    return this.services.session.getMyConversationsId()\n               .then(name => this.services.syncClient.map({ id: name, mode: 'open_existing' }));\n  }\n\n  /**\n   * Add conversation to server\n   * @private\n   * @returns {Promise<Conversation>} Conversation\n   */\n  async addConversation(options): Promise<Conversation> {\n    let attributes;\n    if (typeof options.attributes === 'undefined') {\n      attributes = {};\n    } else {\n      attributes = options.attributes;\n    }\n\n    let response = await this.services.session.addCommand('createConversation', {\n      friendlyName: options.friendlyName,\n      uniqueName: options.uniqueName,\n      attributes: JSON.stringify(attributes)\n    }) as Object;\n\n    let conversationSid = 'conversationSid' in response ? response['conversationSid'] : null;\n    let conversationDocument = 'conversation' in response ? response['conversation'] : null;\n\n    let existingConversation = this.conversations.get(conversationSid);\n    if (existingConversation) {\n      await existingConversation._subscribe();\n      return existingConversation;\n    }\n\n    let conversation = new Conversation(this.services,\n      {\n        channel: conversationDocument,\n\n        entityName: null,\n        uniqueName: null,\n        attributes: null,\n        createdBy: null,\n        friendlyName: null,\n        lastConsumedMessageIndex: null,\n        dateCreated: null,\n        dateUpdated: null\n      },\n      conversationSid);\n\n    this.conversations.set(conversation.sid, conversation);\n    this.registerForEvents(conversation);\n\n    await conversation._subscribe();\n    this.emit('conversationAdded', conversation);\n    return conversation;\n  }\n\n  /**\n   * Fetch conversations list and instantiate all necessary objects\n   */\n  fetchConversations() {\n    this.getMap()\n        .then(async map => {\n          map.on('itemAdded', args => {\n            log.debug('itemAdded: ' + args.item.key);\n            this.upsertConversation('sync', args.item.key, args.item.data);\n          });\n\n          map.on('itemRemoved', args => {\n            log.debug('itemRemoved: ' + args.key);\n            let sid = args.key;\n            if (!this.syncListFetched) {\n              this.thumbstones.add(sid);\n            }\n            let conversation = this.conversations.get(sid);\n            if (conversation) {\n              if (conversation && conversation.status === 'joined' /*|| conversation.status === 'invited'*/) {\n                conversation._setStatus('notParticipating', 'sync');\n                this.emit('conversationLeft', conversation);\n              }\n\n              this.conversations.delete(sid);\n              this.emit('conversationRemoved', conversation);\n              conversation.emit('removed', conversation);\n            }\n          });\n\n          map.on('itemUpdated', args => {\n            log.debug('itemUpdated: ' + args.item.key);\n            this.upsertConversation('sync', args.item.key, args.item.data);\n          });\n\n          let upserts = [];\n\n          let paginator = await this.services.syncList.getPage();\n          let items = paginator.items;\n          items.forEach(item => {\n            upserts.push(this.upsertConversation('synclist', item.channel_sid, item));\n          });\n\n          while (paginator.hasNextPage) {\n            paginator = await paginator.nextPage();\n            paginator.items.forEach(item => {\n              upserts.push(this.upsertConversation('synclist', item.channel_sid, item));\n            });\n          }\n\n          this.syncListRead.set(true);\n\n          return Promise.all(upserts);\n        })\n        .then(() => {\n          this.syncListFetched = true;\n          this.thumbstones.clear();\n          log.debug('Conversations list fetched');\n        })\n        .then(() => this)\n        .catch(e => {\n          if (this.services.syncClient.connectionState != 'disconnected') {\n            log.error('Failed to get conversations list', e);\n          }\n          log.debug('ERROR: Failed to get conversations list', e);\n          throw e;\n        });\n  }\n\n  private _wrapPaginator(page, op) {\n    return op(page.items)\n      .then(items => ({\n        items: items,\n        hasNextPage: page.hasNextPage,\n        hasPrevPage: page.hasPrevPage,\n        nextPage: () => page.nextPage().then(x => this._wrapPaginator(x, op)),\n        prevPage: () => page.prevPage().then(x => this._wrapPaginator(x, op))\n      }));\n  }\n\n  getConversations(args) {\n    return this.getMap()\n               .then(conversationsMap => conversationsMap.getItems(args))\n               .then(page => this._wrapPaginator(page\n                 , items => Promise.all(items.map(item => this.upsertConversation('sync', item.key, item.data))))\n               );\n  }\n\n  getConversation(sid: string): Promise<Conversation> {\n    return this.getMap()\n      .then(conversationsMap => conversationsMap.getItems({ key: sid }))\n      .then(page => page.items.map(item => this.upsertConversation('sync', item.key, item.data)))\n      .then(items => items.length > 0 ? items[0] : null);\n  }\n\n  async getConversationByUniqueName(uniqueName: string): Promise<Conversation> {\n    const links = await this.services.session.getSessionLinks();\n    const url = new UriBuilder(links.myChannelsUrl).path(uniqueName).build();\n    const response = await this.services.network.get(url);\n    const body = response.body;\n\n    const sid = body.channel_sid;\n    const data = {\n      entityName: null,\n      lastConsumedMessageIndex: body.last_consumed_message_index,\n      status: body?.status || 'unknown',\n      friendlyName: body.friendly_name,\n      dateUpdated: body.date_updated,\n      dateCreated: body.date_created,\n      uniqueName: body.unique_name,\n      createdBy: body.created_by,\n      attributes: body.attributes,\n      channel: `${sid}.channel`,\n      notificationLevel: body?.notification_level,\n      sid\n    };\n\n    return this.upsertConversation('sync', sid, data);\n  }\n\n  async getWhisperConversation(sid: string): Promise<Conversation> {\n    const links = await this.services.session.getSessionLinks();\n    const url = new UriBuilder(links.publicChannelsUrl).path(sid).build();\n    const response = await this.services.network.get(url);\n    const body = response.body;\n\n    if (body.type !== 'private') {\n      return;\n    }\n\n    // todo: refactor this after the back-end change.\n\n    // Currently, a conversation that is created using a non-conversations-specific\n    // endpoint (i.e., a chat-specific endpoint) will not have a state property set.\n    // The back-end team will fix this, but only when they get some more time to work\n    // on this. For now, the SDK will assume that the default state is active when\n    // the property is absent from the REST response. The back-end team also mentioned\n    // that the state property will become a proper JSON object, as opposed to a JSON\n    // string, which is also covered in the following code.\n\n    let state: {\n      'state.v1'?: {\n        current?: 'active' | 'inactive' | 'closed';\n      }\n    } | undefined;\n\n    // If the state property is a string, it's expected to be a string that represents\n    // a JSON object.\n\n    if (typeof body.state === 'string') {\n      state = JSON.parse(body.state);\n    }\n\n    // If the state property is already a non-nullable object, then no JSON parsing is\n    // required.\n\n    if (typeof body.state === 'object' && body.state !== null) {\n      state = body.state;\n    }\n\n    if (state?.['state.v1']?.current === 'closed') {\n      return;\n    }\n\n    const data = {\n      entityName: null,\n      lastConsumedMessageIndex: body.last_consumed_message_index,\n      status: body?.status || 'unknown',\n      friendlyName: body.friendly_name,\n      dateUpdated: body.date_updated,\n      dateCreated: body.date_created,\n      uniqueName: body.unique_name,\n      createdBy: body.created_by,\n      attributes: body.attributes,\n      channel: `${sid}.channel`,\n      notificationLevel: body?.notification_level,\n      sid\n    };\n\n    return this.upsertConversation('sync', sid, data);\n  }\n\n  private upsertConversation(source: Conversations.DataSource, sid: string, data): Promise<Conversation> {\n    log.trace('upsertConversation(sid=' + sid + ', data=', data);\n    let conversation = this.conversations.get(sid);\n\n    // Update the Conversation's status if we know about it\n    if (conversation) {\n      log.trace('upsertConversation: conversation ' + sid + ' is known and it\\'s' +\n        ' status is known from source ' + conversation._statusSource() +\n        ' and update came from source ' + source, conversation);\n      if (typeof conversation._statusSource() === 'undefined'\n        || source === conversation._statusSource()\n        || (source === 'synclist' && conversation._statusSource() !== 'sync')\n        || source === 'sync') {\n        if (data.status === 'joined' && conversation.status !== 'joined') {\n          conversation._setStatus('joined', source);\n\n          let updateData: any = {};\n\n          if (typeof data.notificationLevel !== 'undefined') {\n            updateData.notificationLevel = data.notificationLevel;\n          }\n\n          if (typeof data.lastConsumedMessageIndex !== 'undefined') {\n            updateData.lastConsumedMessageIndex = data.lastConsumedMessageIndex;\n          }\n\n          if (!isDeepEqual(updateData, {})) {\n            conversation._update(updateData);\n          }\n\n          conversation._subscribe().then(() => { this.emit('conversationJoined', conversation); });\n        } else if (data.status === 'notParticipating' && conversation.status === 'joined') {\n          conversation._setStatus('notParticipating', source);\n          conversation._update(data);\n          conversation._subscribe().then(() => { this.emit('conversationLeft', conversation); });\n        } else if (data.status === 'notParticipating') {\n          conversation._subscribe();\n        } else {\n          conversation._update(data);\n        }\n      } else {\n        log.trace('upsertConversation: conversation is known from sync and came from chat, ignoring', {\n          sid: sid,\n          data: data.status,\n          conversation: conversation.status\n        });\n\n      }\n      return conversation._subscribe().then(() => conversation);\n    }\n\n    if ((source === 'chat' || source === 'synclist') && this.thumbstones.has(sid)) {\n      // if conversation was deleted, we ignore it\n      log.trace('upsertConversation: conversation is deleted and came again from chat, ignoring', sid);\n      return;\n    }\n\n    // Fetch the Conversation if we don't know about it\n    log.trace('upsertConversation: creating local conversation object with sid ' + sid, data);\n    conversation = new Conversation(this.services, data, sid);\n    this.conversations.set(sid, conversation);\n    return conversation._subscribe().then(() => {\n      this.registerForEvents(conversation);\n      this.emit('conversationAdded', conversation);\n      if (data.status === 'joined') {\n        conversation._setStatus('joined', source);\n        this.emit('conversationJoined', conversation);\n      }\n      return conversation;\n    });\n  }\n\n  private onConversationRemoved(sid: string) {\n    let conversation = this.conversations.get(sid);\n    if (conversation) {\n      this.conversations.delete(sid);\n      this.emit('conversationRemoved', conversation);\n    }\n  }\n\n  private registerForEvents(conversation) {\n    conversation.on('removed', () => this.onConversationRemoved(conversation.sid));\n    conversation.on('updated', (args: Conversation.UpdatedEventArgs) => this.emit('conversationUpdated', args));\n    conversation.on('participantJoined', this.emit.bind(this, 'participantJoined'));\n    conversation.on('participantLeft', this.emit.bind(this, 'participantLeft'));\n    conversation.on('participantUpdated', (args: Participant.UpdatedEventArgs) => this.emit('participantUpdated', args));\n    conversation.on('messageAdded', this.emit.bind(this, 'messageAdded'));\n    conversation.on('messageUpdated', (args: Message.UpdatedEventArgs) => this.emit('messageUpdated', args));\n    conversation.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n    conversation.on('typingStarted', this.emit.bind(this, 'typingStarted'));\n    conversation.on('typingEnded', this.emit.bind(this, 'typingEnded'));\n  }\n}\n\nnamespace Conversations {\n  export type DataSource = 'sync' | 'chat' | 'synclist';\n}\n\nexport { Conversation, Conversations };\n","import { EventEmitter } from 'events';\n\nimport { Logger } from './logger';\nimport { Session } from './session';\nimport { SyncClient } from 'twilio-sync';\nimport { isDeepEqual, parseAttributes } from './util';\nimport { validateTypesAsync, literal } from 'twilio-sdk-type-validator';\n\nconst log = Logger.scope('User');\n\ninterface UserState {\n  identity: string;\n  entityName: string;\n  friendlyName: string;\n  attributes: any;\n  online: boolean;\n  notifiable: boolean;\n}\n\nexport interface UserServices {\n  session: Session;\n  syncClient: SyncClient;\n}\n\nnamespace User {\n  export type SubscriptionState = 'initializing' | 'subscribed' | 'unsubscribed';\n\n  export type UpdateReason = 'friendlyName' | 'attributes' | 'reachabilityOnline' | 'reachabilityNotifiable';\n\n  export interface UpdatedEventArgs {\n    user: User;\n    updateReasons: User.UpdateReason[];\n  }\n}\n\n/**\n * @classdesc Extended user information.\n * Note that <code>isOnline</code> and <code>isNotifiable</code> properties are eligible\n * to use only if reachability function is enabled.\n * You may check if it is enabled by reading value of {@link Client}'s <code>reachabilityEnabled</code> property.\n *\n * @property {String} identity - User identity\n * @property {String} friendlyName - User friendly name, null if not set\n * @property {any} attributes - Object with custom attributes for user\n * @property {Boolean} isOnline - User real-time conversation connection status\n * @property {Boolean} isNotifiable - User push notification registration status\n * @property {Boolean} isSubscribed - Check if this user receives real-time status updates\n *\n * @fires User#updated\n * @fires User#userSubscribed\n * @fires User#userUnsubscribed\n *\n * @constructor\n * @param {String} identity - Identity of user\n * @param {String} entityId - id of user's object\n * @param {Object} datasync - datasync service\n * @param {Object} session - session service\n */\nclass User extends EventEmitter {\n\n  private entity: any;\n  private services: UserServices;\n  private state: UserState;\n  private promiseToFetch: Promise<User>;\n  private subscribed: User.SubscriptionState;\n\n  /**\n   * The update reason for <code>updated</code> event emitted on User\n   * @typedef {('friendlyName' | 'attributes' | 'reachabilityOnline' | 'reachabilityNotifiable')} User#UpdateReason\n   */\n\n  constructor(identity: string, entityName: string, services: UserServices) {\n    super();\n\n    this.subscribed = 'initializing';\n    this.setMaxListeners(0);\n\n    this.services = services;\n\n    this.state = {\n      identity: identity,\n      entityName: entityName,\n      friendlyName: null,\n      attributes: {},\n      online: null,\n      notifiable: null\n    };\n  }\n\n  public get identity(): string { return this.state.identity; }\n\n  public set identity(identity: string) { this.state.identity = identity; }\n\n  public set entityName(name: string) { this.state.entityName = name; }\n\n  public get attributes() { return this.state.attributes; }\n\n  public get friendlyName(): string { return this.state.friendlyName; }\n\n  public get isOnline(): boolean { return this.state.online; }\n\n  public get isNotifiable(): boolean { return this.state.notifiable; }\n\n  public get isSubscribed(): boolean { return this.subscribed == 'subscribed'; }\n\n  // Handles service updates\n  _update(key: string, value: any) {\n    let updateReasons: User.UpdateReason[] = [];\n    log.debug('User for', this.state.identity, 'updated:', key, value);\n    switch (key) {\n      case 'friendlyName':\n        if (this.state.friendlyName !== value.value) {\n          updateReasons.push('friendlyName');\n          this.state.friendlyName = value.value;\n        }\n        break;\n      case 'attributes':\n        const updateAttributes = parseAttributes(value.value, `Retrieved malformed attributes from the server for user: ${this.state.identity}`, log);\n        if (!isDeepEqual(this.state.attributes, updateAttributes)) {\n          this.state.attributes = updateAttributes;\n          updateReasons.push('attributes');\n        }\n        break;\n      case 'reachability':\n        if (this.state.online !== value.online) {\n          this.state.online = value.online;\n          updateReasons.push('reachabilityOnline');\n        }\n        if (this.state.notifiable !== value.notifiable) {\n          this.state.notifiable = value.notifiable;\n          updateReasons.push('reachabilityNotifiable');\n        }\n        break;\n      default:\n        return;\n    }\n    if (updateReasons.length > 0) {\n      this.emit('updated', { user: this, updateReasons: updateReasons });\n    }\n  }\n\n  // Fetch reachability info\n  _updateReachabilityInfo(map, update) {\n    if (!this.services.session.reachabilityEnabled) {\n      return Promise.resolve();\n    }\n\n    return map.get('reachability')\n              .then(update)\n              .catch(err => { log.warn('Failed to get reachability info for ', this.state.identity, err); });\n  }\n\n  // Fetch user\n  async _fetch() {\n    if (!this.state.entityName) {\n      return this;\n    }\n\n    this.promiseToFetch = this.services.syncClient.map({ id: this.state.entityName, mode: 'open_existing', includeItems: true })\n                              .then(map => {\n                                this.entity = map;\n                                map.on('itemUpdated', args => {\n                                  log.debug(this.state.entityName + ' (' + this.state.identity + ') itemUpdated: ' + args.item.key);\n                                  return this._update(args.item.key, args.item.data);\n                                });\n                                return Promise.all([\n                                  map.get('friendlyName')\n                                     .then(item => this._update(item.key, item.data)),\n                                  map.get('attributes')\n                                     .then(item => this._update(item.key, item.data)),\n                                  this._updateReachabilityInfo(map,\n                                    item => this._update(item.key, item.data))\n                                ]);\n                              })\n                              .then(() => {\n                                log.debug('Fetched for', this.identity);\n                                this.subscribed = 'subscribed';\n                                this.emit('userSubscribed', this);\n                                return this;\n                              })\n                              .catch(err => {\n                                this.promiseToFetch = null;\n                                throw err;\n                              });\n    return this.promiseToFetch;\n  }\n\n  _ensureFetched() {\n    return this.promiseToFetch || this._fetch();\n  }\n\n  /**\n   * Updates user attributes.\n   * @param {any} attributes new attributes for User.\n   * @returns {Promise<User>}\n   */\n  @validateTypesAsync(['string', 'number', 'boolean', 'object', literal(null)])\n  public async updateAttributes(attributes: any): Promise<User> {\n    if (this.subscribed == 'unsubscribed') {\n      throw new Error('Can\\'t modify unsubscribed object');\n    }\n\n    await this.services.session.addCommand('editUserAttributes', {\n      username: this.state.identity,\n      attributes: JSON.stringify(attributes)\n    });\n\n    return this;\n  }\n\n  /**\n   * Update Users friendlyName.\n   * @param {String|null} friendlyName - Updated friendlyName\n   * @returns {Promise<User>}\n   */\n  @validateTypesAsync(['string', literal(null)])\n  public async updateFriendlyName(friendlyName: string | null): Promise<User> {\n    if (this.subscribed == 'unsubscribed') {\n      throw new Error('Can\\'t modify unsubscribed object');\n    }\n\n    await this.services.session.addCommand('editUserFriendlyName', {\n      username: this.state.identity,\n      friendlyName: friendlyName\n    });\n\n    return this;\n  }\n\n  /**\n   * Removes User from subscription list.\n   * @returns {Promise<void>} Promise of completion\n   */\n  async unsubscribe(): Promise<void> {\n    if (this.promiseToFetch) {\n      await this.promiseToFetch;\n      this.entity.close();\n      this.promiseToFetch = null;\n      this.subscribed = 'unsubscribed';\n      this.emit('userUnsubscribed', this);\n    }\n  }\n}\n\nexport { User };\n\n/**\n * Fired when User's properties or reachability status have been updated.\n * @event User#updated\n * @type {Object}\n * @property {User} user - Updated User\n * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons\n */\n/**\n * Fired when Client is subscribed to User.\n * @event User#userSubscribed\n * @type {User}\n */\n/**\n * Fired when Client is unsubscribed from this User.\n * @event User#userUnsubscribed\n * @type {User}\n */\n","import { EventEmitter } from 'events';\nimport { User } from '../user';\nimport { Network } from '../services/network';\nimport { Session } from '../session';\nimport { SyncClient } from 'twilio-sync';\nimport { UriBuilder } from '../util';\n\nexport interface UsersServices {\n  session: Session;\n  network: Network;\n  syncClient: SyncClient;\n}\n\n/**\n * @classdesc Container for known users\n * @fires Users#userUpdated\n */\nclass Users extends EventEmitter {\n\n  private services: UsersServices;\n  private subscribedUsers: Map<string, User>;\n  private fifoStack: any;\n  private fifoStackMaxLength: number;\n  private userUrlPromise: Promise<string>;\n  private userUrl: string;\n  public readonly myself: User;\n\n  constructor(services: UsersServices) {\n    super();\n    this.services = services;\n    this.fifoStack = [];\n    this.fifoStackMaxLength = 100;\n    this.myself = new User(null, null, this.services);\n    this.myself.on('updated', (args: User.UpdatedEventArgs) => this.emit('userUpdated', args));\n    this.myself.on('userSubscribed', () => this.emit('userSubscribed', this.myself));\n    this.myself.on('userUnsubscribed', () => {\n      this.emit('userUnsubscribed', this.myself);\n      this.myself._ensureFetched();\n    });\n    this.services = services;\n    this.subscribedUsers = new Map<string, User>();\n\n    this.userUrlPromise =\n      this.services.session.getSessionLinks()\n        .then((links) => {\n          this.userUrl = links.usersUrl;\n          return this.userUrl;\n        });\n\n    this.services.session.getMaxUserInfosToSubscribe()\n      .then(maxUserInfosToSubscribe => {\n          this.fifoStackMaxLength = maxUserInfosToSubscribe;\n        }\n      );\n\n    this.services.session.getUsersData()\n      .then(data => {\n        this.myself.identity = data.identity;\n        this.myself.entityName = data.user;\n        return this.myself._ensureFetched();\n      });\n  }\n\n  private handleUnsubscribeUser(user: User): void {\n    if (this.subscribedUsers.has(user.identity)) {\n      this.subscribedUsers.delete(user.identity);\n    }\n    let foundItemIndex = -1;\n    let foundItem = this.fifoStack.find((item, index) => {\n      if (item == user.identity) {\n        foundItemIndex = index;\n        return true;\n      }\n      return false;\n    });\n    if (foundItem) {\n      this.fifoStack.splice(foundItemIndex, 1);\n    }\n    this.emit('userUnsubscribed', user);\n  }\n\n  private handleSubscribeUser(user: User): void {\n    if (this.subscribedUsers.has(user.identity)) {\n      return;\n    }\n    if (this.fifoStack.length >= this.fifoStackMaxLength) {\n      this.subscribedUsers.get(this.fifoStack.shift()).unsubscribe();\n    }\n    this.fifoStack.push(user.identity);\n    this.subscribedUsers.set(user.identity, user);\n    this.emit('userSubscribed', user);\n  }\n\n  /**\n   * Gets user, if it's in subscribed list - then return the user object from it,\n   * if not - then subscribes and adds user to the FIFO stack\n   * @returns {Promise<User>} Fully initialized user\n   */\n  async getUser(identity: string, entityName: string = null): Promise<User> {\n    await this.services.session.getUsersData();\n    await this.myself._ensureFetched();\n\n    if (identity == this.myself.identity) {\n      return this.myself;\n    }\n\n    let user = this.subscribedUsers.get(identity);\n    if (!user) {\n      if (!entityName) {\n        entityName = await this.getSyncUniqueName(identity);\n      }\n      user = new User(identity, entityName, this.services);\n      user.on('updated', (args: User.UpdatedEventArgs) => this.emit('userUpdated', args));\n      user.on('userSubscribed', () => this.handleSubscribeUser(user));\n      user.on('userUnsubscribed', () => this.handleUnsubscribeUser(user));\n      await user._ensureFetched();\n    }\n\n    return user;\n  }\n\n  /**\n   * @returns {Promise<Array<User>>} returns list of subscribed User objects {@see User}\n   */\n  async getSubscribedUsers(): Promise<Array<User>> {\n    await this.services.session.getUsersData();\n    await this.myself._ensureFetched();\n    let users = [this.myself];\n    this.subscribedUsers.forEach((user) => users.push(user));\n    return users;\n  }\n\n  /**\n   * @returns {Promise<string>} User's sync unique name\n   */\n  private async getSyncUniqueName(identity: string): Promise<string> {\n    const url = new UriBuilder(this.userUrl).path(identity).build();\n    let response = await this.services.network.get(url);\n    return response.body.sync_unique_name;\n  }\n}\n\nexport { Users };\n","import { Logger } from '../logger';\n\nimport { Notifications } from 'twilio-notifications';\n\nimport { NotificationTypes } from '../interfaces/notificationtypes';\nimport { Transport } from '../interfaces/transport';\nimport { Configuration } from '../configuration';\n\nconst log = Logger.scope('TypingIndicator');\n\nexport interface TypingIndicatorServices {\n  transport: Transport;\n  notificationClient: Notifications;\n}\n\n/**\n * An important note in regards to typing timeout timers. There are two places that the SDK can get the \"typing_timeout\" attribute from. The first\n * place that the attribute appears in is the response received from POST -> /v1/typing REST call. In the body of that response, the value of the\n * \"typing_timeout\" attribute will be exactly the same as defined in the console. The second place that the attribute appears in is from a\n * notification of type \"twilio.ipmsg.typing_indicator\". In this case, the \"typing_timeout\" value will be +1 of that in the console. This\n * intentional. The timeout returned from the POST -> /v1/typing call should be used to disable further calls for that period of time. On contrary,\n * the timeout returned from the notification should be used as the timeout for the \"typingEnded\" event, +1 is to account for latency.\n *\n * @private\n */\n\n/**\n * @class TypingIndicator\n *\n * @constructor\n * @private\n */\nclass TypingIndicator {\n  private readonly services;\n  private readonly config;\n\n  private sentUpdates: Map<string, number>;\n  private getConversation;\n  private serviceTypingTimeout;\n\n  constructor(config: Configuration, services: TypingIndicatorServices, getConversation) {\n    this.config = config;\n    this.services = services;\n    this.getConversation = getConversation;\n\n    this.serviceTypingTimeout = null;\n    this.sentUpdates = new Map();\n  }\n\n  public get typingTimeout(): number {\n    return this.config.typingIndicatorTimeoutOverride\n      || this.serviceTypingTimeout\n      || this.config.typingIndicatorTimeoutDefault;\n  }\n\n  /**\n   * Initialize TypingIndicator controller\n   * Registers for needed message types and sets listeners\n   * @private\n   */\n  initialize() {\n    this.services.notificationClient.subscribe(NotificationTypes.TYPING_INDICATOR, 'twilsock');\n    this.services.notificationClient.on('message', (type, message) => {\n      if (type === NotificationTypes.TYPING_INDICATOR) {\n        this.handleRemoteTyping(message);\n      }\n    });\n  }\n\n  /**\n   * Remote participants typing events handler\n   * @private\n   */\n  handleRemoteTyping(message) {\n    log.trace('Got new typing indicator ', message);\n\n    this.getConversation(message.channel_sid)\n      .then(conversation => {\n        if (!conversation) {\n          return;\n        }\n\n        conversation.participants.forEach(participant => {\n          if (participant.identity !== message.identity) {\n            return;\n          }\n\n          const timeout = this.config.typingIndicatorTimeoutOverride + 1000 || message.typing_timeout * 1000;\n          participant._startTyping(timeout);\n        });\n      })\n      .catch(err => {\n        log.error(err);\n        throw err;\n      });\n  }\n\n  /**\n   * Send typing event for the given conversation sid\n   * @param {String} conversationSid\n   */\n  send(conversationSid: string) {\n    const lastUpdate = this.sentUpdates.get(conversationSid);\n    if (lastUpdate && lastUpdate > (Date.now() - this.typingTimeout)) {\n      return Promise.resolve();\n    }\n\n    this.sentUpdates.set(conversationSid, Date.now());\n    return this._send(conversationSid);\n  }\n\n  private _send(conversationSid: string) {\n    log.trace('Sending typing indicator');\n\n    const url = this.config.typingIndicatorUri;\n    const headers = {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    };\n    const body = 'ChannelSid=' + conversationSid;\n\n    return this.services.transport.post(url, headers, body, this.config.productId)\n      .then(response => {\n        if (response.body.hasOwnProperty('typing_timeout')) {\n          this.serviceTypingTimeout = response.body.typing_timeout * 1000;\n        }\n      }).catch(err => {\n        log.error('Failed to send typing indicator:', err);\n        throw err;\n      });\n  }\n}\n\nexport { TypingIndicator };\n","import { Session } from '../session';\nimport { SessionError } from '../sessionerror';\n\nexport interface ReadHorizonServices {\n  session: Session;\n}\n\nclass ConsumptionReportRequest {\n  entry: ConsumptionReportEntry;\n  promises: ReadHorizonPromise[];\n}\n\nclass ConsumptionReportEntry {\n  channelSid: string;\n  messageIdx: number;\n}\n\nclass ReadHorizonPromise {\n  resolve: any;\n  reject: any;\n}\n\ninterface ConsumptionReportResponseEntry {\n  channelSid: string;\n  unreadMessagesCount?: number;\n}\n\n/**\n * @classdesc Provides read horizon management functionality\n */\nclass ReadHorizon {\n  private readonly services: ReadHorizonServices;\n  private readonly readHorizonRequests: Map<string, ConsumptionReportRequest>;\n  private readHorizonUpdateTimer: any;\n\n  constructor(services: ReadHorizonServices) {\n    this.services = services;\n    this.readHorizonRequests = new Map();\n    this.readHorizonUpdateTimer = null;\n  }\n\n  private getReportInterval(): Promise<number> {\n    return this.services.session.getConsumptionReportInterval().then(\n      seconds => seconds * 1000);\n  }\n\n  private delayedSendReadHorizon(delay) {\n    if (this.readHorizonUpdateTimer !== null) {\n      return;\n    }\n\n    this.sendConsumptionReport(true);\n\n    this.readHorizonUpdateTimer = setTimeout(() => {\n      this.sendConsumptionReport(false);\n    }, delay);\n\n  }\n\n  private sendConsumptionReport(keepTimer: boolean) {\n    let reports = [];\n    let promises = new Map<string, ReadHorizonPromise[]>();\n    this.readHorizonRequests.forEach((request, conversationSid) => {\n      reports.push(request.entry);\n      promises.set(conversationSid, request.promises);\n    });\n    if (reports.length > 0) {\n      this.services.session.addCommand('consumptionReportV2', { report: reports })\n          .then(response => this.processConsumptionReportResponse(response, promises))\n          .catch(err => this.processConsumptionReportError(err, promises));\n    }\n    if (!keepTimer) {\n      this.readHorizonUpdateTimer = null;\n    }\n    this.readHorizonRequests.clear();\n\n  }\n\n  private processConsumptionReportResponse(response: any, promises: Map<string, ReadHorizonPromise[]>) {\n    if (response && response.report && Array.isArray(response.report) && response.report.length > 0) {\n      response.report.forEach(entry => {\n        let responseEntry = entry as ConsumptionReportResponseEntry;\n        if (promises.has(responseEntry.channelSid)) {\n          let unreadMessagesCount = null;\n          if ((typeof responseEntry.unreadMessagesCount !== 'undefined') && responseEntry.unreadMessagesCount != null) {\n            unreadMessagesCount = responseEntry.unreadMessagesCount;\n          }\n          promises.get(responseEntry.channelSid).forEach(promise => promise.resolve(unreadMessagesCount));\n          promises.delete(responseEntry.channelSid);\n        }\n      });\n    }\n\n    this.processConsumptionReportError(new SessionError('Error while setting LastReadMessageIndex', null), promises);\n  }\n\n  private processConsumptionReportError(err: SessionError, promises: Map<string, ReadHorizonPromise[]>) {\n    promises.forEach(conversationPromises => conversationPromises.forEach(promise => promise.reject(err)));\n  }\n\n  /**\n   * Updates read horizon value without any checks\n   */\n  updateLastReadMessageIndexForConversation(conversationSid: string, messageIdx: number): Promise<number> {\n    return new Promise<number>((resolve, reject) => {\n      this.addPendingConsumptionHorizonRequest(conversationSid, { channelSid: conversationSid, messageIdx }, { resolve, reject });\n      this.getReportInterval().then(delay => this.delayedSendReadHorizon(delay));\n    });\n  }\n\n  /**\n   * Move read horizon forward\n   */\n  advanceLastReadMessageIndexForConversation(\n    conversationSid: string,\n    messageIdx: number,\n    currentConversationLastReadIndex: number\n  ): Promise<number> {\n    let currentHorizon = this.readHorizonRequests.get(conversationSid);\n    return new Promise<number>((resolve, reject) => {\n      if (currentHorizon && currentHorizon.entry) {\n        if (currentHorizon.entry.messageIdx >= messageIdx) {\n          this.addPendingConsumptionHorizonRequest(conversationSid, currentHorizon.entry, { resolve, reject });\n        } else {\n          this.addPendingConsumptionHorizonRequest(conversationSid, { channelSid: conversationSid, messageIdx }, { resolve, reject });\n        }\n      } else {\n        if ((currentConversationLastReadIndex !== null) && messageIdx < currentConversationLastReadIndex) {\n          this.addPendingConsumptionHorizonRequest(\n            conversationSid,\n            { channelSid: conversationSid, messageIdx: currentConversationLastReadIndex },\n            { resolve, reject });\n        } else {\n          this.addPendingConsumptionHorizonRequest(conversationSid, { channelSid: conversationSid, messageIdx }, { resolve, reject });\n        }\n      }\n      this.getReportInterval().then(delay => this.delayedSendReadHorizon(delay));\n    });\n  }\n\n  private addPendingConsumptionHorizonRequest(conversationSid: string, entry: ConsumptionReportEntry, promise: ReadHorizonPromise) {\n    if (this.readHorizonRequests.has(conversationSid)) {\n      let request = this.readHorizonRequests.get(conversationSid);\n      request.entry = entry;\n      request.promises.push(promise);\n    } else {\n      this.readHorizonRequests.set(conversationSid, { entry, promises: [promise] });\n    }\n  }\n}\n\nexport { ReadHorizon };\n","'use strict';\n\nnamespace PushNotification {\n  export type Type = 'twilio.conversations.new_message' | 'twilio.conversations.added_to_conversation'\n    | 'twilio.conversations.removed_from_conversation';\n\n  export interface Descriptor {\n    title: string;\n    body: string;\n    sound: string;\n    badge: number;\n    action: string;\n    type: PushNotification.Type;\n    data: Object;\n  }\n}\n\n/**\n * @classdesc Push notification representation within Conversations Client\n * @property {String} [action] - Notification action (`click_action` in FCM/GCM terms and `category` in APN terms)\n * @property {Number} [badge] - Number for the badge\n * @property {String} body - Notification text\n * @property {PushNotification#ConversationData} data - Additional Conversation data\n * @property {String} [sound] - Notification sound\n * @property {String} [title] - Notification title\n * @property {PushNotification#NotificationType} type - Notification type\n */\nclass PushNotification {\n  public readonly title: string;\n  public readonly body: string;\n  public readonly sound: string;\n  public readonly badge: number;\n  public readonly action: string;\n  public readonly type: PushNotification.Type;\n  public readonly data: Object;\n\n  /**\n   * Conversation push notification type\n   * @typedef {('twilio.conversations.new_message' | 'twilio.conversations.added_to_conversation'\n   | 'twilio.conversations.removed_from_conversation')} PushNotification#NotificationType\n   */\n\n  /**\n   * Additional Conversations data for given Push Notification\n   * @typedef {Object} PushNotification#ConversationData\n   * @property {String} [conversationSid] - SID of Conversation\n   * @property {Number} [messageIndex] - Index of Message in Conversation\n   * @property {String} [messageSid] - SID of Message\n   */\n\n  /**\n   * @param {PushNotification.Descriptor} data - initial data for PushNotification\n   */\n  constructor(data: PushNotification.Descriptor) {\n    this.title = data.title || null;\n    this.body = data.body || null;\n    this.sound = data.sound || null;\n    this.badge = data.badge || null;\n    this.action = data.action || null;\n    this.type = data.type || null;\n    this.data = data.data || {};\n  }\n\n}\n\nexport { PushNotification };\n","import { EventEmitter } from 'events';\nimport { Logger } from './logger';\nimport { Configuration } from './configuration';\n\nimport { User } from './user';\nimport { Network } from './services/network';\n\nimport { Transport } from './interfaces/transport';\nimport { NotificationTypes } from './interfaces/notificationtypes';\n\nimport { SyncList } from './synclist';\nimport { Twilsock as TwilsockClient } from 'twilsock';\nimport { ChannelType, ConnectionState as NotificationConnectionState, Notifications as NotificationClient } from 'twilio-notifications';\nimport { SyncClient } from 'twilio-sync';\nimport { McsClient } from 'twilio-mcs-client';\n\nimport { Session } from './session';\nimport { Conversation, Conversations as ConversationsEntity } from './data/conversations';\n\nimport { Users } from './data/users';\nimport { TypingIndicator } from './services/typingindicator';\nimport { ReadHorizon } from './services/readhorizon';\nimport { Paginator } from './interfaces/paginator';\nimport { PushNotification } from './pushnotification';\nimport { deepClone, parseToNumber } from './util';\nimport { Participant } from './participant';\nimport { Message } from './message';\nimport { TelemetryEventDescription, TelemetryPoint } from 'twilsock/lib/services/telemetrytracker';\nimport { validateTypesAsync, validateTypes, custom, literal, nonEmptyString, pureObject, stringifyReceivedType, objectSchema } from 'twilio-sdk-type-validator';\nimport { version } from '../package.json';\n\nconst log = Logger.scope('Client');\n\nconst SDK_VERSION = version;\n\nclass ClientServices {\n  session: Session;\n  twilsockClient: TwilsockClient;\n  users: Users;\n  notificationClient: NotificationClient;\n  //publicChannels: PublicConversations;\n  //myConversations: UserConversations;\n  network: Network;\n  typingIndicator: TypingIndicator;\n  syncClient: SyncClient;\n  readHorizon: ReadHorizon;\n  syncList: SyncList;\n  mcsClient: McsClient;\n  transport: Transport;\n}\n\nnamespace Client {\n  export type ConnectionState = NotificationConnectionState;\n\n  export type NotificationsChannelType = ChannelType;\n\n  export type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'silent' | null;\n\n  export interface Options {\n    region?: string;\n    logLevel?: Client.LogLevel;\n    productId?: string;\n    twilsockClient?: TwilsockClient;\n    transport?: Transport;\n    notificationsClient?: NotificationClient;\n    syncClient?: SyncClient;\n    typingIndicatorTimeoutOverride?: number;\n    consumptionReportIntervalOverride?: string;\n    httpCacheIntervalOverride?: string;\n    userInfosToSubscribeOverride?: number;\n    retryWhenThrottledOverride?: boolean;\n    backoffConfigOverride?: any;\n    Chat?: any;\n    Sync?: any;\n    Notification?: any;\n    Twilsock?: any;\n    clientMetadata?: any;\n  }\n\n  export interface CreateConversationOptions {\n    attributes?: any;\n    friendlyName?: string;\n    uniqueName?: string;\n  }\n}\n\n/**\n * A Client is a starting point to access Twilio Conversations functionality.\n *\n * @property {Client#ConnectionState} connectionState - Client connection state\n * @property {Boolean} reachabilityEnabled - Client reachability state\n * @property {User} user - Information for logged in user\n * @property {String} version - Current version of Conversations client\n *\n * @fires Client#connectionError\n * @fires Client#connectionStateChanged\n * @fires Client#conversationAdded\n * @fires Client#conversationJoined\n * @fires Client#conversationLeft\n * @fires Client#conversationRemoved\n * @fires Client#conversationUpdated\n * @fires Client#participantJoined\n * @fires Client#participantLeft\n * @fires Client#participantUpdated\n * @fires Client#messageAdded\n * @fires Client#messageRemoved\n * @fires Client#messageUpdated\n * @fires Client#pushNotification\n * @fires Client#tokenAboutToExpire\n * @fires Client#tokenExpired\n * @fires Client#typingEnded\n * @fires Client#typingStarted\n * @fires Client#userSubscribed\n * @fires Client#userUnsubscribed\n * @fires Client#userUpdated\n */\nclass Client extends EventEmitter {\n  public connectionState: Client.ConnectionState = 'connecting';\n  private sessionPromise: Promise<any> = null;\n  private conversationsPromise: Promise<any> = null;\n  private fpaToken: string;\n  private config: Configuration;\n  private conversations: any;\n  private options: any;\n  private services: ClientServices;\n  public static readonly version: string = SDK_VERSION;\n  public readonly version: string = SDK_VERSION;\n  private static readonly supportedPushChannels: Client.NotificationsChannelType[] = ['fcm', 'apn'];\n  private static readonly supportedPushDataFields = {\n    'conversation_sid': 'conversationSid',\n    'message_sid': 'messageSid',\n    'message_index': 'messageIndex'\n  };\n\n  /**\n   * These options can be passed to Client constructor.\n   * @typedef {Object} Client#ClientOptions\n   * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n   *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n   */\n\n  /**\n   * These options can be passed to {@link Client#createConversation}.\n   * @typedef {Object} Client#CreateConversationOptions\n   * @property {any} [attributes] - Any custom attributes to attach to the Conversation\n   * @property {String} [friendlyName] - The non-unique display name of the Conversation\n   * @property {String} [uniqueName] - The unique identifier of the Conversation\n   */\n\n  /**\n   * Connection state of Client.\n   * @typedef {('connecting'|'connected'|'disconnecting'|'disconnected'|'denied')} Client#ConnectionState\n   */\n\n  /**\n   * Notifications channel type.\n   * @typedef {('fcm'|'apn')} Client#NotificationsChannelType\n   */\n\n  private constructor(token: string, options?: Client.Options) {\n    super();\n\n    this.options = (options || {}) as any;\n    if (!this.options.disableDeepClone) {\n      let options = {\n        ...this.options,\n        transport: undefined,\n        twilsockClient: undefined\n      };\n\n      options = deepClone(options);\n      options.transport = this.options.transport;\n      options.twilsockClient = this.options.twilsockClient;\n\n      this.options = options;\n    }\n    this.options.logLevel = this.options.logLevel || 'silent';\n    log.setLevel(this.options.logLevel);\n\n    const productId = this.options.productId = 'ip_messaging';\n\n    // Filling ClientMetadata\n    this.options.clientMetadata = this.options.clientMetadata || {};\n    if (!this.options.clientMetadata.hasOwnProperty('type')) {\n      this.options.clientMetadata.type = 'conversations';\n    }\n    if (!this.options.clientMetadata.hasOwnProperty('sdk')) {\n      this.options.clientMetadata.sdk = 'JS';\n      this.options.clientMetadata.sdkv = SDK_VERSION;\n    }\n\n    // Enable session local storage for Sync\n    this.options.Sync = this.options.Sync || {};\n    if (typeof this.options.Sync.enableSessionStorage === 'undefined') {\n      this.options.Sync.enableSessionStorage = true;\n    }\n    if (this.options.region) {\n      this.options.Sync.region = this.options.region;\n    }\n\n    if (!token) {\n      throw new Error('A valid Twilio token should be provided');\n    }\n\n    this.services = new ClientServices();\n    this.config = new Configuration(this.options);\n\n    this.options.twilsockClient = this.options.twilsockClient || new TwilsockClient(token, productId, this.options);\n    this.options.transport = this.options.transport || this.options.twilsockClient;\n    this.options.notificationsClient = this.options.notificationsClient || new NotificationClient(token, this.options);\n    this.options.syncClient = this.options.syncClient || new SyncClient(token, this.options);\n\n    this.services.syncClient = this.options.syncClient;\n    this.services.transport = this.options.transport;\n    this.services.twilsockClient = this.options.twilsockClient;\n    this.services.notificationClient = this.options.notificationsClient;\n    this.services.session = new Session(this.services, this.config);\n    this.sessionPromise = this.services.session.initialize();\n\n    this.services.network = new Network(this.config, this.services);\n\n    this.services.users = new Users({\n      session: this.services.session,\n      network: this.services.network,\n      syncClient: this.services.syncClient\n    });\n    this.services.users.on('userSubscribed', this.emit.bind(this, 'userSubscribed'));\n    this.services.users.on('userUpdated',\n      (args: User.UpdatedEventArgs) => this.emit('userUpdated', args));\n    this.services.users.on('userUnsubscribed', this.emit.bind(this, 'userUnsubscribed'));\n\n    this.services.twilsockClient.on('tokenAboutToExpire', ttl => this.emit('tokenAboutToExpire', ttl));\n    this.services.twilsockClient.on('tokenExpired', () => this.emit('tokenExpired'));\n    this.services.twilsockClient.on('connectionError', (error) => this.emit('connectionError', error));\n\n    this.services.readHorizon = new ReadHorizon(this.services);\n    this.services.typingIndicator = new TypingIndicator(this.config, {\n      transport: this.services.twilsockClient,\n      notificationClient: this.services.notificationClient\n    }, this.getConversationBySid.bind(this));\n\n    this.services.syncList = new SyncList(this.services);\n\n    this.conversations = new ConversationsEntity(this.services);\n\n    this.conversationsPromise = this.sessionPromise.then(() => {\n      this.conversations.on('conversationAdded', this.emit.bind(this, 'conversationAdded'));\n      this.conversations.on('conversationRemoved', this.emit.bind(this, 'conversationRemoved'));\n      this.conversations.on('conversationJoined', this.emit.bind(this, 'conversationJoined'));\n      this.conversations.on('conversationLeft', this.emit.bind(this, 'conversationLeft'));\n      this.conversations.on('conversationUpdated',\n        (args: Conversation.UpdatedEventArgs) => this.emit('conversationUpdated', args));\n\n      this.conversations.on('participantJoined', this.emit.bind(this, 'participantJoined'));\n      this.conversations.on('participantLeft', this.emit.bind(this, 'participantLeft'));\n      this.conversations.on('participantUpdated',\n        (args: Participant.UpdatedEventArgs) => this.emit('participantUpdated', args));\n\n      this.conversations.on('messageAdded', this.emit.bind(this, 'messageAdded'));\n      this.conversations.on('messageUpdated',\n        (args: Message.UpdatedEventArgs) => this.emit('messageUpdated', args));\n      this.conversations.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));\n\n      this.conversations.on('typingStarted', this.emit.bind(this, 'typingStarted'));\n      this.conversations.on('typingEnded', this.emit.bind(this, 'typingEnded'));\n\n      return this.conversations.fetchConversations();\n    }).then(() => this.conversations);\n\n    this.services.notificationClient.on('connectionStateChanged', (state: Client.ConnectionState) => {\n      let changedConnectionState = null;\n      switch (state) {\n        case 'connected':\n          changedConnectionState = 'connected';\n          break;\n        case 'denied':\n          changedConnectionState = 'denied';\n          break;\n        case 'disconnecting':\n          changedConnectionState = 'disconnecting';\n          break;\n        case 'disconnected':\n          changedConnectionState = 'disconnected';\n          break;\n        default:\n          changedConnectionState = 'connecting';\n      }\n      if (changedConnectionState !== this.connectionState) {\n        this.connectionState = changedConnectionState;\n        this.emit('connectionStateChanged', this.connectionState);\n      }\n    });\n\n    this.fpaToken = token;\n  }\n\n  /**\n   * Factory method to create Conversations client instance.\n   *\n   * @param {String} token - Access token\n   * @param {Client#ClientOptions} [options] - Options to customize the Client\n   * @returns {Promise<Client>}\n   */\n  @validateTypesAsync('string', ['undefined', pureObject])\n  static async create(token: string, options?: Client.Options): Promise<Client> {\n    let client = new Client(token, options);\n\n    const startupEvent = 'conversations.client.startup';\n\n    client.services.twilsockClient.addPartialTelemetryEvent(new TelemetryEventDescription(\n      startupEvent,\n      'Conversations client startup',\n      new Date()\n    ), startupEvent, TelemetryPoint.Start);\n\n    await client.initialize();\n\n    client.services.twilsockClient.addPartialTelemetryEvent(\n      new TelemetryEventDescription('', '', new Date()),\n      startupEvent,\n      TelemetryPoint.End);\n\n    return client;\n  }\n\n  public get user(): User { return this.services.users.myself; }\n\n  public get reachabilityEnabled(): boolean { return this.services.session.reachabilityEnabled; }\n\n  public get token(): string { return this.fpaToken; }\n\n  private subscribeToPushNotifications(channelType: Client.NotificationsChannelType) {\n    let subscriptions: Promise<any>[] = [];\n    [NotificationTypes.NEW_MESSAGE,\n      NotificationTypes.ADDED_TO_CONVERSATION,\n      NotificationTypes.REMOVED_FROM_CONVERSATION,\n      NotificationTypes.TYPING_INDICATOR,\n      NotificationTypes.CONSUMPTION_UPDATE]\n      .forEach(messageType => {\n        subscriptions.push(this.services.notificationClient.subscribe(messageType, channelType));\n      });\n    return Promise.all(subscriptions);\n  }\n\n  private unsubscribeFromPushNotifications(channelType: Client.NotificationsChannelType) {\n    let subscriptions: Promise<any>[] = [];\n    [NotificationTypes.NEW_MESSAGE,\n      NotificationTypes.ADDED_TO_CONVERSATION,\n      NotificationTypes.REMOVED_FROM_CONVERSATION,\n      NotificationTypes.TYPING_INDICATOR,\n      NotificationTypes.CONSUMPTION_UPDATE]\n      .forEach(messageType => {\n        subscriptions.push(this.services.notificationClient.unsubscribe(messageType, channelType));\n      });\n    return Promise.all(subscriptions);\n  }\n\n  private async initialize() {\n    await this.sessionPromise;\n\n    Client.supportedPushChannels.forEach(channelType => this.subscribeToPushNotifications(channelType));\n\n    let links = await this.services.session.getSessionLinks();\n\n    let options = Object.assign(this.options);\n    options.transport = null;\n    this.services.mcsClient = new McsClient(this.fpaToken, links.mediaServiceUrl, options);\n\n    await this.services.typingIndicator.initialize();\n  }\n\n  /**\n   * Gracefully shutting down library instance.\n   * @public\n   * @returns {Promise<void>}\n   */\n  async shutdown(): Promise<void> {\n    await this.services.twilsockClient.disconnect();\n  }\n\n  /**\n   * Update the token used by the Client and re-register with Conversations services.\n   * @param {String} token - Access token\n   * @public\n   * @returns {Promise<Client>}\n   */\n  @validateTypesAsync(nonEmptyString)\n  async updateToken(token: string): Promise<Client> {\n    log.info('updateToken');\n\n    if (this.fpaToken === token) {\n      return this;\n    }\n\n    await this.services.twilsockClient.updateToken(token)\n      .then(() => this.fpaToken = token)\n      .then(() => this.services.mcsClient.updateToken(token))\n      .then(() => this.sessionPromise);\n\n    return this;\n  }\n\n  /**\n   * Get a known Conversation by its SID.\n   * @param {String} conversationSid - Conversation sid\n   * @returns {Promise<Conversation>}\n   */\n  @validateTypesAsync(nonEmptyString)\n  async getConversationBySid(conversationSid: string): Promise<Conversation> {\n    await this.conversations.syncListRead.promise;\n    let conversation = await this.conversations.getConversation(conversationSid);\n\n    if (!conversation) {\n      conversation = await this.conversations.getWhisperConversation(conversationSid);\n    }\n\n    if (!conversation) {\n      throw new Error(`Conversation with SID ${conversationSid} is not found.`);\n    }\n\n    return conversation;\n  }\n\n  /**\n   * Get a known Conversation by its unique identifier name.\n   * @param {String} uniqueName - The unique identifier name of the Conversation to get\n   * @returns {Promise<Conversation>}\n   */\n  @validateTypesAsync(nonEmptyString)\n  async getConversationByUniqueName(uniqueName: string): Promise<Conversation> {\n    await this.conversations.syncListRead.promise;\n    const conversation = await this.conversations.getConversationByUniqueName(uniqueName);\n\n    if (!conversation) {\n      throw new Error(`Conversation with unique name ${uniqueName} is not found.`);\n    }\n\n    return conversation;\n  }\n\n  /**\n   * Get the current list of all subscribed Conversations.\n   * @returns {Promise<Paginator<Conversation>>}\n   */\n  getSubscribedConversations(args?): Promise<Paginator<Conversation>> {\n    return this.conversationsPromise.then(conversations => conversations.getConversations(args));\n  }\n\n  /**\n   * Create a Conversation on the server and subscribe to its events.\n   * The default is a Conversation with an empty friendlyName.\n   * @param {Client#CreateConversationOptions} [options] - Options for the Conversation\n   * @returns {Promise<Conversation>}\n   */\n  @validateTypesAsync([\n    'undefined',\n    objectSchema('conversation options', {\n      friendlyName: ['string', 'undefined'],\n      isPrivate: ['boolean', 'undefined'],\n      uniqueName: ['string', 'undefined']\n    })\n  ])\n  createConversation(options?: Client.CreateConversationOptions): Promise<Conversation> {\n    options = options || {};\n    return this.conversationsPromise.then(conversationsEntity => conversationsEntity.addConversation(options));\n  }\n\n  /**\n   * Registers for push notifications.\n   * @param {Client#NotificationsChannelType} channelType - 'apn' and 'fcm' are supported\n   * @param {string} registrationId - Push notification id provided by the platform\n   * @returns {Promise<void>}\n   */\n  @validateTypesAsync(literal('fcm', 'apn'), 'string')\n  async setPushRegistrationId(channelType: Client.NotificationsChannelType, registrationId: string): Promise<void> {\n    await this.subscribeToPushNotifications(channelType)\n      .then(() => {\n        return this.services.notificationClient.setPushRegistrationId(registrationId, channelType);\n      });\n  }\n\n  /**\n   * Unregisters from push notifications.\n   * @param {Client#NotificationsChannelType} channelType - 'apn' and 'fcm' are supported\n   * @returns {Promise<void>}\n   */\n  @validateTypesAsync(literal('fcm', 'apn'))\n  async unsetPushRegistrationId(channelType: Client.NotificationsChannelType): Promise<void> {\n    if (Client.supportedPushChannels.indexOf(channelType) === -1) {\n      throw new Error('Invalid or unsupported channelType: ' + channelType);\n    }\n    await this.unsubscribeFromPushNotifications(channelType);\n  }\n\n  private static parsePushNotificationChatData(data: Object): Object {\n    let result: Object = {};\n    for (let key in Client.supportedPushDataFields) {\n      if (typeof data[key] !== 'undefined' && data[key] !== null) {\n        if (key === 'message_index') {\n          if (parseToNumber(data[key]) !== null) {\n            result[Client.supportedPushDataFields[key]] = Number(data[key]);\n          }\n        } else {\n          result[Client.supportedPushDataFields[key]] = data[key];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Static method for push notification payload parsing. Returns parsed push as {@link PushNotification} object\n   * @param {Object} notificationPayload - Push notification payload\n   * @returns {PushNotification|Error}\n   */\n  @validateTypes(pureObject)\n  static parsePushNotification(notificationPayload): PushNotification {\n    log.debug('parsePushNotification, notificationPayload=', notificationPayload);\n\n    // APNS specifics\n    if (typeof notificationPayload.aps !== 'undefined') {\n      if (!notificationPayload.twi_message_type) {\n        throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n      }\n\n      let data = Client.parsePushNotificationChatData(notificationPayload);\n\n      let apsPayload = notificationPayload.aps;\n      let body: string = null;\n      let title: string = null;\n      if (typeof apsPayload.alert === 'string') {\n        body = apsPayload.alert || null;\n      } else {\n        body = apsPayload.alert.body || null;\n        title = apsPayload.alert.title || null;\n      }\n\n      return new PushNotification({\n        title: title,\n        body: body,\n        sound: apsPayload.sound || null,\n        badge: apsPayload.badge || null,\n        action: apsPayload.category || null,\n        type: notificationPayload.twi_message_type,\n        data: data\n      });\n    }\n\n    // FCM specifics\n    if (typeof notificationPayload.data !== 'undefined') {\n      let dataPayload = notificationPayload.data;\n      if (!dataPayload.twi_message_type) {\n        throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n      }\n\n      let data = Client.parsePushNotificationChatData(notificationPayload.data);\n      return new PushNotification({\n        title: dataPayload.twi_title || null,\n        body: dataPayload.twi_body || null,\n        sound: dataPayload.twi_sound || null,\n        badge: null,\n        action: dataPayload.twi_action || null,\n        type: dataPayload.twi_message_type,\n        data: data\n      });\n    }\n\n    throw new Error('Provided push notification payload is not Programmable Chat notification');\n  }\n\n  public parsePushNotification = Client.parsePushNotification;\n\n  /**\n   * Handle push notification payload parsing and emits event {@link Client#event:pushNotification} on this {@link Client} instance.\n   * @param {Object} notificationPayload - Push notification payload\n   * @returns {Promise<void>}\n   */\n  @validateTypesAsync(pureObject)\n  async handlePushNotification(notificationPayload): Promise<void> {\n    log.debug('handlePushNotification, notificationPayload=', notificationPayload);\n    this.emit('pushNotification', Client.parsePushNotification(notificationPayload));\n  }\n\n  /**\n   * Gets user for given identity, if it's in subscribed list - then return the user object from it,\n   * if not - then subscribes and adds user to the subscribed list.\n   * @param {String} identity - Identity of User\n   * @returns {Promise<User>} Fully initialized user\n   */\n  @validateTypesAsync(nonEmptyString)\n  public getUser(identity: string): Promise<User> {\n    return this.services.users.getUser(identity);\n  }\n\n  /**\n   * @returns {Promise<Array<User>>} List of subscribed User objects\n   */\n  public async getSubscribedUsers(): Promise<Array<User>> {\n    return this.services.users.getSubscribedUsers();\n  }\n}\n\nexport { Client };\n\n/**\n * Fired when a Conversation becomes visible to the Client. The event is also triggered when the client creates a new Conversation.\n * Fired for all conversations Client has joined.\n * @event Client#conversationAdded\n * @type {Conversation}\n */\n/**\n * Fired when the Client joins a Conversation.\n * @event Client#conversationJoined\n * @type {Conversation}\n */\n/**\n * Fired when the Client leaves a Conversation.\n * @event Client#conversationLeft\n * @type {Conversation}\n */\n/**\n * Fired when a Conversation is no longer visible to the Client.\n * @event Client#conversationRemoved\n * @type {Conversation}\n */\n/**\n * Fired when a Conversation's attributes or metadata have been updated.\n * During Conversation's {@link Client.create| creation and initialization} this event might be fired multiple times\n * for same joined or created Conversation as new data is arriving from different sources.\n * @event Client#conversationUpdated\n * @type {Object}\n * @property {Conversation} conversation - Updated Conversation\n * @property {Conversation#UpdateReason[]} updateReasons - Array of Conversation's updated event reasons\n */\n/**\n * Fired when Client's connection state has been changed.\n * @event Client#connectionStateChanged\n * @type {Client#ConnectionState}\n */\n/**\n * Fired when a Participant has joined the Conversation.\n * @event Client#participantJoined\n * @type {Participant}\n */\n/**\n * Fired when a Participant has left the Conversation.\n * @event Client#participantLeft\n * @type {Participant}\n */\n/**\n * Fired when a Participant's fields has been updated.\n * @event Client#participantUpdated\n * @type {Object}\n * @property {Participant} participant - Updated Participant\n * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons\n */\n/**\n * Fired when a new Message has been added to the Conversation on the server.\n * @event Client#messageAdded\n * @type {Message}\n */\n/**\n * Fired when Message is removed from Conversation's message list.\n * @event Client#messageRemoved\n * @type {Message}\n */\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Client#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n/**\n * Fired when token is about to expire and needs to be updated.\n * @event Client#tokenAboutToExpire\n * @type {void}\n */\n/**\n * Fired when token is expired.\n * @event Client#tokenExpired\n * @type {void}\n */\n/**\n * Fired when a Participant has stopped typing.\n * @event Client#typingEnded\n * @type {Participant}\n */\n/**\n * Fired when a Participant has started typing.\n * @event Client#typingStarted\n * @type {Participant}\n */\n/**\n * Fired when client received (and parsed) push notification via one of push channels (apn or fcm).\n * @event Client#pushNotification\n * @type {PushNotification}\n */\n/**\n * Fired when the Client is subscribed to a User.\n * @event Client#userSubscribed\n * @type {User}\n */\n/**\n * Fired when the Client is unsubscribed from a User.\n * @event Client#userUnsubscribed\n * @type {User}\n */\n/**\n * Fired when the User's properties or reachability status have been updated.\n * @event Client#userUpdated\n * @type {Object}\n * @property {User} user - Updated User\n * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons\n */\n/**\n * Fired when connection is interrupted by unexpected reason\n * @event Client#connectionError\n * @type {Object}\n * @property {Boolean} terminal - twilsock will stop connection attempts\n * @property {String} message - root cause\n * @property {Number} [httpStatusCode] - http status code if available\n * @property {Number} [errorCode] - Twilio public error code if available\n */\n"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","log","loglevelLog","Retrier","JsonDiff","parseTime","SDK_VERSION","platform","uuid","toSeconds","parseDuration","validateTypesAsync","literal","nonEmptyString","nonNegativeInteger","custom","objectSchema","_typeof","TwilsockClient","NotificationClient","SyncClient","ConversationsEntity","McsClient","TelemetryEventDescription","TelemetryPoint","pureObject","validateTypes"],"mappings":"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"}
/*
@license
The following license applies to all parts of this software except as
documented below.

    Copyright (c) 2019, Twilio, inc.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are
    met:

      1. Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.

      2. Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in
         the documentation and/or other materials provided with the
         distribution.

      3. Neither the name of Twilio nor the names of its contributors may
         be used to endorse or promote products derived from this software
         without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This software includes javascript-state-machine under the following license.

    Copyright (c) 2012, 2013, 2014, 2015, Jake Gordon and contributors

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE

This software includes loglevel under the following license.

    Copyright (c) 2013 Tim Perry

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.

This software includes q under the following license.

    Copyright 2009–2014 Kristopher Michael Kowal. All rights reserved.
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to
    deal in the Software without restriction, including without limitation the
    rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
    sell copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
    IN THE SOFTWARE.

This software includes platform.js under the following license.

    Copyright 2014 Benjamin Tan <https://d10.github.io/>
    Copyright 2011-2015 John-David Dalton <http://allyoucanleet.com/>

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('core-js/modules/es.reflect.construct.js');
require('core-js/modules/es.object.keys.js');
require('core-js/modules/es.symbol.js');
require('core-js/modules/es.array.filter.js');
require('core-js/modules/es.object.get-own-property-descriptor.js');
require('core-js/modules/es.object.get-own-property-descriptors.js');
var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _createClass = require('@babel/runtime/helpers/createClass');
var _assertThisInitialized = require('@babel/runtime/helpers/assertThisInitialized');
var _inherits = require('@babel/runtime/helpers/inherits');
var _possibleConstructorReturn = require('@babel/runtime/helpers/possibleConstructorReturn');
var _getPrototypeOf = require('@babel/runtime/helpers/getPrototypeOf');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var _classCallCheck = require('@babel/runtime/helpers/classCallCheck');
var _regeneratorRuntime = require('@babel/runtime/regenerator');
require('core-js/modules/web.dom-collections.for-each.js');
require('core-js/modules/es.array.iterator.js');
require('core-js/modules/es.object.to-string.js');
require('core-js/modules/es.promise.js');
require('core-js/modules/es.string.iterator.js');
require('core-js/modules/web.dom-collections.iterator.js');
require('core-js/modules/es.object.assign.js');
require('core-js/modules/es.number.constructor.js');
var _typeof = require('@babel/runtime/helpers/typeof');
require('core-js/modules/es.array.concat.js');
require('core-js/modules/es.array.from.js');
var loglevelLog = require('loglevel');
require('core-js/modules/es.array.slice.js');
require('core-js/modules/es.function.name.js');
require('core-js/modules/es.symbol.description.js');
require('core-js/modules/es.symbol.iterator.js');
var _slicedToArray = require('@babel/runtime/helpers/slicedToArray');
require('core-js/modules/es.map.js');
var operationRetrier = require('operation-retrier');
require('core-js/modules/es.array.map.js');
require('core-js/modules/es.regexp.exec.js');
require('core-js/modules/es.string.replace.js');
require('core-js/modules/es.array.join.js');
var JsonDiff = require('rfc6902');
var twilsock = require('twilsock');
var twilioNotifications = require('twilio-notifications');
var twilioSync = require('twilio-sync');
var twilioMcsClient = require('twilio-mcs-client');
var uuid = require('uuid');
var platform = require('platform');
var _wrapNativeSuper = require('@babel/runtime/helpers/wrapNativeSuper');
var iso8601Duration = require('iso8601-duration');
require('core-js/modules/es.set.js');
var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
require('core-js/modules/es.number.is-integer.js');
require('core-js/modules/es.typed-array.uint8-array.js');
require('core-js/modules/es.typed-array.copy-within.js');
require('core-js/modules/es.typed-array.every.js');
require('core-js/modules/es.typed-array.fill.js');
require('core-js/modules/es.typed-array.filter.js');
require('core-js/modules/es.typed-array.find.js');
require('core-js/modules/es.typed-array.find-index.js');
require('core-js/modules/es.typed-array.for-each.js');
require('core-js/modules/es.typed-array.includes.js');
require('core-js/modules/es.typed-array.index-of.js');
require('core-js/modules/es.typed-array.iterator.js');
require('core-js/modules/es.typed-array.join.js');
require('core-js/modules/es.typed-array.last-index-of.js');
require('core-js/modules/es.typed-array.map.js');
require('core-js/modules/es.typed-array.reduce.js');
require('core-js/modules/es.typed-array.reduce-right.js');
require('core-js/modules/es.typed-array.reverse.js');
require('core-js/modules/es.typed-array.set.js');
require('core-js/modules/es.typed-array.slice.js');
require('core-js/modules/es.typed-array.some.js');
require('core-js/modules/es.typed-array.sort.js');
require('core-js/modules/es.typed-array.subarray.js');
require('core-js/modules/es.typed-array.to-locale-string.js');
require('core-js/modules/es.typed-array.to-string.js');
require('core-js/modules/es.array-buffer.constructor.js');
var twilioSdkTypeValidator = require('twilio-sdk-type-validator');
require('core-js/modules/es.array.sort.js');
require('core-js/modules/es.regexp.to-string.js');
require('core-js/modules/es.array.find.js');
require('core-js/modules/es.array.splice.js');
var telemetrytracker = require('twilsock/lib/services/telemetrytracker');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () {
                        return e[k];
                    }
                });
            }
        });
    }
    n['default'] = e;
    return Object.freeze(n);
}

var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);
var _assertThisInitialized__default = /*#__PURE__*/_interopDefaultLegacy(_assertThisInitialized);
var _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);
var _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy(_possibleConstructorReturn);
var _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy(_getPrototypeOf);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);
var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var loglevelLog__namespace = /*#__PURE__*/_interopNamespace(loglevelLog);
var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);
var JsonDiff__namespace = /*#__PURE__*/_interopNamespace(JsonDiff);
var uuid__namespace = /*#__PURE__*/_interopNamespace(uuid);
var platform__namespace = /*#__PURE__*/_interopNamespace(platform);
var _wrapNativeSuper__default = /*#__PURE__*/_interopDefaultLegacy(_wrapNativeSuper);
var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);

function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof__default['default'](Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __metadata(metadataKey, metadataValue) {
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof__default['default'](Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

var domain;

// This constructor is used to store event handlers. Instantiating this is
// faster than explicitly calling `Object.create(null)` to get a "clean" empty
// object (tested with v8 v4.9).
function EventHandlers() {}
EventHandlers.prototype = Object.create(null);

function EventEmitter() {
  EventEmitter.init.call(this);
}

// nodejs oddity
// require('events') === require('events').EventEmitter
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.usingDomains = false;

EventEmitter.prototype.domain = undefined;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

EventEmitter.init = function() {
  this.domain = null;
  if (EventEmitter.usingDomains) {
    // if there is an active domain, then attach to it.
    if (domain.active ) ;
  }

  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
    this._events = new EventHandlers();
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events, domain;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  domain = this.domain;

  // If there is no 'error' event listener then throw.
  if (doError) {
    er = arguments[1];
    if (domain) {
      if (!er)
        er = new Error('Uncaught, unspecified "error" event');
      er.domainEmitter = this;
      er.domain = domain;
      er.domainThrown = false;
      domain.emit('error', er);
    } else if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
    // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
    // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = new EventHandlers();
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] :
                                          [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
                            existing.length + ' ' + type + ' listeners added. ' +
                            'Use emitter.setMaxListeners() to increase limit');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        emitWarning(w);
      }
    }
  }

  return target;
}
function emitWarning(e) {
  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function _onceWrap(target, type, listener) {
  var fired = false;
  function g() {
    target.removeListener(type, g);
    if (!fired) {
      fired = true;
      listener.apply(target, arguments);
    }
  }
  g.listener = listener;
  return g;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || (list.listener && list.listener === listener)) {
        if (--this._eventsCount === 0)
          this._events = new EventHandlers();
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length; i-- > 0;) {
          if (list[i] === listener ||
              (list[i].listener && list[i].listener === listener)) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (list.length === 1) {
          list[0] = undefined;
          if (--this._eventsCount === 0) {
            this._events = new EventHandlers();
            return this;
          } else {
            delete events[type];
          }
        } else {
          spliceOne(list, position);
        }

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };
    
// Alias for removeListener added in NodeJS 10.0
// https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
EventEmitter.prototype.off = function(type, listener){
    return this.removeListener(type, listener);
};

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = new EventHandlers();
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = new EventHandlers();
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        for (var i = 0, key; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = new EventHandlers();
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        do {
          this.removeListener(type, listeners[listeners.length - 1]);
        } while (listeners[0]);
      }

      return this;
    };

EventEmitter.prototype.listeners = function listeners(type) {
  var evlistener;
  var ret;
  var events = this._events;

  if (!events)
    ret = [];
  else {
    evlistener = events[type];
    if (!evlistener)
      ret = [];
    else if (typeof evlistener === 'function')
      ret = [evlistener.listener || evlistener];
    else
      ret = unwrapListeners(evlistener);
  }

  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, i) {
  var copy = new Array(i);
  while (i--)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function prepareLine(prefix, args) {
  return ["".concat(new Date().toISOString(), " Conversations ").concat(prefix, ":")].concat(Array.from(args));
}

var log$a = loglevelLog__namespace.getLogger('twilio-conversations'); // twilio-conversations is used by Flex SDK. Please DO NOT change

var Logger = /*#__PURE__*/function () {
  function Logger(prefix) {
    _classCallCheck__default['default'](this, Logger);

    _defineProperty__default['default'](this, "prefix", '');

    this.prefix = prefix !== null && prefix !== undefined && prefix.length > 0 ? prefix + ' ' : '';
  }

  _createClass__default['default'](Logger, [{
    key: "setLevel",
    value: function setLevel(level) {
      log$a.setLevel(level);
    }
  }, {
    key: "trace",
    value: function trace() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      log$a.trace.apply(null, prepareLine(this.prefix + 'T', args));
    }
  }, {
    key: "debug",
    value: function debug() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      log$a.debug.apply(null, prepareLine(this.prefix + 'D', args));
    }
  }, {
    key: "info",
    value: function info() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      log$a.info.apply(null, prepareLine(this.prefix + 'I', args));
    }
  }, {
    key: "warn",
    value: function warn() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      log$a.warn.apply(null, prepareLine(this.prefix + 'W', args));
    }
  }, {
    key: "error",
    value: function error() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      log$a.error.apply(null, prepareLine(this.prefix + 'E', args));
    }
  }], [{
    key: "scope",
    value: function scope(prefix) {
      return new Logger(prefix);
    }
  }, {
    key: "setLevel",
    value: function setLevel(level) {
      log$a.setLevel(level);
    }
  }, {
    key: "trace",
    value: function trace() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      log$a.trace.apply(null, prepareLine('T', args));
    }
  }, {
    key: "debug",
    value: function debug() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      log$a.debug.apply(null, prepareLine('D', args));
    }
  }, {
    key: "info",
    value: function info() {
      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }

      log$a.info.apply(null, prepareLine('I', args));
    }
  }, {
    key: "warn",
    value: function warn() {
      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }

      log$a.warn.apply(null, prepareLine('W', args));
    }
  }, {
    key: "error",
    value: function error() {
      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }

      log$a.error.apply(null, prepareLine('E', args));
    }
  }]);

  return Logger;
}();

var TYPING_PATH = '/v1/typing';
var TYPING_TIMEOUT = 5;
var HTTP_CACHE_LIFETIME = 'PT5S';
var CONSUMPTION_HORIZON_SENDING_INTERVAL = 'PT5S';
var USER_INFOS_TO_SUBSCRIBE = 100;
var MINIMUM_RETRY_DELAY = 1000;
var MAXIMUM_RETRY_DELAY = 4000;
var MAXIMUM_ATTEMPTS_COUNT = 3;
var RETRY_WHEN_THROTTLED = true;

var Configuration = /*#__PURE__*/function () {
  function Configuration(options) {
    _classCallCheck__default['default'](this, Configuration);

    options = options || {};
    var constructorOptions = options.Chat || options.IPMessaging || options || {};
    this.region = constructorOptions.region || options.region;
    this.baseUrl = constructorOptions.apiUri || constructorOptions.typingUri || (!this.region || this.region === 'us1' ? 'https://aim.twilio.com' : "https://aim.".concat(this.region, ".twilio.com"));
    this.typingIndicatorUri = this.baseUrl + TYPING_PATH;
    this.typingIndicatorTimeoutOverride = constructorOptions.typingIndicatorTimeoutOverride;
    this.httpCacheIntervalOverride = constructorOptions.httpCacheIntervalOverride;
    this.consumptionReportIntervalOverride = constructorOptions.consumptionReportIntervalOverride;
    this.userInfosToSubscribeOverride = constructorOptions.userInfosToSubscribeOverride;
    this.retryWhenThrottledOverride = constructorOptions.retryWhenThrottledOverride;
    this.backoffConfigOverride = constructorOptions.backoffConfigOverride;
    this.productId = options.productId;
  }

  _createClass__default['default'](Configuration, [{
    key: "typingIndicatorTimeoutDefault",
    get: function get() {
      return TYPING_TIMEOUT * 1000;
    }
  }, {
    key: "httpCacheIntervalDefault",
    get: function get() {
      return HTTP_CACHE_LIFETIME;
    }
  }, {
    key: "consumptionReportIntervalDefault",
    get: function get() {
      return CONSUMPTION_HORIZON_SENDING_INTERVAL;
    }
  }, {
    key: "userInfosToSubscribeDefault",
    get: function get() {
      return USER_INFOS_TO_SUBSCRIBE;
    }
  }, {
    key: "retryWhenThrottledDefault",
    get: function get() {
      return RETRY_WHEN_THROTTLED;
    }
  }, {
    key: "backoffConfigDefault",
    get: function get() {
      return {
        min: MINIMUM_RETRY_DELAY,
        max: MAXIMUM_RETRY_DELAY,
        maxAttemptsCount: MAXIMUM_ATTEMPTS_COUNT
      };
    }
  }]);

  return Configuration;
}();

function _createForOfIteratorHelper$1(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var Network = /*#__PURE__*/function () {
  function Network(config, services) {
    var _this = this;

    _classCallCheck__default['default'](this, Network);

    this.config = config;
    this.services = services;
    this.cache = new Map();
    this.cacheLifetime = 0;
    this.services.session.getHttpCacheInterval().then(function (seconds) {
      _this.cacheLifetime = seconds * 1000;

      _this.cleanupCache();
    });
  }

  _createClass__default['default'](Network, [{
    key: "backoffConfig",
    value: function backoffConfig() {
      return Object.assign(this.config.backoffConfigDefault, this.config.backoffConfigOverride);
    }
  }, {
    key: "retryWhenThrottled",
    value: function retryWhenThrottled() {
      if (typeof this.config.retryWhenThrottledOverride !== 'undefined') {
        return this.config.retryWhenThrottledOverride;
      }

      if (typeof this.config.retryWhenThrottledDefault !== 'undefined') {
        return this.config.retryWhenThrottledDefault;
      }

      return false;
    }
  }, {
    key: "isExpired",
    value: function isExpired(timestamp) {
      return !this.cacheLifetime || Date.now() - timestamp > this.cacheLifetime;
    }
  }, {
    key: "cleanupCache",
    value: function cleanupCache() {
      var _iterator = _createForOfIteratorHelper$1(this.cache),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray__default['default'](_step.value, 2),
              k = _step$value[0],
              v = _step$value[1];

          if (this.isExpired(v.timestamp)) {
            this.cache.delete(k);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (this.cache.size === 0) {
        clearInterval(this.timer);
      }
    }
  }, {
    key: "pokeTimer",
    value: function pokeTimer() {
      var _this2 = this;

      this.timer = this.timer || setInterval(function () {
        return _this2.cleanupCache();
      }, this.cacheLifetime * 2);
    }
  }, {
    key: "executeWithRetry",
    value: function executeWithRetry(request) {
      var _this3 = this;

      var retryWhenThrottled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return new Promise(function (resolve, reject) {
        var codesToRetryOn = [502, 503, 504];

        if (retryWhenThrottled) {
          codesToRetryOn.push(429);
        }

        var retrier = new operationRetrier.Retrier(_this3.backoffConfig());
        retrier.on('attempt', function () {
          request().then(function (result) {
            return retrier.succeeded(result);
          }).catch(function (err) {
            if (codesToRetryOn.indexOf(err.status) > -1) {
              retrier.failed(err);
            } else if (err.message === 'Twilsock disconnected') {
              // Ugly hack. We must make a proper exceptions for twilsock
              retrier.failed(err);
            } else {
              // Fatal error
              retrier.removeAllListeners();
              retrier.cancel();
              reject(err);
            }
          });
        });
        retrier.on('succeeded', function (result) {
          resolve(result);
        });
        retrier.on('cancelled', function (err) {
          return reject(err);
        });
        retrier.on('failed', function (err) {
          return reject(err);
        });
        retrier.start();
      });
    }
  }, {
    key: "get",
    value: function () {
      var _get = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(url) {
        var _this4 = this;

        var cacheEntry, headers, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                cacheEntry = this.cache.get(url);

                if (!(cacheEntry && !this.isExpired(cacheEntry.timestamp))) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return", cacheEntry.response);

              case 3:
                headers = {};
                _context.next = 6;
                return this.executeWithRetry(function () {
                  return _this4.services.transport.get(url, headers, _this4.config.productId);
                }, this.retryWhenThrottled());

              case 6:
                response = _context.sent;
                this.cache.set(url, {
                  response: response,
                  timestamp: Date.now()
                });
                this.pokeTimer();
                return _context.abrupt("return", response);

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function get(_x) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
  }]);

  return Network;
}();

var NotificationTypes = function NotificationTypes() {
  _classCallCheck__default['default'](this, NotificationTypes);
};

_defineProperty__default['default'](NotificationTypes, "TYPING_INDICATOR", 'twilio.ipmsg.typing_indicator');

_defineProperty__default['default'](NotificationTypes, "NEW_MESSAGE", 'twilio.conversations.new_message');

_defineProperty__default['default'](NotificationTypes, "ADDED_TO_CONVERSATION", 'twilio.conversations.added_to_conversation');

_defineProperty__default['default'](NotificationTypes, "REMOVED_FROM_CONVERSATION", 'twilio.conversations.removed_from_conversation');

_defineProperty__default['default'](NotificationTypes, "CONSUMPTION_UPDATE", 'twilio.channel.consumption_update');

/**
 * Checks if objects are equal
 */

function isDeepEqual(o1, o2) {
  return JsonDiff__namespace.createPatch(o1, o2).length === 0;
}
/**
 * Deep-clone an object. Note that this does not work on object containing
 * functions.
 * @param {object} obj - the object to deep-clone
 * @returns {object}
 */


function deepClone(obj) {
  return JSON.parse(JSON.stringify(obj));
}

function parseToNumber(value) {
  if (typeof value !== 'undefined' && !isNaN(Number(value))) {
    return Number(value);
  }

  return null;
} // timeString cannot be typed `string` because in member.ts
// call to parseTime(data.lastReadTimestamp) uses number not a string for timestamp.


function parseTime$1(timeString) {
  try {
    return new Date(timeString);
  } catch (e) {
    return null;
  }
}

function parseAttributes(rawAttributes, warningMessage, log) {
  var attributes = {};

  if (rawAttributes) {
    try {
      attributes = JSON.parse(rawAttributes);
    } catch (e) {
      log.warn(warningMessage, e);
    }
  }

  return attributes;
}
/**
 * Construct URI with query parameters
 */


var UriBuilder = /*#__PURE__*/function () {
  function UriBuilder(base) {
    _classCallCheck__default['default'](this, UriBuilder);

    this.base = base.replace(/\/$/, '');
    this.args = [];
    this.paths = [];
  }

  _createClass__default['default'](UriBuilder, [{
    key: "arg",
    value: function arg(name, value) {
      if (typeof value !== 'undefined') {
        this.args.push(encodeURIComponent(name) + '=' + encodeURIComponent(value));
      }

      return this;
    }
  }, {
    key: "path",
    value: function path(name) {
      this.paths.push(encodeURIComponent(name));
      return this;
    }
  }, {
    key: "build",
    value: function build() {
      var result = this.base;

      if (this.paths.length) {
        result += '/' + this.paths.join('/');
      }

      if (this.args.length) {
        result += '?' + this.args.join('&');
      }

      return result;
    }
  }]);

  return UriBuilder;
}();

var RestPaginator = /*#__PURE__*/function () {
  /*
  * @constructor
  * @param {Array} items Array of element for current page
  * @param {Object} params
  * @private
  */
  function RestPaginator(items, source, prevToken, nextToken) {
    _classCallCheck__default['default'](this, RestPaginator);

    this.state = {
      prevToken: prevToken,
      nextToken: nextToken,
      source: source,
      items: items
    };
  }

  _createClass__default['default'](RestPaginator, [{
    key: "hasNextPage",
    get: function get() {
      return !!this.state.nextToken;
    }
  }, {
    key: "hasPrevPage",
    get: function get() {
      return !!this.state.prevToken;
    }
  }, {
    key: "items",
    get: function get() {
      return this.state.items;
    }
  }, {
    key: "nextPage",
    value: function nextPage() {
      return this.hasNextPage ? this.state.source(this.state.nextToken) : Promise.reject(new Error('No next page'));
    }
  }, {
    key: "prevPage",
    value: function prevPage() {
      return this.hasPrevPage ? this.state.source(this.state.prevToken) : Promise.reject(new Error('No previous page'));
    }
  }]);

  return RestPaginator;
}();

var SyncListDescriptor =
/**
 * @param {Object} descriptor - sync list descriptor data object
 * @private
 */
function SyncListDescriptor(descriptor) {
  _classCallCheck__default['default'](this, SyncListDescriptor);

  this.channel_sid = descriptor.channel_sid;
  this.status = descriptor.status;
  this.channel = descriptor.channel;
  this.messages = descriptor.messages;
  this.roster = descriptor.roster;
  this.lastConsumedMessageIndex = descriptor.last_consumed_message_index;
  this.notificationLevel = descriptor.notification_level;
  this.descriptor = descriptor;
};

/**
 * Provides async pagination interface for sync list
 *
 * @property {Network} network Network transport
 * @property {string} syncListUrl Url to the sync list endpoint
 */

var SyncList = /*#__PURE__*/function () {
  /**
   * @param {SyncListServices} services - services needed for SyncList service
   * @private
   */
  function SyncList(services) {
    _classCallCheck__default['default'](this, SyncList);

    this.services = services;
  }

  _createClass__default['default'](SyncList, [{
    key: "getPage",
    value: function () {
      var _getPage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(args) {
        var _this = this;

        var links, url, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                args = args || {};
                _context.next = 3;
                return this.services.session.getSessionLinks();

              case 3:
                links = _context.sent;
                url = new UriBuilder(links.syncListUrl).arg('PageToken', args.pageToken).build();
                _context.next = 7;
                return this.services.network.get(url);

              case 7:
                response = _context.sent;
                return _context.abrupt("return", new RestPaginator(response.body.channels.map(function (x) {
                  return new SyncListDescriptor(x);
                }), function (pageToken) {
                  return _this.getPage({
                    pageToken: pageToken
                  });
                }, response.body.meta.previous_token, response.body.meta.next_token));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getPage(_x) {
        return _getPage.apply(this, arguments);
      }

      return getPage;
    }()
  }]);

  return SyncList;
}();

var ResponseCodes = function ResponseCodes() {
  _classCallCheck__default['default'](this, ResponseCodes);
};

_defineProperty__default['default'](ResponseCodes, "HTTP_200_OK", 200);

_defineProperty__default['default'](ResponseCodes, "HTTP_400_BAD_REQUEST", 400);

_defineProperty__default['default'](ResponseCodes, "HTTP_404_NOT_FOUND", 404);

_defineProperty__default['default'](ResponseCodes, "ACCESS_FORBIDDEN_FOR_IDENTITY", 54007);

_defineProperty__default['default'](ResponseCodes, "LIST_NOT_FOUND", 54150);

function _createSuper$9(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$9(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$9() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

/**
 * @class
 * @classdesc Exception type for service-side errors.
 *
 * @property {Number} code - Error code
 * @property {String} message - Error description
 */
var SessionError = /*#__PURE__*/function (_Error) {
  _inherits__default['default'](SessionError, _Error);

  var _super = _createSuper$9(SessionError);

  function SessionError(message, code) {
    var _this;

    _classCallCheck__default['default'](this, SessionError);

    _this = _super.call(this);
    _this.name = _this.constructor.name;
    _this.message = message;
    _this.code = code;

    if (Error.captureStackTrace) {
      Error.captureStackTrace(_assertThisInitialized__default['default'](_this), _this.constructor);
    } else {
      _this.stack = new Error().stack;
    }

    return _this;
  }

  return SessionError;
}( /*#__PURE__*/_wrapNativeSuper__default['default'](Error));

var Deferred = /*#__PURE__*/function () {
  function Deferred() {
    var _this = this;

    _classCallCheck__default['default'](this, Deferred);

    this._promise = new Promise(function (resolve, reject) {
      _this._resolve = resolve;
      _this._reject = reject;
    });
  }

  _createClass__default['default'](Deferred, [{
    key: "promise",
    get: function get() {
      return this._promise;
    }
  }, {
    key: "update",
    value: function update(value) {
      this._resolve(value);
    }
  }, {
    key: "set",
    value: function set(value) {
      this.current = value;

      this._resolve(value);
    }
  }, {
    key: "fail",
    value: function fail(e) {
      this._reject(e);
    }
  }]);

  return Deferred;
}();

var version = "1.2.1";

var SDK_VERSION$1 = version;
var SESSION_PURPOSE = 'com.twilio.rtd.ipmsg';
var log$9 = Logger.scope('Session');

var Command = function Command() {
  _classCallCheck__default['default'](this, Command);
};

function hasAllPropertiesSet(obj, properties) {
  return !properties.some(function (prop) {
    return !obj.hasOwnProperty(prop);
  });
}
/**
 *  Constructs the instance of Session
 *
 *  @classdesc Provides the interface to send the command to the server
 *  It is reliable, which means that it tracks the command object state
 *  and waits the answer from the server.
 */


var Session = /*#__PURE__*/function () {
  function Session(services, config) {
    _classCallCheck__default['default'](this, Session);

    var platformInfo = typeof navigator !== 'undefined' ? platform__namespace.parse(navigator.userAgent) : platform__namespace;
    this.services = services;
    this.config = config;
    this.sessionInfo = new Deferred();
    this.currentContext = {};
    this.pendingCommands = new Map();
    this.sessionStreamPromise = null;
    this.endpointPlatform = ['JS', SDK_VERSION$1, platformInfo.os, platformInfo.name, platformInfo.version].join('|');
  }

  _createClass__default['default'](Session, [{
    key: "identity",
    get: function get() {
      return this.sessionInfo.current.identity;
    }
  }, {
    key: "reachabilityEnabled",
    get: function get() {
      return this.currentContext.reachabilityEnabled;
    }
  }, {
    key: "handleContextUpdate",
    value: function handleContextUpdate(updatedContext) {
      log$9.info('Session context updated');
      log$9.debug('new session context:', updatedContext);
      this.currentContext = updatedContext;

      if (!hasAllPropertiesSet(updatedContext, ['identity', 'userInfo', 'links', 'myChannels', 'channels'])) {
        return; // not enough data to proceed, wait
      }

      log$9.info('new session context accepted');
      this.sessionInfo.set(updatedContext);
    }
  }, {
    key: "initialize",
    value: function initialize() {
      var _this = this;

      var context = {
        type: 'IpMsgSession',
        apiVersion: '4',
        endpointPlatform: this.endpointPlatform
      };
      this.sessionStreamPromise = this.services.syncClient.list({
        purpose: SESSION_PURPOSE,
        context: context
      }).then(function (list) {
        log$9.info('Session created', list.sid);
        list.on('itemAdded', function (args) {
          return _this.processCommandResponse(args.item);
        });
        list.on('itemUpdated', function (args) {
          return _this.processCommandResponse(args.item);
        });
        list.on('contextUpdated', function (args) {
          return _this.handleContextUpdate(args.context);
        });
        return list;
      }).catch(function (err) {
        log$9.error('Failed to create session', err);
        throw err;
      });
      return this.sessionStreamPromise;
    }
    /**
     * Sends the command to the server
     * @returns Promise the promise, which is being fulfilled only when service will reply
     */

  }, {
    key: "addCommand",
    value: function addCommand(action, params) {
      return this.processCommand(action, params);
    }
    /**
     * @private
     */

  }, {
    key: "processCommand",
    value: function processCommand(action, params) {
      var _this2 = this;

      var createSessionIfNotFound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var command = new Command();
      command.request = params;
      command.request.action = action;
      command.commandId = uuid__namespace.v4();
      log$9.info('Adding command: ', action, command.commandId);
      log$9.debug('command arguments:', params, createSessionIfNotFound);
      return new Promise(function (resolve, reject) {
        _this2.sessionStreamPromise.then(function (list) {
          _this2.pendingCommands.set(command.commandId, {
            resolve: resolve,
            reject: reject,
            commandId: command.commandId,
            request: command.request
          });

          return list.push(command);
        }).then(function () {
          return log$9.debug('Command accepted by server', command.commandId);
        }).catch(function (err) {
          _this2.pendingCommands.delete(command.commandId);

          log$9.error('Failed to add a command to the session', err);

          if ((err.code == ResponseCodes.ACCESS_FORBIDDEN_FOR_IDENTITY || err.code === ResponseCodes.LIST_NOT_FOUND) && createSessionIfNotFound) {
            log$9.info('recreating session...');

            _this2.initialize();

            resolve(_this2.processCommand(action, params, false)); // second attempt
          } else {
            reject(new Error('Can\'t add command: ' + err.message));
          }
        });
      });
    }
    /**
     * @private
     */

  }, {
    key: "processCommandResponse",
    value: function processCommandResponse(entity) {
      if (entity.data.hasOwnProperty('response') && entity.data.hasOwnProperty('commandId') && this.pendingCommands.has(entity.data.commandId)) {
        var data = entity.data;
        var commandId = data.commandId;

        if (data.response.status === ResponseCodes.HTTP_200_OK) {
          log$9.debug('Command succeeded: ', data);
          var resolve = this.pendingCommands.get(commandId).resolve;
          this.pendingCommands.delete(commandId);
          resolve(data.response);
        } else {
          log$9.error('Command failed: ', data);
          var reject = this.pendingCommands.get(commandId).reject;
          this.pendingCommands.delete(commandId);
          reject(new SessionError(data.response.statusText, data.response.status));
        }
      }
    }
  }, {
    key: "getSessionContext",
    value: function getSessionContext() {
      return this.sessionStreamPromise.then(function (stream) {
        return stream.getContext();
      });
    }
  }, {
    key: "getSessionLinks",
    value: function () {
      var _getSessionLinks = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var info;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.sessionInfo.promise;

              case 2:
                info = _context.sent;
                return _context.abrupt("return", {
                  publicChannelsUrl: this.config.baseUrl + info.links.publicChannelsUrl,
                  myChannelsUrl: this.config.baseUrl + info.links.myChannelsUrl,
                  typingUrl: this.config.baseUrl + info.links.typingUrl,
                  syncListUrl: this.config.baseUrl + info.links.syncListUrl,
                  usersUrl: this.config.baseUrl + info.links.usersUrl,
                  mediaServiceUrl: info.links.mediaServiceUrl,
                  messagesReceiptsUrl: this.config.baseUrl + info.links.messagesReceiptsUrl
                });

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getSessionLinks() {
        return _getSessionLinks.apply(this, arguments);
      }

      return getSessionLinks;
    }()
  }, {
    key: "getConversationsId",
    value: function () {
      var _getConversationsId = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        var info;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.sessionInfo.promise;

              case 2:
                info = _context2.sent;
                return _context2.abrupt("return", info.channels);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getConversationsId() {
        return _getConversationsId.apply(this, arguments);
      }

      return getConversationsId;
    }()
  }, {
    key: "getMyConversationsId",
    value: function () {
      var _getMyConversationsId = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
        var info;
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.sessionInfo.promise;

              case 2:
                info = _context3.sent;
                return _context3.abrupt("return", info.myChannels);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getMyConversationsId() {
        return _getMyConversationsId.apply(this, arguments);
      }

      return getMyConversationsId;
    }()
  }, {
    key: "getMaxUserInfosToSubscribe",
    value: function () {
      var _getMaxUserInfosToSubscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {
        var info;
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.sessionInfo.promise;

              case 2:
                info = _context4.sent;
                return _context4.abrupt("return", this.config.userInfosToSubscribeOverride || info.userInfosToSubscribe || this.config.userInfosToSubscribeDefault);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getMaxUserInfosToSubscribe() {
        return _getMaxUserInfosToSubscribe.apply(this, arguments);
      }

      return getMaxUserInfosToSubscribe;
    }()
  }, {
    key: "getUsersData",
    value: function getUsersData() {
      return this.sessionInfo.promise.then(function (info) {
        return {
          user: info.userInfo,
          identity: info.identity
        };
      });
    }
  }, {
    key: "getConsumptionReportInterval",
    value: function () {
      var _getConsumptionReportInterval = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5() {
        var context, consumptionIntervalToUse;
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.getSessionContext();

              case 2:
                context = _context5.sent;
                consumptionIntervalToUse = this.config.consumptionReportIntervalOverride || context.consumptionReportInterval || this.config.consumptionReportIntervalDefault;
                _context5.prev = 4;
                return _context5.abrupt("return", iso8601Duration.toSeconds(iso8601Duration.parse(consumptionIntervalToUse)));

              case 8:
                _context5.prev = 8;
                _context5.t0 = _context5["catch"](4);
                log$9.error('Failed to parse consumption report interval', consumptionIntervalToUse, 'using default value', this.config.consumptionReportIntervalDefault);
                return _context5.abrupt("return", iso8601Duration.toSeconds(iso8601Duration.parse(this.config.consumptionReportIntervalDefault)));

              case 12:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[4, 8]]);
      }));

      function getConsumptionReportInterval() {
        return _getConsumptionReportInterval.apply(this, arguments);
      }

      return getConsumptionReportInterval;
    }()
  }, {
    key: "getHttpCacheInterval",
    value: function () {
      var _getHttpCacheInterval = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6() {
        var context, cacheIntervalToUse;
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.getSessionContext();

              case 2:
                context = _context6.sent;
                cacheIntervalToUse = this.config.httpCacheIntervalOverride || context.httpCacheInterval || this.config.httpCacheIntervalDefault;
                _context6.prev = 4;
                return _context6.abrupt("return", iso8601Duration.toSeconds(iso8601Duration.parse(cacheIntervalToUse)));

              case 8:
                _context6.prev = 8;
                _context6.t0 = _context6["catch"](4);
                log$9.error('Failed to parse cache interval', cacheIntervalToUse, 'using default value', this.config.httpCacheIntervalDefault);
                return _context6.abrupt("return", iso8601Duration.toSeconds(iso8601Duration.parse(this.config.httpCacheIntervalDefault)));

              case 12:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[4, 8]]);
      }));

      function getHttpCacheInterval() {
        return _getHttpCacheInterval.apply(this, arguments);
      }

      return getHttpCacheInterval;
    }()
  }]);

  return Session;
}();

function _createSuper$8(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$8(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$8() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$8 = Logger.scope('Participant');
/**
 * @classdesc A Participant represents a remote Client in a Conversation.
 * @property {any} attributes - Object with custom attributes for Participant
 * @property {Conversation} conversation - The Conversation the remote Client is a Participant of
 * @property {Date} dateCreated - The Date this Participant was created
 * @property {Date} dateUpdated - The Date this Participant was last updated
 * @property {String} identity - The identity of the remote Client
 * @property {Boolean} isTyping - Whether or not this Participant is currently typing
   * @property {Number|null} lastReadMessageIndex - Latest read Message index by this Participant.
 * Note that just retrieving messages on a client endpoint does not mean that messages are read,
 * please consider reading about [Read Horizon feature]{@link https://www.twilio.com/docs/api/chat/guides/consumption-horizon}
 * to find out how to mark messages as read.
 * @property {Date} lastReadTimestamp - Date when Participant has updated his read horizon
 * @property {String} sid - The server-assigned unique identifier for the Participant
 * @property {Participant#Type} type - The type of Participant
 * @fires Participant#typingEnded
 * @fires Participant#typingStarted
 * @fires Participant#updated
 */

var Participant = /*#__PURE__*/function (_EventEmitter) {
  _inherits__default['default'](Participant, _EventEmitter);

  var _super = _createSuper$8(Participant);

  /**
   * The update reason for <code>updated</code> event emitted on Participant
   * @typedef {('attributes' | 'dateCreated' | 'dateUpdated' | 'roleSid' |
    'lastReadMessageIndex' | 'lastReadTimestamp')} Participant#UpdateReason
   */

  /**
   * The type of Participant
   * @typedef {('chat' | 'sms' | 'whatsapp')} Participant#Type
   */
  function Participant(services, conversation, data, sid) {
    var _this;

    _classCallCheck__default['default'](this, Participant);

    _this = _super.call(this);
    _this.conversation = conversation;
    _this.services = services;
    _this.state = {
      attributes: parseAttributes(data.attributes, 'Retrieved malformed attributes from the server for participant: ' + sid, log$8),
      dateCreated: data.dateCreated ? parseTime$1(data.dateCreated) : null,
      dateUpdated: data.dateCreated ? parseTime$1(data.dateUpdated) : null,
      sid: sid,
      typingTimeout: null,
      isTyping: false,
      identity: data.identity || null,
      roleSid: data.roleSid || null,
      lastReadMessageIndex: Number.isInteger(data.lastConsumedMessageIndex) ? data.lastConsumedMessageIndex : null,
      lastReadTimestamp: data.lastConsumptionTimestamp ? parseTime$1(data.lastConsumptionTimestamp) : null,
      type: data.type || 'chat',
      userInfo: data.userInfo
    };

    if (!data.identity && !data.type) {
      throw new Error('Received invalid Participant object from server: Missing identity or type of Participant.');
    }

    return _this;
  }
  /**
   * Private method used to start or reset the typing indicator timeout (with event emitting)
   * @private
   */


  _createClass__default['default'](Participant, [{
    key: "sid",
    get: function get() {
      return this.state.sid;
    }
  }, {
    key: "attributes",
    get: function get() {
      return this.state.attributes;
    }
  }, {
    key: "dateCreated",
    get: function get() {
      return this.state.dateCreated;
    }
  }, {
    key: "dateUpdated",
    get: function get() {
      return this.state.dateUpdated;
    }
  }, {
    key: "identity",
    get: function get() {
      return this.state.identity;
    }
  }, {
    key: "isTyping",
    get: function get() {
      return this.state.isTyping;
    }
  }, {
    key: "lastReadMessageIndex",
    get: function get() {
      return this.state.lastReadMessageIndex;
    }
  }, {
    key: "lastReadTimestamp",
    get: function get() {
      return this.state.lastReadTimestamp;
    }
  }, {
    key: "roleSid",
    get: function get() {
      return this.state.roleSid;
    }
  }, {
    key: "type",
    get: function get() {
      return this.state.type;
    }
  }, {
    key: "_startTyping",
    value: function _startTyping(timeout) {
      var _this2 = this;

      clearTimeout(this.state.typingTimeout);
      this.state.isTyping = true;
      this.emit('typingStarted', this);
      this.conversation.emit('typingStarted', this);
      this.state.typingTimeout = setTimeout(function () {
        return _this2._endTyping();
      }, timeout);
      return this;
    }
    /**
     * Private method function used to stop typing indicator (with event emitting)
     * @private
     */

  }, {
    key: "_endTyping",
    value: function _endTyping() {
      if (!this.state.typingTimeout) {
        return;
      }

      this.state.isTyping = false;
      this.emit('typingEnded', this);
      this.conversation.emit('typingEnded', this);
      clearInterval(this.state.typingTimeout);
      this.state.typingTimeout = null;
    }
    /**
     * Private method function used update local object's property roleSid with new value
     * @private
     */

  }, {
    key: "_update",
    value: function _update(data) {
      var updateReasons = [];
      var updateAttributes = parseAttributes(data.attributes, 'Retrieved malformed attributes from the server for participant: ' + this.state.sid, log$8);

      if (data.attributes && !isDeepEqual(this.state.attributes, updateAttributes)) {
        this.state.attributes = updateAttributes;
        updateReasons.push('attributes');
      }

      var updatedDateUpdated = parseTime$1(data.dateUpdated);

      if (data.dateUpdated && updatedDateUpdated.getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {
        this.state.dateUpdated = updatedDateUpdated;
        updateReasons.push('dateUpdated');
      }

      var updatedDateCreated = parseTime$1(data.dateCreated);

      if (data.dateCreated && updatedDateCreated.getTime() !== (this.state.dateCreated && this.state.dateCreated.getTime())) {
        this.state.dateCreated = updatedDateCreated;
        updateReasons.push('dateCreated');
      }

      if (data.roleSid && this.state.roleSid !== data.roleSid) {
        this.state.roleSid = data.roleSid;
        updateReasons.push('roleSid');
      }

      if ((Number.isInteger(data.lastConsumedMessageIndex) || data.lastConsumedMessageIndex === null) && this.state.lastReadMessageIndex !== data.lastConsumedMessageIndex) {
        this.state.lastReadMessageIndex = data.lastConsumedMessageIndex;
        updateReasons.push('lastReadMessageIndex');
      }

      if (data.lastConsumptionTimestamp) {
        var lastReadTimestamp = new Date(data.lastConsumptionTimestamp);

        if (!this.state.lastReadTimestamp || this.state.lastReadTimestamp.getTime() !== lastReadTimestamp.getTime()) {
          this.state.lastReadTimestamp = lastReadTimestamp;
          updateReasons.push('lastReadTimestamp');
        }
      }

      if (updateReasons.length > 0) {
        this.emit('updated', {
          participant: this,
          updateReasons: updateReasons
        });
      }

      return this;
    }
    /**
     * Gets User for this participant and subscribes to it. Supported only for <code>chat</code> type of Participants
     * @returns {Promise<User>}
     */

  }, {
    key: "getUser",
    value: function () {
      var _getUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(this.type != 'chat')) {
                  _context.next = 2;
                  break;
                }

                throw new Error('Getting User is not supported for this Participant type: ' + this.type);

              case 2:
                return _context.abrupt("return", this.services.users.getUser(this.state.identity, this.state.userInfo));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getUser() {
        return _getUser.apply(this, arguments);
      }

      return getUser;
    }()
    /**
     * Remove Participant from the Conversation.
     * @returns {Promise<void>}
     */

  }, {
    key: "remove",
    value: function () {
      var _remove = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.conversation.removeParticipant(this));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function remove() {
        return _remove.apply(this, arguments);
      }

      return remove;
    }()
    /**
     * Edit participant attributes.
     * @param {any} attributes new attributes for Participant.
     * @returns {Promise<Participant>}
     */

  }, {
    key: "updateAttributes",
    value: function () {
      var _updateAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(attributes) {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.services.session.addCommand('editMemberAttributes', {
                  channelSid: this.conversation.sid,
                  memberSid: this.sid,
                  attributes: JSON.stringify(attributes)
                });

              case 2:
                return _context3.abrupt("return", this);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function updateAttributes(_x) {
        return _updateAttributes.apply(this, arguments);
      }

      return updateAttributes;
    }()
  }]);

  return Participant;
}(EventEmitter);

__decorate([twilioSdkTypeValidator.validateTypesAsync(['string', 'number', 'boolean', 'object', twilioSdkTypeValidator.literal(null)]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Participant.prototype, "updateAttributes", null);
/**
 * Fired when Participant started to type.
 * @event Participant#typingStarted
 * @type {Participant}
 */

/**
 * Fired when Participant ended to type.
 * @event Participant#typingEnded
 * @type {Participant}
 */

/**
 * Fired when Participant's fields has been updated.
 * @event Participant#updated
 * @type {Object}
 * @property {Participant} participant - Updated Participant
 * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons
 */

function _createSuper$7(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$7(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$7() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$7 = Logger.scope('Participants');
/**
 * @classdesc Represents the collection of participants for the conversation
 * @fires Participants#participantJoined
 * @fires Participants#participantLeft
 * @fires Participants#participantUpdated
 */

var Participants = /*#__PURE__*/function (_EventEmitter) {
  _inherits__default['default'](Participants, _EventEmitter);

  var _super = _createSuper$7(Participants);

  function Participants(conversation, services, participants) {
    var _this;

    _classCallCheck__default['default'](this, Participants);

    _this = _super.call(this);
    _this.services = services;
    _this.conversation = conversation;
    _this.participants = participants;
    return _this;
  }

  _createClass__default['default'](Participants, [{
    key: "unsubscribe",
    value: function () {
      var _unsubscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var entity;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.rosterEntityPromise) {
                  _context.next = 6;
                  break;
                }

                _context.next = 3;
                return this.rosterEntityPromise;

              case 3:
                entity = _context.sent;
                entity.close();
                this.rosterEntityPromise = null;

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function unsubscribe() {
        return _unsubscribe.apply(this, arguments);
      }

      return unsubscribe;
    }()
  }, {
    key: "subscribe",
    value: function subscribe(rosterObjectName) {
      var _this2 = this;

      return this.rosterEntityPromise = this.rosterEntityPromise || this.services.syncClient.map({
        id: rosterObjectName,
        mode: 'open_existing'
      }).then(function (rosterMap) {
        rosterMap.on('itemAdded', function (args) {
          log$7.debug(_this2.conversation.sid + ' itemAdded: ' + args.item.key);

          _this2.upsertParticipant(args.item.key, args.item.data).then(function (participant) {
            _this2.emit('participantJoined', participant);
          });
        });
        rosterMap.on('itemRemoved', function (args) {
          log$7.debug(_this2.conversation.sid + ' itemRemoved: ' + args.key);
          var participantSid = args.key;

          if (!_this2.participants.has(participantSid)) {
            return;
          }

          var leftParticipant = _this2.participants.get(participantSid);

          _this2.participants.delete(participantSid);

          _this2.emit('participantLeft', leftParticipant);
        });
        rosterMap.on('itemUpdated', function (args) {
          log$7.debug(_this2.conversation.sid + ' itemUpdated: ' + args.item.key);

          _this2.upsertParticipant(args.item.key, args.item.data);
        });
        var participantsPromises = [];
        var that = _this2;

        var rosterMapHandler = function rosterMapHandler(paginator) {
          paginator.items.forEach(function (item) {
            participantsPromises.push(that.upsertParticipant(item.key, item.data));
          });
          return paginator.hasNextPage ? paginator.nextPage().then(rosterMapHandler) : null;
        };

        return rosterMap.getItems().then(rosterMapHandler).then(function () {
          return Promise.all(participantsPromises);
        }).then(function () {
          return rosterMap;
        });
      }).catch(function (err) {
        _this2.rosterEntityPromise = null;

        if (_this2.services.syncClient.connectionState != 'disconnected') {
          log$7.error('Failed to get roster object for conversation', _this2.conversation.sid, err);
        }

        log$7.debug('ERROR: Failed to get roster object for conversation', _this2.conversation.sid, err);
        throw err;
      });
    }
  }, {
    key: "upsertParticipant",
    value: function () {
      var _upsertParticipant = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(participantSid, data) {
        var _this3 = this;

        var participant;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                participant = this.participants.get(participantSid);

                if (!participant) {
                  _context2.next = 3;
                  break;
                }

                return _context2.abrupt("return", participant._update(data));

              case 3:
                participant = new Participant(this.services, this.conversation, data, participantSid);
                this.participants.set(participantSid, participant);
                participant.on('updated', function (args) {
                  return _this3.emit('participantUpdated', args);
                });
                return _context2.abrupt("return", participant);

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function upsertParticipant(_x, _x2) {
        return _upsertParticipant.apply(this, arguments);
      }

      return upsertParticipant;
    }()
    /**
     * @returns {Promise<Array<Participant>>} returns list of participants {@see Participant}
     */

  }, {
    key: "getParticipants",
    value: function getParticipants() {
      var _this4 = this;

      return this.rosterEntityPromise.then(function () {
        var participants = [];

        _this4.participants.forEach(function (participant) {
          return participants.push(participant);
        });

        return participants;
      });
    }
    /**
     * Get participant by SID from conversation
     * @returns {Promise<Participant>}
     */

  }, {
    key: "getParticipantBySid",
    value: function () {
      var _getParticipantBySid = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(participantSid) {
        var _this5 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", this.rosterEntityPromise.then(function () {
                  var participant = _this5.participants.get(participantSid);

                  if (!participant) {
                    throw new Error('Participant with SID ' + participantSid + ' was not found');
                  }

                  return participant;
                }));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getParticipantBySid(_x3) {
        return _getParticipantBySid.apply(this, arguments);
      }

      return getParticipantBySid;
    }()
    /**
     * Get participant by identity from conversation
     * @returns {Promise<Participant>}
     */

  }, {
    key: "getParticipantByIdentity",
    value: function () {
      var _getParticipantByIdentity = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(identity) {
        var _this6 = this;

        var foundParticipant;
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                foundParticipant = null;
                return _context4.abrupt("return", this.rosterEntityPromise.then(function () {
                  _this6.participants.forEach(function (participant) {
                    if (participant.identity === identity) {
                      foundParticipant = participant;
                    }
                  });

                  if (!foundParticipant) {
                    throw new Error('Participant with identity ' + identity + ' was not found');
                  }

                  return foundParticipant;
                }));

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getParticipantByIdentity(_x4) {
        return _getParticipantByIdentity.apply(this, arguments);
      }

      return getParticipantByIdentity;
    }()
    /**
     * Add a chat participant to the conversation
     * @returns {Promise<any>}
     */

  }, {
    key: "add",
    value: function add(identity, attributes) {
      return this.services.session.addCommand('addMemberV2', {
        channelSid: this.conversation.sid,
        attributes: JSON.stringify(attributes),
        username: identity
      });
    }
    /**
     * Add a non-chat participant to the conversation.
     *
     * @param proxyAddress
     * @param address
     * @param attributes
     * @returns {Promise<any>}
     */

  }, {
    key: "addNonChatParticipant",
    value: function addNonChatParticipant(proxyAddress, address) {
      var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return this.services.session.addCommand('addNonChatParticipant', {
        conversationSid: this.conversation.sid,
        proxyAddress: proxyAddress,
        attributes: JSON.stringify(attributes),
        address: address
      });
    }
    /**
     * Invites user to the conversation
     * User can choose either to join or not
     * @returns {Promise<any>}
     */

  }, {
    key: "invite",
    value: function invite(identity) {
      return this.services.session.addCommand('inviteMember', {
        channelSid: this.conversation.sid,
        username: identity
      });
    }
    /**
     * Remove participant from conversation by Identity
     * @returns {Promise<any>}
     */

  }, {
    key: "removeByIdentity",
    value: function removeByIdentity(identity) {
      return this.services.session.addCommand('removeMember', {
        channelSid: this.conversation.sid,
        username: identity
      });
    }
    /**
     * Remove participant from conversation by sid
     * @returns {Promise<any>}
     */

  }, {
    key: "removeBySid",
    value: function removeBySid(sid) {
      return this.services.session.addCommand('removeMember', {
        channelSid: this.conversation.sid,
        memberSid: sid
      });
    }
  }]);

  return Participants;
}(EventEmitter);
/**
 * Fired when participant joined conversation
 * @event Participants#participantJoined
 * @type {Participant}
 */

/**
 * Fired when participant left conversation
 * @event Participants#participantLeft
 * @type {Participant}
 */

/**
 * Fired when participant updated
 * @event Participants#participantUpdated
 * @type {Object}
 * @property {Participant} participant - Updated Participant
 * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons
 */

/**
 * @classdesc A Media represents a media information for Message in a Conversation.
 * @property {String} contentType - content type of media
 * @property {String} sid - The server-assigned unique identifier for Media
 * @property {Number} size - Size of media, bytes
 * @property {String} [filename] - file name if present, null otherwise
 */
var Media = /*#__PURE__*/function () {
  function Media(data, services) {
    _classCallCheck__default['default'](this, Media);

    _defineProperty__default['default'](this, "mcsMedia", null);

    this.services = services;
    this.state = {
      sid: data.sid,
      filename: data.filename,
      contentType: data.contentType,
      size: data.size
    };
  }

  _createClass__default['default'](Media, [{
    key: "sid",
    get: function get() {
      return this.state.sid;
    }
  }, {
    key: "filename",
    get: function get() {
      return this.state.filename;
    }
  }, {
    key: "contentType",
    get: function get() {
      return this.state.contentType;
    }
  }, {
    key: "size",
    get: function get() {
      return this.state.size;
    }
    /**
     * Returns direct content URL for the media.
     *
     * This URL is impermanent, it will expire in several minutes and cannot be cached.
     * If the URL becomes expired, you need to request a new one.
     * Each call to this function produces a new temporary URL.
     *
     * @returns {Promise<String>}
     */

  }, {
    key: "getContentTemporaryUrl",
    value: function () {
      var _getContentTemporaryUrl = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.mcsMedia) {
                  _context.next = 8;
                  break;
                }

                if (!this.services.mcsClient) {
                  _context.next = 7;
                  break;
                }

                _context.next = 4;
                return this.services.mcsClient.get(this.state.sid);

              case 4:
                this.mcsMedia = _context.sent;
                _context.next = 8;
                break;

              case 7:
                throw new Error('Media Content Service is unavailable');

              case 8:
                return _context.abrupt("return", this.mcsMedia.getContentUrl());

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getContentTemporaryUrl() {
        return _getContentTemporaryUrl.apply(this, arguments);
      }

      return getContentTemporaryUrl;
    }()
  }]);

  return Media;
}();

/**
 * @classdesc Contains aggregated information about a {@link Message}'s delivery statuses across all {@link Participant}s
 * of a {@link Conversation}.
 *
 * At any moment during delivering message to a {@link Participant} the message can have zero or more of following
 * delivery statuses:
 *
 * <ul><li>
 * Message considered as <b>sent</b> to a participant, if the nearest upstream carrier accepted the message.
 * </li><li>
 * Message considered as <b>delivered</b> to a participant, if Twilio has received confirmation of message
 * delivery from the upstream carrier, and, where available, the destination handset.
 * </li><li>
 * Message considered as <b>undelivered</b> to a participant, if Twilio has received a delivery receipt
 * indicating that the message was not delivered. This can happen for many reasons including carrier content
 * filtering and the availability of the destination handset.
 * </li><li>
 * Message considered as <b>read</b> by a participant, if the message has been delivered and opened by the
 * recipient in the conversation. The recipient must have enabled read receipts.
 * </li><li>
 * Message considered as <b>failed</b> to be delivered to a participant if the message could not be sent.
 * This can happen for various reasons including queue overflows, account suspensions and media
 * errors (in the case of MMS for instance).
 *</li></ul>
 *
 * {@link AggregatedDeliveryReceipt} class contains aggregated value {@link AggregatedDeliveryReceipt#DeliveryAmount} for each delivery status.
 *
 * @property {number} total - Maximum number of delivery events expected for the message
 * @property {AggregatedDeliveryReceipt#DeliveryAmount} sent - Amount of participants that have <b>sent</b> delivery status for the message.
 * @property {AggregatedDeliveryReceipt#DeliveryAmount} delivered - Amount of participants that have <b>delivered</b> delivery status
 *   for the message.
 * @property {AggregatedDeliveryReceipt#DeliveryAmount} read - Amount of participants that have <b>read</b> delivery status for the message.
 * @property {AggregatedDeliveryReceipt#DeliveryAmount} undelivered - Amount of participants that have <b>undelivered</b> delivery status
 *   for the message.
 * @property {AggregatedDeliveryReceipt#DeliveryAmount} failed - Amount of participants that have <b>failed</b> delivery status for the message.
 */
var AggregatedDeliveryReceipt = /*#__PURE__*/function () {
  /**
   * Signifies amount of participants which have the status for the message.
   * @typedef {('none'|'some'|'all')} AggregatedDeliveryReceipt#DeliveryAmount
   */
  function AggregatedDeliveryReceipt(data) {
    _classCallCheck__default['default'](this, AggregatedDeliveryReceipt);

    this.state = data;
  }
  /**
   * @return Maximum number of delivery events expected for the message.
   */


  _createClass__default['default'](AggregatedDeliveryReceipt, [{
    key: "total",
    get: function get() {
      return this.state.total;
    }
    /**
     * Message considered as <b>sent</b> to a participant, if the nearest upstream carrier accepted the message.
     *
     * @return {@link DeliveryAmount} of participants that have <b>sent</b> delivery status for the message.
     */

  }, {
    key: "sent",
    get: function get() {
      return this.state.sent;
    }
    /**
     * Message considered as <b>delivered</b> to a participant, if Twilio has received confirmation of message
     * delivery from the upstream carrier, and, where available, the destination handset.
     *
     * @return {@link DeliveryAmount} of participants that have <b>delivered</b> delivery status for the message.
     */

  }, {
    key: "delivered",
    get: function get() {
      return this.state.delivered;
    }
    /**
     * Message considered as <b>read</b> by a participant, if the message has been delivered and opened by the
     * recipient in the conversation. The recipient must have enabled read receipts.
     *
     * @return {@link DeliveryAmount} of participants that have <b>read</b> delivery status for the message.
     */

  }, {
    key: "read",
    get: function get() {
      return this.state.read;
    }
    /**
     * Message considered as <b>undelivered</b> to a participant, if Twilio has received a delivery receipt
     * indicating that the message was not delivered. This can happen for many reasons including carrier content
     * filtering and the availability of the destination handset.
     *
     * @return {@link DeliveryAmount} of participants that have <b>undelivered</b> delivery status for the message.
     */

  }, {
    key: "undelivered",
    get: function get() {
      return this.state.undelivered;
    }
    /**
     * Message considered as <b>failed</b> to be delivered to a participant if the message could not be sent.
     * This can happen for various reasons including queue overflows, account suspensions and media
     * errors (in the case of MMS for instance). Twilio does not charge you for failed messages.
     *
     * @return {@link DeliveryAmount} of participants that have <b>failed</b> delivery status for the message.
     */

  }, {
    key: "failed",
    get: function get() {
      return this.state.failed;
    }
  }, {
    key: "_update",
    value: function _update(data) {
      this.state = data;
    }
  }, {
    key: "_isEquals",
    value: function _isEquals(data) {
      var isTotalSame = this.total === data.total;
      var isSentSame = this.sent === data.sent;
      var isDeliveredSame = this.delivered === data.delivered;
      var isReadSame = this.read === data.read;
      var isUndeliveredSame = this.undelivered === data.undelivered;
      var isFailedSame = this.failed === data.failed;
      return isTotalSame && isSentSame && isDeliveredSame && isReadSame && isUndeliveredSame && isFailedSame;
    }
  }]);

  return AggregatedDeliveryReceipt;
}();

/**
 * @classdesc Represents a delivery receipt of a {@link Message}.
 *
 * @property {String} sid - The unique identifier for Delivery Receipt
 * @property {String} messageSid - The unique identifier for Conversation Message
 * @property {String} conversationSid - The unique identifier for Conversation
 * @property {String} channelMessageSid - The unique identifier for the ‘channel’ message e.g WAxx for Whatsapp, SMxx for SMS
 * @property {String} participantSid - Participant's unique identifier
 * @property {DetailedDeliveryReceipt#Status} status - Message delivery status
 * @property {number | null} errorCode - Numeric error code mapped from Status callback code. Information about the error codes can be found
 * <a href="https://www.twilio.com/docs/sms/api/message-resource#delivery-related-errors">here</a>.
 * @property {String} dateCreated - When Delivery Receipt was created
 * @property {String} dateUpdated - When Delivery Receipt was updated
 */
var DetailedDeliveryReceipt =
/**
 * Signifies the message delivery status.
 * @typedef {('sent'|'delivered'|'failed'|'read'|'undelivered'|'queued')} DetailedDeliveryReceipt#Status
 */
function DetailedDeliveryReceipt(descriptor) {
  _classCallCheck__default['default'](this, DetailedDeliveryReceipt);

  this.sid = descriptor.sid;
  this.messageSid = descriptor.message_sid;
  this.conversationSid = descriptor.conversation_sid;
  this.channelMessageSid = descriptor.channel_message_sid;
  this.participantSid = descriptor.participant_sid;
  this.status = descriptor.status || 'queued';
  this.errorCode = descriptor.error_code || 0;
  this.dateCreated = descriptor.date_created;
  this.dateUpdated = descriptor.date_updated;
};

function _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$6(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$6() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$6 = Logger.scope('Message');
/**
 * @classdesc A Message represents a Message in a Conversation.
 * @property {String} author - The name of the user that sent Message
 * @property {String|null} subject - Message subject. Used only in email conversations
 * @property {String} body - The body of the Message. Is null if Message is Media Message
 * @property {any} attributes - Message custom attributes
 * @property {Conversation} conversation - Conversation Message belongs to
 * @property {Date} dateCreated - When Message was created
 * @property {Date} dateUpdated - When Message was updated
 * @property {Number} index - Index of Message in the Conversation's messages list
 *  By design of the conversations system the message indices may have arbitrary gaps between them,
 *  that does not necessarily mean they were deleted or otherwise modified - just that
 *  messages may have non-contiguous indices even if they are sent immediately one after another.
 *
 *  Trying to use indices for some calculations is going to be unreliable.
 *
 *  To calculate the number of unread messages it is better to use the read horizon API.
 *  See {@link Conversation#getUnreadMessagesCount} for details.
 *
 * @property {String} lastUpdatedBy - Identity of the last user that updated Message
 * @property {Media} media - Contains Media information (if present)
 * @property {String} participantSid - Authoring Participant's server-assigned unique identifier
 * @property {String} sid - The server-assigned unique identifier for Message
 * @property {'text' | 'media'} type - Type of message: 'text' or 'media'
 * @property {AggregatedDeliveryReceipt | null} aggregatedDeliveryReceipt - Aggregated information about
 *   Message delivery statuses across all {@link Participant}s of a {@link Conversation}.
 * @fires Message#updated
 */

var Message = /*#__PURE__*/function (_EventEmitter) {
  _inherits__default['default'](Message, _EventEmitter);

  var _super = _createSuper$6(Message);

  /**
   * The update reason for <code>updated</code> event emitted on Message
   * @typedef {('body' | 'lastUpdatedBy' | 'dateCreated' | 'dateUpdated' | 'attributes' | 'author' |
   *   'deliveryReceipt' | 'subject')} Message#UpdateReason
   */
  function Message(conversation, services, index, data) {
    var _this;

    _classCallCheck__default['default'](this, Message);

    _this = _super.call(this);
    _this.conversation = conversation;
    _this.services = services;
    _this.state = {
      sid: data.sid,
      index: index,
      author: data.author == null ? null : data.author,
      subject: data.subject == null ? null : data.subject,
      body: data.text,
      timestamp: data.timestamp ? new Date(data.timestamp) : null,
      dateUpdated: data.dateUpdated ? new Date(data.dateUpdated) : null,
      lastUpdatedBy: data.lastUpdatedBy ? data.lastUpdatedBy : null,
      attributes: parseAttributes(data.attributes, "Got malformed attributes for the message ".concat(data.sid), log$6),
      type: data.type ? data.type : 'text',
      media: data.type && data.type === 'media' && data.media ? new Media(data.media, _this.services) : null,
      participantSid: data.memberSid == null ? null : data.memberSid,
      aggregatedDeliveryReceipt: data.delivery ? new AggregatedDeliveryReceipt(data.delivery) : null
    };
    return _this;
  }

  _createClass__default['default'](Message, [{
    key: "sid",
    get: function get() {
      return this.state.sid;
    }
  }, {
    key: "author",
    get: function get() {
      return this.state.author;
    }
  }, {
    key: "subject",
    get: function get() {
      return this.state.subject;
    }
  }, {
    key: "body",
    get: function get() {
      if (this.type === 'media') {
        return null;
      }

      return this.state.body;
    }
  }, {
    key: "dateUpdated",
    get: function get() {
      return this.state.dateUpdated;
    }
  }, {
    key: "index",
    get: function get() {
      return this.state.index;
    }
  }, {
    key: "lastUpdatedBy",
    get: function get() {
      return this.state.lastUpdatedBy;
    }
  }, {
    key: "dateCreated",
    get: function get() {
      return this.state.timestamp;
    }
  }, {
    key: "attributes",
    get: function get() {
      return this.state.attributes;
    }
  }, {
    key: "type",
    get: function get() {
      return this.state.type;
    }
  }, {
    key: "media",
    get: function get() {
      return this.state.media;
    }
  }, {
    key: "participantSid",
    get: function get() {
      return this.state.participantSid;
    }
  }, {
    key: "aggregatedDeliveryReceipt",
    get: function get() {
      return this.state.aggregatedDeliveryReceipt;
    }
  }, {
    key: "_update",
    value: function _update(data) {
      var updateReasons = [];

      if ((data.text || typeof data.text === 'string') && data.text !== this.state.body) {
        this.state.body = data.text;
        updateReasons.push('body');
      }

      if (data.subject && data.subject !== this.state.subject) {
        this.state.subject = data.subject;
        updateReasons.push('subject');
      }

      if (data.lastUpdatedBy && data.lastUpdatedBy !== this.state.lastUpdatedBy) {
        this.state.lastUpdatedBy = data.lastUpdatedBy;
        updateReasons.push('lastUpdatedBy');
      }

      if (data.author && data.author !== this.state.author) {
        this.state.author = data.author;
        updateReasons.push('author');
      }

      if (data.dateUpdated && new Date(data.dateUpdated).getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {
        this.state.dateUpdated = new Date(data.dateUpdated);
        updateReasons.push('dateUpdated');
      }

      if (data.timestamp && new Date(data.timestamp).getTime() !== (this.state.timestamp && this.state.timestamp.getTime())) {
        this.state.timestamp = new Date(data.timestamp);
        updateReasons.push('dateCreated');
      }

      var updatedAttributes = parseAttributes(data.attributes, "Got malformed attributes for the message ".concat(this.sid), log$6);

      if (!isDeepEqual(this.state.attributes, updatedAttributes)) {
        this.state.attributes = updatedAttributes;
        updateReasons.push('attributes');
      }

      var updatedAggregatedDelivery = data.delivery;
      var currentAggregatedDelivery = this.state.aggregatedDeliveryReceipt;
      var isUpdatedAggregateDeliveryValid = !!updatedAggregatedDelivery && !!updatedAggregatedDelivery.total && !!updatedAggregatedDelivery.delivered && !!updatedAggregatedDelivery.failed && !!updatedAggregatedDelivery.read && !!updatedAggregatedDelivery.sent && !!updatedAggregatedDelivery.undelivered;

      if (isUpdatedAggregateDeliveryValid) {
        if (!currentAggregatedDelivery) {
          this.state.aggregatedDeliveryReceipt = new AggregatedDeliveryReceipt(updatedAggregatedDelivery);
          updateReasons.push('deliveryReceipt');
        } else if (!currentAggregatedDelivery._isEquals(updatedAggregatedDelivery)) {
          currentAggregatedDelivery._update(updatedAggregatedDelivery);

          updateReasons.push('deliveryReceipt');
        }
      }

      if (updateReasons.length > 0) {
        this.emit('updated', {
          message: this,
          updateReasons: updateReasons
        });
      }
    }
    /**
     * Get Participant who is author of the Message
     * @returns {Promise<Participant>}
     */

  }, {
    key: "getParticipant",
    value: function () {
      var _getParticipant = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var _this2 = this;

        var participant, errorMesage;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                participant = null;

                if (!this.state.participantSid) {
                  _context.next = 5;
                  break;
                }

                _context.next = 4;
                return this.conversation.getParticipantBySid(this.participantSid).catch(function () {
                  log$6.debug('Participant with sid "' + _this2.participantSid + '" not found for message ' + _this2.sid);
                  return null;
                });

              case 4:
                participant = _context.sent;

              case 5:
                if (!(!participant && this.state.author)) {
                  _context.next = 9;
                  break;
                }

                _context.next = 8;
                return this.conversation.getParticipantByIdentity(this.state.author).catch(function () {
                  log$6.debug('Participant with identity "' + _this2.author + '" not found for message ' + _this2.sid);
                  return null;
                });

              case 8:
                participant = _context.sent;

              case 9:
                if (!participant) {
                  _context.next = 11;
                  break;
                }

                return _context.abrupt("return", participant);

              case 11:
                errorMesage = 'Participant with ';

                if (this.state.participantSid) {
                  errorMesage += 'SID \'' + this.state.participantSid + '\' ';
                }

                if (this.state.author) {
                  if (this.state.participantSid) {
                    errorMesage += 'or ';
                  }

                  errorMesage += 'identity \'' + this.state.author + '\' ';
                }

                if (errorMesage === 'Participant with ') {
                  errorMesage = 'Participant ';
                }

                errorMesage += 'was not found';
                throw new Error(errorMesage);

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getParticipant() {
        return _getParticipant.apply(this, arguments);
      }

      return getParticipant;
    }()
    /**
     * Get delivery receipts of the message
     * @returns {Promise<DetailedDeliveryReceipt[]>}
     */

  }, {
    key: "getDetailedDeliveryReceipts",
    value: function () {
      var _getDetailedDeliveryReceipts = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        var paginator, detailedDeliveryReceipts;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this._getDetailedDeliveryReceiptsPaginator();

              case 2:
                paginator = _context2.sent;
                detailedDeliveryReceipts = [];

              case 4:

                detailedDeliveryReceipts = [].concat(_toConsumableArray__default['default'](detailedDeliveryReceipts), _toConsumableArray__default['default'](paginator.items));

                if (paginator.hasNextPage) {
                  _context2.next = 8;
                  break;
                }

                return _context2.abrupt("break", 13);

              case 8:
                _context2.next = 10;
                return paginator.nextPage();

              case 10:
                paginator = _context2.sent;
                _context2.next = 4;
                break;

              case 13:
                return _context2.abrupt("return", detailedDeliveryReceipts);

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getDetailedDeliveryReceipts() {
        return _getDetailedDeliveryReceipts.apply(this, arguments);
      }

      return getDetailedDeliveryReceipts;
    }()
    /**
     * Remove the Message.
     * @returns {Promise<Message>}
     */

  }, {
    key: "remove",
    value: function () {
      var _remove = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3() {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.services.session.addCommand('deleteMessage', {
                  channelSid: this.conversation.sid,
                  messageIdx: this.index.toString()
                });

              case 2:
                return _context3.abrupt("return", this);

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function remove() {
        return _remove.apply(this, arguments);
      }

      return remove;
    }()
    /**
     * Edit message body.
     * @param {String} body - new body of Message.
     * @returns {Promise<Message>}
     */

  }, {
    key: "updateBody",
    value: function () {
      var _updateBody = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(body) {
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.services.session.addCommand('editMessage', {
                  channelSid: this.conversation.sid,
                  messageIdx: this.index.toString(),
                  text: body
                });

              case 2:
                return _context4.abrupt("return", this);

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function updateBody(_x) {
        return _updateBody.apply(this, arguments);
      }

      return updateBody;
    }()
    /**
     * Edit message attributes.
     * @param {any} attributes new attributes for Message.
     * @returns {Promise<Message>}
     */

  }, {
    key: "updateAttributes",
    value: function () {
      var _updateAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(attributes) {
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.services.session.addCommand('editMessageAttributes', {
                  channelSid: this.conversation.sid,
                  messageIdx: this.index,
                  attributes: JSON.stringify(attributes)
                });

              case 2:
                return _context5.abrupt("return", this);

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function updateAttributes(_x2) {
        return _updateAttributes.apply(this, arguments);
      }

      return updateAttributes;
    }()
  }, {
    key: "_getDetailedDeliveryReceiptsPaginator",
    value: function () {
      var _getDetailedDeliveryReceiptsPaginator2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(options) {
        var _this3 = this;

        var links, messagesReceiptsUrl, url, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.services.session.getSessionLinks();

              case 2:
                links = _context6.sent;
                messagesReceiptsUrl = links.messagesReceiptsUrl.replace('%s', this.conversation.sid).replace('%s', this.sid);
                url = new UriBuilder(messagesReceiptsUrl).arg('PageToken', options === null || options === void 0 ? void 0 : options.pageToken).arg('PageSize', options === null || options === void 0 ? void 0 : options.pageSize).build();
                _context6.next = 7;
                return this.services.network.get(url);

              case 7:
                response = _context6.sent;
                return _context6.abrupt("return", new RestPaginator(response.body.delivery_receipts.map(function (x) {
                  return new DetailedDeliveryReceipt(x);
                }), function (pageToken, pageSize) {
                  return _this3._getDetailedDeliveryReceiptsPaginator({
                    pageToken: pageToken,
                    pageSize: pageSize
                  });
                }, response.body.meta.previous_token, response.body.meta.next_token));

              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function _getDetailedDeliveryReceiptsPaginator(_x3) {
        return _getDetailedDeliveryReceiptsPaginator2.apply(this, arguments);
      }

      return _getDetailedDeliveryReceiptsPaginator;
    }()
  }]);

  return Message;
}(EventEmitter);

__decorate([twilioSdkTypeValidator.validateTypesAsync('string'), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Message.prototype, "updateBody", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(['string', 'number', 'boolean', 'object', twilioSdkTypeValidator.literal(null)]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Message.prototype, "updateAttributes", null);
/**
 * Fired when the Message's properties or body has been updated.
 * @event Message#updated
 * @type {Object}
 * @property {Message} message - Updated Message
 * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons
 */

function _createSuper$5(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$5() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$5 = Logger.scope('Messages');
/**
 * Represents the collection of messages in a conversation
 */

var Messages = /*#__PURE__*/function (_EventEmitter) {
  _inherits__default['default'](Messages, _EventEmitter);

  var _super = _createSuper$5(Messages);

  function Messages(conversation, services) {
    var _this;

    _classCallCheck__default['default'](this, Messages);

    _this = _super.call(this);
    _this.conversation = conversation;
    _this.services = services;
    _this.messagesByIndex = new Map();
    _this.messagesListPromise = null;
    return _this;
  }
  /**
   * Subscribe to the Messages Event Stream
   * @param {String} name - The name of Sync object for the Messages resource.
   * @returns {Promise}
   */


  _createClass__default['default'](Messages, [{
    key: "subscribe",
    value: function subscribe(name) {
      var _this2 = this;

      return this.messagesListPromise = this.messagesListPromise || this.services.syncClient.list({
        id: name,
        mode: 'open_existing'
      }).then(function (list) {
        list.on('itemAdded', function (args) {
          log$5.debug(_this2.conversation.sid + ' itemAdded: ' + args.item.index);
          var message = new Message(_this2.conversation, _this2.services, args.item.index, args.item.data);

          if (_this2.messagesByIndex.has(message.index)) {
            log$5.debug('Message arrived, but already known and ignored', _this2.conversation.sid, message.index);
            return;
          }

          _this2.messagesByIndex.set(message.index, message);

          message.on('updated', function (args) {
            return _this2.emit('messageUpdated', args);
          });

          _this2.emit('messageAdded', message);
        });
        list.on('itemRemoved', function (args) {
          log$5.debug(_this2.conversation.sid + ' itemRemoved: ' + args.index);
          var index = args.index;

          if (_this2.messagesByIndex.has(index)) {
            var message = _this2.messagesByIndex.get(index);

            _this2.messagesByIndex.delete(message.index);

            message.removeAllListeners('updated');

            _this2.emit('messageRemoved', message);
          }
        });
        list.on('itemUpdated', function (args) {
          log$5.debug(_this2.conversation.sid + ' itemUpdated: ' + args.item.index);

          var message = _this2.messagesByIndex.get(args.item.index);

          if (message) {
            message._update(args.item.data);
          }
        });
        return list;
      }).catch(function (err) {
        _this2.messagesListPromise = null;

        if (_this2.services.syncClient.connectionState != 'disconnected') {
          log$5.error('Failed to get messages object for conversation', _this2.conversation.sid, err);
        }

        log$5.debug('ERROR: Failed to get messages object for conversation', _this2.conversation.sid, err);
        throw err;
      });
    }
  }, {
    key: "unsubscribe",
    value: function () {
      var _unsubscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var entity;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.messagesListPromise) {
                  _context.next = 6;
                  break;
                }

                _context.next = 3;
                return this.messagesListPromise;

              case 3:
                entity = _context.sent;
                entity.close();
                this.messagesListPromise = null;

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function unsubscribe() {
        return _unsubscribe.apply(this, arguments);
      }

      return unsubscribe;
    }()
    /**
     * Send Message to the conversation
     * @param {String} message - Message to post
     * @param {any} attributes Message attributes
     * @param {Conversation.SendEmailOptions} emailOptions Options that modify E-mail integration behaviors.
     * @returns Returns promise which can fail
     */

  }, {
    key: "send",
    value: function () {
      var _send = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(message) {
        var attributes,
            emailOptions,
            _args2 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                attributes = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                emailOptions = _args2.length > 2 ? _args2[2] : undefined;
                log$5.debug('Sending text message', message, attributes, emailOptions);
                return _context2.abrupt("return", this.services.session.addCommand('sendMessage', {
                  channelSid: this.conversation.sid,
                  text: message,
                  attributes: JSON.stringify(attributes),
                  subject: emailOptions === null || emailOptions === void 0 ? void 0 : emailOptions.subject
                }));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function send(_x) {
        return _send.apply(this, arguments);
      }

      return send;
    }()
    /**
     * Send Media Message to the conversation
     * @param {FormData | Conversation#SendMediaOptions} mediaContent - Media content to post
     * @param {any} attributes Message attributes
     * @returns Returns promise which can fail
     */

  }, {
    key: "sendMedia",
    value: function () {
      var _sendMedia = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(mediaContent) {
        var attributes,
            emailOptions,
            media,
            mediaOptions,
            _args3 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                attributes = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};
                emailOptions = _args3.length > 2 ? _args3[2] : undefined;
                log$5.debug('Sending media message', mediaContent, attributes, emailOptions);

                if (!(typeof FormData !== 'undefined' && mediaContent instanceof FormData)) {
                  _context3.next = 10;
                  break;
                }

                log$5.debug('Sending media message as FormData', mediaContent, attributes);
                _context3.next = 7;
                return this.services.mcsClient.postFormData(mediaContent);

              case 7:
                media = _context3.sent;
                _context3.next = 17;
                break;

              case 10:
                log$5.debug('Sending media message as SendMediaOptions', mediaContent, attributes);
                mediaOptions = mediaContent;

                if (!(!mediaOptions.contentType || !mediaOptions.media)) {
                  _context3.next = 14;
                  break;
                }

                throw new Error('Media content <Conversation#SendMediaOptions> must contain non-empty contentType and media');

              case 14:
                _context3.next = 16;
                return this.services.mcsClient.post(mediaOptions.contentType, mediaOptions.media);

              case 16:
                media = _context3.sent;

              case 17:
                return _context3.abrupt("return", this.services.session.addCommand('sendMediaMessage', {
                  channelSid: this.conversation.sid,
                  mediaSid: media.sid,
                  attributes: JSON.stringify(attributes)
                }));

              case 18:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function sendMedia(_x2) {
        return _sendMedia.apply(this, arguments);
      }

      return sendMedia;
    }()
    /**
     * Returns messages from conversation using paginator interface
     * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.
     * @param {String} [anchor] Most early message id which is already known, or 'end' by default
     * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default
     * @returns {Promise<Paginator<Message>>} last page of messages by default
     */

  }, {
    key: "getMessages",
    value: function getMessages(pageSize, anchor, direction) {
      anchor = typeof anchor !== 'undefined' ? anchor : 'end';
      direction = direction || 'backwards';
      return this._getMessages(pageSize, anchor, direction);
    }
  }, {
    key: "wrapPaginator",
    value: function wrapPaginator(order, page, op) {
      var _this3 = this;

      // We should swap next and prev page here, because of misfit of Sync and Chat paging conceptions
      var shouldReverse = order === 'desc';

      var np = function np() {
        return page.nextPage().then(function (x) {
          return _this3.wrapPaginator(order, x, op);
        });
      };

      var pp = function pp() {
        return page.prevPage().then(function (x) {
          return _this3.wrapPaginator(order, x, op);
        });
      };

      return op(page.items).then(function (items) {
        return {
          items: items.sort(function (x, y) {
            return x.index - y.index;
          }),
          hasPrevPage: shouldReverse ? page.hasNextPage : page.hasPrevPage,
          hasNextPage: shouldReverse ? page.hasPrevPage : page.hasNextPage,
          prevPage: shouldReverse ? np : pp,
          nextPage: shouldReverse ? pp : np
        };
      });
    }
  }, {
    key: "_upsertMessage",
    value: function _upsertMessage(index, value) {
      var _this4 = this;

      var cachedMessage = this.messagesByIndex.get(index);

      if (cachedMessage) {
        return cachedMessage;
      }

      var message = new Message(this.conversation, this.services, index, value);
      this.messagesByIndex.set(message.index, message);
      message.on('updated', function (args) {
        return _this4.emit('messageUpdated', args);
      });
      return message;
    }
    /**
     * Returns last messages from conversation
     * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.
     * @param {String} [anchor] Most early message id which is already known, or 'end' by default
     * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default
     * @returns {Promise<SyncPaginator<Message>>} last page of messages by default
     * @private
     */

  }, {
    key: "_getMessages",
    value: function _getMessages(pageSize, anchor, direction) {
      var _this5 = this;

      anchor = typeof anchor !== 'undefined' ? anchor : 'end';
      pageSize = pageSize || 30;
      var order = direction === 'backwards' ? 'desc' : 'asc';
      return this.messagesListPromise.then(function (messagesList) {
        return messagesList.getItems({
          from: anchor !== 'end' ? anchor : void 0,
          pageSize: pageSize,
          order: order
        });
      }).then(function (page) {
        return _this5.wrapPaginator(order, page, function (items) {
          return Promise.all(items.map(function (item) {
            return _this5._upsertMessage(item.index, item.data);
          }));
        });
      });
    }
  }]);

  return Messages;
}(EventEmitter);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$4 = Logger.scope('Conversation');
var fieldMappings = {
  lastMessage: 'lastMessage',
  attributes: 'attributes',
  createdBy: 'createdBy',
  dateCreated: 'dateCreated',
  dateUpdated: 'dateUpdated',
  friendlyName: 'friendlyName',
  lastConsumedMessageIndex: 'lastConsumedMessageIndex',
  notificationLevel: 'notificationLevel',
  sid: 'sid',
  status: 'status',
  uniqueName: 'uniqueName',
  state: 'state'
};

function parseTime(timeString) {
  try {
    return new Date(timeString);
  } catch (e) {
    return null;
  }
}
/**
 * @classdesc A Conversation represents communication between multiple Conversations Clients
 * @property {any} attributes - The Conversation's custom attributes
 * @property {String} createdBy - The identity of the User that created this Conversation
 * @property {Date} dateCreated - The Date this Conversation was created
 * @property {Date} dateUpdated - The Date this Conversation was last updated
 * @property {String} [friendlyName] - The Conversation's name
 * @property {Number|null} lastReadMessageIndex - Index of the last Message the User has read in this Conversation
 * @property {Conversation#LastMessage} lastMessage - Last Message sent to this Conversation
 * @property {Conversation#NotificationLevel} notificationLevel - User Notification level for this Conversation
 * @property {String} sid - The Conversation's unique system identifier
 * @property {Conversation#Status} status - The Conversation's status
 * @property {Conversation#State} state - The Conversation's state
 * @property {String} uniqueName - The Conversation's unique name
 * @fires Conversation#participantJoined
 * @fires Conversation#participantLeft
 * @fires Conversation#participantUpdated
 * @fires Conversation#messageAdded
 * @fires Conversation#messageRemoved
 * @fires Conversation#messageUpdated
 * @fires Conversation#typingEnded
 * @fires Conversation#typingStarted
 * @fires Conversation#updated
 * @fires Conversation#removed
 */


var Conversation = /*#__PURE__*/function (_EventEmitter) {
  _inherits__default['default'](Conversation, _EventEmitter);

  var _super = _createSuper$4(Conversation);

  /**
   * These options can be passed to {@link Conversation#sendMessage}.
   * @typedef {Object} Conversation#SendMediaOptions
   * @property {String} contentType - content type of media
   * @property {String | Buffer} media - content to post
   */

  /**
   * These options can be passed to {@link Conversation#sendMessage}.
   * @typedef {Object} Conversation#SendEmailOptions
   * @property {String} subject - subject for the message. Ignored for media messages.
   */

  /**
   * The update reason for <code>updated</code> event emitted on Conversation
   * @typedef {('attributes' | 'createdBy' | 'dateCreated' | 'dateUpdated' |
    'friendlyName' | 'lastReadMessageIndex' | 'state' | 'status' | 'uniqueName' | 'lastMessage' |
    'notificationLevel' )} Conversation#UpdateReason
   */

  /**
   * The status of the Conversation, relative to the Client: whether the Conversation has been <code>joined</code> or the Client is
   * <code>notParticipating</code> in the Conversation.
   * @typedef {('notParticipating' | 'joined')} Conversation#Status
   */

  /**
   * The User's Notification level for Conversation, determines whether the currently logged-in User will receive
   * pushes for events in this Conversation. Can be either <code>muted</code> or <code>default</code>,
   * where <code>default</code> defers to global Service push configuration.
   * @typedef {('default' | 'muted')} Conversation#NotificationLevel
   */

  /**
   * The Conversation's state.
   * @typedef {Object} Conversation#State
   * @property {('active' | 'inactive' | 'closed')} current - the current state
   * @property {Date} dateUpdated - date at which the latest conversation state update happened
   */
  function Conversation(services, descriptor, sid) {
    var _this;

    _classCallCheck__default['default'](this, Conversation);

    _this = _super.call(this);
    var attributes = descriptor.attributes || {};
    var createdBy = descriptor.createdBy;
    var dateCreated = parseTime(descriptor.dateCreated);
    var dateUpdated = parseTime(descriptor.dateUpdated);
    var friendlyName = descriptor.friendlyName || null;
    var lastReadMessageIndex = Number.isInteger(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;
    var uniqueName = descriptor.uniqueName || null;

    try {
      JSON.stringify(attributes);
    } catch (e) {
      throw new Error('Attributes must be a valid JSON object.');
    }

    _this.services = services;
    _this.sid = sid;
    _this.entityName = descriptor.channel;
    _this.channelState = {
      uniqueName: uniqueName,
      status: 'notParticipating',
      attributes: attributes,
      createdBy: createdBy,
      dateCreated: dateCreated,
      dateUpdated: dateUpdated,
      friendlyName: friendlyName,
      lastReadMessageIndex: lastReadMessageIndex
    };

    if (descriptor.notificationLevel) {
      _this.channelState.notificationLevel = descriptor.notificationLevel;
    }

    _this.participants = new Map();
    _this.participantsEntity = new Participants(_assertThisInitialized__default['default'](_this), _this.services, _this.participants);

    _this.participantsEntity.on('participantJoined', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'participantJoined'));

    _this.participantsEntity.on('participantLeft', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'participantLeft'));

    _this.participantsEntity.on('participantUpdated', function (args) {
      return _this.emit('participantUpdated', args);
    });

    _this.messagesEntity = new Messages(_assertThisInitialized__default['default'](_this), services);

    _this.messagesEntity.on('messageAdded', function (message) {
      return _this._onMessageAdded(message);
    });

    _this.messagesEntity.on('messageUpdated', function (args) {
      return _this.emit('messageUpdated', args);
    });

    _this.messagesEntity.on('messageRemoved', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'messageRemoved'));

    return _this;
  }

  _createClass__default['default'](Conversation, [{
    key: "uniqueName",
    get: function get() {
      return this.channelState.uniqueName;
    }
  }, {
    key: "status",
    get: function get() {
      return this.channelState.status;
    }
  }, {
    key: "friendlyName",
    get: function get() {
      return this.channelState.friendlyName;
    }
  }, {
    key: "dateUpdated",
    get: function get() {
      return this.channelState.dateUpdated;
    }
  }, {
    key: "dateCreated",
    get: function get() {
      return this.channelState.dateCreated;
    }
  }, {
    key: "createdBy",
    get: function get() {
      return this.channelState.createdBy;
    }
  }, {
    key: "attributes",
    get: function get() {
      return this.channelState.attributes;
    }
  }, {
    key: "lastReadMessageIndex",
    get: function get() {
      return this.channelState.lastReadMessageIndex;
    }
  }, {
    key: "lastMessage",
    get: function get() {
      return this.channelState.lastMessage;
    }
  }, {
    key: "notificationLevel",
    get: function get() {
      return this.channelState.notificationLevel;
    }
  }, {
    key: "state",
    get: function get() {
      return this.channelState.state;
    }
    /**
     * The Conversation's last message's information.
     * @typedef {Object} Conversation#LastMessage
     * @property {Number} index - Message's index
     * @property {Date} dateCreated - Message's creation date
     */

    /**
     * Load and Subscribe to this Conversation and do not subscribe to its Participants and Messages.
     * This or _subscribeStreams will need to be called before any events on Conversation will fire.
     * @returns {Promise}
     * @private
     */

  }, {
    key: "_subscribe",
    value: function _subscribe() {
      var _this2 = this;

      if (this.entityPromise) {
        return this.entityPromise;
      }

      return this.entityPromise = this.entityPromise || this.services.syncClient.document({
        id: this.entityName,
        mode: 'open_existing'
      }).then(function (entity) {
        _this2.entity = entity;

        _this2.entity.on('updated', function (args) {
          _this2._update(args.data);
        });

        _this2.entity.on('removed', function () {
          return _this2.emit('removed', _this2);
        });

        _this2._update(_this2.entity.data);

        return entity;
      }).catch(function (err) {
        _this2.entity = null;
        _this2.entityPromise = null;

        if (_this2.services.syncClient.connectionState != 'disconnected') {
          log$4.error('Failed to get conversation object', err);
        }

        log$4.debug('ERROR: Failed to get conversation object', err);
        throw err;
      });
    }
    /**
     * Load the attributes of this Conversation and instantiate its Participants and Messages.
     * This or _subscribe will need to be called before any events on Conversation will fire.
     * This will need to be called before any events on Participants or Messages will fire
     * @returns {Promise}
     * @private
     */

  }, {
    key: "_subscribeStreams",
    value: function () {
      var _subscribeStreams2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var messagesObjectName, rosterObjectName;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return this._subscribe();

              case 3:
                log$4.trace('_subscribeStreams, this.entity.data=', this.entity.data);
                messagesObjectName = this.entity.data.messages;
                rosterObjectName = this.entity.data.roster;
                _context.next = 8;
                return Promise.all([this.messagesEntity.subscribe(messagesObjectName), this.participantsEntity.subscribe(rosterObjectName)]);

              case 8:
                _context.next = 15;
                break;

              case 10:
                _context.prev = 10;
                _context.t0 = _context["catch"](0);

                if (this.services.syncClient.connectionState !== 'disconnected') {
                  log$4.error('Failed to subscribe on conversation objects', this.sid, _context.t0);
                }

                log$4.debug('ERROR: Failed to subscribe on conversation objects', this.sid, _context.t0);
                throw _context.t0;

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 10]]);
      }));

      function _subscribeStreams() {
        return _subscribeStreams2.apply(this, arguments);
      }

      return _subscribeStreams;
    }()
    /**
     * Stop listening for and firing events on this Conversation.
     * @returns {Promise}
     * @private
     */

  }, {
    key: "_unsubscribe",
    value: function () {
      var _unsubscribe2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!this.entity) {
                  _context2.next = 5;
                  break;
                }

                _context2.next = 3;
                return this.entity.close();

              case 3:
                this.entity = null;
                this.entityPromise = null;

              case 5:
                return _context2.abrupt("return", Promise.all([this.participantsEntity.unsubscribe(), this.messagesEntity.unsubscribe()]));

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _unsubscribe() {
        return _unsubscribe2.apply(this, arguments);
      }

      return _unsubscribe;
    }()
    /**
     * Set conversation status
     * @private
     */

  }, {
    key: "_setStatus",
    value: function _setStatus(status, source) {
      var _this3 = this;

      this.statusSource = source;

      if (this.channelState.status === status) {
        return;
      }

      this.channelState.status = status;

      if (status === 'joined') {
        this._subscribeStreams().catch(function (err) {
          log$4.debug('ERROR while setting conversation status ' + status, err);

          if (_this3.services.syncClient.connectionState !== 'disconnected') {
            throw err;
          }
        });
      } else if (this.entityPromise) {
        this._unsubscribe().catch(function (err) {
          log$4.debug('ERROR while setting conversation status ' + status, err);

          if (_this3.services.syncClient.connectionState !== 'disconnected') {
            throw err;
          }
        });
      }
    }
    /**
     * If conversation's status update source
     * @private
     * @return {Conversations.DataSource}
     */

  }, {
    key: "_statusSource",
    value: function _statusSource() {
      return this.statusSource;
    }
  }, {
    key: "_update",
    value:
    /**
     * Updates local conversation object with new values
     * @private
     */
    function _update(update) {
      var _update$lastMessage, _update$lastMessage2, _this$channelState$la, _this$channelState$la2, _this$channelState$lo;

      log$4.trace('_update', update);
      Conversation.preprocessUpdate(update, this.sid);
      var updateReasons = new Set();

      for (var _i = 0, _Object$keys = Object.keys(update); _i < _Object$keys.length; _i++) {
        var key = _Object$keys[_i];
        var localKey = fieldMappings[key];

        if (!localKey) {
          continue;
        }

        switch (localKey) {
          case fieldMappings.status:
            if (!update.status || update.status === 'unknown' || this.channelState.status === update.status) {
              break;
            }

            this.channelState.status = update.status;
            updateReasons.add(localKey);
            break;

          case fieldMappings.attributes:
            if (isDeepEqual(this.channelState.attributes, update.attributes)) {
              break;
            }

            this.channelState.attributes = update.attributes;
            updateReasons.add(localKey);
            break;

          case fieldMappings.lastConsumedMessageIndex:
            if (update.lastConsumedMessageIndex === undefined || update.lastConsumedMessageIndex === this.channelState.lastReadMessageIndex) {
              break;
            }

            this.channelState.lastReadMessageIndex = update.lastConsumedMessageIndex;
            updateReasons.add('lastReadMessageIndex');
            break;

          case fieldMappings.lastMessage:
            if (this.channelState.lastMessage && !update.lastMessage) {
              delete this.channelState.lastMessage;
              updateReasons.add(localKey);
              break;
            }

            this.channelState.lastMessage = this.channelState.lastMessage || {};

            if (((_update$lastMessage = update.lastMessage) === null || _update$lastMessage === void 0 ? void 0 : _update$lastMessage.index) !== undefined && update.lastMessage.index !== this.channelState.lastMessage.index) {
              this.channelState.lastMessage.index = update.lastMessage.index;
              updateReasons.add(localKey);
            }

            if (((_update$lastMessage2 = update.lastMessage) === null || _update$lastMessage2 === void 0 ? void 0 : _update$lastMessage2.timestamp) !== undefined && ((_this$channelState$la = this.channelState.lastMessage) === null || _this$channelState$la === void 0 ? void 0 : (_this$channelState$la2 = _this$channelState$la.dateCreated) === null || _this$channelState$la2 === void 0 ? void 0 : _this$channelState$la2.getTime()) !== update.lastMessage.timestamp.getTime()) {
              this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;
              updateReasons.add(localKey);
            }

            if (isDeepEqual(this.channelState.lastMessage, {})) {
              delete this.channelState.lastMessage;
            }

            break;

          case fieldMappings.state:
            var state = update.state || undefined;

            if (state !== undefined) {
              state.dateUpdated = new Date(state.dateUpdated);
            }

            if (isDeepEqual(this.channelState.state, state)) {
              break;
            }

            this.channelState.state = state;
            updateReasons.add(localKey);
            break;

          default:
            var isDate = update[key] instanceof Date;
            var keysMatchAsDates = isDate && ((_this$channelState$lo = this.channelState[localKey]) === null || _this$channelState$lo === void 0 ? void 0 : _this$channelState$lo.getTime()) === update[key].getTime();
            var keysMatchAsNonDates = !isDate && this[localKey] === update[key];

            if (keysMatchAsDates || keysMatchAsNonDates) {
              break;
            }

            this.channelState[localKey] = update[key];
            updateReasons.add(localKey);
        }
      }

      if (updateReasons.size > 0) {
        this.emit('updated', {
          conversation: this,
          updateReasons: _toConsumableArray__default['default'](updateReasons)
        });
      }
    }
    /**
     * @private
     */

  }, {
    key: "_onMessageAdded",
    value: function _onMessageAdded(message) {
      var _iterator = _createForOfIteratorHelper(this.participants.values()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var participant = _step.value;

          if (participant.identity === message.author) {
            participant._endTyping();

            break;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.emit('messageAdded', message);
    }
    /**
     * Add a participant to the Conversation by its Identity.
     * @param {String} identity - Identity of the Client to add
     * @param {any} [attributes] Attributes to be attached to the participant
     * @returns {Promise<void>}
     */

  }, {
    key: "add",
    value: function () {
      var _add = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(identity, attributes) {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", this.participantsEntity.add(identity, attributes));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function add(_x, _x2) {
        return _add.apply(this, arguments);
      }

      return add;
    }()
    /**
     * Add a non-chat participant to the Conversation.
     *
     * @param {String} proxyAddress Proxy (Twilio) address of the participant
     * @param {String} address User address of the participant
     * @param {any} [attributes] Attributes to be attached to the participant
     * @returns {Promise<void>}
     */

  }, {
    key: "addNonChatParticipant",
    value: function () {
      var _addNonChatParticipant = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(proxyAddress, address) {
        var attributes,
            _args4 = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                attributes = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};
                return _context4.abrupt("return", this.participantsEntity.addNonChatParticipant(proxyAddress, address, attributes));

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function addNonChatParticipant(_x3, _x4) {
        return _addNonChatParticipant.apply(this, arguments);
      }

      return addNonChatParticipant;
    }()
    /**
     * Advance Conversation's last read Message index to current read horizon.
     * Rejects if User is not Participant of Conversation.
     * Last read Message index is updated only if new index value is higher than previous.
     * @param {Number} index - Message index to advance to as last read
     * @returns {Promise<number>} resulting unread messages count in the conversation
     */

  }, {
    key: "advanceLastReadMessageIndex",
    value: function () {
      var _advanceLastReadMessageIndex = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(index) {
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this._subscribeStreams();

              case 2:
                return _context5.abrupt("return", this.services.readHorizon.advanceLastReadMessageIndexForConversation(this.sid, index, this.lastReadMessageIndex));

              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function advanceLastReadMessageIndex(_x5) {
        return _advanceLastReadMessageIndex.apply(this, arguments);
      }

      return advanceLastReadMessageIndex;
    }()
    /**
     * Delete the Conversation and unsubscribe from its events.
     * @returns {Promise<Conversation>}
     */

  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6() {
        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.services.session.addCommand('destroyChannel', {
                  channelSid: this.sid
                });

              case 2:
                return _context6.abrupt("return", this);

              case 3:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function _delete() {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
    /**
     * Get the custom attributes of this Conversation.
     * @returns {Promise<any>} attributes of this Conversation
     */

  }, {
    key: "getAttributes",
    value: function () {
      var _getAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7() {
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this._subscribe();

              case 2:
                return _context7.abrupt("return", this.attributes);

              case 3:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function getAttributes() {
        return _getAttributes.apply(this, arguments);
      }

      return getAttributes;
    }()
    /**
     * Returns messages from conversation using paginator interface.
     * @param {Number} [pageSize=30] Number of messages to return in single chunk
     * @param {Number} [anchor] - Index of newest Message to fetch. From the end by default
     * @param {('backwards'|'forward')} [direction=backwards] - Query direction. By default it query backwards
     *                                                          from newer to older. 'forward' will query in opposite direction
     * @returns {Promise<Paginator<Message>>} page of messages
     */

  }, {
    key: "getMessages",
    value: function () {
      var _getMessages = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8(pageSize, anchor, direction) {
        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this._subscribeStreams();

              case 2:
                return _context8.abrupt("return", this.messagesEntity.getMessages(pageSize, anchor, direction));

              case 3:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function getMessages(_x6, _x7, _x8) {
        return _getMessages.apply(this, arguments);
      }

      return getMessages;
    }()
    /**
     * Get a list of all Participants joined to this Conversation.
     * @returns {Promise<Participant[]>}
     */

  }, {
    key: "getParticipants",
    value: function () {
      var _getParticipants = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9() {
        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this._subscribeStreams();

              case 2:
                return _context9.abrupt("return", this.participantsEntity.getParticipants());

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function getParticipants() {
        return _getParticipants.apply(this, arguments);
      }

      return getParticipants;
    }()
    /**
     * Get conversation participants count.
     * <br/>
     * This method is semi-realtime. This means that this data will be eventually correct,
     * but will also possibly be incorrect for a few seconds. The Conversation system does not
     * provide real time events for counter values changes.
     * <br/>
     * So this is quite useful for any UI badges, but is not recommended
     * to build any core application logic based on these counters being accurate in real time.
     * @returns {Promise<number>}
     */

  }, {
    key: "getParticipantsCount",
    value: function () {
      var _getParticipantsCount = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee10() {
        var links, url, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.services.session.getSessionLinks();

              case 2:
                links = _context10.sent;
                url = new UriBuilder(links.publicChannelsUrl).path(this.sid).build();
                _context10.next = 6;
                return this.services.network.get(url);

              case 6:
                response = _context10.sent;
                return _context10.abrupt("return", response.body.members_count);

              case 8:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function getParticipantsCount() {
        return _getParticipantsCount.apply(this, arguments);
      }

      return getParticipantsCount;
    }()
    /**
     * Get a Participant by its SID.
     * @param {String} participantSid - Participant sid
     * @returns {Promise<Participant>}
     */

  }, {
    key: "getParticipantBySid",
    value: function () {
      var _getParticipantBySid = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee11(participantSid) {
        return _regeneratorRuntime__default['default'].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                return _context11.abrupt("return", this.participantsEntity.getParticipantBySid(participantSid));

              case 1:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function getParticipantBySid(_x9) {
        return _getParticipantBySid.apply(this, arguments);
      }

      return getParticipantBySid;
    }()
    /**
     * Get a Participant by its identity.
     * @param {String} identity - Participant identity
     * @returns {Promise<Participant>}
     */

  }, {
    key: "getParticipantByIdentity",
    value: function () {
      var _getParticipantByIdentity = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee12(identity) {
        return _regeneratorRuntime__default['default'].wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                return _context12.abrupt("return", this.participantsEntity.getParticipantByIdentity(identity));

              case 1:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function getParticipantByIdentity(_x10) {
        return _getParticipantByIdentity.apply(this, arguments);
      }

      return getParticipantByIdentity;
    }()
    /**
     * Get total message count in a conversation.
     * <br/>
     * This method is semi-realtime. This means that this data will be eventually correct,
     * but will also possibly be incorrect for a few seconds. The Conversations system does not
     * provide real time events for counter values changes.
     * <br/>
     * So this is quite useful for any UI badges, but is not recommended
     * to build any core application logic based on these counters being accurate in real time.
     * @returns {Promise<number>}
     */

  }, {
    key: "getMessagesCount",
    value: function () {
      var _getMessagesCount = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee13() {
        var links, url, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this.services.session.getSessionLinks();

              case 2:
                links = _context13.sent;
                url = new UriBuilder(links.publicChannelsUrl).path(this.sid).build();
                _context13.next = 6;
                return this.services.network.get(url);

              case 6:
                response = _context13.sent;
                return _context13.abrupt("return", response.body.messages_count);

              case 8:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function getMessagesCount() {
        return _getMessagesCount.apply(this, arguments);
      }

      return getMessagesCount;
    }()
    /**
     * Get unread messages count for the User if they are a Participant of this Conversation.
     * Rejects if the User is not a Participant of the Conversation.
     * <br/>
     * Use this method to obtain the number of unread messages together with
     * updateLastReadMessageIndex() instead of relying on the
     * Message indices which may have gaps. See Message.index for details.
     * <br/>
     * This method is semi-realtime. This means that this data will be eventually correct,
     * but will also possibly be incorrect for a few seconds. The Chat system does not
     * provide real time events for counter values changes.
     * <br/>
     * This is quite useful for any “unread messages count” badges, but is not recommended
     * to build any core application logic based on these counters being accurate in real time.
     * @returns {Promise<number|null>}
     */

  }, {
    key: "getUnreadMessagesCount",
    value: function () {
      var _getUnreadMessagesCount = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee14() {
        var links, url, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this.services.session.getSessionLinks();

              case 2:
                links = _context14.sent;
                url = new UriBuilder(links.myChannelsUrl).arg('ChannelSid', this.sid).build();
                _context14.next = 6;
                return this.services.network.get(url);

              case 6:
                response = _context14.sent;

                if (!(response.body.channels.length && response.body.channels[0].channel_sid == this.sid)) {
                  _context14.next = 11;
                  break;
                }

                if (!(typeof response.body.channels[0].unread_messages_count !== 'undefined' && response.body.channels[0].unread_messages_count != null)) {
                  _context14.next = 10;
                  break;
                }

                return _context14.abrupt("return", response.body.channels[0].unread_messages_count);

              case 10:
                return _context14.abrupt("return", null);

              case 11:
                throw new Error('Conversation is not in user conversations list');

              case 12:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function getUnreadMessagesCount() {
        return _getUnreadMessagesCount.apply(this, arguments);
      }

      return getUnreadMessagesCount;
    }()
    /**
     * Join the Conversation and subscribe to its events.
     * @returns {Promise<Conversation>}
     */

  }, {
    key: "join",
    value: function () {
      var _join = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee15() {
        return _regeneratorRuntime__default['default'].wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return this.services.session.addCommand('joinChannelV2', {
                  channelSid: this.sid
                });

              case 2:
                return _context15.abrupt("return", this);

              case 3:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function join() {
        return _join.apply(this, arguments);
      }

      return join;
    }()
    /**
     * Leave the Conversation.
     * @returns {Promise<Conversation>}
     */

  }, {
    key: "leave",
    value: function () {
      var _leave = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee16() {
        return _regeneratorRuntime__default['default'].wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                if (!(this.channelState.status === 'joined')) {
                  _context16.next = 3;
                  break;
                }

                _context16.next = 3;
                return this.services.session.addCommand('leaveChannel', {
                  channelSid: this.sid
                });

              case 3:
                return _context16.abrupt("return", this);

              case 4:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function leave() {
        return _leave.apply(this, arguments);
      }

      return leave;
    }()
    /**
     * Remove a Participant from the Conversation. When a string is passed as the argument, it will assume that the string is an identity.
     * @param {String|Participant} participant - identity or participant object to remove
     * @returns {Promise<void>}
     */

  }, {
    key: "removeParticipant",
    value: function () {
      var _removeParticipant = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee17(participant) {
        return _regeneratorRuntime__default['default'].wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                if (!(participant instanceof Participant)) {
                  _context17.next = 4;
                  break;
                }

                _context17.next = 3;
                return this.participantsEntity.removeBySid(participant.sid);

              case 3:
                return _context17.abrupt("return");

              case 4:
                _context17.next = 6;
                return this.participantsEntity.removeByIdentity(participant);

              case 6:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function removeParticipant(_x11) {
        return _removeParticipant.apply(this, arguments);
      }

      return removeParticipant;
    }()
    /**
     * Send a Message in the Conversation.
     * @param {String|FormData|Conversation#SendMediaOptions|null} message - The message body for text message,
     * FormData or MediaOptions for media content. Sending FormData supported only with browser engine
     * @param {any} [messageAttributes] - attributes for the message
     * @param {Conversation#SendEmailOptions} [emailOptions] - email options for the message
     * @returns {Promise<number>} new Message's index in the Conversation's messages list
     */

  }, {
    key: "sendMessage",
    value: function () {
      var _sendMessage = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee18(message, messageAttributes, emailOptions) {
        var _response, response;

        return _regeneratorRuntime__default['default'].wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                if (!(typeof message === 'string' || message === null)) {
                  _context18.next = 5;
                  break;
                }

                _context18.next = 3;
                return this.messagesEntity.send(message, messageAttributes, emailOptions);

              case 3:
                _response = _context18.sent;
                return _context18.abrupt("return", parseToNumber(_response.messageId));

              case 5:
                _context18.next = 7;
                return this.messagesEntity.sendMedia(message, messageAttributes, emailOptions);

              case 7:
                response = _context18.sent;
                return _context18.abrupt("return", parseToNumber(response.messageId));

              case 9:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function sendMessage(_x12, _x13, _x14) {
        return _sendMessage.apply(this, arguments);
      }

      return sendMessage;
    }()
    /**
     * Set last read Conversation's Message index to last known Message's index in this Conversation.
     * @returns {Promise<number>} resulting unread messages count in the conversation
     */

  }, {
    key: "setAllMessagesRead",
    value: function () {
      var _setAllMessagesRead = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee19() {
        var messagesPage;
        return _regeneratorRuntime__default['default'].wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                _context19.next = 2;
                return this._subscribeStreams();

              case 2:
                _context19.next = 4;
                return this.getMessages(1);

              case 4:
                messagesPage = _context19.sent;

                if (!(messagesPage.items.length > 0)) {
                  _context19.next = 7;
                  break;
                }

                return _context19.abrupt("return", this.advanceLastReadMessageIndex(messagesPage.items[0].index));

              case 7:
                return _context19.abrupt("return", Promise.resolve(0));

              case 8:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function setAllMessagesRead() {
        return _setAllMessagesRead.apply(this, arguments);
      }

      return setAllMessagesRead;
    }()
    /**
     * Set all messages in the conversation unread.
     * @returns {Promise<number>} resulting unread messages count in the conversation
     */

  }, {
    key: "setAllMessagesUnread",
    value: function () {
      var _setAllMessagesUnread = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee20() {
        return _regeneratorRuntime__default['default'].wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                _context20.next = 2;
                return this._subscribeStreams();

              case 2:
                return _context20.abrupt("return", this.services.readHorizon.updateLastReadMessageIndexForConversation(this.sid, null));

              case 3:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function setAllMessagesUnread() {
        return _setAllMessagesUnread.apply(this, arguments);
      }

      return setAllMessagesUnread;
    }()
    /**
     * Set User Notification level for this conversation.
     * @param {Conversation#NotificationLevel} notificationLevel - The new user notification level
     * @returns {Promise<void>}
     */

  }, {
    key: "setUserNotificationLevel",
    value: function () {
      var _setUserNotificationLevel = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee21(notificationLevel) {
        return _regeneratorRuntime__default['default'].wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                _context21.next = 2;
                return this.services.session.addCommand('editNotificationLevel', {
                  channelSid: this.sid,
                  notificationLevel: notificationLevel
                });

              case 2:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function setUserNotificationLevel(_x15) {
        return _setUserNotificationLevel.apply(this, arguments);
      }

      return setUserNotificationLevel;
    }()
    /**
     * Send a notification to the server indicating that this Client is currently typing in this Conversation.
     * Typing ended notification is sent after a while automatically, but by calling again this method you ensure typing ended is not received.
     * @returns {Promise<void>}
     */

  }, {
    key: "typing",
    value: function typing() {
      return this.services.typingIndicator.send(this.sid);
    }
    /**
     * Update the Conversation's attributes.
     * @param {any} attributes - The new attributes object
     * @returns {Promise<Conversation>}
     */

  }, {
    key: "updateAttributes",
    value: function () {
      var _updateAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee22(attributes) {
        return _regeneratorRuntime__default['default'].wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                _context22.next = 2;
                return this.services.session.addCommand('editAttributes', {
                  channelSid: this.sid,
                  attributes: JSON.stringify(attributes)
                });

              case 2:
                return _context22.abrupt("return", this);

              case 3:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      function updateAttributes(_x16) {
        return _updateAttributes.apply(this, arguments);
      }

      return updateAttributes;
    }()
    /**
     * Update the Conversation's friendlyName.
     * @param {String|null} name - The new Conversation friendlyName
     * @returns {Promise<Conversation>}
     */

  }, {
    key: "updateFriendlyName",
    value: function () {
      var _updateFriendlyName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee23(name) {
        return _regeneratorRuntime__default['default'].wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                if (!(this.channelState.friendlyName !== name)) {
                  _context23.next = 3;
                  break;
                }

                _context23.next = 3;
                return this.services.session.addCommand('editFriendlyName', {
                  channelSid: this.sid,
                  friendlyName: name
                });

              case 3:
                return _context23.abrupt("return", this);

              case 4:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function updateFriendlyName(_x17) {
        return _updateFriendlyName.apply(this, arguments);
      }

      return updateFriendlyName;
    }()
    /**
     * Set Conversation's last read Message index to current read horizon.
     * @param {Number|null} index - Message index to set as last read.
     * If null provided, then the behavior is identical to {@link Conversation#setAllMessagesUnread}
     * @returns {Promise<number>} resulting unread messages count in the conversation
     */

  }, {
    key: "updateLastReadMessageIndex",
    value: function () {
      var _updateLastReadMessageIndex = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee24(index) {
        return _regeneratorRuntime__default['default'].wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                _context24.next = 2;
                return this._subscribeStreams();

              case 2:
                return _context24.abrupt("return", this.services.readHorizon.updateLastReadMessageIndexForConversation(this.sid, index));

              case 3:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function updateLastReadMessageIndex(_x18) {
        return _updateLastReadMessageIndex.apply(this, arguments);
      }

      return updateLastReadMessageIndex;
    }()
    /**
     * Update the Conversation's unique name.
     * @param {String|null} uniqueName - New unique name for the Conversation. Setting unique name to null removes it.
     * @returns {Promise<Conversation>}
     */

  }, {
    key: "updateUniqueName",
    value: function () {
      var _updateUniqueName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee25(uniqueName) {
        return _regeneratorRuntime__default['default'].wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                if (!(this.channelState.uniqueName !== uniqueName)) {
                  _context25.next = 4;
                  break;
                }

                if (!uniqueName) {
                  uniqueName = '';
                }

                _context25.next = 4;
                return this.services.session.addCommand('editUniqueName', {
                  channelSid: this.sid,
                  uniqueName: uniqueName
                });

              case 4:
                return _context25.abrupt("return", this);

              case 5:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function updateUniqueName(_x19) {
        return _updateUniqueName.apply(this, arguments);
      }

      return updateUniqueName;
    }()
  }], [{
    key: "preprocessUpdate",
    value: function preprocessUpdate(update, conversationSid) {
      try {
        if (typeof update.attributes === 'string') {
          update.attributes = JSON.parse(update.attributes);
        } else if (update.attributes) {
          JSON.stringify(update.attributes);
        }
      } catch (e) {
        log$4.warn('Retrieved malformed attributes from the server for conversation: ' + conversationSid);
        update.attributes = {};
      }

      try {
        if (update.dateCreated) {
          update.dateCreated = new Date(update.dateCreated);
        }
      } catch (e) {
        log$4.warn('Retrieved malformed dateCreated from the server for conversation: ' + conversationSid);
        delete update.dateCreated;
      }

      try {
        if (update.dateUpdated) {
          update.dateUpdated = new Date(update.dateUpdated);
        }
      } catch (e) {
        log$4.warn('Retrieved malformed dateUpdated from the server for conversation: ' + conversationSid);
        delete update.dateUpdated;
      }

      try {
        if (update.lastMessage && update.lastMessage.timestamp) {
          update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);
        }
      } catch (e) {
        log$4.warn('Retrieved malformed lastMessage.timestamp from the server for conversation: ' + conversationSid);
        delete update.lastMessage.timestamp;
      }
    }
  }]);

  return Conversation;
}(EventEmitter);

__decorate([twilioSdkTypeValidator.validateTypesAsync(twilioSdkTypeValidator.nonEmptyString, ['undefined', 'string', 'number', 'boolean', 'object', twilioSdkTypeValidator.literal(null)]), __metadata("design:type", Function), __metadata("design:paramtypes", [String, Object]), __metadata("design:returntype", Promise)], Conversation.prototype, "add", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(twilioSdkTypeValidator.nonEmptyString, twilioSdkTypeValidator.nonEmptyString, ['undefined', 'object']), __metadata("design:type", Function), __metadata("design:paramtypes", [String, String, Object]), __metadata("design:returntype", Promise)], Conversation.prototype, "addNonChatParticipant", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(twilioSdkTypeValidator.nonNegativeInteger), __metadata("design:type", Function), __metadata("design:paramtypes", [Number]), __metadata("design:returntype", Promise)], Conversation.prototype, "advanceLastReadMessageIndex", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(['undefined', twilioSdkTypeValidator.nonNegativeInteger], ['undefined', twilioSdkTypeValidator.nonNegativeInteger], ['undefined', twilioSdkTypeValidator.literal('backwards', 'forward')]), __metadata("design:type", Function), __metadata("design:paramtypes", [Number, Number, String]), __metadata("design:returntype", Promise)], Conversation.prototype, "getMessages", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(twilioSdkTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Conversation.prototype, "getParticipantBySid", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(twilioSdkTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Conversation.prototype, "getParticipantByIdentity", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync([twilioSdkTypeValidator.nonEmptyString, Participant]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Conversation.prototype, "removeParticipant", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(['string', twilioSdkTypeValidator.literal(null), // Wrapping it into a custom rule is necessary because the FormData class is not available on initialization.
twilioSdkTypeValidator.custom(function (value) {
  return [value instanceof FormData, 'an instance of FormData'];
}), twilioSdkTypeValidator.objectSchema('media options', {
  contentType: twilioSdkTypeValidator.nonEmptyString,
  media: twilioSdkTypeValidator.custom(function (value) {
    var isValid = typeof value === 'string' && value.length > 0 || value instanceof Uint8Array || value instanceof ArrayBuffer;

    if (typeof Blob === 'function') {
      isValid = isValid || value instanceof Blob;
    }

    return [isValid, 'a non-empty string, an instance of Buffer or an instance of Blob'];
  })
})], ['undefined', 'string', 'number', 'boolean', 'object', twilioSdkTypeValidator.literal(null)], ['undefined', twilioSdkTypeValidator.literal(null), twilioSdkTypeValidator.objectSchema('email attributes', {
  subject: [twilioSdkTypeValidator.nonEmptyString, 'undefined']
})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object, Object, Object]), __metadata("design:returntype", Promise)], Conversation.prototype, "sendMessage", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(twilioSdkTypeValidator.literal('default', 'muted')), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Conversation.prototype, "setUserNotificationLevel", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(['string', 'number', 'boolean', 'object', twilioSdkTypeValidator.literal(null)]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Conversation.prototype, "updateAttributes", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(['string', twilioSdkTypeValidator.literal(null)]), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Conversation.prototype, "updateFriendlyName", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync([twilioSdkTypeValidator.literal(null), twilioSdkTypeValidator.nonNegativeInteger]), __metadata("design:type", Function), __metadata("design:paramtypes", [Number]), __metadata("design:returntype", Promise)], Conversation.prototype, "updateLastReadMessageIndex", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(['string', twilioSdkTypeValidator.literal(null)]), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Conversation.prototype, "updateUniqueName", null);
/**
 * Fired when a Participant has joined the Conversation.
 * @event Conversation#participantJoined
 * @type {Participant}
 */

/**
 * Fired when a Participant has left the Conversation.
 * @event Conversation#participantLeft
 * @type {Participant}
 */

/**
 * Fired when a Participant's fields has been updated.
 * @event Conversation#participantUpdated
 * @type {Object}
 * @property {Participant} participant - Updated Participant
 * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons
 */

/**
 * Fired when a new Message has been added to the Conversation.
 * @event Conversation#messageAdded
 * @type {Message}
 */

/**
 * Fired when Message is removed from Conversation's message list.
 * @event Conversation#messageRemoved
 * @type {Message}
 */

/**
 * Fired when an existing Message's fields are updated with new values.
 * @event Conversation#messageUpdated
 * @type {Object}
 * @property {Message} message - Updated Message
 * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons
 */

/**
 * Fired when a Participant has stopped typing.
 * @event Conversation#typingEnded
 * @type {Participant}
 */

/**
 * Fired when a Participant has started typing.
 * @event Conversation#typingStarted
 * @type {Participant}
 */

/**
 * Fired when a Conversation's attributes or metadata have been updated.
 * @event Conversation#updated
 * @type {Object}
 * @property {Conversation} conversation - Updated Conversation
 * @property {Conversation#UpdateReason[]} updateReasons - Array of Conversation's updated event reasons
 */

/**
 * Fired when the Conversation was destroyed or currently logged in User has left private Conversation
 * @event Conversation#removed
 * @type {Conversation}
 */

function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$3 = Logger.scope('Conversations');
/**
 * Represents conversations collection
 * {@see Conversation}
 */

var Conversations = /*#__PURE__*/function (_EventEmitter) {
  _inherits__default['default'](Conversations, _EventEmitter);

  var _super = _createSuper$3(Conversations);

  // sids
  function Conversations(services) {
    var _this;

    _classCallCheck__default['default'](this, Conversations);

    _this = _super.call(this);
    _this.services = services;
    _this.conversations = new Map();
    _this.thumbstones = new Set();
    _this.syncListFetched = false;
    _this.syncListRead = new Deferred();
    return _this;
  }

  _createClass__default['default'](Conversations, [{
    key: "getMap",
    value: function getMap() {
      var _this2 = this;

      return this.services.session.getMyConversationsId().then(function (name) {
        return _this2.services.syncClient.map({
          id: name,
          mode: 'open_existing'
        });
      });
    }
    /**
     * Add conversation to server
     * @private
     * @returns {Promise<Conversation>} Conversation
     */

  }, {
    key: "addConversation",
    value: function () {
      var _addConversation = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(options) {
        var attributes, response, conversationSid, conversationDocument, existingConversation, conversation;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (typeof options.attributes === 'undefined') {
                  attributes = {};
                } else {
                  attributes = options.attributes;
                }

                _context.next = 3;
                return this.services.session.addCommand('createConversation', {
                  friendlyName: options.friendlyName,
                  uniqueName: options.uniqueName,
                  attributes: JSON.stringify(attributes)
                });

              case 3:
                response = _context.sent;
                conversationSid = 'conversationSid' in response ? response['conversationSid'] : null;
                conversationDocument = 'conversation' in response ? response['conversation'] : null;
                existingConversation = this.conversations.get(conversationSid);

                if (!existingConversation) {
                  _context.next = 11;
                  break;
                }

                _context.next = 10;
                return existingConversation._subscribe();

              case 10:
                return _context.abrupt("return", existingConversation);

              case 11:
                conversation = new Conversation(this.services, {
                  channel: conversationDocument,
                  entityName: null,
                  uniqueName: null,
                  attributes: null,
                  createdBy: null,
                  friendlyName: null,
                  lastConsumedMessageIndex: null,
                  dateCreated: null,
                  dateUpdated: null
                }, conversationSid);
                this.conversations.set(conversation.sid, conversation);
                this.registerForEvents(conversation);
                _context.next = 16;
                return conversation._subscribe();

              case 16:
                this.emit('conversationAdded', conversation);
                return _context.abrupt("return", conversation);

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function addConversation(_x) {
        return _addConversation.apply(this, arguments);
      }

      return addConversation;
    }()
    /**
     * Fetch conversations list and instantiate all necessary objects
     */

  }, {
    key: "fetchConversations",
    value: function fetchConversations() {
      var _this3 = this;

      this.getMap().then( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(map) {
          var upserts, paginator, items;
          return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  map.on('itemAdded', function (args) {
                    log$3.debug('itemAdded: ' + args.item.key);

                    _this3.upsertConversation('sync', args.item.key, args.item.data);
                  });
                  map.on('itemRemoved', function (args) {
                    log$3.debug('itemRemoved: ' + args.key);
                    var sid = args.key;

                    if (!_this3.syncListFetched) {
                      _this3.thumbstones.add(sid);
                    }

                    var conversation = _this3.conversations.get(sid);

                    if (conversation) {
                      if (conversation && conversation.status === 'joined'
                      /*|| conversation.status === 'invited'*/
                      ) {
                          conversation._setStatus('notParticipating', 'sync');

                          _this3.emit('conversationLeft', conversation);
                        }

                      _this3.conversations.delete(sid);

                      _this3.emit('conversationRemoved', conversation);

                      conversation.emit('removed', conversation);
                    }
                  });
                  map.on('itemUpdated', function (args) {
                    log$3.debug('itemUpdated: ' + args.item.key);

                    _this3.upsertConversation('sync', args.item.key, args.item.data);
                  });
                  upserts = [];
                  _context2.next = 6;
                  return _this3.services.syncList.getPage();

                case 6:
                  paginator = _context2.sent;
                  items = paginator.items;
                  items.forEach(function (item) {
                    upserts.push(_this3.upsertConversation('synclist', item.channel_sid, item));
                  });

                case 9:
                  if (!paginator.hasNextPage) {
                    _context2.next = 16;
                    break;
                  }

                  _context2.next = 12;
                  return paginator.nextPage();

                case 12:
                  paginator = _context2.sent;
                  paginator.items.forEach(function (item) {
                    upserts.push(_this3.upsertConversation('synclist', item.channel_sid, item));
                  });
                  _context2.next = 9;
                  break;

                case 16:
                  _this3.syncListRead.set(true);

                  return _context2.abrupt("return", Promise.all(upserts));

                case 18:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        return function (_x2) {
          return _ref.apply(this, arguments);
        };
      }()).then(function () {
        _this3.syncListFetched = true;

        _this3.thumbstones.clear();

        log$3.debug('Conversations list fetched');
      }).then(function () {
        return _this3;
      }).catch(function (e) {
        if (_this3.services.syncClient.connectionState != 'disconnected') {
          log$3.error('Failed to get conversations list', e);
        }

        log$3.debug('ERROR: Failed to get conversations list', e);
        throw e;
      });
    }
  }, {
    key: "_wrapPaginator",
    value: function _wrapPaginator(page, op) {
      var _this4 = this;

      return op(page.items).then(function (items) {
        return {
          items: items,
          hasNextPage: page.hasNextPage,
          hasPrevPage: page.hasPrevPage,
          nextPage: function nextPage() {
            return page.nextPage().then(function (x) {
              return _this4._wrapPaginator(x, op);
            });
          },
          prevPage: function prevPage() {
            return page.prevPage().then(function (x) {
              return _this4._wrapPaginator(x, op);
            });
          }
        };
      });
    }
  }, {
    key: "getConversations",
    value: function getConversations(args) {
      var _this5 = this;

      return this.getMap().then(function (conversationsMap) {
        return conversationsMap.getItems(args);
      }).then(function (page) {
        return _this5._wrapPaginator(page, function (items) {
          return Promise.all(items.map(function (item) {
            return _this5.upsertConversation('sync', item.key, item.data);
          }));
        });
      });
    }
  }, {
    key: "getConversation",
    value: function getConversation(sid) {
      var _this6 = this;

      return this.getMap().then(function (conversationsMap) {
        return conversationsMap.getItems({
          key: sid
        });
      }).then(function (page) {
        return page.items.map(function (item) {
          return _this6.upsertConversation('sync', item.key, item.data);
        });
      }).then(function (items) {
        return items.length > 0 ? items[0] : null;
      });
    }
  }, {
    key: "getConversationByUniqueName",
    value: function () {
      var _getConversationByUniqueName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(uniqueName) {
        var links, url, response, body, sid, data;
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.services.session.getSessionLinks();

              case 2:
                links = _context3.sent;
                url = new UriBuilder(links.myChannelsUrl).path(uniqueName).build();
                _context3.next = 6;
                return this.services.network.get(url);

              case 6:
                response = _context3.sent;
                body = response.body;
                sid = body.channel_sid;
                data = {
                  entityName: null,
                  lastConsumedMessageIndex: body.last_consumed_message_index,
                  status: (body === null || body === void 0 ? void 0 : body.status) || 'unknown',
                  friendlyName: body.friendly_name,
                  dateUpdated: body.date_updated,
                  dateCreated: body.date_created,
                  uniqueName: body.unique_name,
                  createdBy: body.created_by,
                  attributes: body.attributes,
                  channel: "".concat(sid, ".channel"),
                  notificationLevel: body === null || body === void 0 ? void 0 : body.notification_level,
                  sid: sid
                };
                return _context3.abrupt("return", this.upsertConversation('sync', sid, data));

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getConversationByUniqueName(_x3) {
        return _getConversationByUniqueName.apply(this, arguments);
      }

      return getConversationByUniqueName;
    }()
  }, {
    key: "getWhisperConversation",
    value: function () {
      var _getWhisperConversation = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(sid) {
        var _state, _state$stateV;

        var links, url, response, body, state, data;
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.services.session.getSessionLinks();

              case 2:
                links = _context4.sent;
                url = new UriBuilder(links.publicChannelsUrl).path(sid).build();
                _context4.next = 6;
                return this.services.network.get(url);

              case 6:
                response = _context4.sent;
                body = response.body;

                if (!(body.type !== 'private')) {
                  _context4.next = 10;
                  break;
                }

                return _context4.abrupt("return");

              case 10:
                // If the state property is a string, it's expected to be a string that represents
                // a JSON object.
                if (typeof body.state === 'string') {
                  state = JSON.parse(body.state);
                } // If the state property is already a non-nullable object, then no JSON parsing is
                // required.


                if (_typeof__default['default'](body.state) === 'object' && body.state !== null) {
                  state = body.state;
                }

                if (!(((_state = state) === null || _state === void 0 ? void 0 : (_state$stateV = _state['state.v1']) === null || _state$stateV === void 0 ? void 0 : _state$stateV.current) === 'closed')) {
                  _context4.next = 14;
                  break;
                }

                return _context4.abrupt("return");

              case 14:
                data = {
                  entityName: null,
                  lastConsumedMessageIndex: body.last_consumed_message_index,
                  status: (body === null || body === void 0 ? void 0 : body.status) || 'unknown',
                  friendlyName: body.friendly_name,
                  dateUpdated: body.date_updated,
                  dateCreated: body.date_created,
                  uniqueName: body.unique_name,
                  createdBy: body.created_by,
                  attributes: body.attributes,
                  channel: "".concat(sid, ".channel"),
                  notificationLevel: body === null || body === void 0 ? void 0 : body.notification_level,
                  sid: sid
                };
                return _context4.abrupt("return", this.upsertConversation('sync', sid, data));

              case 16:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getWhisperConversation(_x4) {
        return _getWhisperConversation.apply(this, arguments);
      }

      return getWhisperConversation;
    }()
  }, {
    key: "upsertConversation",
    value: function upsertConversation(source, sid, data) {
      var _this7 = this;

      log$3.trace('upsertConversation(sid=' + sid + ', data=', data);
      var conversation = this.conversations.get(sid); // Update the Conversation's status if we know about it

      if (conversation) {
        log$3.trace('upsertConversation: conversation ' + sid + ' is known and it\'s' + ' status is known from source ' + conversation._statusSource() + ' and update came from source ' + source, conversation);

        if (typeof conversation._statusSource() === 'undefined' || source === conversation._statusSource() || source === 'synclist' && conversation._statusSource() !== 'sync' || source === 'sync') {
          if (data.status === 'joined' && conversation.status !== 'joined') {
            conversation._setStatus('joined', source);

            var updateData = {};

            if (typeof data.notificationLevel !== 'undefined') {
              updateData.notificationLevel = data.notificationLevel;
            }

            if (typeof data.lastConsumedMessageIndex !== 'undefined') {
              updateData.lastConsumedMessageIndex = data.lastConsumedMessageIndex;
            }

            if (!isDeepEqual(updateData, {})) {
              conversation._update(updateData);
            }

            conversation._subscribe().then(function () {
              _this7.emit('conversationJoined', conversation);
            });
          } else if (data.status === 'notParticipating' && conversation.status === 'joined') {
            conversation._setStatus('notParticipating', source);

            conversation._update(data);

            conversation._subscribe().then(function () {
              _this7.emit('conversationLeft', conversation);
            });
          } else if (data.status === 'notParticipating') {
            conversation._subscribe();
          } else {
            conversation._update(data);
          }
        } else {
          log$3.trace('upsertConversation: conversation is known from sync and came from chat, ignoring', {
            sid: sid,
            data: data.status,
            conversation: conversation.status
          });
        }

        return conversation._subscribe().then(function () {
          return conversation;
        });
      }

      if ((source === 'chat' || source === 'synclist') && this.thumbstones.has(sid)) {
        // if conversation was deleted, we ignore it
        log$3.trace('upsertConversation: conversation is deleted and came again from chat, ignoring', sid);
        return;
      } // Fetch the Conversation if we don't know about it


      log$3.trace('upsertConversation: creating local conversation object with sid ' + sid, data);
      conversation = new Conversation(this.services, data, sid);
      this.conversations.set(sid, conversation);
      return conversation._subscribe().then(function () {
        _this7.registerForEvents(conversation);

        _this7.emit('conversationAdded', conversation);

        if (data.status === 'joined') {
          conversation._setStatus('joined', source);

          _this7.emit('conversationJoined', conversation);
        }

        return conversation;
      });
    }
  }, {
    key: "onConversationRemoved",
    value: function onConversationRemoved(sid) {
      var conversation = this.conversations.get(sid);

      if (conversation) {
        this.conversations.delete(sid);
        this.emit('conversationRemoved', conversation);
      }
    }
  }, {
    key: "registerForEvents",
    value: function registerForEvents(conversation) {
      var _this8 = this;

      conversation.on('removed', function () {
        return _this8.onConversationRemoved(conversation.sid);
      });
      conversation.on('updated', function (args) {
        return _this8.emit('conversationUpdated', args);
      });
      conversation.on('participantJoined', this.emit.bind(this, 'participantJoined'));
      conversation.on('participantLeft', this.emit.bind(this, 'participantLeft'));
      conversation.on('participantUpdated', function (args) {
        return _this8.emit('participantUpdated', args);
      });
      conversation.on('messageAdded', this.emit.bind(this, 'messageAdded'));
      conversation.on('messageUpdated', function (args) {
        return _this8.emit('messageUpdated', args);
      });
      conversation.on('messageRemoved', this.emit.bind(this, 'messageRemoved'));
      conversation.on('typingStarted', this.emit.bind(this, 'typingStarted'));
      conversation.on('typingEnded', this.emit.bind(this, 'typingEnded'));
    }
  }]);

  return Conversations;
}(EventEmitter);

function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log$2 = Logger.scope('User');
/**
 * @classdesc Extended user information.
 * Note that <code>isOnline</code> and <code>isNotifiable</code> properties are eligible
 * to use only if reachability function is enabled.
 * You may check if it is enabled by reading value of {@link Client}'s <code>reachabilityEnabled</code> property.
 *
 * @property {String} identity - User identity
 * @property {String} friendlyName - User friendly name, null if not set
 * @property {any} attributes - Object with custom attributes for user
 * @property {Boolean} isOnline - User real-time conversation connection status
 * @property {Boolean} isNotifiable - User push notification registration status
 * @property {Boolean} isSubscribed - Check if this user receives real-time status updates
 *
 * @fires User#updated
 * @fires User#userSubscribed
 * @fires User#userUnsubscribed
 *
 * @constructor
 * @param {String} identity - Identity of user
 * @param {String} entityId - id of user's object
 * @param {Object} datasync - datasync service
 * @param {Object} session - session service
 */

var User = /*#__PURE__*/function (_EventEmitter) {
  _inherits__default['default'](User, _EventEmitter);

  var _super = _createSuper$2(User);

  /**
   * The update reason for <code>updated</code> event emitted on User
   * @typedef {('friendlyName' | 'attributes' | 'reachabilityOnline' | 'reachabilityNotifiable')} User#UpdateReason
   */
  function User(identity, entityName, services) {
    var _this;

    _classCallCheck__default['default'](this, User);

    _this = _super.call(this);
    _this.subscribed = 'initializing';

    _this.setMaxListeners(0);

    _this.services = services;
    _this.state = {
      identity: identity,
      entityName: entityName,
      friendlyName: null,
      attributes: {},
      online: null,
      notifiable: null
    };
    return _this;
  }

  _createClass__default['default'](User, [{
    key: "identity",
    get: function get() {
      return this.state.identity;
    },
    set: function set(identity) {
      this.state.identity = identity;
    }
  }, {
    key: "entityName",
    set: function set(name) {
      this.state.entityName = name;
    }
  }, {
    key: "attributes",
    get: function get() {
      return this.state.attributes;
    }
  }, {
    key: "friendlyName",
    get: function get() {
      return this.state.friendlyName;
    }
  }, {
    key: "isOnline",
    get: function get() {
      return this.state.online;
    }
  }, {
    key: "isNotifiable",
    get: function get() {
      return this.state.notifiable;
    }
  }, {
    key: "isSubscribed",
    get: function get() {
      return this.subscribed == 'subscribed';
    } // Handles service updates

  }, {
    key: "_update",
    value: function _update(key, value) {
      var updateReasons = [];
      log$2.debug('User for', this.state.identity, 'updated:', key, value);

      switch (key) {
        case 'friendlyName':
          if (this.state.friendlyName !== value.value) {
            updateReasons.push('friendlyName');
            this.state.friendlyName = value.value;
          }

          break;

        case 'attributes':
          var updateAttributes = parseAttributes(value.value, "Retrieved malformed attributes from the server for user: ".concat(this.state.identity), log$2);

          if (!isDeepEqual(this.state.attributes, updateAttributes)) {
            this.state.attributes = updateAttributes;
            updateReasons.push('attributes');
          }

          break;

        case 'reachability':
          if (this.state.online !== value.online) {
            this.state.online = value.online;
            updateReasons.push('reachabilityOnline');
          }

          if (this.state.notifiable !== value.notifiable) {
            this.state.notifiable = value.notifiable;
            updateReasons.push('reachabilityNotifiable');
          }

          break;

        default:
          return;
      }

      if (updateReasons.length > 0) {
        this.emit('updated', {
          user: this,
          updateReasons: updateReasons
        });
      }
    } // Fetch reachability info

  }, {
    key: "_updateReachabilityInfo",
    value: function _updateReachabilityInfo(map, update) {
      var _this2 = this;

      if (!this.services.session.reachabilityEnabled) {
        return Promise.resolve();
      }

      return map.get('reachability').then(update).catch(function (err) {
        log$2.warn('Failed to get reachability info for ', _this2.state.identity, err);
      });
    } // Fetch user

  }, {
    key: "_fetch",
    value: function () {
      var _fetch2 = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var _this3 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.state.entityName) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", this);

              case 2:
                this.promiseToFetch = this.services.syncClient.map({
                  id: this.state.entityName,
                  mode: 'open_existing',
                  includeItems: true
                }).then(function (map) {
                  _this3.entity = map;
                  map.on('itemUpdated', function (args) {
                    log$2.debug(_this3.state.entityName + ' (' + _this3.state.identity + ') itemUpdated: ' + args.item.key);
                    return _this3._update(args.item.key, args.item.data);
                  });
                  return Promise.all([map.get('friendlyName').then(function (item) {
                    return _this3._update(item.key, item.data);
                  }), map.get('attributes').then(function (item) {
                    return _this3._update(item.key, item.data);
                  }), _this3._updateReachabilityInfo(map, function (item) {
                    return _this3._update(item.key, item.data);
                  })]);
                }).then(function () {
                  log$2.debug('Fetched for', _this3.identity);
                  _this3.subscribed = 'subscribed';

                  _this3.emit('userSubscribed', _this3);

                  return _this3;
                }).catch(function (err) {
                  _this3.promiseToFetch = null;
                  throw err;
                });
                return _context.abrupt("return", this.promiseToFetch);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _fetch() {
        return _fetch2.apply(this, arguments);
      }

      return _fetch;
    }()
  }, {
    key: "_ensureFetched",
    value: function _ensureFetched() {
      return this.promiseToFetch || this._fetch();
    }
    /**
     * Updates user attributes.
     * @param {any} attributes new attributes for User.
     * @returns {Promise<User>}
     */

  }, {
    key: "updateAttributes",
    value: function () {
      var _updateAttributes = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2(attributes) {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(this.subscribed == 'unsubscribed')) {
                  _context2.next = 2;
                  break;
                }

                throw new Error('Can\'t modify unsubscribed object');

              case 2:
                _context2.next = 4;
                return this.services.session.addCommand('editUserAttributes', {
                  username: this.state.identity,
                  attributes: JSON.stringify(attributes)
                });

              case 4:
                return _context2.abrupt("return", this);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function updateAttributes(_x) {
        return _updateAttributes.apply(this, arguments);
      }

      return updateAttributes;
    }()
    /**
     * Update Users friendlyName.
     * @param {String|null} friendlyName - Updated friendlyName
     * @returns {Promise<User>}
     */

  }, {
    key: "updateFriendlyName",
    value: function () {
      var _updateFriendlyName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(friendlyName) {
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(this.subscribed == 'unsubscribed')) {
                  _context3.next = 2;
                  break;
                }

                throw new Error('Can\'t modify unsubscribed object');

              case 2:
                _context3.next = 4;
                return this.services.session.addCommand('editUserFriendlyName', {
                  username: this.state.identity,
                  friendlyName: friendlyName
                });

              case 4:
                return _context3.abrupt("return", this);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function updateFriendlyName(_x2) {
        return _updateFriendlyName.apply(this, arguments);
      }

      return updateFriendlyName;
    }()
    /**
     * Removes User from subscription list.
     * @returns {Promise<void>} Promise of completion
     */

  }, {
    key: "unsubscribe",
    value: function () {
      var _unsubscribe = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4() {
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!this.promiseToFetch) {
                  _context4.next = 7;
                  break;
                }

                _context4.next = 3;
                return this.promiseToFetch;

              case 3:
                this.entity.close();
                this.promiseToFetch = null;
                this.subscribed = 'unsubscribed';
                this.emit('userUnsubscribed', this);

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function unsubscribe() {
        return _unsubscribe.apply(this, arguments);
      }

      return unsubscribe;
    }()
  }]);

  return User;
}(EventEmitter);

__decorate([twilioSdkTypeValidator.validateTypesAsync(['string', 'number', 'boolean', 'object', twilioSdkTypeValidator.literal(null)]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], User.prototype, "updateAttributes", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(['string', twilioSdkTypeValidator.literal(null)]), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], User.prototype, "updateFriendlyName", null);
/**
 * Fired when User's properties or reachability status have been updated.
 * @event User#updated
 * @type {Object}
 * @property {User} user - Updated User
 * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons
 */

/**
 * Fired when Client is subscribed to User.
 * @event User#userSubscribed
 * @type {User}
 */

/**
 * Fired when Client is unsubscribed from this User.
 * @event User#userUnsubscribed
 * @type {User}
 */

function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/**
 * @classdesc Container for known users
 * @fires Users#userUpdated
 */

var Users = /*#__PURE__*/function (_EventEmitter) {
  _inherits__default['default'](Users, _EventEmitter);

  var _super = _createSuper$1(Users);

  function Users(services) {
    var _this;

    _classCallCheck__default['default'](this, Users);

    _this = _super.call(this);
    _this.services = services;
    _this.fifoStack = [];
    _this.fifoStackMaxLength = 100;
    _this.myself = new User(null, null, _this.services);

    _this.myself.on('updated', function (args) {
      return _this.emit('userUpdated', args);
    });

    _this.myself.on('userSubscribed', function () {
      return _this.emit('userSubscribed', _this.myself);
    });

    _this.myself.on('userUnsubscribed', function () {
      _this.emit('userUnsubscribed', _this.myself);

      _this.myself._ensureFetched();
    });

    _this.services = services;
    _this.subscribedUsers = new Map();
    _this.userUrlPromise = _this.services.session.getSessionLinks().then(function (links) {
      _this.userUrl = links.usersUrl;
      return _this.userUrl;
    });

    _this.services.session.getMaxUserInfosToSubscribe().then(function (maxUserInfosToSubscribe) {
      _this.fifoStackMaxLength = maxUserInfosToSubscribe;
    });

    _this.services.session.getUsersData().then(function (data) {
      _this.myself.identity = data.identity;
      _this.myself.entityName = data.user;
      return _this.myself._ensureFetched();
    });

    return _this;
  }

  _createClass__default['default'](Users, [{
    key: "handleUnsubscribeUser",
    value: function handleUnsubscribeUser(user) {
      if (this.subscribedUsers.has(user.identity)) {
        this.subscribedUsers.delete(user.identity);
      }

      var foundItemIndex = -1;
      var foundItem = this.fifoStack.find(function (item, index) {
        if (item == user.identity) {
          foundItemIndex = index;
          return true;
        }

        return false;
      });

      if (foundItem) {
        this.fifoStack.splice(foundItemIndex, 1);
      }

      this.emit('userUnsubscribed', user);
    }
  }, {
    key: "handleSubscribeUser",
    value: function handleSubscribeUser(user) {
      if (this.subscribedUsers.has(user.identity)) {
        return;
      }

      if (this.fifoStack.length >= this.fifoStackMaxLength) {
        this.subscribedUsers.get(this.fifoStack.shift()).unsubscribe();
      }

      this.fifoStack.push(user.identity);
      this.subscribedUsers.set(user.identity, user);
      this.emit('userSubscribed', user);
    }
    /**
     * Gets user, if it's in subscribed list - then return the user object from it,
     * if not - then subscribes and adds user to the FIFO stack
     * @returns {Promise<User>} Fully initialized user
     */

  }, {
    key: "getUser",
    value: function () {
      var _getUser = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee(identity) {
        var _this2 = this;

        var entityName,
            user,
            _args = arguments;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                entityName = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;
                _context.next = 3;
                return this.services.session.getUsersData();

              case 3:
                _context.next = 5;
                return this.myself._ensureFetched();

              case 5:
                if (!(identity == this.myself.identity)) {
                  _context.next = 7;
                  break;
                }

                return _context.abrupt("return", this.myself);

              case 7:
                user = this.subscribedUsers.get(identity);

                if (user) {
                  _context.next = 19;
                  break;
                }

                if (entityName) {
                  _context.next = 13;
                  break;
                }

                _context.next = 12;
                return this.getSyncUniqueName(identity);

              case 12:
                entityName = _context.sent;

              case 13:
                user = new User(identity, entityName, this.services);
                user.on('updated', function (args) {
                  return _this2.emit('userUpdated', args);
                });
                user.on('userSubscribed', function () {
                  return _this2.handleSubscribeUser(user);
                });
                user.on('userUnsubscribed', function () {
                  return _this2.handleUnsubscribeUser(user);
                });
                _context.next = 19;
                return user._ensureFetched();

              case 19:
                return _context.abrupt("return", user);

              case 20:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getUser(_x) {
        return _getUser.apply(this, arguments);
      }

      return getUser;
    }()
    /**
     * @returns {Promise<Array<User>>} returns list of subscribed User objects {@see User}
     */

  }, {
    key: "getSubscribedUsers",
    value: function () {
      var _getSubscribedUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        var users;
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.services.session.getUsersData();

              case 2:
                _context2.next = 4;
                return this.myself._ensureFetched();

              case 4:
                users = [this.myself];
                this.subscribedUsers.forEach(function (user) {
                  return users.push(user);
                });
                return _context2.abrupt("return", users);

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getSubscribedUsers() {
        return _getSubscribedUsers.apply(this, arguments);
      }

      return getSubscribedUsers;
    }()
    /**
     * @returns {Promise<string>} User's sync unique name
     */

  }, {
    key: "getSyncUniqueName",
    value: function () {
      var _getSyncUniqueName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(identity) {
        var url, response;
        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                url = new UriBuilder(this.userUrl).path(identity).build();
                _context3.next = 3;
                return this.services.network.get(url);

              case 3:
                response = _context3.sent;
                return _context3.abrupt("return", response.body.sync_unique_name);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getSyncUniqueName(_x2) {
        return _getSyncUniqueName.apply(this, arguments);
      }

      return getSyncUniqueName;
    }()
  }]);

  return Users;
}(EventEmitter);

var log$1 = Logger.scope('TypingIndicator');
/**
 * An important note in regards to typing timeout timers. There are two places that the SDK can get the "typing_timeout" attribute from. The first
 * place that the attribute appears in is the response received from POST -> /v1/typing REST call. In the body of that response, the value of the
 * "typing_timeout" attribute will be exactly the same as defined in the console. The second place that the attribute appears in is from a
 * notification of type "twilio.ipmsg.typing_indicator". In this case, the "typing_timeout" value will be +1 of that in the console. This
 * intentional. The timeout returned from the POST -> /v1/typing call should be used to disable further calls for that period of time. On contrary,
 * the timeout returned from the notification should be used as the timeout for the "typingEnded" event, +1 is to account for latency.
 *
 * @private
 */

/**
 * @class TypingIndicator
 *
 * @constructor
 * @private
 */

var TypingIndicator = /*#__PURE__*/function () {
  function TypingIndicator(config, services, getConversation) {
    _classCallCheck__default['default'](this, TypingIndicator);

    this.config = config;
    this.services = services;
    this.getConversation = getConversation;
    this.serviceTypingTimeout = null;
    this.sentUpdates = new Map();
  }

  _createClass__default['default'](TypingIndicator, [{
    key: "typingTimeout",
    get: function get() {
      return this.config.typingIndicatorTimeoutOverride || this.serviceTypingTimeout || this.config.typingIndicatorTimeoutDefault;
    }
    /**
     * Initialize TypingIndicator controller
     * Registers for needed message types and sets listeners
     * @private
     */

  }, {
    key: "initialize",
    value: function initialize() {
      var _this = this;

      this.services.notificationClient.subscribe(NotificationTypes.TYPING_INDICATOR, 'twilsock');
      this.services.notificationClient.on('message', function (type, message) {
        if (type === NotificationTypes.TYPING_INDICATOR) {
          _this.handleRemoteTyping(message);
        }
      });
    }
    /**
     * Remote participants typing events handler
     * @private
     */

  }, {
    key: "handleRemoteTyping",
    value: function handleRemoteTyping(message) {
      var _this2 = this;

      log$1.trace('Got new typing indicator ', message);
      this.getConversation(message.channel_sid).then(function (conversation) {
        if (!conversation) {
          return;
        }

        conversation.participants.forEach(function (participant) {
          if (participant.identity !== message.identity) {
            return;
          }

          var timeout = _this2.config.typingIndicatorTimeoutOverride + 1000 || message.typing_timeout * 1000;

          participant._startTyping(timeout);
        });
      }).catch(function (err) {
        log$1.error(err);
        throw err;
      });
    }
    /**
     * Send typing event for the given conversation sid
     * @param {String} conversationSid
     */

  }, {
    key: "send",
    value: function send(conversationSid) {
      var lastUpdate = this.sentUpdates.get(conversationSid);

      if (lastUpdate && lastUpdate > Date.now() - this.typingTimeout) {
        return Promise.resolve();
      }

      this.sentUpdates.set(conversationSid, Date.now());
      return this._send(conversationSid);
    }
  }, {
    key: "_send",
    value: function _send(conversationSid) {
      var _this3 = this;

      log$1.trace('Sending typing indicator');
      var url = this.config.typingIndicatorUri;
      var headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
      };
      var body = 'ChannelSid=' + conversationSid;
      return this.services.transport.post(url, headers, body, this.config.productId).then(function (response) {
        if (response.body.hasOwnProperty('typing_timeout')) {
          _this3.serviceTypingTimeout = response.body.typing_timeout * 1000;
        }
      }).catch(function (err) {
        log$1.error('Failed to send typing indicator:', err);
        throw err;
      });
    }
  }]);

  return TypingIndicator;
}();

/**
 * @classdesc Provides read horizon management functionality
 */


var ReadHorizon = /*#__PURE__*/function () {
  function ReadHorizon(services) {
    _classCallCheck__default['default'](this, ReadHorizon);

    this.services = services;
    this.readHorizonRequests = new Map();
    this.readHorizonUpdateTimer = null;
  }

  _createClass__default['default'](ReadHorizon, [{
    key: "getReportInterval",
    value: function getReportInterval() {
      return this.services.session.getConsumptionReportInterval().then(function (seconds) {
        return seconds * 1000;
      });
    }
  }, {
    key: "delayedSendReadHorizon",
    value: function delayedSendReadHorizon(delay) {
      var _this = this;

      if (this.readHorizonUpdateTimer !== null) {
        return;
      }

      this.sendConsumptionReport(true);
      this.readHorizonUpdateTimer = setTimeout(function () {
        _this.sendConsumptionReport(false);
      }, delay);
    }
  }, {
    key: "sendConsumptionReport",
    value: function sendConsumptionReport(keepTimer) {
      var _this2 = this;

      var reports = [];
      var promises = new Map();
      this.readHorizonRequests.forEach(function (request, conversationSid) {
        reports.push(request.entry);
        promises.set(conversationSid, request.promises);
      });

      if (reports.length > 0) {
        this.services.session.addCommand('consumptionReportV2', {
          report: reports
        }).then(function (response) {
          return _this2.processConsumptionReportResponse(response, promises);
        }).catch(function (err) {
          return _this2.processConsumptionReportError(err, promises);
        });
      }

      if (!keepTimer) {
        this.readHorizonUpdateTimer = null;
      }

      this.readHorizonRequests.clear();
    }
  }, {
    key: "processConsumptionReportResponse",
    value: function processConsumptionReportResponse(response, promises) {
      if (response && response.report && Array.isArray(response.report) && response.report.length > 0) {
        response.report.forEach(function (entry) {
          var responseEntry = entry;

          if (promises.has(responseEntry.channelSid)) {
            var unreadMessagesCount = null;

            if (typeof responseEntry.unreadMessagesCount !== 'undefined' && responseEntry.unreadMessagesCount != null) {
              unreadMessagesCount = responseEntry.unreadMessagesCount;
            }

            promises.get(responseEntry.channelSid).forEach(function (promise) {
              return promise.resolve(unreadMessagesCount);
            });
            promises.delete(responseEntry.channelSid);
          }
        });
      }

      this.processConsumptionReportError(new SessionError('Error while setting LastReadMessageIndex', null), promises);
    }
  }, {
    key: "processConsumptionReportError",
    value: function processConsumptionReportError(err, promises) {
      promises.forEach(function (conversationPromises) {
        return conversationPromises.forEach(function (promise) {
          return promise.reject(err);
        });
      });
    }
    /**
     * Updates read horizon value without any checks
     */

  }, {
    key: "updateLastReadMessageIndexForConversation",
    value: function updateLastReadMessageIndexForConversation(conversationSid, messageIdx) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        _this3.addPendingConsumptionHorizonRequest(conversationSid, {
          channelSid: conversationSid,
          messageIdx: messageIdx
        }, {
          resolve: resolve,
          reject: reject
        });

        _this3.getReportInterval().then(function (delay) {
          return _this3.delayedSendReadHorizon(delay);
        });
      });
    }
    /**
     * Move read horizon forward
     */

  }, {
    key: "advanceLastReadMessageIndexForConversation",
    value: function advanceLastReadMessageIndexForConversation(conversationSid, messageIdx, currentConversationLastReadIndex) {
      var _this4 = this;

      var currentHorizon = this.readHorizonRequests.get(conversationSid);
      return new Promise(function (resolve, reject) {
        if (currentHorizon && currentHorizon.entry) {
          if (currentHorizon.entry.messageIdx >= messageIdx) {
            _this4.addPendingConsumptionHorizonRequest(conversationSid, currentHorizon.entry, {
              resolve: resolve,
              reject: reject
            });
          } else {
            _this4.addPendingConsumptionHorizonRequest(conversationSid, {
              channelSid: conversationSid,
              messageIdx: messageIdx
            }, {
              resolve: resolve,
              reject: reject
            });
          }
        } else {
          if (currentConversationLastReadIndex !== null && messageIdx < currentConversationLastReadIndex) {
            _this4.addPendingConsumptionHorizonRequest(conversationSid, {
              channelSid: conversationSid,
              messageIdx: currentConversationLastReadIndex
            }, {
              resolve: resolve,
              reject: reject
            });
          } else {
            _this4.addPendingConsumptionHorizonRequest(conversationSid, {
              channelSid: conversationSid,
              messageIdx: messageIdx
            }, {
              resolve: resolve,
              reject: reject
            });
          }
        }

        _this4.getReportInterval().then(function (delay) {
          return _this4.delayedSendReadHorizon(delay);
        });
      });
    }
  }, {
    key: "addPendingConsumptionHorizonRequest",
    value: function addPendingConsumptionHorizonRequest(conversationSid, entry, promise) {
      if (this.readHorizonRequests.has(conversationSid)) {
        var request = this.readHorizonRequests.get(conversationSid);
        request.entry = entry;
        request.promises.push(promise);
      } else {
        this.readHorizonRequests.set(conversationSid, {
          entry: entry,
          promises: [promise]
        });
      }
    }
  }]);

  return ReadHorizon;
}();

var PushNotification =
/**
 * Conversation push notification type
 * @typedef {('twilio.conversations.new_message' | 'twilio.conversations.added_to_conversation'
 | 'twilio.conversations.removed_from_conversation')} PushNotification#NotificationType
 */

/**
 * Additional Conversations data for given Push Notification
 * @typedef {Object} PushNotification#ConversationData
 * @property {String} [conversationSid] - SID of Conversation
 * @property {Number} [messageIndex] - Index of Message in Conversation
 * @property {String} [messageSid] - SID of Message
 */

/**
 * @param {PushNotification.Descriptor} data - initial data for PushNotification
 */
function PushNotification(data) {
  _classCallCheck__default['default'](this, PushNotification);

  this.title = data.title || null;
  this.body = data.body || null;
  this.sound = data.sound || null;
  this.badge = data.badge || null;
  this.action = data.action || null;
  this.type = data.type || null;
  this.data = data.data || {};
};

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf__default['default'](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default['default'](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default['default'](this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log = Logger.scope('Client');
var SDK_VERSION = version;

var ClientServices = function ClientServices() {
  _classCallCheck__default['default'](this, ClientServices);
};
/**
 * A Client is a starting point to access Twilio Conversations functionality.
 *
 * @property {Client#ConnectionState} connectionState - Client connection state
 * @property {Boolean} reachabilityEnabled - Client reachability state
 * @property {User} user - Information for logged in user
 * @property {String} version - Current version of Conversations client
 *
 * @fires Client#connectionError
 * @fires Client#connectionStateChanged
 * @fires Client#conversationAdded
 * @fires Client#conversationJoined
 * @fires Client#conversationLeft
 * @fires Client#conversationRemoved
 * @fires Client#conversationUpdated
 * @fires Client#participantJoined
 * @fires Client#participantLeft
 * @fires Client#participantUpdated
 * @fires Client#messageAdded
 * @fires Client#messageRemoved
 * @fires Client#messageUpdated
 * @fires Client#pushNotification
 * @fires Client#tokenAboutToExpire
 * @fires Client#tokenExpired
 * @fires Client#typingEnded
 * @fires Client#typingStarted
 * @fires Client#userSubscribed
 * @fires Client#userUnsubscribed
 * @fires Client#userUpdated
 */


var Client = /*#__PURE__*/function (_EventEmitter) {
  _inherits__default['default'](Client, _EventEmitter);

  var _super = _createSuper(Client);

  /**
   * These options can be passed to Client constructor.
   * @typedef {Object} Client#ClientOptions
   * @property {String} [logLevel='error'] - The level of logging to enable. Valid options
   *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']
   */

  /**
   * These options can be passed to {@link Client#createConversation}.
   * @typedef {Object} Client#CreateConversationOptions
   * @property {any} [attributes] - Any custom attributes to attach to the Conversation
   * @property {String} [friendlyName] - The non-unique display name of the Conversation
   * @property {String} [uniqueName] - The unique identifier of the Conversation
   */

  /**
   * Connection state of Client.
   * @typedef {('connecting'|'connected'|'disconnecting'|'disconnected'|'denied')} Client#ConnectionState
   */

  /**
   * Notifications channel type.
   * @typedef {('fcm'|'apn')} Client#NotificationsChannelType
   */
  function Client(token, options) {
    var _this;

    _classCallCheck__default['default'](this, Client);

    _this = _super.call(this);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "connectionState", 'connecting');

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "sessionPromise", null);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "conversationsPromise", null);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "version", SDK_VERSION);

    _defineProperty__default['default'](_assertThisInitialized__default['default'](_this), "parsePushNotification", Client.parsePushNotification);

    _this.options = options || {};

    if (!_this.options.disableDeepClone) {
      var _options = _objectSpread(_objectSpread({}, _this.options), {}, {
        transport: undefined,
        twilsockClient: undefined
      });

      _options = deepClone(_options);
      _options.transport = _this.options.transport;
      _options.twilsockClient = _this.options.twilsockClient;
      _this.options = _options;
    }

    _this.options.logLevel = _this.options.logLevel || 'silent';
    log.setLevel(_this.options.logLevel);
    var productId = _this.options.productId = 'ip_messaging'; // Filling ClientMetadata

    _this.options.clientMetadata = _this.options.clientMetadata || {};

    if (!_this.options.clientMetadata.hasOwnProperty('type')) {
      _this.options.clientMetadata.type = 'conversations';
    }

    if (!_this.options.clientMetadata.hasOwnProperty('sdk')) {
      _this.options.clientMetadata.sdk = 'JS';
      _this.options.clientMetadata.sdkv = SDK_VERSION;
    } // Enable session local storage for Sync


    _this.options.Sync = _this.options.Sync || {};

    if (typeof _this.options.Sync.enableSessionStorage === 'undefined') {
      _this.options.Sync.enableSessionStorage = true;
    }

    if (_this.options.region) {
      _this.options.Sync.region = _this.options.region;
    }

    if (!token) {
      throw new Error('A valid Twilio token should be provided');
    }

    _this.services = new ClientServices();
    _this.config = new Configuration(_this.options);
    _this.options.twilsockClient = _this.options.twilsockClient || new twilsock.Twilsock(token, productId, _this.options);
    _this.options.transport = _this.options.transport || _this.options.twilsockClient;
    _this.options.notificationsClient = _this.options.notificationsClient || new twilioNotifications.Notifications(token, _this.options);
    _this.options.syncClient = _this.options.syncClient || new twilioSync.SyncClient(token, _this.options);
    _this.services.syncClient = _this.options.syncClient;
    _this.services.transport = _this.options.transport;
    _this.services.twilsockClient = _this.options.twilsockClient;
    _this.services.notificationClient = _this.options.notificationsClient;
    _this.services.session = new Session(_this.services, _this.config);
    _this.sessionPromise = _this.services.session.initialize();
    _this.services.network = new Network(_this.config, _this.services);
    _this.services.users = new Users({
      session: _this.services.session,
      network: _this.services.network,
      syncClient: _this.services.syncClient
    });

    _this.services.users.on('userSubscribed', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'userSubscribed'));

    _this.services.users.on('userUpdated', function (args) {
      return _this.emit('userUpdated', args);
    });

    _this.services.users.on('userUnsubscribed', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'userUnsubscribed'));

    _this.services.twilsockClient.on('tokenAboutToExpire', function (ttl) {
      return _this.emit('tokenAboutToExpire', ttl);
    });

    _this.services.twilsockClient.on('tokenExpired', function () {
      return _this.emit('tokenExpired');
    });

    _this.services.twilsockClient.on('connectionError', function (error) {
      return _this.emit('connectionError', error);
    });

    _this.services.readHorizon = new ReadHorizon(_this.services);
    _this.services.typingIndicator = new TypingIndicator(_this.config, {
      transport: _this.services.twilsockClient,
      notificationClient: _this.services.notificationClient
    }, _this.getConversationBySid.bind(_assertThisInitialized__default['default'](_this)));
    _this.services.syncList = new SyncList(_this.services);
    _this.conversations = new Conversations(_this.services);
    _this.conversationsPromise = _this.sessionPromise.then(function () {
      _this.conversations.on('conversationAdded', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'conversationAdded'));

      _this.conversations.on('conversationRemoved', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'conversationRemoved'));

      _this.conversations.on('conversationJoined', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'conversationJoined'));

      _this.conversations.on('conversationLeft', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'conversationLeft'));

      _this.conversations.on('conversationUpdated', function (args) {
        return _this.emit('conversationUpdated', args);
      });

      _this.conversations.on('participantJoined', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'participantJoined'));

      _this.conversations.on('participantLeft', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'participantLeft'));

      _this.conversations.on('participantUpdated', function (args) {
        return _this.emit('participantUpdated', args);
      });

      _this.conversations.on('messageAdded', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'messageAdded'));

      _this.conversations.on('messageUpdated', function (args) {
        return _this.emit('messageUpdated', args);
      });

      _this.conversations.on('messageRemoved', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'messageRemoved'));

      _this.conversations.on('typingStarted', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'typingStarted'));

      _this.conversations.on('typingEnded', _this.emit.bind(_assertThisInitialized__default['default'](_this), 'typingEnded'));

      return _this.conversations.fetchConversations();
    }).then(function () {
      return _this.conversations;
    });

    _this.services.notificationClient.on('connectionStateChanged', function (state) {
      var changedConnectionState = null;

      switch (state) {
        case 'connected':
          changedConnectionState = 'connected';
          break;

        case 'denied':
          changedConnectionState = 'denied';
          break;

        case 'disconnecting':
          changedConnectionState = 'disconnecting';
          break;

        case 'disconnected':
          changedConnectionState = 'disconnected';
          break;

        default:
          changedConnectionState = 'connecting';
      }

      if (changedConnectionState !== _this.connectionState) {
        _this.connectionState = changedConnectionState;

        _this.emit('connectionStateChanged', _this.connectionState);
      }
    });

    _this.fpaToken = token;
    return _this;
  }
  /**
   * Factory method to create Conversations client instance.
   *
   * @param {String} token - Access token
   * @param {Client#ClientOptions} [options] - Options to customize the Client
   * @returns {Promise<Client>}
   */


  _createClass__default['default'](Client, [{
    key: "user",
    get: function get() {
      return this.services.users.myself;
    }
  }, {
    key: "reachabilityEnabled",
    get: function get() {
      return this.services.session.reachabilityEnabled;
    }
  }, {
    key: "token",
    get: function get() {
      return this.fpaToken;
    }
  }, {
    key: "subscribeToPushNotifications",
    value: function subscribeToPushNotifications(channelType) {
      var _this2 = this;

      var subscriptions = [];
      [NotificationTypes.NEW_MESSAGE, NotificationTypes.ADDED_TO_CONVERSATION, NotificationTypes.REMOVED_FROM_CONVERSATION, NotificationTypes.TYPING_INDICATOR, NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {
        subscriptions.push(_this2.services.notificationClient.subscribe(messageType, channelType));
      });
      return Promise.all(subscriptions);
    }
  }, {
    key: "unsubscribeFromPushNotifications",
    value: function unsubscribeFromPushNotifications(channelType) {
      var _this3 = this;

      var subscriptions = [];
      [NotificationTypes.NEW_MESSAGE, NotificationTypes.ADDED_TO_CONVERSATION, NotificationTypes.REMOVED_FROM_CONVERSATION, NotificationTypes.TYPING_INDICATOR, NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {
        subscriptions.push(_this3.services.notificationClient.unsubscribe(messageType, channelType));
      });
      return Promise.all(subscriptions);
    }
  }, {
    key: "initialize",
    value: function () {
      var _initialize = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee() {
        var _this4 = this;

        var links, options;
        return _regeneratorRuntime__default['default'].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.sessionPromise;

              case 2:
                Client.supportedPushChannels.forEach(function (channelType) {
                  return _this4.subscribeToPushNotifications(channelType);
                });
                _context.next = 5;
                return this.services.session.getSessionLinks();

              case 5:
                links = _context.sent;
                options = Object.assign(this.options);
                options.transport = null;
                this.services.mcsClient = new twilioMcsClient.McsClient(this.fpaToken, links.mediaServiceUrl, options);
                _context.next = 11;
                return this.services.typingIndicator.initialize();

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function initialize() {
        return _initialize.apply(this, arguments);
      }

      return initialize;
    }()
    /**
     * Gracefully shutting down library instance.
     * @public
     * @returns {Promise<void>}
     */

  }, {
    key: "shutdown",
    value: function () {
      var _shutdown = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee2() {
        return _regeneratorRuntime__default['default'].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.services.twilsockClient.disconnect();

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function shutdown() {
        return _shutdown.apply(this, arguments);
      }

      return shutdown;
    }()
    /**
     * Update the token used by the Client and re-register with Conversations services.
     * @param {String} token - Access token
     * @public
     * @returns {Promise<Client>}
     */

  }, {
    key: "updateToken",
    value: function () {
      var _updateToken = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee3(token) {
        var _this5 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                log.info('updateToken');

                if (!(this.fpaToken === token)) {
                  _context3.next = 3;
                  break;
                }

                return _context3.abrupt("return", this);

              case 3:
                _context3.next = 5;
                return this.services.twilsockClient.updateToken(token).then(function () {
                  return _this5.fpaToken = token;
                }).then(function () {
                  return _this5.services.mcsClient.updateToken(token);
                }).then(function () {
                  return _this5.sessionPromise;
                });

              case 5:
                return _context3.abrupt("return", this);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function updateToken(_x) {
        return _updateToken.apply(this, arguments);
      }

      return updateToken;
    }()
    /**
     * Get a known Conversation by its SID.
     * @param {String} conversationSid - Conversation sid
     * @returns {Promise<Conversation>}
     */

  }, {
    key: "getConversationBySid",
    value: function () {
      var _getConversationBySid = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee4(conversationSid) {
        var conversation;
        return _regeneratorRuntime__default['default'].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.conversations.syncListRead.promise;

              case 2:
                _context4.next = 4;
                return this.conversations.getConversation(conversationSid);

              case 4:
                conversation = _context4.sent;

                if (conversation) {
                  _context4.next = 9;
                  break;
                }

                _context4.next = 8;
                return this.conversations.getWhisperConversation(conversationSid);

              case 8:
                conversation = _context4.sent;

              case 9:
                if (conversation) {
                  _context4.next = 11;
                  break;
                }

                throw new Error("Conversation with SID ".concat(conversationSid, " is not found."));

              case 11:
                return _context4.abrupt("return", conversation);

              case 12:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getConversationBySid(_x2) {
        return _getConversationBySid.apply(this, arguments);
      }

      return getConversationBySid;
    }()
    /**
     * Get a known Conversation by its unique identifier name.
     * @param {String} uniqueName - The unique identifier name of the Conversation to get
     * @returns {Promise<Conversation>}
     */

  }, {
    key: "getConversationByUniqueName",
    value: function () {
      var _getConversationByUniqueName = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee5(uniqueName) {
        var conversation;
        return _regeneratorRuntime__default['default'].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.conversations.syncListRead.promise;

              case 2:
                _context5.next = 4;
                return this.conversations.getConversationByUniqueName(uniqueName);

              case 4:
                conversation = _context5.sent;

                if (conversation) {
                  _context5.next = 7;
                  break;
                }

                throw new Error("Conversation with unique name ".concat(uniqueName, " is not found."));

              case 7:
                return _context5.abrupt("return", conversation);

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getConversationByUniqueName(_x3) {
        return _getConversationByUniqueName.apply(this, arguments);
      }

      return getConversationByUniqueName;
    }()
    /**
     * Get the current list of all subscribed Conversations.
     * @returns {Promise<Paginator<Conversation>>}
     */

  }, {
    key: "getSubscribedConversations",
    value: function getSubscribedConversations(args) {
      return this.conversationsPromise.then(function (conversations) {
        return conversations.getConversations(args);
      });
    }
    /**
     * Create a Conversation on the server and subscribe to its events.
     * The default is a Conversation with an empty friendlyName.
     * @param {Client#CreateConversationOptions} [options] - Options for the Conversation
     * @returns {Promise<Conversation>}
     */

  }, {
    key: "createConversation",
    value: function createConversation(options) {
      options = options || {};
      return this.conversationsPromise.then(function (conversationsEntity) {
        return conversationsEntity.addConversation(options);
      });
    }
    /**
     * Registers for push notifications.
     * @param {Client#NotificationsChannelType} channelType - 'apn' and 'fcm' are supported
     * @param {string} registrationId - Push notification id provided by the platform
     * @returns {Promise<void>}
     */

  }, {
    key: "setPushRegistrationId",
    value: function () {
      var _setPushRegistrationId = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee6(channelType, registrationId) {
        var _this6 = this;

        return _regeneratorRuntime__default['default'].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.subscribeToPushNotifications(channelType).then(function () {
                  return _this6.services.notificationClient.setPushRegistrationId(registrationId, channelType);
                });

              case 2:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function setPushRegistrationId(_x4, _x5) {
        return _setPushRegistrationId.apply(this, arguments);
      }

      return setPushRegistrationId;
    }()
    /**
     * Unregisters from push notifications.
     * @param {Client#NotificationsChannelType} channelType - 'apn' and 'fcm' are supported
     * @returns {Promise<void>}
     */

  }, {
    key: "unsetPushRegistrationId",
    value: function () {
      var _unsetPushRegistrationId = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee7(channelType) {
        return _regeneratorRuntime__default['default'].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (!(Client.supportedPushChannels.indexOf(channelType) === -1)) {
                  _context7.next = 2;
                  break;
                }

                throw new Error('Invalid or unsupported channelType: ' + channelType);

              case 2:
                _context7.next = 4;
                return this.unsubscribeFromPushNotifications(channelType);

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function unsetPushRegistrationId(_x6) {
        return _unsetPushRegistrationId.apply(this, arguments);
      }

      return unsetPushRegistrationId;
    }()
  }, {
    key: "handlePushNotification",
    value:
    /**
     * Handle push notification payload parsing and emits event {@link Client#event:pushNotification} on this {@link Client} instance.
     * @param {Object} notificationPayload - Push notification payload
     * @returns {Promise<void>}
     */
    function () {
      var _handlePushNotification = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee8(notificationPayload) {
        return _regeneratorRuntime__default['default'].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                log.debug('handlePushNotification, notificationPayload=', notificationPayload);
                this.emit('pushNotification', Client.parsePushNotification(notificationPayload));

              case 2:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function handlePushNotification(_x7) {
        return _handlePushNotification.apply(this, arguments);
      }

      return handlePushNotification;
    }()
    /**
     * Gets user for given identity, if it's in subscribed list - then return the user object from it,
     * if not - then subscribes and adds user to the subscribed list.
     * @param {String} identity - Identity of User
     * @returns {Promise<User>} Fully initialized user
     */

  }, {
    key: "getUser",
    value: function getUser(identity) {
      return this.services.users.getUser(identity);
    }
    /**
     * @returns {Promise<Array<User>>} List of subscribed User objects
     */

  }, {
    key: "getSubscribedUsers",
    value: function () {
      var _getSubscribedUsers = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee9() {
        return _regeneratorRuntime__default['default'].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                return _context9.abrupt("return", this.services.users.getSubscribedUsers());

              case 1:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function getSubscribedUsers() {
        return _getSubscribedUsers.apply(this, arguments);
      }

      return getSubscribedUsers;
    }()
  }], [{
    key: "create",
    value: function () {
      var _create = _asyncToGenerator__default['default']( /*#__PURE__*/_regeneratorRuntime__default['default'].mark(function _callee10(token, options) {
        var client, startupEvent;
        return _regeneratorRuntime__default['default'].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                client = new Client(token, options);
                startupEvent = 'conversations.client.startup';
                client.services.twilsockClient.addPartialTelemetryEvent(new telemetrytracker.TelemetryEventDescription(startupEvent, 'Conversations client startup', new Date()), startupEvent, telemetrytracker.TelemetryPoint.Start);
                _context10.next = 5;
                return client.initialize();

              case 5:
                client.services.twilsockClient.addPartialTelemetryEvent(new telemetrytracker.TelemetryEventDescription('', '', new Date()), startupEvent, telemetrytracker.TelemetryPoint.End);
                return _context10.abrupt("return", client);

              case 7:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10);
      }));

      function create(_x8, _x9) {
        return _create.apply(this, arguments);
      }

      return create;
    }()
  }, {
    key: "parsePushNotificationChatData",
    value: function parsePushNotificationChatData(data) {
      var result = {};

      for (var key in Client.supportedPushDataFields) {
        if (typeof data[key] !== 'undefined' && data[key] !== null) {
          if (key === 'message_index') {
            if (parseToNumber(data[key]) !== null) {
              result[Client.supportedPushDataFields[key]] = Number(data[key]);
            }
          } else {
            result[Client.supportedPushDataFields[key]] = data[key];
          }
        }
      }

      return result;
    }
    /**
     * Static method for push notification payload parsing. Returns parsed push as {@link PushNotification} object
     * @param {Object} notificationPayload - Push notification payload
     * @returns {PushNotification|Error}
     */

  }, {
    key: "parsePushNotification",
    value: function parsePushNotification(notificationPayload) {
      log.debug('parsePushNotification, notificationPayload=', notificationPayload); // APNS specifics

      if (typeof notificationPayload.aps !== 'undefined') {
        if (!notificationPayload.twi_message_type) {
          throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');
        }

        var data = Client.parsePushNotificationChatData(notificationPayload);
        var apsPayload = notificationPayload.aps;
        var body = null;
        var title = null;

        if (typeof apsPayload.alert === 'string') {
          body = apsPayload.alert || null;
        } else {
          body = apsPayload.alert.body || null;
          title = apsPayload.alert.title || null;
        }

        return new PushNotification({
          title: title,
          body: body,
          sound: apsPayload.sound || null,
          badge: apsPayload.badge || null,
          action: apsPayload.category || null,
          type: notificationPayload.twi_message_type,
          data: data
        });
      } // FCM specifics


      if (typeof notificationPayload.data !== 'undefined') {
        var dataPayload = notificationPayload.data;

        if (!dataPayload.twi_message_type) {
          throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');
        }

        var _data = Client.parsePushNotificationChatData(notificationPayload.data);

        return new PushNotification({
          title: dataPayload.twi_title || null,
          body: dataPayload.twi_body || null,
          sound: dataPayload.twi_sound || null,
          badge: null,
          action: dataPayload.twi_action || null,
          type: dataPayload.twi_message_type,
          data: _data
        });
      }

      throw new Error('Provided push notification payload is not Programmable Chat notification');
    }
  }]);

  return Client;
}(EventEmitter);

_defineProperty__default['default'](Client, "version", SDK_VERSION);

_defineProperty__default['default'](Client, "supportedPushChannels", ['fcm', 'apn']);

_defineProperty__default['default'](Client, "supportedPushDataFields", {
  'conversation_sid': 'conversationSid',
  'message_sid': 'messageSid',
  'message_index': 'messageIndex'
});

__decorate([twilioSdkTypeValidator.validateTypesAsync(twilioSdkTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Client.prototype, "updateToken", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(twilioSdkTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Client.prototype, "getConversationBySid", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(twilioSdkTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Client.prototype, "getConversationByUniqueName", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(['undefined', twilioSdkTypeValidator.objectSchema('conversation options', {
  friendlyName: ['string', 'undefined'],
  isPrivate: ['boolean', 'undefined'],
  uniqueName: ['string', 'undefined']
})]), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Client.prototype, "createConversation", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(twilioSdkTypeValidator.literal('fcm', 'apn'), 'string'), __metadata("design:type", Function), __metadata("design:paramtypes", [String, String]), __metadata("design:returntype", Promise)], Client.prototype, "setPushRegistrationId", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(twilioSdkTypeValidator.literal('fcm', 'apn')), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Client.prototype, "unsetPushRegistrationId", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(twilioSdkTypeValidator.pureObject), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", Promise)], Client.prototype, "handlePushNotification", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync(twilioSdkTypeValidator.nonEmptyString), __metadata("design:type", Function), __metadata("design:paramtypes", [String]), __metadata("design:returntype", Promise)], Client.prototype, "getUser", null);

__decorate([twilioSdkTypeValidator.validateTypesAsync('string', ['undefined', twilioSdkTypeValidator.pureObject]), __metadata("design:type", Function), __metadata("design:paramtypes", [String, Object]), __metadata("design:returntype", Promise)], Client, "create", null);

__decorate([twilioSdkTypeValidator.validateTypes(twilioSdkTypeValidator.pureObject), __metadata("design:type", Function), __metadata("design:paramtypes", [Object]), __metadata("design:returntype", PushNotification)], Client, "parsePushNotification", null);
/**
 * Fired when a Conversation becomes visible to the Client. The event is also triggered when the client creates a new Conversation.
 * Fired for all conversations Client has joined.
 * @event Client#conversationAdded
 * @type {Conversation}
 */

/**
 * Fired when the Client joins a Conversation.
 * @event Client#conversationJoined
 * @type {Conversation}
 */

/**
 * Fired when the Client leaves a Conversation.
 * @event Client#conversationLeft
 * @type {Conversation}
 */

/**
 * Fired when a Conversation is no longer visible to the Client.
 * @event Client#conversationRemoved
 * @type {Conversation}
 */

/**
 * Fired when a Conversation's attributes or metadata have been updated.
 * During Conversation's {@link Client.create| creation and initialization} this event might be fired multiple times
 * for same joined or created Conversation as new data is arriving from different sources.
 * @event Client#conversationUpdated
 * @type {Object}
 * @property {Conversation} conversation - Updated Conversation
 * @property {Conversation#UpdateReason[]} updateReasons - Array of Conversation's updated event reasons
 */

/**
 * Fired when Client's connection state has been changed.
 * @event Client#connectionStateChanged
 * @type {Client#ConnectionState}
 */

/**
 * Fired when a Participant has joined the Conversation.
 * @event Client#participantJoined
 * @type {Participant}
 */

/**
 * Fired when a Participant has left the Conversation.
 * @event Client#participantLeft
 * @type {Participant}
 */

/**
 * Fired when a Participant's fields has been updated.
 * @event Client#participantUpdated
 * @type {Object}
 * @property {Participant} participant - Updated Participant
 * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons
 */

/**
 * Fired when a new Message has been added to the Conversation on the server.
 * @event Client#messageAdded
 * @type {Message}
 */

/**
 * Fired when Message is removed from Conversation's message list.
 * @event Client#messageRemoved
 * @type {Message}
 */

/**
 * Fired when an existing Message's fields are updated with new values.
 * @event Client#messageUpdated
 * @type {Object}
 * @property {Message} message - Updated Message
 * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons
 */

/**
 * Fired when token is about to expire and needs to be updated.
 * @event Client#tokenAboutToExpire
 * @type {void}
 */

/**
 * Fired when token is expired.
 * @event Client#tokenExpired
 * @type {void}
 */

/**
 * Fired when a Participant has stopped typing.
 * @event Client#typingEnded
 * @type {Participant}
 */

/**
 * Fired when a Participant has started typing.
 * @event Client#typingStarted
 * @type {Participant}
 */

/**
 * Fired when client received (and parsed) push notification via one of push channels (apn or fcm).
 * @event Client#pushNotification
 * @type {PushNotification}
 */

/**
 * Fired when the Client is subscribed to a User.
 * @event Client#userSubscribed
 * @type {User}
 */

/**
 * Fired when the Client is unsubscribed from a User.
 * @event Client#userUnsubscribed
 * @type {User}
 */

/**
 * Fired when the User's properties or reachability status have been updated.
 * @event Client#userUpdated
 * @type {Object}
 * @property {User} user - Updated User
 * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons
 */

/**
 * Fired when connection is interrupted by unexpected reason
 * @event Client#connectionError
 * @type {Object}
 * @property {Boolean} terminal - twilsock will stop connection attempts
 * @property {String} message - root cause
 * @property {Number} [httpStatusCode] - http status code if available
 * @property {Number} [errorCode] - Twilio public error code if available
 */

exports.Client = Client;
exports.PushNotification = PushNotification;
exports.User = User;
exports.default = Client;
//# sourceMappingURL=browser.js.map
